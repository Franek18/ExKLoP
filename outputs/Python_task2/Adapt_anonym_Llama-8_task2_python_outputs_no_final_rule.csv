Prompt;Llama-8
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: The number of stops where PTO is engaged must not exceed the overall stop count.
The payload cannot exceed the capacity of axle 3.
";"

```
def r1(stops: int, pto: int) -> bool:
    if stops >= pto:
        return True
    else:
        return False

def r2(payload: int, axle3: int) -> bool:
    if payload <= axle3:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
Stops with PTO engaged cannot outnumber the total stops.
";"

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r1(km: float, fuel: float) -> bool:
    if km >= 20 and fuel / km >= 0.4:
        return True
    else:
        return False

# Stops with PTO engaged cannot outnumber the total stops.
def r2(total_stops: int, pto_stops: int) -> bool:
    if pto_stops >= total_stops:
        return False
    else:
        return True"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: The load carried by axle 1 must be smaller than or equal to the load on axle 3.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r1(a1: float, a3: float) -> bool:
    if a1 <= a3:
        return True
    else:
        return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r2(pto: float, idle: float, driving: float) -> bool:
    if pto + idle + driving >= 0:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: PTO operation time must be less than or equal to the total operation time.
Axle 1's load cannot exceed Axle 3's load.
";"

# PTO operation time must be less than or equal to the total operation time.
def r1(pto: float, total: float) -> bool:
    if pto <= total:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 3's load.
def r2(axle1: float, axle3: float) -> bool:
    if axle1 <= axle3:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
The payload cannot exceed the capacity of axle 3.
";"

```
def r1(fuel: float, distance: float) -> bool:
    if distance >= 20:
        return fuel >= 0.4
    else:
        return False

def r2(payload: float, capacity: float) -> bool:
    return payload <= capacity
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
Driving time should be less than or equal to the total operation time.
";"

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r1(km: float, fuel: float) -> bool:
    if km >= 20 and fuel / km >= 0.4:
        return True
    else:
        return False

# Driving time should be less than or equal to the total operation time.
def r2(driving_time: float, operation_time: float) -> bool:
    if driving_time <= operation_time:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: The payload must always be smaller than or equal to the load on axle 2.
The payload must always be smaller than or equal to the load on axle 3.
";"

# The payload must always be smaller than or equal to the load on axle 2.
def r1(payload: float, load2: float) -> bool:
    if payload <= load2:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 3.
def r2(payload: float, load3: float) -> bool:
    if payload <= load3:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: PTO-engaged stops cannot exceed the total number of stops.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
";"

# PTO-engaged stops cannot exceed the total number of stops.
def r1(total_stops: int, pto_stops: int) -> bool:
    if pto_stops > total_stops:
        return False
    else:
        return True

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r2(axle1_load: float, axle3_load: float) -> bool:
    if axle1_load <= axle3_load:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
Axle 2's load must always be equal to or greater than the payload.
";"

# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r1(km: float, fuel: float) -> bool:
    if km >= 20 and fuel / km >= 0.4:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def r2(payload: float, load: float) -> bool:
    if load >= payload:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: The load on axle 1 must not surpass the load on axle 2.
The weight on axle 1 cannot surpass the weight on axle 3.
";"

# The load on axle 1 must not surpass the load on axle 2.
def r1(a1: float, a2: float) -> bool:
    if a1 >= a2:
        return False
    else:
        return True

# The weight on axle 1 cannot surpass the weight on axle 3.
def r2(a1: float, a3: float) -> bool:
    if a1 >= a3:
        return False
    else:
        return True"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: Idle time cannot be greater than the total operation time.
Driving time should be less than or equal to the total operation time.
";"

# Idle time cannot be greater than the total operation time.
def r1(idle_time: float, total_operation_time: float) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# Driving time should be less than or equal to the total operation time.
def r2(driving_time: float, total_operation_time: float) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: Axle 1's load cannot exceed Axle 2's load.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";"

# Axle 1's load cannot exceed Axle 2's load.
def r1(axle1: float, axle2: float) -> bool:
    if axle1 <= axle2:
        return True
    else:
        return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r2(total_operation_duration: float, pto: float, idle: float, driving: float) -> bool:
    if total_operation_duration >= pto + idle + driving:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
Total operation time shouldn’t be lower than idle time.
";"

# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r1(fuel_consumption: float, distance: float) -> bool:
    if distance >= 20 and fuel_consumption >= 0.4:
        return True
    else:
        return False

# Total operation time shouldn’t be lower than idle time.
def r2(operation_time: float, idle_time: float) -> bool:
    if operation_time >= idle_time:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: The total operation durationmust not be lower than the driving time.
Axle 1's load cannot exceed Axle 3's load.
";"

# The total operation duration must not be lower than the driving time.
def r1(total_operation_duration: float, driving_time: float) -> bool:
    if total_operation_duration >= driving_time:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 3's load.
def r2(axle1_load: float, axle3_load: float) -> bool:
    if axle1_load <= axle3_load:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: PTO operation time should be less than or equal to the total operation time.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";"

# PTO operation time should be less than or equal to the total operation time.
def r1(pto: float, total: float) -> bool:
    if pto <= total:
        return True
    else:
        return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r2(pto: float, idle: float, driving: float, total: float) -> bool:
    if total >= pto + idle + driving:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
PTO operation time cannot be greater than the total operation time.
";"

# The vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r1(fuel_consumption: float, distance: float) -> bool:
    if distance >= 20 and fuel_consumption >= 5:
        return True
    else:
        return False

# PTO operation time cannot be greater than the total operation time.
def r2(pto_time: float, total_time: float) -> bool:
    if pto_time <= total_time:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: Idle time should be less than or equal to the total operation time.
The load supported by axle 1 cannot exceed that of axle 3.
";"

# Idle time should be less than or equal to the total operation time.
def r1(idle_time: float, total_operation_time: float) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 3.
def r2(axle1_load: float, axle3_load: float) -> bool:
    if axle1_load <= axle3_load:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: PTO operation time cannot be greater than the total operation time.
The payload must not exceed the load carried by axle 3.
";"

# PTO operation time cannot be greater than the total operation time.
def r1(pto: float, total: float) -> bool:
    if pto > total:
        return False
    else:
        return True

# The payload must not exceed the load carried by axle 3.
def r2(payload: float, axle3: float) -> bool:
    if payload > axle3:
        return False
    else:
        return True"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
";"

# The vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r1(h: float, km: float) -> bool:
    if km >= 20 and h >= 5:
        return True
    else:
        return False

# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r2(km: float, c: float) -> bool:
    if km >= 20 and c >= 400:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: The total operation durationmust not be lower than the driving time.
PTO-engaged stops cannot exceed the total number of stops.
";"

# The total operation duration must not be lower than the driving time.
def r1(driving_time: float, operation_duration: float) -> bool:
    if operation_duration >= driving_time:
        return True
    else:
        return False

# PTO-engaged stops cannot exceed the total number of stops.
def r2(total_stops: int, pto_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: The load supported by axle 1 cannot exceed that of axle 2.
The payload cannot exceed the capacity of axle 3.
";"

# The load supported by axle 1 cannot exceed that of axle 2.
def r1(a1: float, a2: float) -> bool:
    if a1 >= a2:
        return False
    else:
        return True

# The payload cannot exceed the capacity of axle 3.
def r2(p: float, a3: float) -> bool:
    if p >= a3:
        return False
    else:
        return True"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
The weight on axle 1 cannot surpass the weight on axle 3.
";"

# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(km: float, fuel: float) -> bool:
    if km >= 20 and fuel >= 0.5:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r2(axle1: float, axle3: float) -> bool:
    if axle1 <= axle3:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"

# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
    if fuel_consumption >= 5:
        return True
    else:
        return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r2(pto: float, idle: float, driving: float) -> bool:
    if pto + idle + driving >= 0:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: Stops with PTO engaged cannot outnumber the total stops.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";"

# Stops with PTO engaged cannot outnumber the total stops.
def r1(pto: int, total_stops: int) -> bool:
    if ptos > total_stops:
        return True
    else:
        return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r2(operation_time: float, ptos: float, idle_time: float, driving_time: float) -> bool:
    if operation_time >= ptos + idle_time + driving_time:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: The load supported by axle 1 cannot exceed that of axle 3.
Payload must remain below or equal to the load carried by axle 3.
";"

# The load supported by axle 1 cannot exceed that of axle 3.
def r1(a1: float, a3: float) -> bool:
    if a1 <= a3:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 3.
def r2(payload: float, a3: float) -> bool:
    if payload <= a3:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: Idle time must always be less than or equal to the total operation time.
Payload must remain below or equal to the load carried by axle 3.
";"

# Idle time must always be less than or equal to the total operation time.
def r1(idle_time: float, total_operation_time: float) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 3.
def r2(payload: float, load_carried_by_axle3: float) -> bool:
    if payload <= load_carried_by_axle3:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
The load on axle 1 must not surpass the load on axle 2.
";"

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r1(km: float, fuel: float) -> bool:
    if km >= 20 and fuel / km >= 0.4:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 2.
def r2(axle1: float, axle2: float) -> bool:
    if axle1 <= axle2:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: Driving time must always be less than or equal to the total operation time.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";"

# Driving time must always be less than or equal to the total operation time.
def r1(driving_time: float, total_operation_time: float) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r2(pto_operation: float, idle: float, driving_time: float, total_operation_time: float) -> bool:
    if total_operation_time >= pto_operation + idle + driving_time:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: The total operation duration must not be lower than the PTO operation time.
The number of stops where PTO is engaged must not exceed the overall stop count.
";"

# The total operation duration must not be lower than the PTO operation time.
def r1(total_operation_duration: float, pto_operation_time: float) -> bool:
    if total_operation_duration >= pto_operation_time:
        return True
    else:
        return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r2(num_stops_pto: int, overall_stop_count: int) -> bool:
    if num_stops_pto <= overall_stop_count:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: Total operation time shouldn’t be lower than idle time.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";"

# Total operation time shouldn’t be lower than idle time.
def r1(operation_time: float, idle_time: float) -> bool:
    if operation_time >= idle_time:
        return True
    else:
        return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r2(operation_time: float, pto: float, idle_time: float, driving_time: float) -> bool:
    if operation_time >= pto + idle_time + driving_time:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
The total operation duration must not be lower than the idle time.
";"

# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption < 5:
        return False
    else:
        return True

# The total operation duration must not be lower than the idle time.
def r2(operation_duration: float, idle_time: float) -> bool:
    if operation_duration < idle_time:
        return False
    else:
        return True"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
";"

# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r1(fuel: float, distance: float) -> bool:
    if distance >= 20 and fuel / distance >= 0.4:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r2(axle1: float, axle3: float) -> bool:
    if axle1 <= axle3:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: Driving time should be less than or equal to the total operation time.
The payload must not exceed the load carried by axle 3.
";"

# Driving time should be less than or equal to the total operation time.
def r1(driving_time: float, total_operation_time: float) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def r2(payload: float, load_axle3: float) -> bool:
    if payload <= load_axle3:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: The total operation duration must not be lower than the PTO operation time.
Axle 2's load must always be equal to or greater than the payload.
";"

# The total operation duration must not be lower than the PTO operation time.
def r1(total_operation_duration: float, pto_operation_time: float) -> bool:
    if total_operation_duration >= pto_operation_time:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def r2(axle2_load: float, payload: float) -> bool:
    if axle2_load >= payload:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: The payload cannot exceed the capacity of axle 3.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";"

# The payload cannot exceed the capacity of axle 3.
def r1(payload: float, axle3: float) -> bool:
    if payload <= axle3:
        return True
    else:
        return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r2(PTO: float, idle: float, driving: float, total: float) -> bool:
    if PTO + idle + driving >= total:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: Idle time should be less than or equal to the total operation time.
The load on axle 1 must not surpass the load on axle 2.
";"

# Idle time should be less than or equal to the total operation time.
def r1(idle_time: float, total_operation_time: float) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 2.
def r2(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load <= axle2_load:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: The total stop count must not be lower than the count of stops where PTO is engaged.
The weight on axle 1 cannot surpass the weight on axle 2.
";"

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r1(total_stops: int, pto_stops: int) -> bool:
    if total_stops >= pto_stops:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r2(axle1_weight: float, axle2_weight: float) -> bool:
    if axle1_weight <= axle2_weight:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: Driving time should be less than or equal to the total operation time.
The weight on axle 1 cannot surpass the weight on axle 2.
";"

# Driving time should be less than or equal to the total operation time.
def r1(driving_time: float, total_operation_time: float) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r2(axle1_weight: float, axle2_weight: float) -> bool:
    if axle1_weight <= axle2_weight:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
Stops with PTO engaged cannot outnumber the total stops.
";"

# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(km: float, fuel: float) -> bool:
    if km >= 20 and fuel >= 0.5:
        return True
    else:
        return False

# Stops with PTO engaged cannot outnumber the total stops.
def r2(total_stops: int, pto_stops: int) -> bool:
    if pto_stops >= total_stops:
        return False
    else:
        return True"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
The payload must always be smaller than or equal to the load on axle 2.
";"

# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption < 5:
        return False
    else:
        return True

# The payload must always be smaller than or equal to the load on axle 2.
def r2(payload: float, load_axle2: float) -> bool:
    if payload > load_axle2:
        return False
    else:
        return True"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: PTO operation time must be less than or equal to the total operation time.
Idle time should be less than or equal to the total operation time.
";"

# PTO operation time must be less than or equal to the total operation time.
def r1(pto: float, total: float) -> bool:
    if pto <= total:
        return True
    else:
        return False

# Idle time should be less than or equal to the total operation time.
def r2(idle: float, total: float) -> bool:
    if idle <= total:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
PTO operation time must be less than or equal to the total operation time.
";"

# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r1(fuel_consumption: float, distance: float) -> bool:
    if distance >= 20 and fuel_consumption / distance >= 0.4:
        return True
    else:
        return False

# PTO operation time must be less than or equal to the total operation time.
def r2(pto_operation_time: float, total_operation_time: float) -> bool:
    if pto_operation_time <= total_operation_time:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: Total operation time shouldn’t be lower than PTO operation time.
Driving time should be less than or equal to the total operation time.
";"

# Total operation time shouldn’t be lower than PTO operation time.
def r1(pto: float, tot: float) -> bool:
    if tot >= pto:
        return True
    else:
        return False

# Driving time should be less than or equal to the total operation time.
def r2(driving: float, tot: float) -> bool:
    if driving <= tot:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: Driving time should be less than or equal to the total operation time.
The payload must always be smaller than or equal to the load on axle 2.
";"

# Driving time should be less than or equal to the total operation time.
def r1(driving_time: float, total_operation_time: float) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 2.
def r2(payload: float, load_on_axle2: float) -> bool:
    if payload <= load_on_axle2:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
Driving time must always be less than or equal to the total operation time.
";"

# If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
    if distance / fuel_consumption >= 4:
        return True
    else:
        return False

# Driving time must always be less than or equal to the total operation time.
def r2(driving_time: float, operation_time: float) -> bool:
    if driving_time <= operation_time:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
Axle 3's load must always be equal to or greater than the payload.
";"

# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(km: float, fuel: float) -> bool:
    if km >= 20 and fuel >= 0.5:
        return True
    else:
        return False

# Axle 3's load must always be equal to or greater than the payload.
def r2(payload: float, load: float) -> bool:
    if load >= payload:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: Total operation time shouldn’t be lower than idle time.
Stops with PTO engaged cannot outnumber the total stops.
";"

# Total operation time shouldn’t be lower than idle time.
def r1(op_time: float, idle_time: float) -> bool:
    if op_time >= idle_time:
        return True
    else:
        return False

# Stops with PTO engaged cannot outnumber the total stops.
def r2(pto_stops: int, total_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: PTO-engaged stops cannot exceed the total number of stops.
Payload must remain below or equal to the load carried by axle 2.
";"

# PTO-engaged stops cannot exceed the total number of stops.
def r1(pto_stops: int, total_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def r2(payload: float, axle2_load: float) -> bool:
    if payload <= axle2_load:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: Idle time must always be less than or equal to the total operation time.
Payload must remain below or equal to the load carried by axle 2.
";"

# Idle time must always be less than or equal to the total operation time.
def r1(idle_time: float, total_operation_time: float) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def r2(payload: float, load_axle2: float) -> bool:
    if payload <= load_axle2:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: The load carried by axle 1 must be smaller than or equal to the load on axle 2.
The payload cannot exceed the capacity of axle 2.
";"

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def r1(l1: float, l2: float) -> bool:
    if l1 <= l2:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 2.
def r2(p: float, l2: float) -> bool:
    if p <= l2:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
Idle time should be less than or equal to the total operation time.
The weight on axle 1 cannot surpass the weight on axle 3.
";"

# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r1(fuel: float, distance: float) -> bool:
    if distance >= 20 and fuel / distance >= 0.4:
        return True
    else:
        return False

# Idle time should be less than or equal to the total operation time.
def r2(idle: float, operation: float) -> bool:
    if idle <= operation:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r3(axle1: float, axle3: float) -> bool:
    if axle1 <= axle3:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
Total operation time should shouldn’t be lower than driving time.
";"

# If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
def r1(distance: float, fuel_rate: float) -> bool:
    if distance >= 20 and fuel_rate / distance >= 0.05:
        return True
    else:
        return False

# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r2(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption / 100 >= 0.4:
        return True
    else:
        return False

# Total operation time should shouldn’t be lower than driving time.
def r3(operation_time: float, driving_time: float) -> bool:
    if operation_time >= driving_time:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: Idle time should be less than or equal to the total operation time.
Total operation time should shouldn’t be lower than driving time.
The load on axle 1 must not surpass the load on axle 2.
";"

# Idle time should be less than or equal to the total operation time.
def r1(idle_time: float, total_operation_time: float) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# Total operation time should shouldn’t be lower than driving time.
def r2(total_operation_time: float, driving_time: float) -> bool:
    if total_operation_time >= driving_time:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 2.
def r3(load_axle1: float, load_axle2: float) -> bool:
    if load_axle1 <= load_axle2:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: The load supported by axle 1 cannot exceed that of axle 2.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
The payload cannot exceed the capacity of axle 3.
";"

# The load supported by axle 1 cannot exceed that of axle 2.
def r1(a1: float, a2: float) -> bool:
    if a1 <= a2:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r2(a1: float, a3: float) -> bool:
    if a1 <= a3:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 3.
def r3(p: float, a3: float) -> bool:
    if p <= a3:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
The total operation durationmust not be lower than the driving time.
Axle 2's load must always be equal to or greater than the payload.
";"

# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(km: float, fuel: float) -> bool:
    if km >= 20 and fuel >= 5:
        return True
    else:
        return False

# The total operation duration must not be lower than the driving time.
def r2(total_operation_duration: float, driving_time: float) -> bool:
    if total_operation_duration >= driving_time:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def r3(axle2_load: float, payload: float) -> bool:
    if axle2_load >= payload:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
Driving time should be less than or equal to the total operation time.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
";"

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r1(km: float, fuel: float) -> bool:
    if km >= 20 and fuel / km >= 0.4:
        return True
    else:
        return False

# Driving time should be less than or equal to the total operation time.
def r2(driving_time: float, operation_time: float) -> bool:
    if driving_time <= operation_time:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r3(axle1: float, axle3: float) -> bool:
    if axle1 <= axle3:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
Total operation time shouldn’t be lower than PTO operation time.
";"

# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(km: float, fuel: float) -> bool:
    if km >= 20 and fuel / km >= 0.05:
        return True
    else:
        return False

# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r2(km: float, fuel: float) -> bool:
    if km >= 20 and fuel / (km / 100) >= 0.4:
        return True
    else:
        return False

# Total operation time shouldn’t be lower than PTO operation time.
def r3(total_time: float, pto_time: float) -> bool:
    if total_time >= pto_time:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: PTO operation time should be less than or equal to the total operation time.
Driving time must always be less than or equal to the total operation time.
Stops with PTO engaged should never outnumber total stops.
";"

```
# PTO operation time should be less than or equal to the total operation time.
def r1(pto: float, total: float) -> bool:
    if pto <= total:
        return True
    else:
        return False

# Driving time must always be less than or equal to the total operation time.
def r2(driving: float, total: float) -> bool:
    if driving <= total:
        return True
    else:
        return False

# Stops with PTO engaged should never outnumber total stops.
def r3(pto_stops: int, total_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: The total operation duration must not be lower than the idle time.
The number of stops where PTO is engaged must not exceed the overall stop count.
Payload must remain below or equal to the load carried by axle 3.
";"

# The total operation duration must not be lower than the idle time.
def r1(operation_duration: float, idle_time: float) -> bool:
    if operation_duration >= idle_time:
        return True
    else:
        return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r2(pto_stops: int, overall_stops: int) -> bool:
    if pto_stops <= overall_stops:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 3.
def r3(payload: float, axle3_load: float) -> bool:
    if payload <= axle3_load:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: Idle time must always be less than or equal to the total operation time.
The load on axle 1 must not surpass the load on axle 3.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"

# Idle time must always be less than or equal to the total operation time.
def r1(idle: float, total_operation_time: float) -> bool:
    if idle <= total_operation_time:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 3.
def r2(axle1: float, axle3: float) -> bool:
    if axle1 <= axle3:
        return True
    else:
        return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r3(total_operation_time: float, pto: float, idle: float, driving: float) -> bool:
    if total_operation_time >= pto + idle + driving:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
The load supported by axle 1 cannot exceed that of axle 2.
Axle 2's load must always be equal to or greater than the payload.
";"

# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r1(km: float, fuel: float) -> bool:
    if km >= 20 and fuel < 0.4:
        return False
    else:
        return True

# The load supported by axle 1 cannot exceed that of axle 2.
def r2(axle1: float, axle2: float) -> bool:
    if axle1 <= axle2:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def r3(axle2: float, payload: float) -> bool:
    if axle2 >= payload:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
PTO operation time cannot be greater than the total operation time.
The weight on axle 1 cannot surpass the weight on axle 3.
";"

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r1(km: float, fuel: float) -> bool:
    if km >= 20 and fuel / km >= 0.4:
        return True
    else:
        return False

# PTO operation time cannot be greater than the total operation time.
def r2(pto: float, total: float) -> bool:
    if pto <= total:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r3(axle1: float, axle3: float) -> bool:
    if axle1 <= axle3:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: Total operation time shouldn’t be lower than idle time.
Driving time should be less than or equal to the total operation time.
Axle 2's load must always be equal to or greater than the payload.
";"

# Total operation time shouldn’t be lower than idle time.
def r1(total_operation_time: float, idle_time: float) -> bool:
    if total_operation_time >= idle_time:
        return True
    else:
        return False

# Driving time should be less than or equal to the total operation time.
def r2(driving_time: float, total_operation_time: float) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def r3(axle2_load: float, payload: float) -> bool:
    if axle2_load >= payload:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
Idle time cannot be greater than the total operation time.
Payload must remain below or equal to the load carried by axle 3.
";"

# If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption >= 5:
        return True
    else:
        return False

# Idle time cannot be greater than the total operation time.
def r2(idle_time: float, operation_time: float) -> bool:
    if idle_time <= operation_time:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 3.
def r3(payload: float, load_axle3: float) -> bool:
    if payload <= load_axle3:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: The total operation durationmust not be lower than the driving time.
Stops with PTO engaged should never outnumber total stops.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";"

# The total operation duration must not be lower than the driving time.
def r1(driving_time: float, operation_duration: float) -> bool:
    if operation_duration >= driving_time:
        return True
    else:
        return False

# Stops with PTO engaged should never outnumber total stops.
def r2(pto_stops: int, total_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r3(pto_operation: float, idle_time: float, driving_time: float, operation_time: float) -> bool:
    if pto_operation + idle_time + driving_time <= operation_time:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: The weight on axle 1 cannot surpass the weight on axle 2.
Axle 1's load cannot exceed Axle 3's load.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";"

# The weight on axle 1 cannot surpass the weight on axle 2.
def r1(a1: float, a2: float) -> bool:
    if a1 <= a2:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 3's load.
def r2(a1: float, a3: float) -> bool:
    if a1 <= a3:
        return True
    else:
        return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r3(t: float, p: float, i: float, d: float) -> bool:
    if t >= p + i + d:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
";"

# If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
def r1(distance: float, fuel_rate: float) -> bool:
    if distance >= 20 and fuel_rate >= 0.05:
        return True
    else:
        return False

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r2(distance: float, fuel_rate: float) -> bool:
    if distance >= 20 and fuel_rate >= 0.4:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r3(axle1: float, axle3: float) -> bool:
    if axle1 <= axle3:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: Idle time must always be less than or equal to the total operation time.
The load supported by axle 1 cannot exceed that of axle 2.
The weight on axle 1 cannot surpass the weight on axle 3.
";"

# Idle time must always be less than or equal to the total operation time.
def r1(idle_time: float, total_operation_time: float) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r2(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load <= axle2_load:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r3(axle1_weight: float, axle3_weight: float) -> bool:
    if axle1_weight <= axle3_weight:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
The payload cannot exceed the capacity of axle 3.
";"

# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption < 5:
        return False
    else:
        return True

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r2(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption < 0.4:
        return False
    else:
        return True

# The payload cannot exceed the capacity of axle 3.
def r3(payload: float, axle3_capacity: float) -> bool:
    if payload > axle3_capacity:
        return False
    else:
        return True"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: PTO-engaged stops cannot exceed the total number of stops.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
The payload must always be smaller than or equal to the load on axle 2.
";"

# PTO-engaged stops cannot exceed the total number of stops.
def r1(pto_stops: int, total_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def r2(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load <= axle2_load:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 2.
def r3(payload: float, axle2_load: float) -> bool:
    if payload <= axle2_load:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
Stops with PTO engaged cannot outnumber the total stops.
Axle 2's load must always be equal to or greater than the payload.
";"

# The vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r1(fuel: float, distance: float) -> bool:
    if distance >= 20 and fuel >= 5:
        return True
    else:
        return False

# Stops with PTO engaged cannot outnumber the total stops.
def r2(pto_stops: int, total_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def r3(axle2_load: float, payload: float) -> bool:
    if axle2_load >= payload:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
Total operation time shouldn’t be lower than idle time.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";"

# If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption >= 5:
        return True
    else:
        return False

# Total operation time shouldn’t be lower than idle time.
def r2(operation_time: float, idle_time: float) -> bool:
    if operation_time >= idle_time:
        return True
    else:
        return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r3(operation_time: float, pto_operation_time: float, idle_time: float, driving_time: float) -> bool:
    if operation_time >= pto_operation_time + idle_time + driving_time:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
Stops with PTO engaged should never outnumber total stops.
The load on axle 1 must not surpass the load on axle 2.
";"

# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r1(fuel: float) -> bool:
    if fuel >= 0.4:
        return True
    else:
        return False

# Stops with PTO engaged should never outnumber total stops.
def r2(pto_stops: int, total_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 2.
def r3(axle1: float, axle2: float) -> bool:
    if axle1 <= axle2:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
The total operation durationmust not be lower than the driving time.
The weight on axle 1 cannot surpass the weight on axle 2.
";"

# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def r1(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption / distance >= 0.4:
        return True
    else:
        return False

# The total operation duration must not be lower than the driving time.
def r2(operation_duration: float, driving_time: float) -> bool:
    if operation_duration >= driving_time:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r3(axle1_weight: float, axle2_weight: float) -> bool:
    if axle1_weight <= axle2_weight:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
Idle time cannot be greater than the total operation time.
The payload must always be smaller than or equal to the load on axle 3.
";"

# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def r1(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption / distance >= 0.4:
        return True
    else:
        return False

# Idle time cannot be greater than the total operation time.
def r2(idle_time: float, operation_time: float) -> bool:
    if idle_time <= operation_time:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 3.
def r3(payload: float, load_axle3: float) -> bool:
    if payload <= load_axle3:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: PTO operation time should be less than or equal to the total operation time.
The number of stops where PTO is engaged must not exceed the overall stop count.
Axle 1's load cannot exceed Axle 2's load.
";"

# PTO operation time should be less than or equal to the total operation time.
def r1(pto: float, total: float) -> bool:
    if pto <= total:
        return True
    else:
        return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r2(pto_stops: int, overall_stops: int) -> bool:
    if pto_stops <= overall_stops:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 2's load.
def r3(axle1: float, axle2: float) -> bool:
    if axle1 <= axle2:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
Idle time cannot be greater than the total operation time.
PTO-engaged stops cannot exceed the total number of stops.
";"

# If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
    if distance / fuel_consumption >= 4:
        return True
    else:
        return False

# Idle time cannot be greater than the total operation time.
def r2(idle_time: float, operation_time: float) -> bool:
    if idle_time <= operation_time:
        return True
    else:
        return False

# PTO-engaged stops cannot exceed the total number of stops.
def r3(pto_stops: float, total_stops: float) -> bool:
    if ptos_stops <= total_stops:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: The total operation duration must not be lower than the PTO operation time.
Idle time should be less than or equal to the total operation time.
The total stop count must not be lower than the count of stops where PTO is engaged.
";"

# The total operation duration must not be lower than the PTO operation time.
def r1(total_operation_duration: float, pto_operation_time: float) -> bool:
    if total_operation_duration >= pto_operation_time:
        return True
    else:
        return False

# Idle time should be less than or equal to the total operation time.
def r2(idle_time: float, total_operation_time: float) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r3(total_stop_count: int, pto_stop_count: int) -> bool:
    if total_stop_count >= pto_stop_count:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: Idle time cannot be greater than the total operation time.
PTO-engaged stops cannot exceed the total number of stops.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";"

# Idle time cannot be greater than the total operation time.
def r1(idle: float, total_operation: float) -> bool:
    if idle <= total_operation:
        return True
    else:
        return False

# PTO-engaged stops cannot exceed the total number of stops.
def r2(pto_stops: float, total_stops: float) -> bool:
    if ptos_stops <= total_stops:
        return True
    else:
        return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r3(total_operation: float, pto_operation: float, idle: float, driving: float) -> bool:
    if total_operation >= pto_operation + idle + driving:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: The total operation duration must not be lower than the PTO operation time.
The total operation duration must not be lower than the idle time.
Driving time should be less than or equal to the total operation time.
";"

# The total operation duration must not be lower than the PTO operation time.
def r1(total_operation_time: float, pto_operation_time: float) -> bool:
    if total_operation_time >= pto_operation_time:
        return True
    else:
        return False

# The total operation duration must not be lower than the idle time.
def r2(total_operation_time: float, idle_time: float) -> bool:
    if total_operation_time >= idle_time:
        return True
    else:
        return False

# Driving time should be less than or equal to the total operation time.
def r3(driving_time: float, total_operation_time: float) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
The weight on axle 1 cannot surpass the weight on axle 3.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"

# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption < 5:
        return False
    else:
        return True

# The weight on axle 1 cannot surpass the weight on axle 3.
def r2(axle1: float, axle3: float) -> bool:
    if axle1 <= axle3:
        return True
    else:
        return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r3(pto: float, idle: float, driving: float) -> bool:
    if pto + idle + driving >= 0:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: Idle time must always be less than or equal to the total operation time.
The load supported by axle 1 cannot exceed that of axle 3.
Payload must remain below or equal to the load carried by axle 3.
";"

# Idle time must always be less than or equal to the total operation time.
def r1(idle_time: float, total_operation_time: float) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 3.
def r2(axle1_load: float, axle3_load: float) -> bool:
    if axle1_load <= axle3_load:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 3.
def r3(payload: float, axle3_load: float) -> bool:
    if payload <= axle3_load:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
Total operation time shouldn’t be lower than PTO operation time.
The weight on axle 1 cannot surpass the weight on axle 2.
";"

# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r1(fuel: float) -> bool:
    if fuel >= 0.4:
        return True
    else:
        return False

# Total operation time shouldn’t be lower than PTO operation time.
def r2(total_operation_time: float, pto_operation_time: float) -> bool:
    if total_operation_time >= pto_operation_time:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r3(axle1: float, axle2: float) -> bool:
    if axle1 <= axle2:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
The payload must always be smaller than or equal to the load on axle 2.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";"

# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r1(km: float, fuel: float) -> bool:
    if km >= 20 and fuel / km >= 0.4:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 2.
def r2(payload: float, load_axle2: float) -> bool:
    if payload <= load_axle2:
        return True
    else:
        return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r3(total_operation_duration: float, pto_idle_driving: float) -> bool:
    if total_operation_duration >= pto_idle_driving:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
PTO operation time must be less than or equal to the total operation time.
The payload must not exceed the load carried by axle 3.
";"

# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r1(fuel: float, distance: float) -> bool:
    if distance >= 20 and fuel >= 0.4:
        return True
    else:
        return False

# PTO operation time must be less than or equal to the total operation time.
def r2(pto: float, total: float) -> bool:
    if pto <= total:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def r3(payload: float, axle3: float) -> bool:
    if payload <= axle3:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
PTO operation time cannot be greater than the total operation time.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";"

# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r1(fuel: float, distance: float) -> bool:
    if distance >= 20 and fuel / distance >= 0.4:
        return True
    else:
        return False

# PTO operation time cannot be greater than the total operation time.
def r2(pto: float, total: float) -> bool:
    if pto <= total:
        return True
    else:
        return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r3(total: float, pto: float, idle: float, driving: float) -> bool:
    if total >= pto + idle + driving:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
The load supported by axle 1 cannot exceed that of axle 2.
";"

# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(km: float, fuel: float) -> bool:
    if km >= 20 and fuel / km >= 0.05:
        return True
    else:
        return False

# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r2(km: float, fuel: float) -> bool:
    if km >= 20 and fuel / km >= 0.4:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r3(axle1: float, axle2: float) -> bool:
    if axle1 <= axle2:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: The total operation duration must not be lower than the idle time.
Stops with PTO engaged should never outnumber total stops.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
";"

# The total operation duration must not be lower than the idle time.
def r1(operation_duration: float, idle_time: float) -> bool:
    if operation_duration >= idle_time:
        return True
    else:
        return False

# Stops with PTO engaged should never outnumber total stops.
def r2(pto_stops: int, total_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def r3(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load <= axle2_load:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: Total operation time should shouldn’t be lower than driving time.
The number of stops where PTO is engaged must not exceed the overall stop count.
Axle 1's load cannot exceed Axle 2's load.
";"

# Total operation time should shouldn’t be lower than driving time.
def r1(op_time: float, drive_time: float) -> bool:
    if op_time >= drive_time:
        return True
    else:
        return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r2(pto_stops: int, overall_stops: int) -> bool:
    if pto_stops <= overall_stops:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 2's load.
def r3(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load <= axle2_load:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: The total operation duration must not be lower than the PTO operation time.
The load supported by axle 1 cannot exceed that of axle 2.
Axle 3's load must always be equal to or greater than the payload.
";"

# The total operation duration must not be lower than the PTO operation time.
def r1(total_operation_duration: float, pto_operation_time: float) -> bool:
    if total_operation_duration >= pto_operation_time:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r2(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load <= axle2_load:
        return True
    else:
        return False

# Axle 3's load must always be equal to or greater than the payload.
def r3(axle3_load: float, payload: float) -> bool:
    if axle3_load >= payload:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
The total operation durationmust not be lower than the driving time.
Payload must remain below or equal to the load carried by axle 2.
";"

# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.4:
        return True
    else:
        return False

# The total operation duration must not be lower than the driving time.
def r2(c: float, d: float) -> bool:
    if c >= d:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def r3(e: float, f: float) -> bool:
    if e <= f:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
PTO operation time should be less than or equal to the total operation time.
Axle 3's load must always be equal to or greater than the payload.
";"

# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption >= 5:
        return True
    else:
        return False

# PTO operation time should be less than or equal to the total operation time.
def r2(pto_operation_time: float, total_operation_time: float) -> bool:
    if pto_operation_time <= total_operation_time:
        return True
    else:
        return False

# Axle 3's load must always be equal to or greater than the payload.
def r3(axle3_load: float, payload: float) -> bool:
    if axle3_load >= payload:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: Total operation time shouldn’t be lower than PTO operation time.
PTO-engaged stops cannot exceed the total number of stops.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";"

# Total operation time shouldn’t be lower than PTO operation time.
def r1(a: float, b: float) -> bool:
    if a >= b:
        return True
    else:
        return False

# PTO-engaged stops cannot exceed the total number of stops.
def r2(c: float, d: float) -> bool:
    if c <= d:
        return True
    else:
        return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r3(e: float, f: float, g: float) -> bool:
    if e >= f + g:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: Driving time must always be less than or equal to the total operation time.
The number of stops where PTO is engaged must not exceed the overall stop count.
The load on axle 1 must not surpass the load on axle 3.
";"

# Driving time must always be less than or equal to the total operation time.
def r1(driving_time: float, total_operation_time: float) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r2(stops_with_pto: int, overall_stop_count: int) -> bool:
    if stops_with_pto <= overall_stop_count:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 3.
def r3(load_axle1: float, load_axle3: float) -> bool:
    if load_axle1 <= load_axle3:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: The total operation duration must not be lower than the idle time.
Payload must remain below or equal to the load carried by axle 2.
The payload must not exceed the load carried by axle 3.
";"

# The total operation duration must not be lower than the idle time.
def r1(idle_time: float, operation_duration: float) -> bool:
    if operation_duration >= idle_time:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def r2(axle2_load: float, payload: float) -> bool:
    if payload <= axle2_load:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def r3(axle3_load: float, payload: float) -> bool:
    if payload <= axle3_load:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: Idle time must always be less than or equal to the total operation time.
PTO-engaged stops cannot exceed the total number of stops.
The payload cannot exceed the capacity of axle 2.
";"

Here is the Python3 code for the given input text:

# Idle time must always be less than or equal to the total operation time.
def r1(idle_time: float, total_operation_time: float) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# PTO-engaged stops cannot exceed the total number of stops.
def r2(pto_engaged_stops: int, total_stops: int) -> bool:
    if ptos_stops <= total_stops:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 2.
def r3(payload: float, axle2_capacity: float) -> bool:
    if payload <= axle2_capacity:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
The load on axle 1 must not surpass the load on axle 2.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";"

# The vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r1(f: float, t: float) -> bool:
    if t >= 20 and f >= 5:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 2.
def r2(a1: float, a2: float) -> bool:
    if a1 <= a2:
        return True
    else:
        return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r3(t: float, p: float, i: float, d: float) -> bool:
    if t >= p + i + d:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: The number of stops where PTO is engaged must not exceed the overall stop count.
Payload must remain below or equal to the load carried by axle 2.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";"

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r1(stops_pto: int, overall_stops: int) -> bool:
    if stops_pto <= overall_stops:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def r2(payload: float, load_axle2: float) -> bool:
    if payload <= load_axle2:
        return True
    else:
        return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r3(total_operation_time: float, pto_operation_time: float, idle_time: float, driving_time: float) -> bool:
    if total_operation_time >= pto_operation_time + idle_time + driving_time:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: PTO operation time cannot be greater than the total operation time.
Idle time should be less than or equal to the total operation time.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"

# PTO operation time cannot be greater than the total operation time.
def r1(pto: float, total: float) -> bool:
    if pto <= total:
        return True
    else:
        return False

# Idle time should be less than or equal to the total operation time.
def r2(idle: float, total: float) -> bool:
    if idle <= total:
        return True
    else:
        return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r3(pto: float, idle: float, driving: float, total: float) -> bool:
    if pto + idle + driving <= total:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: Axle 1's load cannot exceed Axle 2's load.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
Payload must remain below or equal to the load carried by axle 2.
";"

# Axle 1's load cannot exceed Axle 2's load.
def r1(a1: float, a2: float) -> bool:
    if a1 <= a2:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r2(a1: float, a3: float) -> bool:
    if a1 <= a3:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def r3(p: float, a2: float) -> bool:
    if p <= a2:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: Total operation time shouldn’t be lower than PTO operation time.
Total operation time should shouldn’t be lower than driving time.
The total stop count must not be lower than the count of stops where PTO is engaged.
The payload must always be smaller than or equal to the load on axle 2.
";"

# Total operation time shouldn’t be lower than PTO operation time.
def r1(a: float, b: float) -> bool:
    if a >= b:
        return True
    else:
        return False

# Total operation time should shouldn’t be lower than driving time.
def r2(a: float, c: float) -> bool:
    if a >= c:
        return True
    else:
        return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r3(d: int, e: int) -> bool:
    if d >= e:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 2.
def r4(f: float, g: float) -> bool:
    if f <= g:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
Idle time must always be less than or equal to the total operation time.
The load supported by axle 1 cannot exceed that of axle 2.
";"

Here is the Python3 code for the given input text:

# The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r1(fuel_consumption: float, distance: float) -> bool:
    if distance >= 20 and fuel_consumption >= 0.05:
        return True
    else:
        return False

# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def r2(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption >= 0.4:
        return True
    else:
        return False

# Idle time must always be less than or equal to the total operation time.
def r3(idle_time: float, operation_time: float) -> bool:
    if idle_time <= operation_time:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r4(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load <= axle2_load:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
PTO operation time cannot be greater than the total operation time.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";"

# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption >= 5:
        return True
    else:
        return False

# PTO operation time cannot be greater than the total operation time.
def r2(pto_time: float, total_time: float) -> bool:
    if pto_time <= total_time:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def r3(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load <= axle2_load:
        return True
    else:
        return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r4(total_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    if total_time >= pto_time + idle_time + driving_time:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: PTO operation time should be less than or equal to the total operation time.
Stops with PTO engaged cannot outnumber the total stops.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
Payload must remain below or equal to the load carried by axle 2.
";"

# PTO operation time should be less than or equal to the total operation time.
def r1(pto: float, total: float) -> bool:
    if pto <= total:
        return True
    else:
        return False

# Stops with PTO engaged cannot outnumber the total stops.
def r2(pto_stops: int, total_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r3(axle1: float, axle3: float) -> bool:
    if axle1 <= axle3:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def r4(payload: float, axle2: float) -> bool:
    if payload <= axle2:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: The total operation duration must not be lower than the PTO operation time.
Total operation time shouldn’t be lower than idle time.
Axle 1's load cannot exceed Axle 3's load.
The payload must always be smaller than or equal to the load on axle 2.
";"

# The total operation duration must not be lower than the PTO operation time.
def r1(a: float, b: float) -> bool:
    if a >= b:
        return True
    else:
        return False

# Total operation time shouldn’t be lower than idle time.
def r2(a: float, c: float) -> bool:
    if a >= c:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 3's load.
def r3(d: float, e: float) -> bool:
    if d <= e:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 2.
def r4(f: float, g: float) -> bool:
    if f <= g:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
The payload cannot exceed the capacity of axle 3.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";"

Here is the Python3 code for the given input text:

# The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r1(fuel_consumption: float, distance: float) -> bool:
    if distance >= 20 and fuel_consumption >= 5:
        return True
    else:
        return False

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r2(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption >= 0.4:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 3.
def r3(payload: float, axle3_capacity: float) -> bool:
    if payload <= axle3_capacity:
        return True
    else:
        return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r4(total_operation_time: float, pto_operation_time: float, idle_time: float, driving_time: float) -> bool:
    if total_operation_time >= pto_operation_time + idle_time + driving_time:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: Total operation time shouldn’t be lower than PTO operation time.
The total operation durationmust not be lower than the driving time.
Payload must remain below or equal to the load carried by axle 2.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"

# Total operation time shouldn’t be lower than PTO operation time.
def r1(pto: float, tot: float) -> bool:
    if tot >= pto:
        return True
    else:
        return False

# The total operation duration must not be lower than the driving time.
def r2(driving: float, tot: float) -> bool:
    if tot >= driving:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def r3(axle2: float, payload: float) -> bool:
    if payload <= axle2:
        return True
    else:
        return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r4(pto: float, idle: float, driving: float, tot: float) -> bool:
    if tot >= pto + idle + driving:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: Idle time must always be less than or equal to the total operation time.
Driving time must always be less than or equal to the total operation time.
Stops with PTO engaged should never outnumber total stops.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";"

# Idle time must always be less than or equal to the total operation time.
def r1(idle_time: float, total_operation_time: float) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# Driving time must always be less than or equal to the total operation time.
def r2(driving_time: float, total_operation_time: float) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False

# Stops with PTO engaged should never outnumber total stops.
# This rule is not defined in terms of numerical values, so it cannot be translated into a Python function.

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r4(pto_operation_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
    if pto_operation_time + idle_time + driving_time <= total_operation_time:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: PTO-engaged stops cannot exceed the total number of stops.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
The payload must not exceed the load carried by axle 3.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r1(a1: float, a3: float) -> bool:
    if a1 <= a3:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def r2(payload: float, a3: float) -> bool:
    if payload <= a3:
        return True
    else:
        return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r3(pto: float, idle: float, driving: float) -> bool:
    if pto + idle + driving >= 0:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
Payload must remain below or equal to the load carried by axle 2.
Payload must remain below or equal to the load carried by axle 3.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"

Here is the Python3 code for the given input text:

# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def r1(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption / distance >= 0.4:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def r2(payload: float, axle2_load: float) -> bool:
    if payload <= axle2_load:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 3.
def r3(payload: float, axle3_load: float) -> bool:
    if payload <= axle3_load:
        return True
    else:
        return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r4(pto: float, idle: float, driving: float) -> bool:
    if pto + idle + driving >= 0:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
Axle 1's load cannot exceed Axle 2's load.
Payload must remain below or equal to the load carried by axle 3.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";"

# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(km: float, fuel: float) -> bool:
    if km >= 20 and fuel >= 5:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 2's load.
def r2(axle1: float, axle2: float) -> bool:
    if axle1 <= axle2:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 3.
def r3(payload: float, axle3: float) -> bool:
    if payload <= axle3:
        return True
    else:
        return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r4(total_time: float, pto: float, idle: float, driving: float) -> bool:
    if total_time >= pto + idle + driving:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: The total operation duration must not be lower than the idle time.
Total operation time should shouldn’t be lower than driving time.
Stops with PTO engaged cannot outnumber the total stops.
Axle 2's load must always be equal to or greater than the payload.
";"

# The total operation duration must not be lower than the idle time.
def r1(op_time: float, idle_time: float) -> bool:
    if op_time >= idle_time:
        return True
    else:
        return False

# Total operation time should shouldn’t be lower than driving time.
def r2(op_time: float, driving_time: float) -> bool:
    if op_time >= driving_time:
        return True
    else:
        return False

# Stops with PTO engaged cannot outnumber the total stops.
def r3(pto_stops: int, total_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def r4(axle2_load: float, payload: float) -> bool:
    if axle2_load >= payload:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
Driving time should be less than or equal to the total operation time.
Stops with PTO engaged cannot outnumber the total stops.
The payload must always be smaller than or equal to the load on axle 3.
";"

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r1(km: float) -> bool:
    if km >= 20:
        return True
    else:
        return False

# Driving time should be less than or equal to the total operation time.
def r2(driving_time: float, operation_time: float) -> bool:
    if driving_time <= operation_time:
        return True
    else:
        return False

# Stops with PTO engaged cannot outnumber the total stops.
def r3(pto_stops: int, total_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 3.
def r4(payload: float, load_axle3: float) -> bool:
    if payload <= load_axle3:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: Idle time cannot be greater than the total operation time.
The total stop count must not be lower than the count of stops where PTO is engaged.
Payload must remain below or equal to the load carried by axle 3.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";"

# Idle time cannot be greater than the total operation time.
def r1(idle_time: float, total_operation_time: float) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r2(total_stop_count: int, pto_stop_count: int) -> bool:
    if total_stop_count >= pto_stop_count:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 3.
def r3(payload: float, axle3_load: float) -> bool:
    if payload <= axle3_load:
        return True
    else:
        return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r4(total_operation_duration: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    if total_operation_duration >= pto_time + idle_time + driving_time:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: PTO operation time cannot be greater than the total operation time.
Axle 2's load must always be equal to or greater than the payload.
The payload must not exceed the load carried by axle 3.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";"

# PTO operation time cannot be greater than the total operation time.
def r1(pto: float, total: float) -> bool:
    if pto <= total:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def r2(axle2: float, payload: float) -> bool:
    if axle2 >= payload:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def r3(payload: float, axle3: float) -> bool:
    if payload <= axle3:
        return True
    else:
        return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r4(total: float, pto: float, idle: float, driving: float) -> bool:
    if total >= pto + idle + driving:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
Total operation time shouldn’t be lower than idle time.
The total operation durationmust not be lower than the driving time.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";"

# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(t: float, f: float) -> bool:
    if t >= 20 and f >= 0.5:
        return True
    else:
        return False

# Total operation time shouldn’t be lower than idle time.
def r2(o: float, i: float) -> bool:
    if o >= i:
        return True
    else:
        return False

# The total operation durationmust not be lower than the driving time.
def r3(o: float, d: float) -> bool:
    if o >= d:
        return True
    else:
        return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r4(o: float, p: float, i: float, d: float) -> bool:
    if o >= p + i + d:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
The total stop count must not be lower than the count of stops where PTO is engaged.
The load on axle 1 must not surpass the load on axle 2.
";"

Here is the Python3 code:

# The vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r1(fuel: float, distance: float) -> bool:
    if distance >= 20 and fuel >= 5:
        return True
    else:
        return False

# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r2(fuel: float, distance: float) -> bool:
    if distance >= 20 and fuel / distance * 100 >= 40:
        return True
    else:
        return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r3(total_stops: int, pto_stops: int) -> bool:
    if total_stops >= pto_stops:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 2.
def r4(axle1: float, axle2: float) -> bool:
    if axle1 <= axle2:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
The total operation duration must not be lower than the PTO operation time.
Stops with PTO engaged cannot outnumber the total stops.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
";"

# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r1(fuel: float, distance: float) -> bool:
    if distance >= 20 and fuel / distance >= 0.4:
        return True
    else:
        return False

# The total operation duration must not be lower than the PTO operation time.
def r2(operation_duration: float, pto_operation_time: float) -> bool:
    if operation_duration >= pto_operation_time:
        return True
    else:
        return False

# Stops with PTO engaged cannot outnumber the total stops.
def r3(pto_stops: int, total_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r4(axle1_load: float, axle3_load: float) -> bool:
    if axle1_load <= axle3_load:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: Total operation time shouldn’t be lower than PTO operation time.
Idle time cannot be greater than the total operation time.
Stops with PTO engaged cannot outnumber the total stops.
The load on axle 1 must not surpass the load on axle 3.
";"

# Total operation time shouldn’t be lower than PTO operation time.
def r1(a: float, b: float) -> bool:
    if a >= b:
        return True
    else:
        return False

# Idle time cannot be greater than the total operation time.
def r2(a: float, c: float) -> bool:
    if c <= a:
        return True
    else:
        return False

# Stops with PTO engaged cannot outnumber the total stops.
def r3(d: int, e: int) -> bool:
    if d <= e:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 3.
def r4(f: float, g: float) -> bool:
    if f <= g:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
Stops with PTO engaged should never outnumber total stops.
The weight on axle 1 cannot surpass the weight on axle 2.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"

# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption >= 5:
        return True
    else:
        return False

# Stops with PTO engaged should never outnumber total stops.
def r2(pto_stops: int, total_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r3(axle1_weight: float, axle2_weight: float) -> bool:
    if axle1_weight <= axle2_weight:
        return True
    else:
        return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r4(pto_time: float, idle_time: float, driving_time: float, total_time: float) -> bool:
    if pto_time + idle_time + driving_time <= total_time:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: PTO operation time cannot be greater than the total operation time.
PTO-engaged stops cannot exceed the total number of stops.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
The payload must always be smaller than or equal to the load on axle 3.
";"

# PTO operation time cannot be greater than the total operation time.
def r1(pto: float, total: float) -> bool:
    if pto <= total:
        return True
    else:
        return False

# PTO-engaged stops cannot exceed the total number of stops.
def r2(pto_stops: int, total_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r3(axle1: float, axle3: float) -> bool:
    if axle1 <= axle3:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 3.
def r4(payload: float, axle3: float) -> bool:
    if payload <= axle3:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
Total operation time shouldn’t be lower than PTO operation time.
The load supported by axle 1 cannot exceed that of axle 3.
The payload cannot exceed the capacity of axle 2.
";"

# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r1(a: float) -> bool:
    if a >= 0.4:
        return True
    else:
        return False

# Total operation time shouldn’t be lower than PTO operation time.
def r2(t: float, p: float) -> bool:
    if t >= p:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 3.
def r3(l1: float, l3: float) -> bool:
    if l1 <= l3:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 2.
def r4(p: float, c2: float) -> bool:
    if p <= c2:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
Idle time must always be less than or equal to the total operation time.
The payload must always be smaller than or equal to the load on axle 2.
";"

# If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption >= 0.05:
        return True
    else:
        return False

# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r2(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption >= 0.4:
        return True
    else:
        return False

# Idle time must always be less than or equal to the total operation time.
def r3(idle_time: float, operation_time: float) -> bool:
    if idle_time <= operation_time:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 2.
def r4(payload: float, load_axle2: float) -> bool:
    if payload <= load_axle2:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: PTO operation time should be less than or equal to the total operation time.
The total operation durationmust not be lower than the driving time.
The load on axle 1 must not surpass the load on axle 3.
The payload must not exceed the load carried by axle 3.
";"

# PTO operation time should be less than or equal to the total operation time.
def r1(pto: float, total: float) -> bool:
    if pto <= total:
        return True
    else:
        return False

# The total operation duration must not be lower than the driving time.
def r2(total: float, driving: float) -> bool:
    if total >= driving:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 3.
def r3(axle1: float, axle3: float) -> bool:
    if axle1 <= axle3:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def r4(payload: float, axle3: float) -> bool:
    if payload <= axle3:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
The total stop count must not be lower than the count of stops where PTO is engaged.
Payload must remain below or equal to the load carried by axle 2.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";"

# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(km: float, fuel: float) -> bool:
    if km >= 20 and fuel >= 5:
        return True
    else:
        return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r2(stop_count: float, pto_stops: float) -> bool:
    if stop_count >= pto_stops:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def r3(payload: float, axle2_load: float) -> bool:
    if payload <= axle2_load:
        return True
    else:
        return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r4(total_duration: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    if total_duration >= pto_time + idle_time + driving_time:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
PTO operation time should be less than or equal to the total operation time.
Axle 1's load cannot exceed Axle 3's load.
The payload must not exceed the load carried by axle 3.
";"

# The vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r1(fuel: float, distance: float) -> bool:
    if distance >= 20 and fuel >= 5:
        return True
    else:
        return False

# PTO operation time should be less than or equal to the total operation time.
def r2(pto: float, total: float) -> bool:
    if pto <= total:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 3's load.
def r3(axle1: float, axle3: float) -> bool:
    if axle1 <= axle3:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def r4(payload: float, axle3: float) -> bool:
    if payload <= axle3:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
The weight on axle 1 cannot surpass the weight on axle 3.
The payload must always be smaller than or equal to the load on axle 3.
";"

# The vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r1(fuel: float, distance: float) -> bool:
    if distance >= 20 and fuel >= 0.05:
        return True
    else:
        return False

# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r2(fuel: float, distance: float) -> bool:
    if distance >= 20 and fuel >= 0.4:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r3(axle1: float, axle3: float) -> bool:
    if axle1 <= axle3:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 3.
def r4(payload: float, axle3: float) -> bool:
    if payload <= axle3:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: The total operation duration must not be lower than the idle time.
Driving time should be less than or equal to the total operation time.
The load on axle 1 must not surpass the load on axle 2.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";"

# The total operation duration must not be lower than the idle time.
def r1(total_operation_duration: float, idle_time: float) -> bool:
    if total_operation_duration >= idle_time:
        return True
    else:
        return False

# Driving time should be less than or equal to the total operation time.
def r2(driving_time: float, total_operation_time: float) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 2.
def r3(load_axle1: float, load_axle2: float) -> bool:
    if load_axle1 <= load_axle2:
        return True
    else:
        return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r4(total_operation_duration: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    if total_operation_duration >= pto_time + idle_time + driving_time:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
PTO operation time should be less than or equal to the total operation time.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
The payload must always be smaller than or equal to the load on axle 2.
";"

# If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
    if fuel_consumption / distance >= 0.05:
        return True
    else:
        return False

# PTO operation time should be less than or equal to the total operation time.
def r2(pto_operation_time: float, total_operation_time: float) -> bool:
    if pto_operation_time <= total_operation_time:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def r3(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load <= axle2_load:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 2.
def r4(payload: float, axle2_load: float) -> bool:
    if payload <= axle2_load:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: PTO operation time must be less than or equal to the total operation time.
Total operation time shouldn’t be lower than idle time.
The number of stops where PTO is engaged must not exceed the overall stop count.
Axle 1's load cannot exceed Axle 2's load.
";"

# PTO operation time must be less than or equal to the total operation time.
def r1(pto: float, total: float) -> bool:
    if pto <= total:
        return True
    else:
        return False

# Total operation time shouldn’t be lower than idle time.
def r2(total: float, idle: float) -> bool:
    if total >= idle:
        return True
    else:
        return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r3(pto_stops: int, overall_stops: int) -> bool:
    if pto_stops <= overall_stops:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 2's load.
def r4(axle1: float, axle2: float) -> bool:
    if axle1 <= axle2:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
Driving time cannot be greater than the total operation time.
The load supported by axle 1 cannot exceed that of axle 2.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";"

Here is the Python3 code for the given input text:

# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(a: float, b: float) -> bool:
    if a >= 20 and b >= 5:
        return True
    else:
        return False

# Driving time cannot be greater than the total operation time.
def r2(c: float, d: float) -> bool:
    if c <= d:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r3(e: float, f: float) -> bool:
    if e <= f:
        return True
    else:
        return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r4(g: float, h: float, i: float) -> bool:
    if g >= h + i:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
The total operation duration must not be lower than the PTO operation time.
Driving time must always be less than or equal to the total operation time.
The payload must not exceed the load carried by axle 2.
";"

Here is the Python3 code for the given input text:

# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def r1(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption / distance >= 0.4:
        return True
    else:
        return False

# The total operation duration must not be lower than the PTO operation time.
def r2(total_operation_duration: float, pto_operation_time: float) -> bool:
    if total_operation_duration >= pto_operation_time:
        return True
    else:
        return False

# Driving time must always be less than or equal to the total operation time.
def r3(driving_time: float, total_operation_duration: float) -> bool:
    if driving_time <= total_operation_duration:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 2.
def r4(payload: float, load_axle2: float) -> bool:
    if payload <= load_axle2:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
Stops with PTO engaged should never outnumber total stops.
The payload cannot exceed the capacity of axle 2.
Axle 3's load must always be equal to or greater than the payload.
";"

Here is the Python3 code for the given input text:

# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption >= 5:
        return True
    else:
        return False

# Stops with PTO engaged should never outnumber total stops.
def r2(pto_stops: int, total_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 2.
def r3(payload: float, axle2_capacity: float) -> bool:
    if payload <= axle2_capacity:
        return True
    else:
        return False

# Axle 3's load must always be equal to or greater than the payload.
def r4(axle3_load: float, payload: float) -> bool:
    if axle3_load >= payload:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
PTO operation time should be less than or equal to the total operation time.
The payload must not exceed the load carried by axle 2.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"

# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r1(fuel: float, distance: float) -> bool:
    if distance >= 20 and fuel >= 0.4:
        return True
    else:
        return False

# PTO operation time should be less than or equal to the total operation time.
def r2(pto: float, total: float) -> bool:
    if pto <= total:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 2.
def r3(payload: float, axle2: float) -> bool:
    if payload <= axle2:
        return True
    else:
        return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r4(total: float, pto: float, idle: float, driving: float) -> bool:
    if total >= pto + idle + driving:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: The weight on axle 1 cannot surpass the weight on axle 2.
The load supported by axle 1 cannot exceed that of axle 3.
Payload must remain below or equal to the load carried by axle 2.
The payload cannot exceed the capacity of axle 3.
";"

# The weight on axle 1 cannot surpass the weight on axle 2.
def r1(w1: float, w2: float) -> bool:
    if w1 <= w2:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 3.
def r2(w1: float, w3: float) -> bool:
    if w1 <= w3:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def r3(p: float, w2: float) -> bool:
    if p <= w2:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 3.
def r4(p: float, w3: float) -> bool:
    if p <= w3:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
The total operation duration must not be lower than the PTO operation time.
Axle 2's load must always be equal to or greater than the payload.
";"

Here is the Python3 code:

# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(km: float, fuel: float) -> bool:
    if km >= 20 and fuel / km >= 0.05:
        return True
    else:
        return False

# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r2(km: float, fuel: float) -> bool:
    if km >= 20 and fuel / (km / 100) >= 0.4:
        return True
    else:
        return False

# The total operation duration must not be lower than the PTO operation time.
def r3(total_operation_duration: float, pto_operation_time: float) -> bool:
    if total_operation_duration >= pto_operation_time:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def r4(axle2_load: float, payload: float) -> bool:
    if axle2_load >= payload:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
The payload must always be smaller than or equal to the load on axle 2.
Axle 3's load must always be equal to or greater than the payload.
";"

# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption >= 5:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r2(axle1: float, axle3: float) -> bool:
    if axle1 <= axle3:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 2.
def r3(payload: float, axle2: float) -> bool:
    if payload <= axle2:
        return True
    else:
        return False

# Axle 3's load must always be equal to or greater than the payload.
def r4(axle3: float, payload: float) -> bool:
    if axle3 >= payload:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
Stops with PTO engaged should never outnumber total stops.
The weight on axle 1 cannot surpass the weight on axle 2.
Axle 1's load cannot exceed Axle 3's load.
";"

# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r1(fuel: float) -> bool:
    if fuel >= 0.4:
        return True
    else:
        return False

# Stops with PTO engaged should never outnumber total stops.
def r2(pto: int, total: int) -> bool:
    if pto <= total:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r3(axle1: float, axle2: float) -> bool:
    if axle1 <= axle2:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 3's load.
def r4(axle1: float, axle3: float) -> bool:
    if axle1 <= axle3:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
Idle time cannot be greater than the total operation time.
The number of stops where PTO is engaged must not exceed the overall stop count.
Axle 1's load cannot exceed Axle 3's load.
";"

# The vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r1(fuel: float, distance: float) -> bool:
    if distance >= 20 and fuel >= 5:
        return True
    else:
        return False

# Idle time cannot be greater than the total operation time.
def r2(idle: float, operation: float) -> bool:
    if idle <= operation:
        return True
    else:
        return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r3(pto_stops: int, overall_stops: int) -> bool:
    if pto_stops <= overall_stops:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 3's load.
def r4(axle1: float, axle3: float) -> bool:
    if axle1 <= axle3:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
The total operation duration must not be lower than the idle time.
The load supported by axle 1 cannot exceed that of axle 3.
Axle 3's load must always be equal to or greater than the payload.
";"

# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(km: float, fuel: float) -> bool:
    if km >= 20 and fuel >= 5:
        return True
    else:
        return False

# The total operation duration must not be lower than the idle time.
def r2(operation: float, idle: float) -> bool:
    if operation >= idle:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 3.
def r3(axle1: float, axle3: float) -> bool:
    if axle1 <= axle3:
        return True
    else:
        return False

# Axle 3's load must always be equal to or greater than the payload.
def r4(axle3: float, payload: float) -> bool:
    if axle3 >= payload:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
PTO operation time cannot be greater than the total operation time.
Driving time should be less than or equal to the total operation time.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";"

# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption >= 5:
        return True
    else:
        return False

# PTO operation time cannot be greater than the total operation time.
def r2(pto_time: float, total_time: float) -> bool:
    if pto_time <= total_time:
        return True
    else:
        return False

# Driving time should be less than or equal to the total operation time.
def r3(driving_time: float, total_time: float) -> bool:
    if driving_time <= total_time:
        return True
    else:
        return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r4(total_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    if total_time >= pto_time + idle_time + driving_time:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
The total operation duration must not be lower than the idle time.
The load on axle 1 must not surpass the load on axle 3.
Axle 2's load must always be equal to or greater than the payload.
";"

# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r1(fuel: float, distance: float) -> bool:
    if distance >= 20 and fuel >= 0.4:
        return True
    else:
        return False

# The total operation duration must not be lower than the idle time.
def r2(operation_duration: float, idle_time: float) -> bool:
    if operation_duration >= idle_time:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 3.
def r3(axle1_load: float, axle3_load: float) -> bool:
    if axle1_load <= axle3_load:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def r4(axle2_load: float, payload: float) -> bool:
    if axle2_load >= payload:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
The number of stops where PTO is engaged must not exceed the overall stop count.
The load supported by axle 1 cannot exceed that of axle 3.
Payload must remain below or equal to the load carried by axle 3.
";"

# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(km: float, fuel: float) -> bool:
    if km >= 20 and fuel >= 5:
        return True
    else:
        return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r2(pto: int, stops: int) -> bool:
    if pto <= stops:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 3.
def r3(axle1: float, axle3: float) -> bool:
    if axle1 <= axle3:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 3.
def r4(payload: float, axle3: float) -> bool:
    if payload <= axle3:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: PTO operation time must be less than or equal to the total operation time.
Idle time should be less than or equal to the total operation time.
The payload must not exceed the load carried by axle 3.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";"

Here is the Python3 code for the given input text:

# PTO operation time must be less than or equal to the total operation time.
def r1(pto: float, total: float) -> bool:
    if pto <= total:
        return True
    else:
        return False

# Idle time should be less than or equal to the total operation time.
def r2(idle: float, total: float) -> bool:
    if idle <= total:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
# (Assuming the load carried by axle 3 is a constant, let's call it 'axle3_load')
def r3(payload: float, axle3_load: float) -> bool:
    if payload <= axle3_load:
        return True
    else:
        return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r4(total: float, pto: float, idle: float, driving: float) -> bool:
    if total >= pto + idle + driving:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: The load on axle 1 must not surpass the load on axle 3.
Payload must remain below or equal to the load carried by axle 2.
The payload must not exceed the load carried by axle 3.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"

# The load on axle 1 must not surpass the load on axle 3.
def r1(a1: float, a3: float) -> bool:
    if a1 <= a3:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def r2(p: float, a2: float) -> bool:
    if p <= a2:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def r3(p: float, a3: float) -> bool:
    if p <= a3:
        return True
    else:
        return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r4(t1: float, t2: float) -> bool:
    if t1 <= t2:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
Idle time must always be less than or equal to the total operation time.
Driving time must always be less than or equal to the total operation time.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";"

# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r1(fuel: float, distance: float) -> bool:
    if fuel / distance >= 0.4:
        return True
    else:
        return False

# Idle time must always be less than or equal to the total operation time.
def r2(idle: float, operation: float) -> bool:
    if idle <= operation:
        return True
    else:
        return False

# Driving time must always be less than or equal to the total operation time.
def r3(driving: float, operation: float) -> bool:
    if driving <= operation:
        return True
    else:
        return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r4(operation: float, pto: float, idle: float, driving: float) -> bool:
    if operation >= pto + idle + driving:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
Driving time should be less than or equal to the total operation time.
PTO-engaged stops cannot exceed the total number of stops.
The load on axle 1 must not surpass the load on axle 2.
";"

Here is the Python3 code for the given input text:

# The vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r1(fuel: float, distance: float) -> bool:
    if fuel >= 5 and distance >= 20:
        return True
    else:
        return False

# Driving time should be less than or equal to the total operation time.
def r2(driving_time: float, operation_time: float) -> bool:
    if driving_time <= operation_time:
        return True
    else:
        return False

# PTO-engaged stops cannot exceed the total number of stops.
def r3(pto_stops: float, total_stops: float) -> bool:
    if ptos_stops <= total_stops:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 2.
def r4(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load <= axle2_load:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
The total operation duration must not be lower than the idle time.
Driving time must always be less than or equal to the total operation time.
The payload cannot exceed the capacity of axle 3.
";"

Here is the Python3 code for the given input text:

# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(t: float, f: float) -> bool:
    if t >= 20 and f >= 5:
        return True
    else:
        return False

# The total operation duration must not be lower than the idle time.
def r2(o: float, i: float) -> bool:
    if o >= i:
        return True
    else:
        return False

# Driving time must always be less than or equal to the total operation time.
def r3(d: float, o: float) -> bool:
    if d <= o:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 3.
# (Assuming the capacity of axle 3 is a constant, let's name it 'c')
c = 0  # Define the capacity of axle 3
def r4(p: float) -> bool:
    if p <= c:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: Stops with PTO engaged cannot outnumber the total stops.
The weight on axle 1 cannot surpass the weight on axle 3.
Axle 2's load must always be equal to or greater than the payload.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"

# Stops with PTO engaged cannot outnumber the total stops.
def r1(pto_stops: int, total_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r2(axle1: float, axle3: float) -> bool:
    if axle1 <= axle3:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def r3(axle2: float, payload: float) -> bool:
    if axle2 >= payload:
        return True
    else:
        return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r4(pto_time: float, idle_time: float, driving_time: float) -> bool:
    if pto_time + idle_time + driving_time >= 0:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: PTO operation time must be less than or equal to the total operation time.
The total operation duration must not be lower than the idle time.
The weight on axle 1 cannot surpass the weight on axle 3.
The payload cannot exceed the capacity of axle 3.
";"

# PTO operation time must be less than or equal to the total operation time.
def r1(pto: float, total: float) -> bool:
    if pto <= total:
        return True
    else:
        return False

# The total operation duration must not be lower than the idle time.
def r2(total: float, idle: float) -> bool:
    if total >= idle:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r3(axle1: float, axle3: float) -> bool:
    if axle1 <= axle3:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 3.
def r4(payload: float, axle3: float) -> bool:
    if payload <= axle3:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
Idle time must always be less than or equal to the total operation time.
PTO-engaged stops cannot exceed the total number of stops.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
The payload must always be smaller than or equal to the load on axle 2.
";"

Here is the Python3 code for the given input text:

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r1(km: float, fuel: float) -> bool:
    if km >= 20 and fuel / km >= 0.4:
        return True
    else:
        return False

# Idle time must always be less than or equal to the total operation time.
def r2(idle: float, operation: float) -> bool:
    if idle <= operation:
        return True
    else:
        return False

# PTO-engaged stops cannot exceed the total number of stops.
def r3(pto_stops: float, total_stops: float) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r4(axle1: float, axle3: float) -> bool:
    if axle1 <= axle3:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 2.
def r5(payload: float, axle2: float) -> bool:
    if payload <= axle2:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
PTO operation time cannot be greater than the total operation time.
Total operation time should shouldn’t be lower than driving time.
The payload must always be smaller than or equal to the load on axle 3.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";"

Here is the Python3 code for the given input text:

# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r1(fuel: float, distance: float) -> bool:
    if distance >= 20 and fuel / distance >= 0.4:
        return True
    else:
        return False

# PTO operation time cannot be greater than the total operation time.
def r2(pto: float, total: float) -> bool:
    if pto <= total:
        return True
    else:
        return False

# Total operation time should shouldn’t be lower than driving time.
def r3(total: float, driving: float) -> bool:
    if total >= driving:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 3.
def r4(payload: float, load3: float) -> bool:
    if payload <= load3:
        return True
    else:
        return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r5(total: float, pto: float, idle: float, driving: float) -> bool:
    if total >= pto + idle + driving:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: The total operation duration must not be lower than the PTO operation time.
Total operation time shouldn’t be lower than idle time.
Stops with PTO engaged should never outnumber total stops.
Axle 1's load cannot exceed Axle 2's load.
The payload cannot exceed the capacity of axle 2.
";"

Here is the Python3 code for the given input text:

# The total operation duration must not be lower than the PTO operation time.
def r1(total_operation_time: float, pto_operation_time: float) -> bool:
    if total_operation_time >= pto_operation_time:
        return True
    else:
        return False

# Total operation time shouldn’t be lower than idle time.
def r2(total_operation_time: float, idle_time: float) -> bool:
    if total_operation_time >= idle_time:
        return True
    else:
        return False

# Stops with PTO engaged should never outnumber total stops.
def r3(pto_stops: int, total_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 2's load.
def r4(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load <= axle2_load:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 2.
def r5(payload: float, axle2_capacity: float) -> bool:
    if payload <= axle2_capacity:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
The load on axle 1 must not surpass the load on axle 2.
Axle 1's load cannot exceed Axle 3's load.
The payload must not exceed the load carried by axle 2.
The payload must not exceed the load carried by axle 3.
";"

# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r1(a: float) -> bool:
    if a >= 40:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 2.
def r2(l1: float, l2: float) -> bool:
    if l1 <= l2:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 3's load.
def r3(l1: float, l3: float) -> bool:
    if l1 <= l3:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 2.
def r4(p: float, l2: float) -> bool:
    if p <= l2:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def r5(p: float, l3: float) -> bool:
    if p <= l3:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
The load supported by axle 1 cannot exceed that of axle 2.
Payload must remain below or equal to the load carried by axle 2.
The payload must always be smaller than or equal to the load on axle 3.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"

Here is the Python3 code for the given input text:

```
# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(km: float, fuel: float) -> bool:
    if km >= 20 and fuel >= 5:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r2(axle1: float, axle2: float) -> bool:
    if axle1 <= axle2:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def r3(payload: float, axle2: float) -> bool:
    if payload <= axle2:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 3.
def r4(payload: float, axle3: float) -> bool:
    if payload <= axle3:
        return True
    else:
        return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r5(pto: float, idle: float, driving: float) -> bool:
    if pto + idle + driving >= 0:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
The total stop count must not be lower than the count of stops where PTO is engaged.
The weight on axle 1 cannot surpass the weight on axle 2.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
The payload must always be smaller than or equal to the load on axle 3.
";"

# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r1(fuel: float, distance: float) -> bool:
    if distance >= 20 and fuel >= 0.4:
        return True
    else:
        return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r2(total_stops: int, pto_stops: int) -> bool:
    if total_stops >= pto_stops:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r3(axle1: float, axle2: float) -> bool:
    if axle1 <= axle2:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r4(axle1: float, axle3: float) -> bool:
    if axle1 <= axle3:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 3.
def r5(payload: float, axle3: float) -> bool:
    if payload <= axle3:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
Driving time must always be less than or equal to the total operation time.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
The payload cannot exceed the capacity of axle 2.
";"

Here is the Python3 code for the given input text:

# The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r1(fuel: float, distance: float) -> bool:
    if distance >= 20 and fuel >= 0.5:
        return True
    else:
        return False

# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def r2(distance: float, fuel: float) -> bool:
    if distance >= 20 and fuel / distance >= 0.4:
        return True
    else:
        return False

# Driving time must always be less than or equal to the total operation time.
def r3(driving_time: float, operation_time: float) -> bool:
    if driving_time <= operation_time:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def r4(axle1: float, axle2: float) -> bool:
    if axle1 <= axle2:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 2.
def r5(payload: float, axle2: float) -> bool:
    if payload <= axle2:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
PTO operation time should be less than or equal to the total operation time.
Stops with PTO engaged cannot outnumber the total stops.
The payload must not exceed the load carried by axle 3.
";"

Here is the Python3 code for the given input text:

# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(km: float, fuel: float) -> bool:
    if km >= 20 and fuel / km >= 0.05:
        return True
    else:
        return False

# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r2(km: float, fuel: float) -> bool:
    if km >= 20 and fuel / (km / 100) >= 0.4:
        return True
    else:
        return False

# PTO operation time should be less than or equal to the total operation time.
def r3(pto: float, total: float) -> bool:
    if pto <= total:
        return True
    else:
        return False

# Stops with PTO engaged cannot outnumber the total stops.
def r4(pto_stops: int, total_stops: int) -> bool:
    if ptos_stops <= total_stops:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def r5(payload: float, axle3: float) -> bool:
    if payload <= axle3:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
The total operation duration must not be lower than the PTO operation time.
Driving time cannot be greater than the total operation time.
Axle 2's load must always be equal to or greater than the payload.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";"

Here is the Python3 code for the given input text:

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r1(km: float) -> bool:
    if km >= 20:
        return True
    else:
        return False

# The total operation duration must not be lower than the PTO operation time.
def r2(total_operation_time: float, pto_operation_time: float) -> bool:
    if total_operation_time >= pto_operation_time:
        return True
    else:
        return False

# Driving time cannot be greater than the total operation time.
def r3(driving_time: float, total_operation_time: float) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def r4(axle2_load: float, payload: float) -> bool:
    if axle2_load >= payload:
        return True
    else:
        return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r5(total_operation_time: float, pto_operation_time: float, idle_time: float, driving_time: float) -> bool:
    if total_operation_time >= pto_operation_time + idle_time + driving_time:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: PTO operation time must be less than or equal to the total operation time.
Driving time must always be less than or equal to the total operation time.
The number of stops where PTO is engaged must not exceed the overall stop count.
Payload must remain below or equal to the load carried by axle 2.
Axle 3's load must always be equal to or greater than the payload.
";"

Here is the Python3 code for the given input text:

# PTO operation time must be less than or equal to the total operation time.
def r1(pto: float, total: float) -> bool:
    if pto <= total:
        return True
    else:
        return False

# Driving time must always be less than or equal to the total operation time.
def r2(driving: float, total: float) -> bool:
    if driving <= total:
        return True
    else:
        return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r3(pto_stops: int, overall_stops: int) -> bool:
    if pto_stops <= overall_stops:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def r4(payload: float, axle2_load: float) -> bool:
    if payload <= axle2_load:
        return True
    else:
        return False

# Axle 3's load must always be equal to or greater than the payload.
def r5(axle3_load: float, payload: float) -> bool:
    if axle3_load >= payload:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: The total operation duration must not be lower than the PTO operation time.
Idle time cannot be greater than the total operation time.
Driving time should be less than or equal to the total operation time.
Stops with PTO engaged should never outnumber total stops.
Axle 1's load cannot exceed Axle 3's load.
";"

Here is the Python3 code for the given input text:

# The total operation duration must not be lower than the PTO operation time.
def r1(total_operation_time: float, pto_operation_time: float) -> bool:
    if total_operation_time >= pto_operation_time:
        return True
    else:
        return False

# Idle time cannot be greater than the total operation time.
def r2(idle_time: float, total_operation_time: float) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# Driving time should be less than or equal to the total operation time.
def r3(driving_time: float, total_operation_time: float) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False

# Stops with PTO engaged should never outnumber total stops.
def r4(stops_with_pto: int, total_stops: int) -> bool:
    if stops_with_pto <= total_stops:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 3's load.
def r5(axle1_load: float, axle3_load: float) -> bool:
    if axle1_load <= axle3_load:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
Total operation time shouldn’t be lower than idle time.
Stops with PTO engaged should never outnumber total stops.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
";"

Here is the Python3 code for the given input text:

# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(km: float, fuel: float) -> bool:
    if km >= 20 and fuel / km >= 0.05:
        return True
    else:
        return False

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r2(km: float, fuel: float) -> bool:
    if km >= 20 and fuel / km >= 0.4:
        return True
    else:
        return False

# Total operation time shouldn’t be lower than idle time.
def r3(op_time: float, idle_time: float) -> bool:
    if op_time >= idle_time:
        return True
    else:
        return False

# Stops with PTO engaged should never outnumber total stops.
def r4(pto_stops: int, total_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r5(axle1: float, axle3: float) -> bool:
    if axle1 <= axle3:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: PTO operation time must be less than or equal to the total operation time.
The weight on axle 1 cannot surpass the weight on axle 2.
The load supported by axle 1 cannot exceed that of axle 3.
Payload must remain below or equal to the load carried by axle 2.
Payload must remain below or equal to the load carried by axle 3.
";"

# PTO operation time must be less than or equal to the total operation time.
def r1(pto: float, total: float) -> bool:
    if pto <= total:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r2(axle1: float, axle2: float) -> bool:
    if axle1 <= axle2:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 3.
def r3(axle1: float, axle3: float) -> bool:
    if axle1 <= axle3:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def r4(payload: float, axle2: float) -> bool:
    if payload <= axle2:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 3.
def r5(payload: float, axle3: float) -> bool:
    if payload <= axle3:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
Idle time must always be less than or equal to the total operation time.
Driving time must always be less than or equal to the total operation time.
Stops with PTO engaged should never outnumber total stops.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
";"

Here is the Python3 code for the given input text:

# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption < 5:
        return False
    else:
        return True

# Idle time must always be less than or equal to the total operation time.
def r2(idle_time: float, total_operation_time: float) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# Driving time must always be less than or equal to the total operation time.
def r3(driving_time: float, total_operation_time: float) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False

# Stops with PTO engaged should never outnumber total stops.
def r4(pto_stops: int, total_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def r5(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load <= axle2_load:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
Idle time cannot be greater than the total operation time.
The total operation durationmust not be lower than the driving time.
The weight on axle 1 cannot surpass the weight on axle 2.
The load on axle 1 must not surpass the load on axle 3.
";"

Here is the Python3 code for the given input text:

# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(km: float, fuel: float) -> bool:
    if km >= 20 and fuel >= 5:
        return True
    else:
        return False

# Idle time cannot be greater than the total operation time.
def r2(idle: float, operation: float) -> bool:
    if idle <= operation:
        return True
    else:
        return False

# The total operation duration must not be lower than the driving time.
def r3(operation: float, driving: float) -> bool:
    if operation >= driving:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r4(axle1: float, axle2: float) -> bool:
    if axle1 <= axle2:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 3.
def r5(axle1: float, axle3: float) -> bool:
    if axle1 <= axle3:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: PTO operation time must be less than or equal to the total operation time.
The total operation duration must not be lower than the idle time.
The weight on axle 1 cannot surpass the weight on axle 3.
The payload must always be smaller than or equal to the load on axle 2.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"

# PTO operation time must be less than or equal to the total operation time.
def r1(pto: float, total: float) -> bool:
    if pto <= total:
        return True
    else:
        return False

# The total operation duration must not be lower than the idle time.
def r2(total: float, idle: float) -> bool:
    if total >= idle:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r3(axle1: float, axle3: float) -> bool:
    if axle1 <= axle3:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 2.
def r4(payload: float, axle2: float) -> bool:
    if payload <= axle2:
        return True
    else:
        return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r5(pto: float, idle: float, driving: float, total: float) -> bool:
    if pto + idle + driving <= total:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: PTO operation time cannot be greater than the total operation time.
Idle time cannot be greater than the total operation time.
The number of stops where PTO is engaged must not exceed the overall stop count.
The payload cannot exceed the capacity of axle 2.
Axle 3's load must always be equal to or greater than the payload.
";"

Here is the Python3 code for the given input text:

# PTO operation time cannot be greater than the total operation time.
def r1(pto: float, total: float) -> bool:
    if pto <= total:
        return True
    else:
        return False

# Idle time cannot be greater than the total operation time.
def r2(idle: float, total: float) -> bool:
    if idle <= total:
        return True
    else:
        return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r3(pto_stops: int, overall_stops: int) -> bool:
    if pto_stops <= overall_stops:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 2.
def r4(payload: float, axle2_capacity: float) -> bool:
    if payload <= axle2_capacity:
        return True
    else:
        return False

# Axle 3's load must always be equal to or greater than the payload.
def r5(axle3_load: float, payload: float) -> bool:
    if axle3_load >= payload:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
Idle time should be less than or equal to the total operation time.
The total operation durationmust not be lower than the driving time.
Axle 2's load must always be equal to or greater than the payload.
The payload must always be smaller than or equal to the load on axle 3.
";"

Here is the Python3 code for the given input text:

# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r1(fuel: float, distance: float) -> bool:
    if distance >= 20 and fuel / distance >= 0.4:
        return True
    else:
        return False

# Idle time should be less than or equal to the total operation time.
def r2(idle: float, operation: float) -> bool:
    if idle <= operation:
        return True
    else:
        return False

# The total operation duration must not be lower than the driving time.
def r3(operation: float, driving: float) -> bool:
    if operation >= driving:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def r4(axle2: float, payload: float) -> bool:
    if axle2 >= payload:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 3.
def r5(payload: float, axle3: float) -> bool:
    if payload <= axle3:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
Total operation time shouldn’t be lower than idle time.
Driving time must always be less than or equal to the total operation time.
Stops with PTO engaged should never outnumber total stops.
The payload must always be smaller than or equal to the load on axle 2.
";"

Here is the Python3 code for the given input text:

# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def r1(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption / distance >= 0.4:
        return True
    else:
        return False

# Total operation time shouldn’t be lower than idle time.
def r2(operation_time: float, idle_time: float) -> bool:
    if operation_time >= idle_time:
        return True
    else:
        return False

# Driving time must always be less than or equal to the total operation time.
def r3(driving_time: float, operation_time: float) -> bool:
    if driving_time <= operation_time:
        return True
    else:
        return False

# Stops with PTO engaged should never outnumber total stops.
def r4(pto_stops: int, total_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 2.
def r5(payload: float, load_axle2: float) -> bool:
    if payload <= load_axle2:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
The total operation duration must not be lower than the PTO operation time.
The total operation duration must not be lower than the idle time.
Driving time must always be less than or equal to the total operation time.
The payload must not exceed the load carried by axle 3.
";"

Here is the Python3 code for the given input text:

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r1(km: float) -> bool:
    if km >= 20:
        return True
    else:
        return False

# The total operation duration must not be lower than the PTO operation time.
def r2(a: float, b: float) -> bool:
    if a >= b:
        return True
    else:
        return False

# The total operation duration must not be lower than the idle time.
def r3(a: float, c: float) -> bool:
    if a >= c:
        return True
        else:
            return False

# Driving time must always be less than or equal to the total operation time.
def r4(d: float, a: float) -> bool:
    if d <= a:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def r5(p: float, ax3: float) -> bool:
    if p <= ax3:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
PTO operation time cannot be greater than the total operation time.
Driving time cannot be greater than the total operation time.
The payload must not exceed the load carried by axle 2.
";"

Here is the Python3 code for the given input text:

# If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
def r1(distance: float, fuel_consumption_rate: float) -> bool:
    if distance >= 20 and fuel_consumption_rate / distance >= 0.05:
        return True
    else:
        return False

# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r2(distance: float, fuel_consumption_per_100_km: float) -> bool:
    if distance >= 20 and fuel_consumption_per_100_km >= 0.4:
        return True
    else:
        return False

# PTO operation time cannot be greater than the total operation time.
def r3(pto_operation_time: float, total_operation_time: float) -> bool:
    if pto_operation_time <= total_operation_time:
        return True
    else:
        return False

# Driving time cannot be greater than the total operation time.
def r4(driving_time: float, total_operation_time: float) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 2.
# (No information provided about the payload and load carried by axle 2, so this rule cannot be translated into a function)"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
PTO operation time must be less than or equal to the total operation time.
Driving time should be less than or equal to the total operation time.
The weight on axle 1 cannot surpass the weight on axle 2.
The payload must not exceed the load carried by axle 3.
";"

# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption >= 5:
        return True
    else:
        return False

# PTO operation time must be less than or equal to the total operation time.
def r2(pto_operation_time: float, total_operation_time: float) -> bool:
    if pto_operation_time <= total_operation_time:
        return True
    else:
        return False

# Driving time should be less than or equal to the total operation time.
def r3(driving_time: float, total_operation_time: float) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r4(axle1_weight: float, axle2_weight: float) -> bool:
    if axle1_weight <= axle2_weight:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def r5(payload: float, axle3_load: float) -> bool:
    if payload <= axle3_load:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
Total operation time shouldn’t be lower than PTO operation time.
Idle time should be less than or equal to the total operation time.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";"

Here is the Python3 code for the given input text:

# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r1(fuel: float, distance: float) -> bool:
    if distance >= 20 and fuel >= 0.4:
        return True
    else:
        return False

# Total operation time shouldn’t be lower than PTO operation time.
def r2(total_operation_time: float, pto_operation_time: float) -> bool:
    if total_operation_time >= pto_operation_time:
        return True
    else:
        return False

# Idle time should be less than or equal to the total operation time.
def r3(idle_time: float, total_operation_time: float) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r4(axle1_load: float, axle3_load: float) -> bool:
    if axle1_load <= axle3_load:
        return True
    else:
        return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r5(total_operation_time: float, pto_operation_time: float, idle_time: float, driving_time: float) -> bool:
    if total_operation_time >= pto_operation_time + idle_time + driving_time:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: Total operation time shouldn’t be lower than idle time.
Driving time should be less than or equal to the total operation time.
The number of stops where PTO is engaged must not exceed the overall stop count.
The load supported by axle 1 cannot exceed that of axle 2.
The weight on axle 1 cannot surpass the weight on axle 3.
";"

Here is the Python3 code for the given input text:

# Total operation time shouldn’t be lower than idle time.
def r1(a: float, b: float) -> bool:
    if a >= b:
        return True
    else:
        return False

# Driving time should be less than or equal to the total operation time.
def r2(a: float, c: float) -> bool:
    if c <= a:
        return True
    else:
        return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r3(d: int, e: int) -> bool:
    if d <= e:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r4(f: float, g: float) -> bool:
    if f <= g:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r5(h: float, i: float) -> bool:
    if h <= i:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
Idle time cannot be greater than the total operation time.
The total stop count must not be lower than the count of stops where PTO is engaged.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"

Here is the Python3 code for the given input text:

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r1(km: float, fuel: float) -> bool:
    if km >= 20 and fuel / km >= 0.4:
        return True
    else:
        return False

# Idle time cannot be greater than the total operation time.
def r2(idle: float, operation: float) -> bool:
    if idle <= operation:
        return True
    else:
        return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r3(stops: float, pto_stops: float) -> bool:
    if stops >= pto_stops:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r4(axle1: float, axle3: float) -> bool:
    if axle1 <= axle3:
        return True
    else:
        return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r5(operation: float, pto: float, idle: float, driving: float) -> bool:
    if operation >= pto + idle + driving:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: Total operation time shouldn’t be lower than idle time.
The load on axle 1 must not surpass the load on axle 2.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
The payload cannot exceed the capacity of axle 2.
The payload cannot exceed the capacity of axle 3.
";"

Here is the Python3 code for the given input text:

# Total operation time shouldn’t be lower than idle time.
def r1(operation_time: float, idle_time: float) -> bool:
    if operation_time >= idle_time:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 2.
def r2(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load <= axle2_load:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r3(axle1_load: float, axle3_load: float) -> bool:
    if axle1_load <= axle3_load:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 2.
def r4(payload: float, axle2_capacity: float) -> bool:
    if payload <= axle2_capacity:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 3.
def r5(payload: float, axle3_capacity: float) -> bool:
    if payload <= axle3_capacity:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: Total operation time should shouldn’t be lower than driving time.
The load supported by axle 1 cannot exceed that of axle 2.
Axle 2's load must always be equal to or greater than the payload.
Axle 3's load must always be equal to or greater than the payload.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";"

Here is the Python3 code for the given input text:

# Total operation time should shouldn’t be lower than driving time.
def r1(total_operation_time: float, driving_time: float) -> bool:
    if total_operation_time >= driving_time:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r2(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load <= axle2_load:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def r3(axle2_load: float, payload: float) -> bool:
    if axle2_load >= payload:
        return True
    else:
        return False

# Axle 3's load must always be equal to or greater than the payload.
def r4(axle3_load: float, payload: float) -> bool:
    if axle3_load >= payload:
        return True
    else:
        return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r5(total_operation_time: float, pto_operation: float, idle_time: float, driving_time: float) -> bool:
    if total_operation_time >= pto_operation + idle_time + driving_time:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
Total operation time shouldn’t be lower than PTO operation time.
Idle time should be less than or equal to the total operation time.
The payload must not exceed the load carried by axle 2.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"

Here is the Python3 code for the given input text:

# The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r1(fuel: float, distance: float) -> bool:
    if fuel / distance >= 0.0833:
        return True
    else:
        return False

# Total operation time shouldn’t be lower than PTO operation time.
def r2(total_time: float, pto_time: float) -> bool:
    if total_time >= pto_time:
        return True
    else:
        return False

# Idle time should be less than or equal to the total operation time.
def r3(idle_time: float, total_time: float) -> bool:
    if idle_time <= total_time:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 2.
def r4(payload: float, axle2_load: float) -> bool:
    if payload <= axle2_load:
        return True
    else:
        return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r5(total_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    if total_time >= pto_time + idle_time + driving_time:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: PTO operation time should be less than or equal to the total operation time.
The total operation duration must not be lower than the idle time.
PTO-engaged stops cannot exceed the total number of stops.
The payload must not exceed the load carried by axle 3.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";"

Here is the Python3 code for the given input text:

# PTO operation time should be less than or equal to the total operation time.
def r1(pto: float, total_operation: float) -> bool:
    if pto <= total_operation:
        return True
    else:
        return False

# The total operation duration must not be lower than the idle time.
def r2(total_operation: float, idle: float) -> bool:
    if total_operation >= idle:
        return True
    else:
        return False

# PTO-engaged stops cannot exceed the total number of stops.
def r3(pto_stops: int, total_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def r4(payload: float, axle3_load: float) -> bool:
    if payload <= axle3_load:
        return True
    else:
        return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r5(total_operation: float, pto: float, idle: float, driving: float) -> bool:
    if total_operation >= pto + idle + driving:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
The total operation durationmust not be lower than the driving time.
The load on axle 1 must not surpass the load on axle 3.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";"

Here is the Python3 code for the given input text:

# The vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r1(fuel_consumption: float, distance: float) -> bool:
    if distance >= 20 and fuel_consumption >= 5:
        return True
    else:
        return False

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r2(distance: float, fuel_consumption_rate: float) -> bool:
    if distance >= 20 and fuel_consumption_rate >= 0.4:
        return True
    else:
        return False

# The total operation duration must not be lower than the driving time.
def r3(total_operation_time: float, driving_time: float) -> bool:
    if total_operation_time >= driving_time:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 3.
def r4(load_axle1: float, load_axle3: float) -> bool:
    if load_axle1 <= load_axle3:
        return True
    else:
        return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r5(total_operation_time: float, pto_operation_time: float, idle_time: float, driving_time: float) -> bool:
    if total_operation_time >= pto_operation_time + idle_time + driving_time:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
The total operation duration must not be lower than the idle time.
Driving time should be less than or equal to the total operation time.
The payload must not exceed the load carried by axle 3.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"

# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(km: float, fuel: float) -> bool:
    if km >= 20 and fuel >= 5:
        return True
    else:
        return False

# The total operation duration must not be lower than the idle time.
def r2(total_time: float, idle_time: float) -> bool:
    if total_time >= idle_time:
        return True
    else:
        return False

# Driving time should be less than or equal to the total operation time.
def r3(driving_time: float, total_time: float) -> bool:
    if driving_time <= total_time:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def r4(payload: float, axle3_load: float) -> bool:
    if payload <= axle3_load:
        return True
    else:
        return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r5(total_time: float, pto: float, idle_time: float, driving_time: float) -> bool:
    if total_time >= pto + idle_time + driving_time:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
The total operation duration must not be lower than the idle time.
Total operation time should shouldn’t be lower than driving time.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
Payload must remain below or equal to the load carried by axle 3.
";"

Here is the Python3 code for the given input text:

# The vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r1(fuel_consumption: float, distance: float) -> bool:
    if distance >= 20 and fuel_consumption >= 5:
        return True
    else:
        return False

# The total operation duration must not be lower than the idle time.
def r2(operation_duration: float, idle_time: float) -> bool:
    if operation_duration >= idle_time:
        return True
    else:
        return False

# Total operation time should shouldn’t be lower than driving time.
def r3(operation_time: float, driving_time: float) -> bool:
    if operation_time >= driving_time:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def r4(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load <= axle2_load:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 3.
def r5(payload: float, axle3_load: float) -> bool:
    if payload <= axle3_load:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
Driving time should be less than or equal to the total operation time.
Stops with PTO engaged should never outnumber total stops.
The payload must not exceed the load carried by axle 3.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";"

Here is the Python3 code for the given input text:

# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r1(km: float, fuel: float) -> bool:
    if km >= 20 and fuel < 0.4:
        return False
    else:
        return True

# Driving time should be less than or equal to the total operation time.
def r2(driving_time: float, total_operation_time: float) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False

# Stops with PTO engaged should never outnumber total stops.
def r3(pto_stops: int, total_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def r4(payload: float, axle3_load: float) -> bool:
    if payload <= axle3_load:
        return True
    else:
        return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r5(total_operation_time: float, pto_operation_time: float, idle_time: float, driving_time: float) -> bool:
    if total_operation_time >= pto_operation_time + idle_time + driving_time:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
Driving time must always be less than or equal to the total operation time.
Stops with PTO engaged cannot outnumber the total stops.
The load on axle 1 must not surpass the load on axle 3.
";"

Here is the Python3 code for the given input text:

```
# If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption / distance >= 0.05:
        return True
    else:
        return False

# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def r2(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption / (distance / 100) >= 0.4:
        return True
    else:
        return False

# Driving time must always be less than or equal to the total operation time.
def r3(driving_time: float, operation_time: float) -> bool:
    if driving_time <= operation_time:
        return True
    else:
        return False

# Stops with PTO engaged cannot outnumber the total stops.
def r4(total_stops: int, pto_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 3.
def r5(axle1_load: float, axle3_load: float) -> bool:
    if axle1_load <= axle3_load:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
The load on axle 1 must not surpass the load on axle 3.
Axle 2's load must always be equal to or greater than the payload.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"

# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(k: float, l: float) -> bool:
    if l / k >= 0.25:
        return True
    else:
        return False

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r2(m: float, n: float) -> bool:
    if n / m >= 0.4:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 3.
def r3(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def r4(q: float, r: float) -> bool:
    if q >= r:
        return True
    else:
        return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r5(s: float, t: float) -> bool:
    if s <= t:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
The total operation duration must not be lower than the idle time.
The weight on axle 1 cannot surpass the weight on axle 2.
Axle 2's load must always be equal to or greater than the payload.
";"

Here is the Python3 code for the given input text:

# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(km: float, fuel: float) -> bool:
    if km >= 20 and fuel / km >= 0.05:
        return True
    else:
        return False

# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def r2(km: float, fuel: float) -> bool:
    if km >= 20 and fuel / km >= 0.4:
        return True
    else:
        return False

# The total operation duration must not be lower than the idle time.
def r3(operation: float, idle: float) -> bool:
    if operation >= idle:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r4(axle1: float, axle2: float) -> bool:
    if axle1 <= axle2:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def r5(axle2: float, payload: float) -> bool:
    if axle2 >= payload:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
PTO operation time should be less than or equal to the total operation time.
Total operation time shouldn’t be lower than idle time.
The number of stops where PTO is engaged must not exceed the overall stop count.
The weight on axle 1 cannot surpass the weight on axle 2.
";"

Here is the Python3 code for the given input text:

# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r1(fuel: float, distance: float) -> bool:
    if distance >= 20 and fuel / distance >= 0.4:
        return True
    else:
        return False

# PTO operation time should be less than or equal to the total operation time.
def r2(pto: float, total: float) -> bool:
    if pto <= total:
        return True
    else:
        return False

# Total operation time shouldn’t be lower than idle time.
def r3(total: float, idle: float) -> bool:
    if total >= idle:
        return True
    else:
        return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r4(pto_stops: int, overall_stops: int) -> bool:
    if pto_stops <= overall_stops:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r5(axle1: float, axle2: float) -> bool:
    if axle1 <= axle2:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
Idle time must always be less than or equal to the total operation time.
Driving time must always be less than or equal to the total operation time.
The load supported by axle 1 cannot exceed that of axle 2.
The payload must not exceed the load carried by axle 2.
";"

# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption >= 5:
        return True
    else:
        return False

# Idle time must always be less than or equal to the total operation time.
def r2(idle_time: float, total_operation_time: float) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# Driving time must always be less than or equal to the total operation time.
def r3(driving_time: float, total_operation_time: float) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r4(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load <= axle2_load:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 2.
def r5(payload: float, axle2_load: float) -> bool:
    if payload <= axle2_load:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
Driving time should be less than or equal to the total operation time.
The total stop count must not be lower than the count of stops where PTO is engaged.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
";"

Here is the Python3 code for the given input text:

```
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption < 5:
        return False
    else:
        return True

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r2(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption < 40:
        return False
    else:
        return True

# Driving time should be less than or equal to the total operation time.
def r3(driving_time: float, operation_time: float) -> bool:
    if driving_time > operation_time:
        return False
    else:
        return True

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r4(total_stops: int, pto_stops: int) -> bool:
    if total_stops < pto_stops:
        return False
    else:
        return True

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def r5(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load > axle2_load:
        return False
    else:
        return True
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: Idle time cannot be greater than the total operation time.
Driving time must always be less than or equal to the total operation time.
Stops with PTO engaged cannot outnumber the total stops.
Axle 2's load must always be equal to or greater than the payload.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"

Here is the Python3 code for the given input text:

# Idle time cannot be greater than the total operation time.
def r1(idle_time: float, total_operation_time: float) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# Driving time must always be less than or equal to the total operation time.
def r2(driving_time: float, total_operation_time: float) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False

# Stops with PTO engaged cannot outnumber the total stops.
def r3(pto_stops: int, total_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def r4(axle2_load: float, payload: float) -> bool:
    if axle2_load >= payload:
        return True
    else:
        return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r5(pto_operation_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
    if pto_operation_time + idle_time + driving_time <= total_operation_time:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
The total operation duration must not be lower than the PTO operation time.
Driving time must always be less than or equal to the total operation time.
The payload cannot exceed the capacity of axle 3.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";"

Here is the Python3 code for the given input text:

# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(km: float, fuel: float) -> bool:
    if km >= 20 and fuel >= 5:
        return True
    else:
        return False

# The total operation duration must not be lower than the PTO operation time.
def r2(total_time: float, pto_time: float) -> bool:
    if total_time >= pto_time:
        return True
    else:
        return False

# Driving time must always be less than or equal to the total operation time.
def r3(driving_time: float, total_time: float) -> bool:
    if driving_time <= total_time:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 3.
def r4(payload: float, axle3_capacity: float) -> bool:
    if payload <= axle3_capacity:
        return True
    else:
        return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r5(total_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    if total_time >= pto_time + idle_time + driving_time:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: Total operation time shouldn’t be lower than PTO operation time.
Stops with PTO engaged should never outnumber total stops.
The weight on axle 1 cannot surpass the weight on axle 3.
Axle 2's load must always be equal to or greater than the payload.
Payload must remain below or equal to the load carried by axle 3.
";"

Here is the Python3 code for the given input text:

# Total operation time shouldn’t be lower than PTO operation time.
def r1(ot: float, pto: float) -> bool:
    if ot >= pto:
        return True
    else:
        return False

# Stops with PTO engaged should never outnumber total stops.
def r2(t: int, p: int) -> bool:
    if t >= p:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r3(w1: float, w3: float) -> bool:
    if w1 <= w3:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def r4(l2: float, p: float) -> bool:
    if l2 >= p:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 3.
def r5(p: float, w3: float) -> bool:
    if p <= w3:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
Driving time should be less than or equal to the total operation time.
The number of stops where PTO is engaged must not exceed the overall stop count.
The payload must not exceed the load carried by axle 3.
";"

Here is the Python3 code for the given input text:

# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(km: float, fuel: float) -> bool:
    if km >= 20 and fuel / km >= 0.05:
        return True
    else:
        return False

# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def r2(km: float, fuel: float) -> bool:
    if km >= 20 and fuel / (km / 100) >= 0.4:
        return True
    else:
        return False

# Driving time should be less than or equal to the total operation time.
def r3(driving_time: float, operation_time: float) -> bool:
    if driving_time <= operation_time:
        return True
    else:
        return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r4(pto_stops: int, overall_stops: int) -> bool:
    if pto_stops <= overall_stops:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def r5(payload: float, axle3_load: float) -> bool:
    if payload <= axle3_load:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: Idle time must always be less than or equal to the total operation time.
Driving time must always be less than or equal to the total operation time.
Stops with PTO engaged cannot outnumber the total stops.
The weight on axle 1 cannot surpass the weight on axle 2.
The payload cannot exceed the capacity of axle 2.
";"

Here is the Python3 code for the given input text:

# Idle time must always be less than or equal to the total operation time.
def r1(idle_time: float, total_operation_time: float) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# Driving time must always be less than or equal to the total operation time.
def r2(driving_time: float, total_operation_time: float) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False

# Stops with PTO engaged cannot outnumber the total stops.
def r3(pto_stops: int, total_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r4(axle1_weight: float, axle2_weight: float) -> bool:
    if axle1_weight <= axle2_weight:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 2.
def r5(payload: float, axle2_capacity: float) -> bool:
    if payload <= axle2_capacity:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
PTO operation time must be less than or equal to the total operation time.
Idle time must always be less than or equal to the total operation time.
Total operation time should shouldn’t be lower than driving time.
The payload must not exceed the load carried by axle 2.
";"

Here is the Python3 code for the given input text:

# The vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r1(fuel_consumption: float, distance: float) -> bool:
    if distance >= 20 and fuel_consumption >= 5:
        return True
    else:
        return False

# PTO operation time must be less than or equal to the total operation time.
def r2(pto_time: float, total_time: float) -> bool:
    if pto_time <= total_time:
        return True
    else:
        return False

# Idle time must always be less than or equal to the total operation time.
def r3(idle_time: float, total_time: float) -> bool:
    if idle_time <= total_time:
        return True
    else:
        return False

# Total operation time should shouldn’t be lower than driving time.
def r4(total_time: float, driving_time: float) -> bool:
    if total_time >= driving_time:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 2.
def r5(payload: float, axle2_load: float) -> bool:
    if payload <= axle2_load:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
Total operation time shouldn’t be lower than PTO operation time.
The total operation durationmust not be lower than the driving time.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
";"

Here is the Python3 code for the given input text:

# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption < 5:
        return False
    else:
        return True

# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r2(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption < 0.4:
        return False
    else:
        return True

# Total operation time shouldn’t be lower than PTO operation time.
def r3(total_operation_time: float, pto_operation_time: float) -> bool:
    if total_operation_time < pto_operation_time:
        return False
    else:
        return True

# The total operation durationmust not be lower than the driving time.
def r4(total_operation_duration: float, driving_time: float) -> bool:
    if total_operation_duration < driving_time:
        return False
    else:
        return True

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r5(axle1_load: float, axle3_load: float) -> bool:
    if axle1_load > axle3_load:
        return False
    else:
        return True"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
PTO operation time should be less than or equal to the total operation time.
Driving time cannot be greater than the total operation time.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"

# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(k: float, l: float) -> bool:
    if l / k >= 0.05:
        return True
    else:
        return False

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r2(m: float, n: float) -> bool:
    if n / m >= 0.4:
        return True
    else:
        return False

# PTO operation time should be less than or equal to the total operation time.
def r3(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Driving time cannot be greater than the total operation time.
def r4(q: float, r: float) -> bool:
    if q <= r:
        return True
    else:
        return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r5(s: float, t: float, u: float, v: float) -> bool:
    if s + t + u <= v:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
PTO operation time cannot be greater than the total operation time.
Axle 1's load cannot exceed Axle 2's load.
The weight on axle 1 cannot surpass the weight on axle 3.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";"

Here is the Python3 code for the given input text:

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r1(km: float) -> bool:
    if km >= 20:
        return True
    else:
        return False

# PTO operation time cannot be greater than the total operation time.
def r2(pto: float, total: float) -> bool:
    if pto <= total:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 2's load.
def r3(axle1: float, axle2: float) -> bool:
    if axle1 <= axle2:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r4(axle1: float, axle3: float) -> bool:
    if axle1 <= axle3:
        return True
    else:
        return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r5(total: float, pto: float, idle: float, driving: float) -> bool:
    if total >= pto + idle + driving:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
Idle time must always be less than or equal to the total operation time.
Driving time should be less than or equal to the total operation time.
Axle 1's load cannot exceed Axle 3's load.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"

Here is the Python3 code for the given input text:

```
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption < 5:
        return False
    else:
        return True

# Idle time must always be less than or equal to the total operation time.
def r2(idle_time: float, total_operation_time: float) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# Driving time should be less than or equal to the total operation time.
def r3(driving_time: float, total_operation_time: float) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 3's load.
def r4(axle1_load: float, axle3_load: float) -> bool:
    if axle1_load <= axle3_load:
        return True
    else:
        return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r5(pto_operation_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
    if pto_operation_time + idle_time + driving_time <= total_operation_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
The total operation duration must not be lower than the PTO operation time.
Total operation time should shouldn’t be lower than driving time.
Stops with PTO engaged should never outnumber total stops.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";"

Here is the Python3 code for the given input text:

# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(km: float) -> bool:
    if km >= 20:
        return True
    else:
        return False

# The total operation duration must not be lower than the PTO operation time.
def r2(a: float, b: float) -> bool:
    if a >= b:
        return True
    else:
        return False

# Total operation time should shouldn’t be lower than driving time.
def r3(c: float, d: float) -> bool:
    if c >= d:
        return True
    else:
        return False

# Stops with PTO engaged should never outnumber total stops.
def r4(e: float, f: float) -> bool:
    if e <= f:
        return True
    else:
        return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r5(a: float, b: float, c: float) -> bool:
    if a >= b + c:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
Total operation time shouldn’t be lower than PTO operation time.
Total operation time shouldn’t be lower than idle time.
Driving time must always be less than or equal to the total operation time.
The number of stops where PTO is engaged must not exceed the overall stop count.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"

Here is the Python3 code based on the given input text:

```
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption >= 5:
        return True
    else:
        return False

# Total operation time shouldn’t be lower than PTO operation time.
def r2(total_operation_time: float, pto_operation_time: float) -> bool:
    if total_operation_time >= pto_operation_time:
        return True
    else:
        return False

# Total operation time shouldn’t be lower than idle time.
def r3(total_operation_time: float, idle_time: float) -> bool:
    if total_operation_time >= idle_time:
        return True
    else:
        return False

# Driving time must always be less than or equal to the total operation time.
def r4(driving_time: float, total_operation_time: float) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r5(pto_stops: int, overall_stops: int) -> bool:
    if pto_stops <= overall_stops:
        return True
    else:
        return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r6(total_operation_time: float, pto_operation_time: float, idle_time: float, driving_time: float) -> bool:
    if total_operation_time >= pto_operation_time + idle_time + driving_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: Total operation time shouldn’t be lower than PTO operation time.
Idle time cannot be greater than the total operation time.
Axle 1's load cannot exceed Axle 2's load.
Axle 1's load cannot exceed Axle 3's load.
Axle 3's load must always be equal to or greater than the payload.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";"

Here is the Python3 code based on the given input text:

```
# Total operation time shouldn’t be lower than PTO operation time.
def r1(pto: float, tot: float) -> bool:
    if tot >= pto:
        return True
    else:
        return False

# Idle time cannot be greater than the total operation time.
def r2(idle: float, tot: float) -> bool:
    if idle <= tot:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 2's load.
def r3(axle1: float, axle2: float) -> bool:
    if axle1 <= axle2:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 3's load.
def r4(axle1: float, axle3: float) -> bool:
    if axle1 <= axle3:
        return True
    else:
        return False

# Axle 3's load must always be equal to or greater than the payload.
def r5(axle3: float, payload: float) -> bool:
    if axle3 >= payload:
        return True
    else:
        return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r6(tot: float, pto: float, idle: float, driving: float) -> bool:
    if tot >= pto + idle + driving:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
PTO operation time must be less than or equal to the total operation time.
Total operation time shouldn’t be lower than idle time.
Driving time cannot be greater than the total operation time.
The payload must not exceed the load carried by axle 2.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";"

Here is the Python3 code based on the given input text:

```
# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(km: float, fuel: float) -> bool:
    if km >= 20 and fuel >= 5:
        return True
    else:
        return False

# PTO operation time must be less than or equal to the total operation time.
def r2(pto: float, total: float) -> bool:
    if pto <= total:
        return True
    else:
        return False

# Total operation time shouldn’t be lower than idle time.
def r3(total: float, idle: float) -> bool:
    if total >= idle:
        return True
    else:
        return False

# Driving time cannot be greater than the total operation time.
def r4(driving: float, total: float) -> bool:
    if driving <= total:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 2.
def r5(payload: float, axle2: float) -> bool:
    if payload <= axle2:
        return True
    else:
        return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r6(total: float, pto: float, idle: float, driving: float) -> bool:
    if total >= pto + idle + driving:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
PTO operation time should be less than or equal to the total operation time.
Idle time must always be less than or equal to the total operation time.
Driving time should be less than or equal to the total operation time.
The payload must not exceed the load carried by axle 2.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"

Here is the Python3 code based on the given input text:

```
# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def r1(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption / distance >= 0.4:
        return True
    else:
        return False

# PTO operation time should be less than or equal to the total operation time.
def r2(pto_time: float, total_time: float) -> bool:
    if pto_time <= total_time:
        return True
    else:
        return False

# Idle time must always be less than or equal to the total operation time.
def r3(idle_time: float, total_time: float) -> bool:
    if idle_time <= total_time:
        return True
    else:
        return False

# Driving time should be less than or equal to the total operation time.
def r4(driving_time: float, total_time: float) -> bool:
    if driving_time <= total_time:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 2.
def r5(payload: float, load_axle2: float) -> bool:
    if payload <= load_axle2:
        return True
    else:
        return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r6(total_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    if total_time >= pto_time + idle_time + driving_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
The total operation duration must not be lower than the PTO operation time.
Idle time must always be less than or equal to the total operation time.
The weight on axle 1 cannot surpass the weight on axle 3.
The payload must always be smaller than or equal to the load on axle 3.
";"

Here is the Python3 code based on the given input text:

```
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption < 5:
        return False
    else:
        return True

# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r2(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption < 40:
        return False
    else:
        return True

# The total operation duration must not be lower than the PTO operation time.
def r3(total_operation_duration: float, pto_operation_time: float) -> bool:
    if total_operation_duration < pto_operation_time:
        return False
    else:
        return True

# Idle time must always be less than or equal to the total operation time.
def r4(idle_time: float, total_operation_duration: float) -> bool:
    if idle_time > total_operation_duration:
        return False
    else:
        return True

# The weight on axle 1 cannot surpass the weight on axle 3.
def r5(axle1_weight: float, axle3_weight: float) -> bool:
    if axle1_weight > axle3_weight:
        return False
    else:
        return True

# The payload must always be smaller than or equal to the load on axle 3.
def r6(payload: float, axle3_load: float) -> bool:
    if payload > axle3_load:
        return False
    else:
        return True
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
Idle time cannot be greater than the total operation time.
Stops with PTO engaged should never outnumber total stops.
Axle 1's load cannot exceed Axle 3's load.
The payload must not exceed the load carried by axle 3.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"

Here is the Python3 code based on the given input text:

```
# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.4:
        return True
    else:
        return False

# Idle time cannot be greater than the total operation time.
def r2(i: float, t: float) -> bool:
    if i <= t:
        return True
    else:
        return False

# Stops with PTO engaged should never outnumber total stops.
def r3(s: int, t: int) -> bool:
    if s <= t:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 3's load.
def r4(l1: float, l3: float) -> bool:
    if l1 <= l3:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def r5(p: float, l3: float) -> bool:
    if p <= l3:
        return True
    else:
        return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r6(p: float, i: float, d: float, t: float) -> bool:
    if p + i + d <= t:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
PTO operation time cannot be greater than the total operation time.
The total operation durationmust not be lower than the driving time.
The payload cannot exceed the capacity of axle 2.
The payload must always be smaller than or equal to the load on axle 3.
";"

Here is the Python3 code for the given input text:

# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption < 5:
        return False
    else:
        return True

# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def r2(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption < 0.4:
        return False
    else:
        return True

# PTO operation time cannot be greater than the total operation time.
def r3(pto_operation_time: float, total_operation_time: float) -> bool:
    if pto_operation_time > total_operation_time:
        return False
    else:
        return True

# The total operation durationmust not be lower than the driving time.
def r4(total_operation_time: float, driving_time: float) -> bool:
    if total_operation_time < driving_time:
        return False
    else:
        return True

# The payload cannot exceed the capacity of axle 2.
def r5(payload: float, axle2_capacity: float) -> bool:
    if payload > axle2_capacity:
        return False
    else:
        return True

# The payload must always be smaller than or equal to the load on axle 3.
def r6(payload: float, axle3_load: float) -> bool:
    if payload > axle3_load:
        return False
    else:
        return True"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
The total operation duration must not be lower than the PTO operation time.
Driving time must always be less than or equal to the total operation time.
Stops with PTO engaged should never outnumber total stops.
The load supported by axle 1 cannot exceed that of axle 3.
";"

Here is the Python3 code for the given input text:

# The vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r1(fuel_consumption: float, distance: float) -> bool:
    if distance >= 20 and fuel_consumption >= 5:
        return True
    else:
        return False

# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r2(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption / distance >= 0.4:
        return True
    else:
        return False

# The total operation duration must not be lower than the PTO operation time.
def r3(total_operation_time: float, pto_operation_time: float) -> bool:
    if total_operation_time >= pto_operation_time:
        return True
    else:
        return False

# Driving time must always be less than or equal to the total operation time.
def r4(driving_time: float, total_operation_time: float) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False

# Stops with PTO engaged should never outnumber total stops.
def r5(pto_stops: int, total_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 3.
def r6(axle1_load: float, axle3_load: float) -> bool:
    if axle1_load <= axle3_load:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
The total operation durationmust not be lower than the driving time.
The number of stops where PTO is engaged must not exceed the overall stop count.
The weight on axle 1 cannot surpass the weight on axle 3.
The payload must always be smaller than or equal to the load on axle 3.
";"

Here is the Python3 code based on the given input text:

```
# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(km: float, fuel_consumption: float) -> bool:
    if km >= 20 and fuel_consumption >= 5:
        return True
    else:
        return False

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r2(km: float, fuel_consumption: float) -> bool:
    if km >= 20 and fuel_consumption / km >= 0.4:
        return True
    else:
        return False

# The total operation duration must not be lower than the driving time.
def r3(operation_duration: float, driving_time: float) -> bool:
    if operation_duration >= driving_time:
        return True
    else:
        return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r4(pto_stops: int, overall_stops: int) -> bool:
    if pto_stops <= overall_stops:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r5(axle1_weight: float, axle3_weight: float) -> bool:
    if axle1_weight <= axle3_weight:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 3.
def r6(payload: float, axle3_load: float) -> bool:
    if payload <= axle3_load:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
PTO operation time should be less than or equal to the total operation time.
Idle time must always be less than or equal to the total operation time.
The total operation durationmust not be lower than the driving time.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";"

Here is the Python3 code based on the given input text:

```
# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(fuel_consumption: float, distance: float) -> bool:
    if distance >= 20 and fuel_consumption / distance >= 0.05:
        return True
    else:
        return False

# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r2(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption / distance >= 0.4:
        return True
    else:
        return False

# PTO operation time should be less than or equal to the total operation time.
def r3(pto_operation_time: float, total_operation_time: float) -> bool:
    if pto_operation_time <= total_operation_time:
        return True
    else:
        return False

# Idle time must always be less than or equal to the total operation time.
def r4(idle_time: float, total_operation_time: float) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# The total operation duration must not be lower than the driving time.
def r5(total_operation_time: float, driving_time: float) -> bool:
    if total_operation_time >= driving_time:
        return True
    else:
        return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r6(total_operation_time: float, pto_operation_time: float, idle_time: float, driving_time: float) -> bool:
    if total_operation_time >= pto_operation_time + idle_time + driving_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
PTO operation time must be less than or equal to the total operation time.
Total operation time shouldn’t be lower than idle time.
The number of stops where PTO is engaged must not exceed the overall stop count.
The load supported by axle 1 cannot exceed that of axle 3.
The payload must not exceed the load carried by axle 3.
";"

Here is the Python3 code based on the given input text:

```
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption >= 5:
        return True
    else:
        return False

# PTO operation time must be less than or equal to the total operation time.
def r2(pto_operation_time: float, total_operation_time: float) -> bool:
    if pto_operation_time <= total_operation_time:
        return True
    else:
        return False

# Total operation time shouldn’t be lower than idle time.
def r3(total_operation_time: float, idle_time: float) -> bool:
    if total_operation_time >= idle_time:
        return True
    else:
        return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r4(pto_stops: int, overall_stops: int) -> bool:
    if pto_stops <= overall_stops:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 3.
def r5(axle1_load: float, axle3_load: float) -> bool:
    if axle1_load <= axle3_load:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def r6(payload: float, axle3_load: float) -> bool:
    if payload <= axle3_load:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
PTO-engaged stops cannot exceed the total number of stops.
Payload must remain below or equal to the load carried by axle 2.
The payload must not exceed the load carried by axle 3.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"

Here is the Python3 code based on the given input text:

```
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption < 5:
        return False
    else:
        return True

# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r2(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption < 40:
        return False
    else:
        return True

# PTO-engaged stops cannot exceed the total number of stops.
def r3(pto_stops: int, total_stops: int) -> bool:
    if pto_stops > total_stops:
        return False
    else:
        return True

# Payload must remain below or equal to the load carried by axle 2.
def r4(payload: float, load_axle2: float) -> bool:
    if payload > load_axle2:
        return False
    else:
        return True

# The payload must not exceed the load carried by axle 3.
def r5(payload: float, load_axle3: float) -> bool:
    if payload > load_axle3:
        return False
    else:
        return True

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r6(pto_time: float, idle_time: float, driving_time: float, total_time: float) -> bool:
    if pto_time + idle_time + driving_time > total_time:
        return False
    else:
        return True
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
PTO operation time must be less than or equal to the total operation time.
Idle time should be less than or equal to the total operation time.
The total stop count must not be lower than the count of stops where PTO is engaged.
Axle 2's load must always be equal to or greater than the payload.
Axle 3's load must always be equal to or greater than the payload.
";"

Here is the Python3 code based on the given input text:

```
# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r1(km: float, fuel: float) -> bool:
    if km >= 20 and fuel / km >= 0.4:
        return True
    else:
        return False

# PTO operation time must be less than or equal to the total operation time.
def r2(pto_time: float, total_time: float) -> bool:
    if pto_time <= total_time:
        return True
    else:
        return False

# Idle time should be less than or equal to the total operation time.
def r3(idle_time: float, total_time: float) -> bool:
    if idle_time <= total_time:
        return True
    else:
        return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r4(total_stops: int, pto_stops: int) -> bool:
    if total_stops >= pto_stops:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def r5(axle2_load: float, payload: float) -> bool:
    if axle2_load >= payload:
        return True
    else:
        return False

# Axle 3's load must always be equal to or greater than the payload.
def r6(axle3_load: float, payload: float) -> bool:
    if axle3_load >= payload:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
PTO operation time cannot be greater than the total operation time.
Driving time must always be less than or equal to the total operation time.
The total stop count must not be lower than the count of stops where PTO is engaged.
Payload must remain below or equal to the load carried by axle 2.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";"

Here is the Python3 code based on the given input text:

```
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption < 5:
        return False
    else:
        return True

# PTO operation time cannot be greater than the total operation time.
def r2(pto_operation_time: float, total_operation_time: float) -> bool:
    if pto_operation_time > total_operation_time:
        return False
    else:
        return True

# Driving time must always be less than or equal to the total operation time.
def r3(driving_time: float, total_operation_time: float) -> bool:
    if driving_time > total_operation_time:
        return False
    else:
        return True

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r4(total_stop_count: int, pto_stop_count: int) -> bool:
    if total_stop_count < pto_stop_count:
        return False
    else:
        return True

# Payload must remain below or equal to the load carried by axle 2.
def r5(payload: float, axle2_load: float) -> bool:
    if payload > axle2_load:
        return False
    else:
        return True

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r6(total_operation_time: float, pto_operation_time: float, idle_time: float, driving_time: float) -> bool:
    if total_operation_time < pto_operation_time + idle_time + driving_time:
        return False
    else:
        return True
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
Total operation time shouldn’t be lower than PTO operation time.
Idle time should be less than or equal to the total operation time.
The total stop count must not be lower than the count of stops where PTO is engaged.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";"

Here is the Python3 code based on the given input text:

```
# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(km: float) -> bool:
    if km >= 20:
        return True
    else:
        return False

# Total operation time shouldn’t be lower than PTO operation time.
def r2(tot: float, pto: float) -> bool:
    if tot >= pto:
        return True
    else:
        return False

# Idle time should be less than or equal to the total operation time.
def r3(idle: float, tot: float) -> bool:
    if idle <= tot:
        return True
    else:
        return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r4(stops: int, pto_stops: int) -> bool:
    if stops >= pto_stops:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def r5(axle1: float, axle2: float) -> bool:
    if axle1 <= axle2:
        return True
    else:
        return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r6(tot: float, pto: float, idle: float, driving: float) -> bool:
    if tot >= pto + idle + driving:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
The total operation duration must not be lower than the PTO operation time.
The total operation duration must not be lower than the idle time.
Driving time cannot be greater than the total operation time.
The weight on axle 1 cannot surpass the weight on axle 2.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"

Here is the Python3 code for the given input text:

# The vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r1(fuel_consumption: float, distance: float) -> bool:
    if distance >= 20 and fuel_consumption >= 5:
        return True
    else:
        return False

# The total operation duration must not be lower than the PTO operation time.
def r2(total_operation_time: float, pto_operation_time: float) -> bool:
    if total_operation_time >= pto_operation_time:
        return True
    else:
        return False

# The total operation duration must not be lower than the idle time.
def r3(total_operation_time: float, idle_time: float) -> bool:
    if total_operation_time >= idle_time:
        return True
    else:
        return False

# Driving time cannot be greater than the total operation time.
def r4(driving_time: float, total_operation_time: float) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r5(axle1_weight: float, axle2_weight: float) -> bool:
    if axle1_weight <= axle2_weight:
        return True
    else:
        return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r6(pto_operation_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
    if pto_operation_time + idle_time + driving_time <= total_operation_time:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: The total operation duration must not be lower than the PTO operation time.
The total operation duration must not be lower than the idle time.
Total operation time should shouldn’t be lower than driving time.
Stops with PTO engaged should never outnumber total stops.
The payload must not exceed the load carried by axle 3.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";"

Here is the Python3 code based on the given input text:

```
# The total operation duration must not be lower than the PTO operation time.
def r1(total_operation_time: float, pto_operation_time: float) -> bool:
    if total_operation_time >= pto_operation_time:
        return True
    else:
        return False

# The total operation duration must not be lower than the idle time.
def r2(total_operation_time: float, idle_time: float) -> bool:
    if total_operation_time >= idle_time:
        return True
    else:
        return False

# Total operation time should shouldn’t be lower than driving time.
def r3(total_operation_time: float, driving_time: float) -> bool:
    if total_operation_time >= driving_time:
        return True
    else:
        return False

# Stops with PTO engaged should never outnumber total stops.
def r4(pto_stops: int, total_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def r5(payload: float, load_axle3: float) -> bool:
    if payload <= load_axle3:
        return True
    else:
        return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r6(total_operation_time: float, pto_operation_time: float, idle_time: float, driving_time: float) -> bool:
    if total_operation_time >= pto_operation_time + idle_time + driving_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
PTO operation time should be less than or equal to the total operation time.
Total operation time should shouldn’t be lower than driving time.
Stops with PTO engaged cannot outnumber the total stops.
The payload must always be smaller than or equal to the load on axle 2.
The payload must always be smaller than or equal to the load on axle 3.
";"

Here is the Python3 code based on the given input text:

```
# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def r1(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption / distance >= 0.4:
        return True
    else:
        return False

# PTO operation time should be less than or equal to the total operation time.
def r2(pto_operation_time: float, total_operation_time: float) -> bool:
    if pto_operation_time <= total_operation_time:
        return True
    else:
        return False

# Total operation time should shouldn’t be lower than driving time.
def r3(total_operation_time: float, driving_time: float) -> bool:
    if total_operation_time >= driving_time:
        return True
    else:
        return False

# Stops with PTO engaged cannot outnumber the total stops.
def r4(pto_stops: int, total_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 2.
def r5(payload: float, load_axle2: float) -> bool:
    if payload <= load_axle2:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 3.
def r6(payload: float, load_axle3: float) -> bool:
    if payload <= load_axle3:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: PTO operation time must be less than or equal to the total operation time.
Idle time must always be less than or equal to the total operation time.
The total operation durationmust not be lower than the driving time.
The load supported by axle 1 cannot exceed that of axle 3.
The payload must always be smaller than or equal to the load on axle 2.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"

Here is the Python3 code based on the given input text:

```
# PTO operation time must be less than or equal to the total operation time.
def r1(pto: float, total_operation_time: float) -> bool:
    if pto <= total_operation_time:
        return True
    else:
        return False

# Idle time must always be less than or equal to the total operation time.
def r2(idle: float, total_operation_time: float) -> bool:
    if idle <= total_operation_time:
        return True
    else:
        return False

# The total operation duration must not be lower than the driving time.
def r3(total_operation_time: float, driving_time: float) -> bool:
    if total_operation_time >= driving_time:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 3.
def r4(axle1: float, axle3: float) -> bool:
    if axle1 <= axle3:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 2.
def r5(payload: float, axle2: float) -> bool:
    if payload <= axle2:
        return True
    else:
        return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r6(total_operation_time: float, pto: float, idle: float, driving_time: float) -> bool:
    if total_operation_time >= pto + idle + driving_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: The total operation duration must not be lower than the idle time.
Driving time cannot be greater than the total operation time.
Stops with PTO engaged should never outnumber total stops.
The weight on axle 1 cannot surpass the weight on axle 2.
The weight on axle 1 cannot surpass the weight on axle 3.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";"

Here is the Python3 code based on the given input text:

```
# The total operation duration must not be lower than the idle time.
def r1(total_operation_time: float, idle_time: float) -> bool:
    if total_operation_time >= idle_time:
        return True
    else:
        return False

# Driving time cannot be greater than the total operation time.
def r2(driving_time: float, total_operation_time: float) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False

# Stops with PTO engaged should never outnumber total stops.
def r3(pto_stops: int, total_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r4(axle1_weight: float, axle2_weight: float) -> bool:
    if axle1_weight <= axle2_weight:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r5(axle1_weight: float, axle3_weight: float) -> bool:
    if axle1_weight <= axle3_weight:
        return True
    else:
        return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r6(total_operation_time: float, pto_operation_time: float, idle_time: float, driving_time: float) -> bool:
    if total_operation_time >= pto_operation_time + idle_time + driving_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: Idle time cannot be greater than the total operation time.
Driving time should be less than or equal to the total operation time.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
The load on axle 1 must not surpass the load on axle 3.
Payload must remain below or equal to the load carried by axle 2.
The payload must always be smaller than or equal to the load on axle 3.
";"

Here is the Python3 code based on the given input text:

```
# Idle time cannot be greater than the total operation time.
def r1(idle_time: float, total_operation_time: float) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# Driving time should be less than or equal to the total operation time.
def r2(driving_time: float, total_operation_time: float) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def r3(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load <= axle2_load:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 3.
def r4(axle1_load: float, axle3_load: float) -> bool:
    if axle1_load <= axle3_load:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def r5(payload: float, axle2_load: float) -> bool:
    if payload <= axle2_load:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 3.
def r6(payload: float, axle3_load: float) -> bool:
    if payload <= axle3_load:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
Total operation time should shouldn’t be lower than driving time.
The number of stops where PTO is engaged must not exceed the overall stop count.
The weight on axle 1 cannot surpass the weight on axle 3.
Payload must remain below or equal to the load carried by axle 2.
Payload must remain below or equal to the load carried by axle 3.
";"

Here is the Python3 code based on the given input text:

```
# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r1(fuel: float, distance: float) -> bool:
    if distance >= 20 and fuel < 0.4:
        return False
    else:
        return True

# Total operation time should shouldn’t be lower than driving time.
def r2(operation_time: float, driving_time: float) -> bool:
    if operation_time >= driving_time:
        return True
    else:
        return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r3(pto_stops: int, overall_stops: int) -> bool:
    if pto_stops <= overall_stops:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r4(axle1: float, axle3: float) -> bool:
    if axle1 <= axle3:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def r5(payload: float, axle2: float) -> bool:
    if payload <= axle2:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 3.
def r6(payload: float, axle3: float) -> bool:
    if payload <= axle3:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
Total operation time shouldn’t be lower than PTO operation time.
PTO-engaged stops cannot exceed the total number of stops.
The load on axle 1 must not surpass the load on axle 2.
The weight on axle 1 cannot surpass the weight on axle 3.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"

Here is the Python3 code based on the given input text:

```
# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r1(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption < 0.4:
        return False
    else:
        return True

# Total operation time shouldn’t be lower than PTO operation time.
def r2(total_operation_time: float, pto_operation_time: float) -> bool:
    if total_operation_time < pto_operation_time:
        return False
    else:
        return True

# PTO-engaged stops cannot exceed the total number of stops.
def r3(pto_engaged_stops: float, total_stops: float) -> bool:
    if ptos_stops > total_stops:
        return False
    else:
        return True

# The load on axle 1 must not surpass the load on axle 2.
def r4(load_axle1: float, load_axle2: float) -> bool:
    if load_axle1 > load_axle2:
        return False
    else:
        return True

# The weight on axle 1 cannot surpass the weight on axle 3.
def r5(weight_axle1: float, weight_axle3: float) -> bool:
    if weight_axle1 > weight_axle3:
        return False
    else:
        return True

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r6(total_operation_time: float, pto_operation_time: float, idle_operation_time: float, driving_operation_time: float) -> bool:
    if total_operation_time < pto_operation_time + idle_operation_time + driving_operation_time:
        return False
    else:
        return True
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
PTO operation time must be less than or equal to the total operation time.
Idle time should be less than or equal to the total operation time.
The weight on axle 1 cannot surpass the weight on axle 3.
Axle 2's load must always be equal to or greater than the payload.
";"

Here is the Python3 code based on the given input text:

```
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption < 5:
        return False
    else:
        return True

# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r2(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption < 40:
        return False
    else:
        return True

# PTO operation time must be less than or equal to the total operation time.
def r3(pto_operation_time: float, total_operation_time: float) -> bool:
    if pto_operation_time > total_operation_time:
        return False
    else:
        return True

# Idle time should be less than or equal to the total operation time.
def r4(idle_time: float, total_operation_time: float) -> bool:
    if idle_time > total_operation_time:
        return False
    else:
        return True

# The weight on axle 1 cannot surpass the weight on axle 3.
def r5(axle1_weight: float, axle3_weight: float) -> bool:
    if axle1_weight > axle3_weight:
        return False
    else:
        return True

# Axle 2's load must always be equal to or greater than the payload.
def r6(axle2_load: float, payload: float) -> bool:
    if axle2_load < payload:
        return False
    else:
        return True
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
Axle 1's load cannot exceed Axle 3's load.
Payload must remain below or equal to the load carried by axle 2.
The payload must always be smaller than or equal to the load on axle 3.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";"

Here is the Python3 code for the given input text:

```
# The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r1(fuel: float, distance: float) -> bool:
    if distance >= 20 and fuel >= 5:
        return True
    else:
        return False

# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r2(fuel: float, distance: float) -> bool:
    if distance >= 20 and fuel / distance >= 0.4:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 3's load.
def r3(axle1: float, axle3: float) -> bool:
    if axle1 <= axle3:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def r4(payload: float, axle2: float) -> bool:
    if payload <= axle2:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 3.
def r5(payload: float, axle3: float) -> bool:
    if payload <= axle3:
        return True
    else:
        return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r6(total_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    if total_time >= pto_time + idle_time + driving_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
PTO operation time should be less than or equal to the total operation time.
Idle time should be less than or equal to the total operation time.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
The weight on axle 1 cannot surpass the weight on axle 3.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"

Here is the Python3 code based on the given input text:

```
# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r1(a: float) -> bool:
    if a >= 0.4:
        return True
    else:
        return False

# PTO operation time should be less than or equal to the total operation time.
def r2(t1: float, t2: float) -> bool:
    if t1 <= t2:
        return True
    else:
        return False

# Idle time should be less than or equal to the total operation time.
def r3(i: float, t2: float) -> bool:
    if i <= t2:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def r4(l1: float, l2: float) -> bool:
    if l1 <= l2:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r5(l1: float, l3: float) -> bool:
    if l1 <= l3:
        return True
    else:
        return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r6(t1: float, i: float, t2: float) -> bool:
    if t1 + i <= t2:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
Total operation time shouldn’t be lower than PTO operation time.
The total stop count must not be lower than the count of stops where PTO is engaged.
The load on axle 1 must not surpass the load on axle 3.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";"

Here is the Python3 code based on the given input text:

```
# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(fuel_consumption: float, distance: float) -> bool:
    if distance >= 20 and fuel_consumption >= 0.5:
        return True
    else:
        return False

# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r2(fuel_consumption: float, distance: float) -> bool:
    if distance >= 20 and fuel_consumption >= 0.4:
        return True
    else:
        return False

# Total operation time shouldn’t be lower than PTO operation time.
def r3(operation_time: float, pto_operation_time: float) -> bool:
    if operation_time >= pto_operation_time:
        return True
    else:
        return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r4(stop_count: int, pto_stop_count: int) -> bool:
    if stop_count >= pto_stop_count:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 3.
def r5(axle1_load: float, axle3_load: float) -> bool:
    if axle1_load <= axle3_load:
        return True
    else:
        return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r6(operation_time: float, pto_operation_time: float, idle_time: float, driving_time: float) -> bool:
    if operation_time >= pto_operation_time + idle_time + driving_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
Idle time should be less than or equal to the total operation time.
Stops with PTO engaged should never outnumber total stops.
The load supported by axle 1 cannot exceed that of axle 2.
The payload must always be smaller than or equal to the load on axle 3.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";"

Here is the Python3 code for the given natural language reasoning text:

```
# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r1(fuel: float, distance: float) -> bool:
    if distance >= 20 and fuel / distance >= 0.4:
        return True
    else:
        return False

# Idle time should be less than or equal to the total operation time.
def r2(idle: float, operation: float) -> bool:
    if idle <= operation:
        return True
    else:
        return False

# Stops with PTO engaged should never outnumber total stops.
def r3(pto_stops: int, total_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r4(axle1: float, axle2: float) -> bool:
    if axle1 <= axle2:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 3.
def r5(payload: float, axle3: float) -> bool:
    if payload <= axle3:
        return True
    else:
        return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r6(operation: float, pto: float, idle: float, driving: float) -> bool:
    if operation >= pto + idle + driving:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
PTO operation time should be less than or equal to the total operation time.
Idle time should be less than or equal to the total operation time.
Driving time cannot be greater than the total operation time.
Axle 1's load cannot exceed Axle 2's load.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
";"

Here is the Python3 code based on the given input text:

```
# The vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r1(fuel_consumption: float, distance: float) -> bool:
    if distance >= 20 and fuel_consumption >= 5:
        return True
    else:
        return False

# PTO operation time should be less than or equal to the total operation time.
def r2(pto_time: float, total_time: float) -> bool:
    if pto_time <= total_time:
        return True
    else:
        return False

# Idle time should be less than or equal to the total operation time.
def r3(idle_time: float, total_time: float) -> bool:
    if idle_time <= total_time:
        return True
    else:
        return False

# Driving time cannot be greater than the total operation time.
def r4(driving_time: float, total_time: float) -> bool:
    if driving_time <= total_time:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 2's load.
def r5(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load <= axle2_load:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r6(axle1_load: float, axle3_load: float) -> bool:
    if axle1_load <= axle3_load:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
The total operation durationmust not be lower than the driving time.
Stops with PTO engaged cannot outnumber the total stops.
Axle 1's load cannot exceed Axle 3's load.
The payload must always be smaller than or equal to the load on axle 3.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";"

Here is the Python3 code based on the given input text:

```
# The vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r1(fuel_consumption: float, distance: float) -> bool:
    if distance >= 20 and fuel_consumption >= 5:
        return True
    else:
        return False

# The total operation duration must not be lower than the driving time.
def r2(total_operation_duration: float, driving_time: float) -> bool:
    if total_operation_duration >= driving_time:
        return True
    else:
        return False

# Stops with PTO engaged cannot outnumber the total stops.
def r3(pto_stops: int, total_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 3's load.
def r4(axle1_load: float, axle3_load: float) -> bool:
    if axle1_load <= axle3_load:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 3.
def r5(payload: float, axle3_load: float) -> bool:
    if payload <= axle3_load:
        return True
    else:
        return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r6(total_operation_duration: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    if total_operation_duration >= pto_time + idle_time + driving_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
The total operation duration must not be lower than the PTO operation time.
The total operation durationmust not be lower than the driving time.
Axle 1's load cannot exceed Axle 2's load.
The weight on axle 1 cannot surpass the weight on axle 3.
Axle 3's load must always be equal to or greater than the payload.
";"

Here is the Python3 code for the given input text:

```
# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(km: float, fuel: float) -> bool:
    if km >= 20 and fuel >= 5:
        return True
    else:
        return False

# The total operation duration must not be lower than the PTO operation time.
def r2(total_operation_duration: float, pto_operation_time: float) -> bool:
    if total_operation_duration >= pto_operation_time:
        return True
    else:
        return False

# The total operation duration must not be lower than the driving time.
def r3(total_operation_duration: float, driving_time: float) -> bool:
    if total_operation_duration >= driving_time:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 2's load.
def r4(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load <= axle2_load:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r5(axle1_weight: float, axle3_weight: float) -> bool:
    if axle1_weight <= axle3_weight:
        return True
    else:
        return False

# Axle 3's load must always be equal to or greater than the payload.
def r6(axle3_load: float, payload: float) -> bool:
    if axle3_load >= payload:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
Idle time cannot be greater than the total operation time.
Driving time must always be less than or equal to the total operation time.
Stops with PTO engaged cannot outnumber the total stops.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"

Here is the Python3 code based on the given input text:

```
# If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption / distance >= 0.05:
        return True
    else:
        return False

# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def r2(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption / (distance / 100) >= 0.4:
        return True
    else:
        return False

# Idle time cannot be greater than the total operation time.
def r3(idle_time: float, total_operation_time: float) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# Driving time must always be less than or equal to the total operation time.
def r4(driving_time: float, total_operation_time: float) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False

# Stops with PTO engaged cannot outnumber the total stops.
def r5(pto_stops: int, total_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r6(pto_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
    if pto_time + idle_time + driving_time >= total_operation_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
Total operation time shouldn’t be lower than idle time.
The total stop count must not be lower than the count of stops where PTO is engaged.
The weight on axle 1 cannot surpass the weight on axle 2.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
The payload must always be smaller than or equal to the load on axle 3.
";"

Here is the Python3 code for the given natural language reasoning text:

```
# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r1(a: float, b: float) -> bool:
    if a >= 20 and b / a >= 0.4:
        return True
    else:
        return False

# Total operation time shouldn’t be lower than idle time.
def r2(o: float, i: float) -> bool:
    if o >= i:
        return True
    else:
        return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r3(t: float, p: float) -> bool:
    if t >= p:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r4(w1: float, w2: float) -> bool:
    if w1 <= w2:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r5(l1: float, l3: float) -> bool:
    if l1 <= l3:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 3.
def r6(p: float, l3: float) -> bool:
    if p <= l3:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
Total operation time shouldn’t be lower than idle time.
Stops with PTO engaged cannot outnumber the total stops.
Axle 1's load cannot exceed Axle 2's load.
Payload must remain below or equal to the load carried by axle 3.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";"

Here is the Python3 code for the given input text:

```
# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(km: float, fuel: float) -> bool:
    if km >= 20 and fuel >= 5:
        return True
    else:
        return False

# Total operation time shouldn’t be lower than idle time.
def r2(operation_time: float, idle_time: float) -> bool:
    if operation_time >= idle_time:
        return True
    else:
        return False

# Stops with PTO engaged cannot outnumber the total stops.
def r3(pto_stops: int, total_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 2's load.
def r4(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load <= axle2_load:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 3.
def r5(payload: float, axle3_load: float) -> bool:
    if payload <= axle3_load:
        return True
    else:
        return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r6(operation_time: float, pto_operation_time: float, idle_time: float, driving_time: float) -> bool:
    if operation_time >= pto_operation_time + idle_time + driving_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
Total operation time shouldn’t be lower than idle time.
PTO-engaged stops cannot exceed the total number of stops.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
The payload cannot exceed the capacity of axle 2.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"

Here is the Python3 code for the given input text:

# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(km: float, fuel: float) -> bool:
    if km >= 20 and fuel >= 5:
        return True
    else:
        return False

# Total operation time shouldn’t be lower than idle time.
def r2(op_time: float, idle_time: float) -> bool:
    if op_time >= idle_time:
        return True
    else:
        return False

# PTO-engaged stops cannot exceed the total number of stops.
def r3(pto_stops: float, total_stops: float) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def r4(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load <= axle2_load:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 2.
def r5(payload: float, axle2_capacity: float) -> bool:
    if payload <= axle2_capacity:
        return True
    else:
        return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r6(op_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    if op_time >= pto_time + idle_time + driving_time:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
The total operation durationmust not be lower than the driving time.
The weight on axle 1 cannot surpass the weight on axle 2.
The load supported by axle 1 cannot exceed that of axle 3.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"

Here is the Python3 code based on the given input text:

```
# The vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r1(fuel_consumption: float, distance: float) -> bool:
    if distance >= 20 and fuel_consumption >= 0.05:
        return True
    else:
        return False

# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r2(fuel_consumption: float) -> bool:
    if fuel_consumption >= 0.4:
        return True
    else:
        return False

# The total operation duration must not be lower than the driving time.
def r3(operation_time: float, driving_time: float) -> bool:
    if operation_time >= driving_time:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r4(axle1: float, axle2: float) -> bool:
    if axle1 <= axle2:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 3.
def r5(axle1: float, axle3: float) -> bool:
    if axle1 <= axle3:
        return True
    else:
        return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r6(operation_time: float, pto: float, idle: float, driving_time: float) -> bool:
    if operation_time >= pto + idle + driving_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
The total operation duration must not be lower than the idle time.
PTO-engaged stops cannot exceed the total number of stops.
Axle 2's load must always be equal to or greater than the payload.
The payload cannot exceed the capacity of axle 3.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";"

Here is the Python3 code based on the given input text:

```
# If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
    if distance / fuel_consumption >= 4:
        return True
    else:
        return False

# The total operation duration must not be lower than the idle time.
def r2(total_operation_duration: float, idle_time: float) -> bool:
    if total_operation_duration >= idle_time:
        return True
    else:
        return False

# PTO-engaged stops cannot exceed the total number of stops.
def r3(pto_stops: float, total_stops: float) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def r4(axle2_load: float, payload: float) -> bool:
    if axle2_load >= payload:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 3.
def r5(payload: float, axle3_capacity: float) -> bool:
    if payload <= axle3_capacity:
        return True
    else:
        return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r6(total_operation_duration: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    if total_operation_duration >= pto_time + idle_time + driving_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
Total operation time shouldn’t be lower than PTO operation time.
The load on axle 1 must not surpass the load on axle 3.
Payload must remain below or equal to the load carried by axle 2.
The payload must always be smaller than or equal to the load on axle 3.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";"

Here is the Python3 code based on the given input text:

```
# If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
    if distance / fuel_consumption >= 4:
        return True
    else:
        return False

# Total operation time shouldn’t be lower than PTO operation time.
def r2(total_operation_time: float, pto_operation_time: float) -> bool:
    if total_operation_time >= pto_operation_time:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 3.
def r3(axle1_load: float, axle3_load: float) -> bool:
    if axle1_load <= axle3_load:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def r4(payload: float, axle2_load: float) -> bool:
    if payload <= axle2_load:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 3.
def r5(payload: float, axle3_load: float) -> bool:
    if payload <= axle3_load:
        return True
    else:
        return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r6(total_operation_time: float, pto_operation_time: float, idle_time: float, driving_time: float) -> bool:
    if total_operation_time >= pto_operation_time + idle_time + driving_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: PTO operation time should be less than or equal to the total operation time.
Driving time must always be less than or equal to the total operation time.
The number of stops where PTO is engaged must not exceed the overall stop count.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
The payload must always be smaller than or equal to the load on axle 3.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"

Here is the Python3 code based on the given input text:

```
# PTO operation time should be less than or equal to the total operation time.
def r1(pto: float, total: float) -> bool:
    if pto <= total:
        return True
    else:
        return False

# Driving time must always be less than or equal to the total operation time.
def r2(driving: float, total: float) -> bool:
    if driving <= total:
        return True
    else:
        return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r3(pto_stops: int, overall_stops: int) -> bool:
    if pto_stops <= overall_stops:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def r4(axle1: float, axle2: float) -> bool:
    if axle1 <= axle2:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 3.
def r5(payload: float, axle3: float) -> bool:
    if payload <= axle3:
        return True
    else:
        return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r6(pto_time: float, idle_time: float, driving_time: float, total: float) -> bool:
    if pto_time + idle_time + driving_time <= total:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
PTO operation time must be less than or equal to the total operation time.
The total operation durationmust not be lower than the driving time.
The load supported by axle 1 cannot exceed that of axle 2.
Payload must remain below or equal to the load carried by axle 2.
The payload must always be smaller than or equal to the load on axle 3.
";"

Here is the Python3 code for the given input text:

# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(km: float, fuel: float) -> bool:
    if km >= 20 and fuel >= 5:
        return True
    else:
        return False

# PTO operation time must be less than or equal to the total operation time.
def r2(pto: float, total: float) -> bool:
    if pto <= total:
        return True
    else:
        return False

# The total operation duration must not be lower than the driving time.
def r3(total: float, driving: float) -> bool:
    if total >= driving:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r4(axle1: float, axle2: float) -> bool:
    if axle1 <= axle2:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def r5(payload: float, axle2: float) -> bool:
    if payload <= axle2:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 3.
def r6(payload: float, axle3: float) -> bool:
    if payload <= axle3:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: Idle time should be less than or equal to the total operation time.
The total operation durationmust not be lower than the driving time.
The number of stops where PTO is engaged must not exceed the overall stop count.
The weight on axle 1 cannot surpass the weight on axle 3.
Payload must remain below or equal to the load carried by axle 2.
Axle 3's load must always be equal to or greater than the payload.
";"

Here is the Python3 code based on the given input text:

```
# Idle time should be less than or equal to the total operation time.
def r1(idle_time: float, total_operation_time: float) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# The total operation duration must not be lower than the driving time.
def r2(total_operation_time: float, driving_time: float) -> bool:
    if total_operation_time >= driving_time:
        return True
    else:
        return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r3(stops_with_pto: int, overall_stop_count: int) -> bool:
    if stops_with_pto <= overall_stop_count:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r4(weight_axle1: float, weight_axle3: float) -> bool:
    if weight_axle1 <= weight_axle3:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def r5(payload: float, load_axle2: float) -> bool:
    if payload <= load_axle2:
        return True
    else:
        return False

# Axle 3's load must always be equal to or greater than the payload.
def r6(load_axle3: float, payload: float) -> bool:
    if load_axle3 >= payload:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
Driving time cannot be greater than the total operation time.
PTO-engaged stops cannot exceed the total number of stops.
The load supported by axle 1 cannot exceed that of axle 2.
Payload must remain below or equal to the load carried by axle 3.
";"

Here is the Python3 code based on the given input text:

```
# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(t: float, f: float) -> bool:
    if f / t >= 0.05:
        return True
    else:
        return False

# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r2(t: float, f: float) -> bool:
    if f / t >= 0.4:
        return True
    else:
        return False

# Driving time cannot be greater than the total operation time.
def r3(d: float, o: float) -> bool:
    if d <= o:
        return True
    else:
        return False

# PTO-engaged stops cannot exceed the total number of stops.
def r4(p: float, s: float) -> bool:
    if p <= s:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r5(a1: float, a2: float) -> bool:
    if a1 <= a2:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 3.
def r6(p: float, a3: float) -> bool:
    if p <= a3:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: Driving time must always be less than or equal to the total operation time.
PTO-engaged stops cannot exceed the total number of stops.
The load supported by axle 1 cannot exceed that of axle 2.
The payload must always be smaller than or equal to the load on axle 2.
The payload must not exceed the load carried by axle 3.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";"

Here is the Python3 code based on the given input text:

```
# Driving time must always be less than or equal to the total operation time.
def r1(driving_time: float, total_operation_time: float) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False

# PTO-engaged stops cannot exceed the total number of stops.
def r2(pto_engaged_stops: int, total_stops: int) -> bool:
    if ptos_stops <= total_stops:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r3(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load <= axle2_load:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 2.
def r4(payload: float, axle2_load: float) -> bool:
    if payload <= axle2_load:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def r5(payload: float, axle3_load: float) -> bool:
    if payload <= axle3_load:
        return True
    else:
        return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r6(total_operation_time: float, pto_operation_time: float, idle_time: float, driving_time: float) -> bool:
    if total_operation_time >= pto_operation_time + idle_time + driving_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
The total operation duration must not be lower than the idle time.
Stops with PTO engaged should never outnumber total stops.
The load on axle 1 must not surpass the load on axle 2.
The payload must not exceed the load carried by axle 3.
";"

Here is the Python3 code based on the given input text:

```
# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(t: float, f: float) -> bool:
    if t >= 20 and f / t >= 0.05:
        return True
    else:
        return False

# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r2(t: float, f: float) -> bool:
    if t >= 20 and f / t >= 0.4:
        return True
    else:
        return False

# The total operation duration must not be lower than the idle time.
def r3(o: float, i: float) -> bool:
    if o >= i:
        return True
    else:
        return False

# Stops with PTO engaged should never outnumber total stops.
def r4(p: int, t: int) -> bool:
    if p <= t:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 2.
def r5(l1: float, l2: float) -> bool:
    if l1 <= l2:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def r6(p: float, l3: float) -> bool:
    if p <= l3:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
Axle 1's load cannot exceed Axle 2's load.
The load on axle 1 must not surpass the load on axle 3.
The payload must not exceed the load carried by axle 2.
The payload must not exceed the load carried by axle 3.
";"

Here is the Python3 code based on the given input text:

```
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption < 5:
        return False
    else:
        return True

# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def r2(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption < 0.4:
        return False
    else:
        return True

# Axle 1's load cannot exceed Axle 2's load.
def r3(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load > axle2_load:
        return False
    else:
        return True

# The load on axle 1 must not surpass the load on axle 3.
def r4(axle1_load: float, axle3_load: float) -> bool:
    if axle1_load > axle3_load:
        return False
    else:
        return True

# The payload must not exceed the load carried by axle 2.
def r5(payload: float, axle2_load: float) -> bool:
    if payload > axle2_load:
        return False
    else:
        return True

# The payload must not exceed the load carried by axle 3.
def r6(payload: float, axle3_load: float) -> bool:
    if payload > axle3_load:
        return False
    else:
        return True
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
Total operation time shouldn’t be lower than PTO operation time.
PTO-engaged stops cannot exceed the total number of stops.
The load on axle 1 must not surpass the load on axle 2.
Axle 2's load must always be equal to or greater than the payload.
The payload must always be smaller than or equal to the load on axle 3.
";"

Here is the Python3 code based on the given input text:

```
# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def r1(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption / distance >= 0.4:
        return True
    else:
        return False

# Total operation time shouldn’t be lower than PTO operation time.
def r2(total_operation_time: float, pto_operation_time: float) -> bool:
    if total_operation_time >= pto_operation_time:
        return True
    else:
        return False

# PTO-engaged stops cannot exceed the total number of stops.
def r3(pto_engaged_stops: float, total_stops: float) -> bool:
    if ptos_stops <= total_stops:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 2.
def r4(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load <= axle2_load:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def r5(axle2_load: float, payload: float) -> bool:
    if axle2_load >= payload:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 3.
def r6(payload: float, axle3_load: float) -> bool:
    if payload <= axle3_load:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
The total operation duration must not be lower than the PTO operation time.
Stops with PTO engaged cannot outnumber the total stops.
The load supported by axle 1 cannot exceed that of axle 3.
Payload must remain below or equal to the load carried by axle 2.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"

Here is the Python3 code based on the given input text:

```
# If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
    if distance / fuel_consumption >= 4:
        return True
    else:
        return False

# The total operation duration must not be lower than the PTO operation time.
def r2(total_operation_time: float, pto_operation_time: float) -> bool:
    if total_operation_time >= pto_operation_time:
        return True
    else:
        return False

# Stops with PTO engaged cannot outnumber the total stops.
def r3(pto_stops: int, total_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 3.
def r4(axle1_load: float, axle3_load: float) -> bool:
    if axle1_load <= axle3_load:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def r5(payload: float, axle2_load: float) -> bool:
    if payload <= axle2_load:
        return True
    else:
        return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r6(pto_operation_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
    if pto_operation_time + idle_time + driving_time <= total_operation_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
PTO operation time cannot be greater than the total operation time.
Total operation time shouldn’t be lower than idle time.
Payload must remain below or equal to the load carried by axle 2.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";"

Here is the Python3 code based on the given input text:

```
# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(traveled_km: float, fuel_consumption: float) -> bool:
    if traveled_km >= 20 and fuel_consumption >= 5:
        return True
    else:
        return False

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r2(traveled_km: float, fuel_consumption_rate: float) -> bool:
    if traveled_km >= 20 and fuel_consumption_rate >= 0.4:
        return True
    else:
        return False

# PTO operation time cannot be greater than the total operation time.
def r3(pto_time: float, total_time: float) -> bool:
    if pto_time <= total_time:
        return True
    else:
        return False

# Total operation time shouldn’t be lower than idle time.
def r4(total_time: float, idle_time: float) -> bool:
    if total_time >= idle_time:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def r5(payload: float, load_axle2: float) -> bool:
    if payload <= load_axle2:
        return True
    else:
        return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r6(total_time: float, pto_time: float, idle_time: float) -> bool:
    if total_time >= pto_time + idle_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
Total operation time shouldn’t be lower than PTO operation time.
Driving time cannot be greater than the total operation time.
Stops with PTO engaged should never outnumber total stops.
The load on axle 1 must not surpass the load on axle 3.
Payload must remain below or equal to the load carried by axle 2.
";"

Here is the Python3 code based on the given input text:

```
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption >= 5:
        return True
    else:
        return False

# Total operation time shouldn’t be lower than PTO operation time.
def r2(total_operation_time: float, pto_operation_time: float) -> bool:
    if total_operation_time >= pto_operation_time:
        return True
    else:
        return False

# Driving time cannot be greater than the total operation time.
def r3(driving_time: float, total_operation_time: float) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False

# Stops with PTO engaged should never outnumber total stops.
def r4(pto_stops: int, total_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 3.
def r5(load_axle1: float, load_axle3: float) -> bool:
    if load_axle1 <= load_axle3:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def r6(payload: float, load_axle2: float) -> bool:
    if payload <= load_axle2:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
Total operation time shouldn’t be lower than PTO operation time.
Idle time cannot be greater than the total operation time.
The load supported by axle 1 cannot exceed that of axle 2.
The weight on axle 1 cannot surpass the weight on axle 3.
Payload must remain below or equal to the load carried by axle 2.
";"

Here is the Python3 code based on the given input text:

```
# The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r1(fuel: float, distance: float) -> bool:
    if distance >= 20 and fuel >= 5:
        return True
    else:
        return False

# Total operation time shouldn’t be lower than PTO operation time.
def r2(total_time: float, pto_time: float) -> bool:
    if total_time >= pto_time:
        return True
    else:
        return False

# Idle time cannot be greater than the total operation time.
def r3(idle_time: float, total_time: float) -> bool:
    if idle_time <= total_time:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r4(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load <= axle2_load:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r5(axle1_weight: float, axle3_weight: float) -> bool:
    if axle1_weight <= axle3_weight:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def r6(payload: float, axle2_load: float) -> bool:
    if payload <= axle2_load:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
Total operation time shouldn’t be lower than PTO operation time.
The total operation duration must not be lower than the idle time.
Stops with PTO engaged should never outnumber total stops.
The load supported by axle 1 cannot exceed that of axle 3.
Payload must remain below or equal to the load carried by axle 3.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"

Here is the Python3 code based on the given input text:

```
# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(km: float, fuel: float) -> bool:
    if km >= 20 and fuel >= 5:
        return True
    else:
        return False

# Total operation time shouldn’t be lower than PTO operation time.
def r2(ot: float, pto: float) -> bool:
    if ot >= pto:
        return True
    else:
        return False

# The total operation duration must not be lower than the idle time.
def r3(ot: float, idle: float) -> bool:
    if ot >= idle:
        return True
    else:
        return False

# Stops with PTO engaged should never outnumber total stops.
def r4(pto_stops: int, total_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 3.
def r5(axle1: float, axle3: float) -> bool:
    if axle1 <= axle3:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 3.
def r6(payload: float, axle3: float) -> bool:
    if payload <= axle3:
        return True
    else:
        return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r7(ot: float, pto: float, idle: float, driving: float) -> bool:
    if ot >= pto + idle + driving:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
PTO operation time must be less than or equal to the total operation time.
Idle time cannot be greater than the total operation time.
Stops with PTO engaged cannot outnumber the total stops.
Axle 1's load cannot exceed Axle 2's load.
Axle 1's load cannot exceed Axle 3's load.
Axle 2's load must always be equal to or greater than the payload.
";"

Here is the Python3 code based on the given input text:

```
# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r1(a: float, b: float) -> bool:
    if a >= 20 and b < 0.4:
        return False
    else:
        return True

# PTO operation time must be less than or equal to the total operation time.
def r2(pto: float, total: float) -> bool:
    if pto <= total:
        return True
    else:
        return False

# Idle time cannot be greater than the total operation time.
def r3(idle: float, total: float) -> bool:
    if idle <= total:
        return True
    else:
        return False

# Stops with PTO engaged cannot outnumber the total stops.
def r4(pto_stops: int, total_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 2's load.
def r5(axle1: float, axle2: float) -> bool:
    if axle1 <= axle2:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 3's load.
def r6(axle1: float, axle3: float) -> bool:
    if axle1 <= axle3:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def r7(axle2: float, payload: float) -> bool:
    if axle2 >= payload:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
The total stop count must not be lower than the count of stops where PTO is engaged.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
The payload cannot exceed the capacity of axle 2.
The payload cannot exceed the capacity of axle 3.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"

Here is the Python3 code based on the given input text:

```
# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r1(fuel: float, distance: float) -> bool:
    if distance >= 20 and fuel / distance >= 0.4:
        return True
    else:
        return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r2(total_stops: int, pto_stops: int) -> bool:
    if total_stops >= pto_stops:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def r3(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load <= axle2_load:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r4(axle1_load: float, axle3_load: float) -> bool:
    if axle1_load <= axle3_load:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 2.
def r5(payload: float, axle2_capacity: float) -> bool:
    if payload <= axle2_capacity:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 3.
def r6(payload: float, axle3_capacity: float) -> bool:
    if payload <= axle3_capacity:
        return True
    else:
        return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r7(pto_time: float, idle_time: float, driving_time: float, total_time: float) -> bool:
    if pto_time + idle_time + driving_time <= total_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
PTO operation time must be less than or equal to the total operation time.
Idle time should be less than or equal to the total operation time.
Driving time must always be less than or equal to the total operation time.
Axle 1's load cannot exceed Axle 3's load.
Payload must remain below or equal to the load carried by axle 2.
";"

Here is the Python3 code based on the given input text:

```
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption >= 5:
        return True
    else:
        return False

# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r2(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption >= 0.4:
        return True
    else:
        return False

# PTO operation time must be less than or equal to the total operation time.
def r3(pto_operation_time: float, total_operation_time: float) -> bool:
    if pto_operation_time <= total_operation_time:
        return True
    else:
        return False

# Idle time should be less than or equal to the total operation time.
def r4(idle_time: float, total_operation_time: float) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# Driving time must always be less than or equal to the total operation time.
def r5(driving_time: float, total_operation_time: float) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 3's load.
def r6(axle1_load: float, axle3_load: float) -> bool:
    if axle1_load <= axle3_load:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def r7(payload: float, axle2_load: float) -> bool:
    if payload <= axle2_load:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
PTO operation time should be less than or equal to the total operation time.
Stops with PTO engaged should never outnumber total stops.
Axle 1's load cannot exceed Axle 3's load.
The payload must not exceed the load carried by axle 3.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"

Here is the Python3 code based on the given input text:

```
# The vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r1(fuel: float, distance: float) -> bool:
    if distance >= 20 and fuel >= 0.5:
        return True
    else:
        return False

# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r2(distance: float, fuel: float) -> bool:
    if distance >= 20 and fuel / distance >= 0.4:
        return True
    else:
        return False

# PTO operation time should be less than or equal to the total operation time.
def r3(pto: float, total: float) -> bool:
    if pto <= total:
        return True
    else:
        return False

# Stops with PTO engaged should never outnumber total stops.
def r4(pto_stops: int, total_stops: int) -> bool:
    if ptos_stops <= total_stops:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 3's load.
def r5(axle1: float, axle3: float) -> bool:
    if axle1 <= axle3:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def r6(payload: float, axle3: float) -> bool:
    if payload <= axle3:
        return True
    else:
        return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r7(pto: float, idle: float, driving: float) -> bool:
    if pto + idle + driving >= 0:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
PTO operation time must be less than or equal to the total operation time.
Stops with PTO engaged should never outnumber total stops.
The weight on axle 1 cannot surpass the weight on axle 2.
The payload must not exceed the load carried by axle 3.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"

Here is the Python3 code based on the given input text:

```
# If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
    if fuel_consumption / distance >= 0.05:
        return True
    else:
        return False

# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r2(distance: float, fuel_consumption: float) -> bool:
    if fuel_consumption * 100 / distance >= 40:
        return True
    else:
        return False

# PTO operation time must be less than or equal to the total operation time.
def r3(pto_time: float, total_time: float) -> bool:
    if pto_time <= total_time:
        return True
    else:
        return False

# Stops with PTO engaged should never outnumber total stops.
def r4(pto_stops: int, total_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r5(axle1_weight: float, axle2_weight: float) -> bool:
    if axle1_weight <= axle2_weight:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def r6(payload: float, axle3_load: float) -> bool:
    if payload <= axle3_load:
        return True
    else:
        return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r7(pto_time: float, idle_time: float, driving_time: float, total_time: float) -> bool:
    if pto_time + idle_time + driving_time <= total_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
The total operation duration must not be lower than the PTO operation time.
Total operation time shouldn’t be lower than idle time.
PTO-engaged stops cannot exceed the total number of stops.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
The payload must not exceed the load carried by axle 2.
The payload cannot exceed the capacity of axle 3.
";"

Here is the Python3 code based on the given input text:

```
# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r1(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption < 0.4:
        return False
    else:
        return True

# The total operation duration must not be lower than the PTO operation time.
def r2(total_operation_duration: float, pto_operation_time: float) -> bool:
    if total_operation_duration < pto_operation_time:
        return False
    else:
        return True

# Total operation time shouldn’t be lower than idle time.
def r3(total_operation_time: float, idle_time: float) -> bool:
    if total_operation_time < idle_time:
        return False
    else:
        return True

# PTO-engaged stops cannot exceed the total number of stops.
def r4(pto_engaged_stops: float, total_stops: float) -> bool:
    if ptos_stops > total_stops:
        return False
    else:
        return True

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r5(axle1_load: float, axle3_load: float) -> bool:
    if axle1_load > axle3_load:
        return False
    else:
        return True

# The payload must not exceed the load carried by axle 2.
def r6(payload: float, axle2_load: float) -> bool:
    if payload > axle2_load:
        return False
    else:
        return True

# The payload cannot exceed the capacity of axle 3.
def r7(payload: float, axle3_capacity: float) -> bool:
    if payload > axle3_capacity:
        return False
    else:
        return True
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
Total operation time shouldn’t be lower than idle time.
Driving time should be less than or equal to the total operation time.
The number of stops where PTO is engaged must not exceed the overall stop count.
The weight on axle 1 cannot surpass the weight on axle 2.
The load on axle 1 must not surpass the load on axle 3.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"

Here is the Python3 code based on the given input text:

```
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption >= 5:
        return True
    else:
        return False

# Total operation time shouldn’t be lower than idle time.
def r2(total_operation_time: float, idle_time: float) -> bool:
    if total_operation_time >= idle_time:
        return True
    else:
        return False

# Driving time should be less than or equal to the total operation time.
def r3(driving_time: float, total_operation_time: float) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r4(pto_stops: int, overall_stops: int) -> bool:
    if pto_stops <= overall_stops:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r5(axle1_weight: float, axle2_weight: float) -> bool:
    if axle1_weight <= axle2_weight:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 3.
def r6(axle1_load: float, axle3_load: float) -> bool:
    if axle1_load <= axle3_load:
        return True
    else:
        return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r7(pto_operation_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
    if pto_operation_time + idle_time + driving_time <= total_operation_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: Total operation time shouldn’t be lower than PTO operation time.
Idle time must always be less than or equal to the total operation time.
The total operation durationmust not be lower than the driving time.
Stops with PTO engaged should never outnumber total stops.
The weight on axle 1 cannot surpass the weight on axle 2.
The payload cannot exceed the capacity of axle 2.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"

Here is the Python3 code based on the given input text:

```
# Total operation time shouldn’t be lower than PTO operation time.
def r1(pto: float, total: float) -> bool:
    if total >= pto:
        return True
    else:
        return False

# Idle time must always be less than or equal to the total operation time.
def r2(idle: float, total: float) -> bool:
    if idle <= total:
        return True
    else:
        return False

# The total operation duration must not be lower than the driving time.
def r3(total: float, driving: float) -> bool:
    if total >= driving:
        return True
    else:
        return False

# Stops with PTO engaged should never outnumber total stops.
def r4(pto_stops: int, total_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r5(axle1: float, axle2: float) -> bool:
    if axle1 <= axle2:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 2.
def r6(payload: float, axle2: float) -> bool:
    if payload <= axle2:
        return True
    else:
        return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r7(pto: float, idle: float, driving: float, total: float) -> bool:
    if pto + idle + driving <= total:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: Idle time must always be less than or equal to the total operation time.
Driving time must always be less than or equal to the total operation time.
The total stop count must not be lower than the count of stops where PTO is engaged.
Axle 1's load cannot exceed Axle 2's load.
Axle 1's load cannot exceed Axle 3's load.
Axle 2's load must always be equal to or greater than the payload.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"

Here is the Python3 code based on the given input text:

```
# Idle time must always be less than or equal to the total operation time.
def r1(idle_time: float, total_operation_time: float) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# Driving time must always be less than or equal to the total operation time.
def r2(driving_time: float, total_operation_time: float) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r3(total_stop_count: int, pto_stop_count: int) -> bool:
    if total_stop_count >= pto_stop_count:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 2's load.
def r4(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load <= axle2_load:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 3's load.
def r5(axle1_load: float, axle3_load: float) -> bool:
    if axle1_load <= axle3_load:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def r6(axle2_load: float, payload: float) -> bool:
    if axle2_load >= payload:
        return True
    else:
        return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r7(pto_operation_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
    if pto_operation_time + idle_time + driving_time <= total_operation_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
The total operation duration must not be lower than the PTO operation time.
Idle time must always be less than or equal to the total operation time.
Total operation time should shouldn’t be lower than driving time.
The number of stops where PTO is engaged must not exceed the overall stop count.
The load on axle 1 must not surpass the load on axle 3.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";"

Here is the Python3 code based on the given input text:

```
# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(km: float, fuel: float) -> bool:
    if km >= 20 and fuel >= 5:
        return True
    else:
        return False

# The total operation duration must not be lower than the PTO operation time.
def r2(total_time: float, pto_time: float) -> bool:
    if total_time >= pto_time:
        return True
    else:
        return False

# Idle time must always be less than or equal to the total operation time.
def r3(idle_time: float, total_time: float) -> bool:
    if idle_time <= total_time:
        return True
    else:
        return False

# Total operation time should shouldn’t be lower than driving time.
def r4(total_time: float, driving_time: float) -> bool:
    if total_time >= driving_time:
        return True
    else:
        return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r5(pto_stops: int, overall_stops: int) -> bool:
    if pto_stops <= overall_stops:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 3.
def r6(axle1: float, axle3: float) -> bool:
    if axle1 <= axle3:
        return True
    else:
        return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r7(total_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    if total_time >= pto_time + idle_time + driving_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
Idle time should be less than or equal to the total operation time.
The load supported by axle 1 cannot exceed that of axle 2.
The load supported by axle 1 cannot exceed that of axle 3.
The payload must always be smaller than or equal to the load on axle 2.
Axle 3's load must always be equal to or greater than the payload.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";"

Here is the Python3 code based on the given input text:

```
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption >= 5:
        return True
    else:
        return False

# Idle time should be less than or equal to the total operation time.
def r2(idle_time: float, total_operation_time: float) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r3(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load <= axle2_load:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 3.
def r4(axle1_load: float, axle3_load: float) -> bool:
    if axle1_load <= axle3_load:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 2.
def r5(payload: float, axle2_load: float) -> bool:
    if payload <= axle2_load:
        return True
    else:
        return False

# Axle 3's load must always be equal to or greater than the payload.
def r6(axle3_load: float, payload: float) -> bool:
    if axle3_load >= payload:
        return True
    else:
        return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r7(total_operation_time: float, pto_operation_time: float, idle_time: float, driving_time: float) -> bool:
    if total_operation_time >= pto_operation_time + idle_time + driving_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
The total operation duration must not be lower than the PTO operation time.
The total operation durationmust not be lower than the driving time.
The number of stops where PTO is engaged must not exceed the overall stop count.
The load on axle 1 must not surpass the load on axle 2.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
Axle 3's load must always be equal to or greater than the payload.
";"

Here is the Python3 code based on the given input text:

```
# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r1(fuel: float, distance: float) -> bool:
    if distance >= 20 and fuel / distance >= 0.4:
        return True
    else:
        return False

# The total operation duration must not be lower than the PTO operation time.
def r2(total_operation_duration: float, pto_operation_time: float) -> bool:
    if total_operation_duration >= pto_operation_time:
        return True
    else:
        return False

# The total operation duration must not be lower than the driving time.
def r3(total_operation_duration: float, driving_time: float) -> bool:
    if total_operation_duration >= driving_time:
        return True
    else:
        return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r4(stops_with_pto: int, overall_stop_count: int) -> bool:
    if stops_with_pto <= overall_stop_count:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 2.
def r5(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load <= axle2_load:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r6(axle1_load: float, axle3_load: float) -> bool:
    if axle1_load <= axle3_load:
        return True
    else:
        return False

# Axle 3's load must always be equal to or greater than the payload.
def r7(axle3_load: float, payload: float) -> bool:
    if axle3_load >= payload:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: PTO operation time should be less than or equal to the total operation time.
The total operation duration must not be lower than the idle time.
Axle 1's load cannot exceed Axle 2's load.
Axle 1's load cannot exceed Axle 3's load.
The payload cannot exceed the capacity of axle 2.
The payload must always be smaller than or equal to the load on axle 3.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"

Here is the Python3 code based on the given input text:

```
# PTO operation time should be less than or equal to the total operation time.
def r1(pto: float, total: float) -> bool:
    if pto <= total:
        return True
    else:
        return False

# The total operation duration must not be lower than the idle time.
def r2(total: float, idle: float) -> bool:
    if total >= idle:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 2's load.
def r3(axle1: float, axle2: float) -> bool:
    if axle1 <= axle2:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 3's load.
def r4(axle1: float, axle3: float) -> bool:
    if axle1 <= axle3:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 2.
def r5(payload: float, axle2: float) -> bool:
    if payload <= axle2:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 3.
def r6(payload: float, axle3: float) -> bool:
    if payload <= axle3:
        return True
    else:
        return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r7(pto: float, idle: float, driving: float, total: float) -> bool:
    if pto + idle + driving <= total:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
Stops with PTO engaged cannot outnumber the total stops.
The weight on axle 1 cannot surpass the weight on axle 2.
The payload must always be smaller than or equal to the load on axle 2.
The payload must not exceed the load carried by axle 3.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";"

Here is the Python3 code for the given input text:

```
# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(a: float, b: float) -> bool:
    if a >= 20 and b / a >= 0.05:
        return True
    else:
        return False

# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r2(a: float, c: float) -> bool:
    if a >= 20 and c / a >= 0.4:
        return True
    else:
        return False

# Stops with PTO engaged cannot outnumber the total stops.
def r3(p: int, t: int) -> bool:
    if p <= t:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r4(w1: float, w2: float) -> bool:
    if w1 <= w2:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 2.
def r5(p: float, w2: float) -> bool:
    if p <= w2:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def r6(p: float, w3: float) -> bool:
    if p <= w3:
        return True
    else:
        return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r7(t: float, p: float, i: float, d: float) -> bool:
    if t >= p + i + d:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
The total operation duration must not be lower than the PTO operation time.
Total operation time shouldn’t be lower than idle time.
Driving time cannot be greater than the total operation time.
Stops with PTO engaged cannot outnumber the total stops.
The load on axle 1 must not surpass the load on axle 2.
The weight on axle 1 cannot surpass the weight on axle 3.
";"

Here is the Python3 code based on the given input text:

```
# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r1(a: float, b: float) -> bool:
    if a >= 20 and b >= 0.4:
        return True
    else:
        return False

# The total operation duration must not be lower than the PTO operation time.
def r2(c: float, d: float) -> bool:
    if c >= d:
        return True
    else:
        return False

# Total operation time shouldn’t be lower than idle time.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Driving time cannot be greater than the total operation time.
def r4(g: float, h: float) -> bool:
    if g <= h:
        return True
    else:
        return False

# Stops with PTO engaged cannot outnumber the total stops.
def r5(i: float, j: float) -> bool:
    if i <= j:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 2.
def r6(k: float, l: float) -> bool:
    if k <= l:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: The total operation duration must not be lower than the PTO operation time.
Idle time should be less than or equal to the total operation time.
PTO-engaged stops cannot exceed the total number of stops.
The load on axle 1 must not surpass the load on axle 2.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
Payload must remain below or equal to the load carried by axle 2.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";"

Here is the Python3 code based on the given input text:

```
# The total operation duration must not be lower than the PTO operation time.
def r1(total_operation_duration: float, pto_operation_time: float) -> bool:
    if total_operation_duration >= pto_operation_time:
        return True
    else:
        return False

# Idle time should be less than or equal to the total operation time.
def r2(idle_time: float, total_operation_duration: float) -> bool:
    if idle_time <= total_operation_duration:
        return True
    else:
        return False

# PTO-engaged stops cannot exceed the total number of stops.
def r3(pto_engaged_stops: int, total_stops: int) -> bool:
    if ptos_stops <= total_stops:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 2.
def r4(load_axle1: float, load_axle2: float) -> bool:
    if load_axle1 <= load_axle2:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r5(load_axle1: float, load_axle3: float) -> bool:
    if load_axle1 <= load_axle3:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def r6(payload: float, load_axle2: float) -> bool:
    if payload <= load_axle2:
        return True
    else:
        return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r7(total_operation_duration: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    if total_operation_duration >= pto_time + idle_time + driving_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
PTO operation time cannot be greater than the total operation time.
Total operation time shouldn’t be lower than idle time.
Total operation time should shouldn’t be lower than driving time.
The payload cannot exceed the capacity of axle 2.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";"

Here is the Python3 code based on the given input text:

```
# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(fuel_consumption: float, distance: float) -> bool:
    if distance >= 20 and fuel_consumption >= 0.5:
        return True
    else:
        return False

# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r2(fuel_consumption: float, distance: float) -> bool:
    if distance >= 20 and fuel_consumption >= 0.4:
        return True
    else:
        return False

# PTO operation time cannot be greater than the total operation time.
def r3(pto_time: float, total_time: float) -> bool:
    if pto_time <= total_time:
        return True
    else:
        return False

# Total operation time shouldn’t be lower than idle time.
def r4(total_time: float, idle_time: float) -> bool:
    if total_time >= idle_time:
        return True
    else:
        return False

# Total operation time should shouldn’t be lower than driving time.
def r5(total_time: float, driving_time: float) -> bool:
    if total_time >= driving_time:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 2.
def r6(payload: float, axle2_capacity: float) -> bool:
    if payload <= axle2_capacity:
        return True
    else:
        return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r7(total_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    if total_time >= pto_time + idle_time + driving_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
Idle time must always be less than or equal to the total operation time.
Driving time cannot be greater than the total operation time.
Stops with PTO engaged cannot outnumber the total stops.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
The load on axle 1 must not surpass the load on axle 3.
";"

Here is the Python3 code based on the given input text:

```
# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(km: float, fuel: float) -> bool:
    if km >= 20 and fuel / km >= 0.05:
        return True
    else:
        return False

# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r2(km: float, fuel: float) -> bool:
    if km >= 20 and fuel / km >= 0.4:
        return True
    else:
        return False

# Idle time must always be less than or equal to the total operation time.
def r3(idle: float, operation: float) -> bool:
    if idle <= operation:
        return True
    else:
        return False

# Driving time cannot be greater than the total operation time.
def r4(driving: float, operation: float) -> bool:
    if driving <= operation:
        return True
    else:
        return False

# Stops with PTO engaged cannot outnumber the total stops.
def r5(pto_stops: int, total_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def r6(axle1: float, axle2: float) -> bool:
    if axle1 <= axle2:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 3.
def r7(axle1: float, axle3: float) -> bool:
    if axle1 <= axle3:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
The total operation duration must not be lower than the PTO operation time.
Idle time should be less than or equal to the total operation time.
The total operation durationmust not be lower than the driving time.
Stops with PTO engaged cannot outnumber the total stops.
The load on axle 1 must not surpass the load on axle 2.
Axle 1's load cannot exceed Axle 3's load.
";"

Here is the Python3 code based on the given input text:

```
# The vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r1(fuel: float, distance: float) -> bool:
    if fuel >= 5 and distance >= 20:
        return True
    else:
        return False

# The total operation duration must not be lower than the PTO operation time.
def r2(total_operation_time: float, pto_operation_time: float) -> bool:
    if total_operation_time >= pto_operation_time:
        return True
    else:
        return False

# Idle time should be less than or equal to the total operation time.
def r3(idle_time: float, total_operation_time: float) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# The total operation duration must not be lower than the driving time.
def r4(total_operation_time: float, driving_time: float) -> bool:
    if total_operation_time >= driving_time:
        return True
    else:
        return False

# Stops with PTO engaged cannot outnumber the total stops.
def r5(pto_stops: int, total_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 2.
def r6(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load <= axle2_load:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 3's load.
def r7(axle1_load: float, axle3_load: float) -> bool:
    if axle1_load <= axle3_load:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
PTO operation time should be less than or equal to the total operation time.
Idle time cannot be greater than the total operation time.
Driving time should be less than or equal to the total operation time.
Stops with PTO engaged should never outnumber total stops.
Axle 1's load cannot exceed Axle 2's load.
Payload must remain below or equal to the load carried by axle 2.
";"

Here is the Python3 code based on the given input text:

```
# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(km: float, fuel: float) -> bool:
    if km >= 20 and fuel >= 5:
        return True
    else:
        return False

# PTO operation time should be less than or equal to the total operation time.
def r2(pto: float, total: float) -> bool:
    if pto <= total:
        return True
    else:
        return False

# Idle time cannot be greater than the total operation time.
def r3(idle: float, total: float) -> bool:
    if idle <= total:
        return True
    else:
        return False

# Driving time should be less than or equal to the total operation time.
def r4(driving: float, total: float) -> bool:
    if driving <= total:
        return True
    else:
        return False

# Stops with PTO engaged should never outnumber total stops.
def r5(pto_stops: int, total_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 2's load.
def r6(axle1: float, axle2: float) -> bool:
    if axle1 <= axle2:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def r7(payload: float, axle2: float) -> bool:
    if payload <= axle2:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
PTO operation time must be less than or equal to the total operation time.
Idle time cannot be greater than the total operation time.
Driving time must always be less than or equal to the total operation time.
Stops with PTO engaged should never outnumber total stops.
The payload must not exceed the load carried by axle 2.
The payload cannot exceed the capacity of axle 3.
";"

Here is the Python3 code based on the given input text:

```
# The vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r1(fuel: float, distance: float) -> bool:
    if distance >= 20 and fuel >= 5:
        return True
    else:
        return False

# PTO operation time must be less than or equal to the total operation time.
def r2(pto: float, total: float) -> bool:
    if pto <= total:
        return True
    else:
        return False

# Idle time cannot be greater than the total operation time.
def r3(idle: float, total: float) -> bool:
    if idle <= total:
        return True
    else:
        return False

# Driving time must always be less than or equal to the total operation time.
def r4(driving: float, total: float) -> bool:
    if driving <= total:
        return True
    else:
        return False

# Stops with PTO engaged should never outnumber total stops.
def r5(pto_stops: int, total_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 2.
def r6(payload: float, axle2: float) -> bool:
    if payload <= axle2:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 3.
def r7(payload: float, axle3: float) -> bool:
    if payload <= axle3:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: Total operation time shouldn’t be lower than idle time.
Driving time must always be less than or equal to the total operation time.
PTO-engaged stops cannot exceed the total number of stops.
The weight on axle 1 cannot surpass the weight on axle 2.
The weight on axle 1 cannot surpass the weight on axle 3.
The payload cannot exceed the capacity of axle 3.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"

Here is the Python3 code based on the given input text:

```
# Total operation time shouldn’t be lower than idle time.
def r1(total_operation_time: float, idle_time: float) -> bool:
    if total_operation_time >= idle_time:
        return True
    else:
        return False

# Driving time must always be less than or equal to the total operation time.
def r2(driving_time: float, total_operation_time: float) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False

# PTO-engaged stops cannot exceed the total number of stops.
def r3(pto_engaged_stops: int, total_stops: int) -> bool:
    if ptos_stops <= total_stops:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r4(axle1_weight: float, axle2_weight: float) -> bool:
    if axle1_weight <= axle2_weight:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r5(axle1_weight: float, axle3_weight: float) -> bool:
    if axle1_weight <= axle3_weight:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 3.
def r6(payload: float, axle3_capacity: float) -> bool:
    if payload <= axle3_capacity:
        return True
    else:
        return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r7(pto_operation_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
    if pto_operation_time + idle_time + driving_time <= total_operation_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
PTO operation time cannot be greater than the total operation time.
The total operation duration must not be lower than the idle time.
Stops with PTO engaged should never outnumber total stops.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
Axle 3's load must always be equal to or greater than the payload.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";"

Here is the Python3 code based on the given input text:

```
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption >= 5:
        return True
    else:
        return False

# PTO operation time cannot be greater than the total operation time.
def r2(pto_operation_time: float, total_operation_time: float) -> bool:
    if pto_operation_time <= total_operation_time:
        return True
    else:
        return False

# The total operation duration must not be lower than the idle time.
def r3(total_operation_time: float, idle_time: float) -> bool:
    if total_operation_time >= idle_time:
        return True
    else:
        return False

# Stops with PTO engaged should never outnumber total stops.
def r4(pto_stops: int, total_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def r5(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load <= axle2_load:
        return True
    else:
        return False

# Axle 3's load must always be equal to or greater than the payload.
def r6(axle3_load: float, payload: float) -> bool:
    if axle3_load >= payload:
        return True
    else:
        return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r7(total_operation_time: float, pto_operation_time: float, idle_time: float, driving_time: float) -> bool:
    if total_operation_time >= pto_operation_time + idle_time + driving_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
The total operation duration must not be lower than the PTO operation time.
Total operation time should shouldn’t be lower than driving time.
Axle 1's load cannot exceed Axle 2's load.
Axle 1's load cannot exceed Axle 3's load.
Axle 3's load must always be equal to or greater than the payload.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"

Here is the Python3 code based on the given input text:

```
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption >= 5:
        return True
    else:
        return False

# The total operation duration must not be lower than the PTO operation time.
def r2(total_operation_time: float, pto_operation_time: float) -> bool:
    if total_operation_time >= pto_operation_time:
        return True
    else:
        return False

# Total operation time should shouldn’t be lower than driving time.
def r3(total_operation_time: float, driving_time: float) -> bool:
    if total_operation_time >= driving_time:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 2's load.
def r4(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load <= axle2_load:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 3's load.
def r5(axle1_load: float, axle3_load: float) -> bool:
    if axle1_load <= axle3_load:
        return True
    else:
        return False

# Axle 3's load must always be equal to or greater than the payload.
def r6(axle3_load: float, payload: float) -> bool:
    if axle3_load >= payload:
        return True
    else:
        return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r7(total_operation_time: float, pto_operation_time: float, idle_time: float, driving_time: float) -> bool:
    if total_operation_time >= pto_operation_time + idle_time + driving_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: Total operation time shouldn’t be lower than PTO operation time.
Idle time cannot be greater than the total operation time.
Total operation time should shouldn’t be lower than driving time.
The load supported by axle 1 cannot exceed that of axle 3.
The payload must not exceed the load carried by axle 2.
Axle 3's load must always be equal to or greater than the payload.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"

Here is the Python3 code based on the given input text:

```
# Total operation time shouldn’t be lower than PTO operation time.
def r1(a: float, b: float) -> bool:
    if a >= b:
        return True
    else:
        return False

# Idle time cannot be greater than the total operation time.
def r2(c: float, a: float) -> bool:
    if c <= a:
        return True
    else:
        return False

# Total operation time should shouldn’t be lower than driving time.
def r3(a: float, d: float) -> bool:
    if a >= d:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 3.
def r4(e: float, f: float) -> bool:
    if e <= f:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 2.
def r5(g: float, h: float) -> bool:
    if g <= h:
        return True
    else:
        return False

# Axle 3's load must always be equal to or greater than the payload.
def r6(f: float, g: float) -> bool:
    if f >= g:
        return True
    else:
        return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r7(b: float, a: float, d: float) -> bool:
    if b + a + d <= a:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
Total operation time should shouldn’t be lower than driving time.
The number of stops where PTO is engaged must not exceed the overall stop count.
The load supported by axle 1 cannot exceed that of axle 2.
The weight on axle 1 cannot surpass the weight on axle 3.
Payload must remain below or equal to the load carried by axle 2.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"

Here is the Python3 code based on the given input text:

```
# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(t: float, f: float) -> bool:
    if t >= 20 and f >= 5:
        return True
    else:
        return False

# Total operation time should shouldn’t be lower than driving time.
def r2(o: float, d: float) -> bool:
    if o >= d:
        return True
    else:
        return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r3(s: int, p: int) -> bool:
    if s >= p:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r4(l1: float, l2: float) -> bool:
    if l1 <= l2:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r5(w1: float, w3: float) -> bool:
    if w1 <= w3:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def r6(p: float, l2: float) -> bool:
    if p <= l2:
        return True
    else:
        return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r7(t1: float, t2: float, t3: float, o: float) -> bool:
    if t1 + t2 + t3 <= o:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: Total operation time shouldn’t be lower than PTO operation time.
The total operation duration must not be lower than the idle time.
Total operation time should shouldn’t be lower than driving time.
Stops with PTO engaged should never outnumber total stops.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
Axle 3's load must always be equal to or greater than the payload.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"

Here is the Python3 code based on the given input text:

```
# Total operation time shouldn’t be lower than PTO operation time.
def r1(ot: float, pto: float) -> bool:
    if ot >= pto:
        return True
    else:
        return False

# The total operation duration must not be lower than the idle time.
def r2(ot: float, idle: float) -> bool:
    if ot >= idle:
        return True
    else:
        return False

# Total operation time should shouldn’t be lower than driving time.
def r3(ot: float, driving: float) -> bool:
    if ot >= driving:
        return True
    else:
        return False

# Stops with PTO engaged should never outnumber total stops.
def r4(pto_stops: int, total_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def r5(axle1: float, axle2: float) -> bool:
    if axle1 <= axle2:
        return True
    else:
        return False

# Axle 3's load must always be equal to or greater than the payload.
def r6(axle3: float, payload: float) -> bool:
    if axle3 >= payload:
        return True
    else:
        return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r7(ot: float, pto: float, idle: float, driving: float) -> bool:
    if ot >= pto + idle + driving:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
PTO operation time should be less than or equal to the total operation time.
Idle time should be less than or equal to the total operation time.
Driving time cannot be greater than the total operation time.
Axle 1's load cannot exceed Axle 3's load.
The payload must not exceed the load carried by axle 3.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";"

Here is the Python3 code based on the given input text:

```
# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r1(fuel: float) -> bool:
    if fuel >= 0.4:
        return True
    else:
        return False

# PTO operation time should be less than or equal to the total operation time.
def r2(pto: float, total: float) -> bool:
    if pto <= total:
        return True
    else:
        return False

# Idle time should be less than or equal to the total operation time.
def r3(idle: float, total: float) -> bool:
    if idle <= total:
        return True
    else:
        return False

# Driving time cannot be greater than the total operation time.
def r4(driving: float, total: float) -> bool:
    if driving <= total:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 3's load.
def r5(axle1: float, axle3: float) -> bool:
    if axle1 <= axle3:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def r6(payload: float, axle3: float) -> bool:
    if payload <= axle3:
        return True
    else:
        return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r7(total: float, pto: float, idle: float, driving: float) -> bool:
    if total >= pto + idle + driving:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
The total operation duration must not be lower than the PTO operation time.
The total operation duration must not be lower than the idle time.
Axle 1's load cannot exceed Axle 3's load.
Payload must remain below or equal to the load carried by axle 2.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"

Here is the Python3 code based on the given input text:

```
# If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption / distance >= 0.05:
        return True
    else:
        return False

# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r2(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption / (distance / 100) >= 0.4:
        return True
    else:
        return False

# The total operation duration must not be lower than the PTO operation time.
def r3(total_operation_time: float, pto_operation_time: float) -> bool:
    if total_operation_time >= pto_operation_time:
        return True
    else:
        return False

# The total operation duration must not be lower than the idle time.
def r4(total_operation_time: float, idle_time: float) -> bool:
    if total_operation_time >= idle_time:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 3's load.
def r5(axle1_load: float, axle3_load: float) -> bool:
    if axle1_load <= axle3_load:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def r6(payload: float, axle2_load: float) -> bool:
    if payload <= axle2_load:
        return True
    else:
        return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r7(total_operation_time: float, pto_operation_time: float, idle_time: float, driving_time: float) -> bool:
    if total_operation_time >= pto_operation_time + idle_time + driving_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
Total operation time shouldn’t be lower than idle time.
Total operation time should shouldn’t be lower than driving time.
The number of stops where PTO is engaged must not exceed the overall stop count.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
The payload must always be smaller than or equal to the load on axle 2.
";"

Here is the Python3 code based on the given input text:

```
# If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
def r1(distance: float, fuel_consumption_rate: float) -> bool:
    if distance >= 20 and fuel_consumption_rate >= 0.05:
        return True
    else:
        return False

# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r2(distance: float, fuel_consumption_per_100_km: float) -> bool:
    if distance >= 20 and fuel_consumption_per_100_km >= 0.4:
        return True
    else:
        return False

# Total operation time shouldn’t be lower than idle time.
def r3(operation_time: float, idle_time: float) -> bool:
    if operation_time >= idle_time:
        return True
    else:
        return False

# Total operation time should shouldn’t be lower than driving time.
def r4(operation_time: float, driving_time: float) -> bool:
    if operation_time >= driving_time:
        return True
    else:
        return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r5(pto_stops: int, overall_stops: int) -> bool:
    if pto_stops <= overall_stops:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def r6(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load <= axle2_load:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 2.
def r7(payload: float, axle2_load: float) -> bool:
    if payload <= axle2_load:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: PTO operation time should be less than or equal to the total operation time.
Idle time cannot be greater than the total operation time.
The total operation durationmust not be lower than the driving time.
The load on axle 1 must not surpass the load on axle 2.
The weight on axle 1 cannot surpass the weight on axle 3.
Payload must remain below or equal to the load carried by axle 2.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"

Here is the Python3 code based on the given input text:

```
# PTO operation time should be less than or equal to the total operation time.
def r1(pto: float, total_operation_time: float) -> bool:
    if pto <= total_operation_time:
        return True
    else:
        return False

# Idle time cannot be greater than the total operation time.
def r2(idle: float, total_operation_time: float) -> bool:
    if idle <= total_operation_time:
        return True
    else:
        return False

# The total operation duration must not be lower than the driving time.
def r3(total_operation_time: float, driving_time: float) -> bool:
    if total_operation_time >= driving_time:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 2.
def r4(load_axle1: float, load_axle2: float) -> bool:
    if load_axle1 <= load_axle2:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r5(weight_axle1: float, weight_axle3: float) -> bool:
    if weight_axle1 <= weight_axle3:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def r6(payload: float, load_axle2: float) -> bool:
    if payload <= load_axle2:
        return True
    else:
        return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r7(total_operation_time: float, pto: float, idle: float, driving_time: float) -> bool:
    if total_operation_time >= pto + idle + driving_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
Idle time should be less than or equal to the total operation time.
Axle 1's load cannot exceed Axle 2's load.
The load supported by axle 1 cannot exceed that of axle 3.
The payload cannot exceed the capacity of axle 2.
The payload must always be smaller than or equal to the load on axle 3.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";"

Here is the Python3 code based on the given input text:

```
# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r1(fuel: float, distance: float) -> bool:
    if distance >= 20 and fuel / distance >= 0.4:
        return True
    else:
        return False

# Idle time should be less than or equal to the total operation time.
def r2(idle: float, operation: float) -> bool:
    if idle <= operation:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 2's load.
def r3(axle1: float, axle2: float) -> bool:
    if axle1 <= axle2:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 3.
def r4(axle1: float, axle3: float) -> bool:
    if axle1 <= axle3:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 2.
def r5(payload: float, axle2: float) -> bool:
    if payload <= axle2:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 3.
def r6(payload: float, axle3: float) -> bool:
    if payload <= axle3:
        return True
    else:
        return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r7(operation: float, pto: float, idle: float, driving: float) -> bool:
    if operation >= pto + idle + driving:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
PTO operation time should be less than or equal to the total operation time.
Driving time cannot be greater than the total operation time.
Stops with PTO engaged should never outnumber total stops.
Axle 1's load cannot exceed Axle 3's load.
Axle 3's load must always be equal to or greater than the payload.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"

Here is the Python3 code based on the given input text:

```
# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r1(fuel: float, distance: float) -> bool:
    if distance >= 20 and fuel / distance >= 0.4:
        return True
    else:
        return False

# PTO operation time should be less than or equal to the total operation time.
def r2(pto: float, total: float) -> bool:
    if pto <= total:
        return True
    else:
        return False

# Driving time cannot be greater than the total operation time.
def r3(driving: float, total: float) -> bool:
    if driving <= total:
        return True
    else:
        return False

# Stops with PTO engaged should never outnumber total stops.
def r4(pto_stops: int, total_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 3's load.
def r5(axle1: float, axle3: float) -> bool:
    if axle1 <= axle3:
        return True
    else:
        return False

# Axle 3's load must always be equal to or greater than the payload.
def r6(axle3: float, payload: float) -> bool:
    if axle3 >= payload:
        return True
    else:
        return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r7(total: float, pto: float, idle: float, driving: float) -> bool:
    if total >= pto + idle + driving:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
PTO operation time cannot be greater than the total operation time.
Idle time should be less than or equal to the total operation time.
Driving time cannot be greater than the total operation time.
Stops with PTO engaged cannot outnumber the total stops.
The load supported by axle 1 cannot exceed that of axle 3.
";"

Here is the Python3 code based on the given input text:

```
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption < 5:
        return False
    else:
        return True

# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def r2(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption < 0.4:
        return False
    else:
        return True

# PTO operation time cannot be greater than the total operation time.
def r3(pto_operation_time: float, total_operation_time: float) -> bool:
    if pto_operation_time > total_operation_time:
        return False
    else:
        return True

# Idle time should be less than or equal to the total operation time.
def r4(idle_time: float, total_operation_time: float) -> bool:
    if idle_time > total_operation_time:
        return False
    else:
        return True

# Driving time cannot be greater than the total operation time.
def r5(driving_time: float, total_operation_time: float) -> bool:
    if driving_time > total_operation_time:
        return False
    else:
        return True

# Stops with PTO engaged cannot outnumber the total stops.
def r6(pto_stops: int, total_stops: int) -> bool:
    if pto_stops > total_stops:
        return False
    else:
        return True

# The load supported by axle 1 cannot exceed that of axle 3.
def r7(axle1_load: float, axle3_load: float) -> bool:
    if axle1_load > axle3_load:
        return False
    else:
        return True
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
The total operation duration must not be lower than the PTO operation time.
Driving time cannot be greater than the total operation time.
Axle 1's load cannot exceed Axle 2's load.
The weight on axle 1 cannot surpass the weight on axle 3.
The payload must always be smaller than or equal to the load on axle 2.
";"

Here is the Python3 code based on the given input text:

```
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption >= 5:
        return True
    else:
        return False

# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r2(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption / distance >= 0.4:
        return True
    else:
        return False

# The total operation duration must not be lower than the PTO operation time.
def r3(total_operation_duration: float, pto_operation_time: float) -> bool:
    if total_operation_duration >= pto_operation_time:
        return True
    else:
        return False

# Driving time cannot be greater than the total operation time.
def r4(driving_time: float, total_operation_duration: float) -> bool:
    if driving_time <= total_operation_duration:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 2's load.
def r5(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load <= axle2_load:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r6(axle1_weight: float, axle3_weight: float) -> bool:
    if axle1_weight <= axle3_weight:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 2.
def r7(payload: float, axle2_load: float) -> bool:
    if payload <= axle2_load:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
Idle time cannot be greater than the total operation time.
Driving time should be less than or equal to the total operation time.
The number of stops where PTO is engaged must not exceed the overall stop count.
Axle 1's load cannot exceed Axle 3's load.
The payload must not exceed the load carried by axle 3.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";"

Here is the Python3 code based on the given input text:

```
# If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
    if distance / fuel_consumption >= 4:
        return True
    else:
        return False

# Idle time cannot be greater than the total operation time.
def r2(idle_time: float, total_operation_time: float) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# Driving time should be less than or equal to the total operation time.
def r3(driving_time: float, total_operation_time: float) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r4(pto_stops: int, overall_stops: int) -> bool:
    if pto_stops <= overall_stops:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 3's load.
def r5(axle1_load: float, axle3_load: float) -> bool:
    if axle1_load <= axle3_load:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def r6(payload: float, axle3_load: float) -> bool:
    if payload <= axle3_load:
        return True
    else:
        return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r7(pto_operation_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
    if pto_operation_time + idle_time + driving_time <= total_operation_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
PTO operation time cannot be greater than the total operation time.
The total stop count must not be lower than the count of stops where PTO is engaged.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
The load supported by axle 1 cannot exceed that of axle 3.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"

Here is the Python3 code based on the given input text:

```
# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(fuel_consumption: float, distance: float) -> bool:
    if distance >= 20 and fuel_consumption / distance >= 0.05:
        return True
    else:
        return False

# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r2(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption / distance >= 0.4:
        return True
    else:
        return False

# PTO operation time cannot be greater than the total operation time.
def r3(pto_time: float, total_time: float) -> bool:
    if pto_time <= total_time:
        return True
    else:
        return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r4(total_stops: int, pto_stops: int) -> bool:
    if total_stops >= pto_stops:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def r5(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load <= axle2_load:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 3.
def r6(axle1_load: float, axle3_load: float) -> bool:
    if axle1_load <= axle3_load:
        return True
    else:
        return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r7(pto_time: float, idle_time: float, driving_time: float, total_time: float) -> bool:
    if pto_time + idle_time + driving_time <= total_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
The total operation duration must not be lower than the PTO operation time.
The total stop count must not be lower than the count of stops where PTO is engaged.
Axle 1's load cannot exceed Axle 3's load.
The payload must not exceed the load carried by axle 2.
The payload must not exceed the load carried by axle 3.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";"

Here is the Python3 code based on the given input text:

```
# The vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r1(fuel_consumption: float, distance: float) -> bool:
    if distance >= 20 and fuel_consumption >= 5:
        return True
    else:
        return False

# The total operation duration must not be lower than the PTO operation time.
def r2(total_operation_time: float, pto_operation_time: float) -> bool:
    if total_operation_time >= pto_operation_time:
        return True
    else:
        return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r3(total_stop_count: int, pto_stop_count: int) -> bool:
    if total_stop_count >= pto_stop_count:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 3's load.
def r4(axle1_load: float, axle3_load: float) -> bool:
    if axle1_load <= axle3_load:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 2.
def r5(payload: float, axle2_load: float) -> bool:
    if payload <= axle2_load:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def r6(payload: float, axle3_load: float) -> bool:
    if payload <= axle3_load:
        return True
    else:
        return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r7(total_operation_time: float, pto_operation_time: float, idle_time: float, driving_time: float) -> bool:
    if total_operation_time >= pto_operation_time + idle_time + driving_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
Idle time must always be less than or equal to the total operation time.
Stops with PTO engaged cannot outnumber the total stops.
The load on axle 1 must not surpass the load on axle 2.
The weight on axle 1 cannot surpass the weight on axle 3.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"

Here is the Python3 code for the given input text:

```
# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.05:
        return True
    else:
        return False

# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r2(a: float, c: float) -> bool:
    if c / a >= 0.4:
        return True
    else:
        return False

# Idle time must always be less than or equal to the total operation time.
def r3(i: float, t: float) -> bool:
    if i <= t:
        return True
    else:
        return False

# Stops with PTO engaged cannot outnumber the total stops.
def r4(s: float, t: float) -> bool:
    if s <= t:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 2.
def r5(l1: float, l2: float) -> bool:
    if l1 <= l2:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r6(w1: float, w3: float) -> bool:
    if w1 <= w3:
        return True
    else:
        return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r7(t: float, p: float, i: float, d: float) -> bool:
    if t >= p + i + d:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
Total operation time shouldn’t be lower than idle time.
Stops with PTO engaged cannot outnumber the total stops.
The load on axle 1 must not surpass the load on axle 2.
Axle 1's load cannot exceed Axle 3's load.
The payload cannot exceed the capacity of axle 3.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"

Here is the Python3 code based on the given input text:

```
# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(km: float, fuel: float) -> bool:
    if km >= 20 and fuel >= 5:
        return True
    else:
        return False

# Total operation time shouldn’t be lower than idle time.
def r2(operation_time: float, idle_time: float) -> bool:
    if operation_time >= idle_time:
        return True
    else:
        return False

# Stops with PTO engaged cannot outnumber the total stops.
def r3(pto_stops: int, total_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 2.
def r4(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load <= axle2_load:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 3's load.
def r5(axle1_load: float, axle3_load: float) -> bool:
    if axle1_load <= axle3_load:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 3.
def r6(payload: float, axle3_capacity: float) -> bool:
    if payload <= axle3_capacity:
        return True
    else:
        return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r7(pto_time: float, idle_time: float, driving_time: float, operation_time: float) -> bool:
    if pto_time + idle_time + driving_time <= operation_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
Total operation time shouldn’t be lower than PTO operation time.
Idle time should be less than or equal to the total operation time.
The total stop count must not be lower than the count of stops where PTO is engaged.
The load supported by axle 1 cannot exceed that of axle 2.
The payload must always be smaller than or equal to the load on axle 2.
Axle 3's load must always be equal to or greater than the payload.
";"

Here is the Python3 code based on the given input text:

```
# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(fuel_consumption: float, distance: float) -> bool:
    if distance >= 20 and fuel_consumption >= 5:
        return True
    else:
        return False

# Total operation time shouldn’t be lower than PTO operation time.
def r2(total_operation_time: float, pto_operation_time: float) -> bool:
    if total_operation_time >= pto_operation_time:
        return True
    else:
        return False

# Idle time should be less than or equal to the total operation time.
def r3(idle_time: float, total_operation_time: float) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r4(total_stop_count: int, pto_stop_count: int) -> bool:
    if total_stop_count >= pto_stop_count:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r5(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load <= axle2_load:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 2.
def r6(payload: float, axle2_load: float) -> bool:
    if payload <= axle2_load:
        return True
    else:
        return False

# Axle 3's load must always be equal to or greater than the payload.
def r7(axle3_load: float, payload: float) -> bool:
    if axle3_load >= payload:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
PTO operation time should be less than or equal to the total operation time.
Total operation time shouldn’t be lower than idle time.
The load on axle 1 must not surpass the load on axle 2.
Axle 2's load must always be equal to or greater than the payload.
Payload must remain below or equal to the load carried by axle 3.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";"

Here is the Python3 code based on the given input text:

```
# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def r1(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption / distance >= 0.4:
        return True
    else:
        return False

# PTO operation time should be less than or equal to the total operation time.
def r2(pto_time: float, total_operation_time: float) -> bool:
    if pto_time <= total_operation_time:
        return True
    else:
        return False

# Total operation time shouldn’t be lower than idle time.
def r3(total_operation_time: float, idle_time: float) -> bool:
    if total_operation_time >= idle_time:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 2.
def r4(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load <= axle2_load:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def r5(axle2_load: float, payload: float) -> bool:
    if axle2_load >= payload:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 3.
def r6(payload: float, axle3_load: float) -> bool:
    if payload <= axle3_load:
        return True
    else:
        return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r7(total_operation_duration: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    if total_operation_duration >= pto_time + idle_time + driving_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
The total operation duration must not be lower than the PTO operation time.
Total operation time should shouldn’t be lower than driving time.
The total stop count must not be lower than the count of stops where PTO is engaged.
The payload must not exceed the load carried by axle 3.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"

Here is the Python3 code based on the given input text:

```
# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(t: float, f: float) -> bool:
    if t >= 20 and f / t >= 0.25:
        return True
    else:
        return False

# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r2(t: float, f: float) -> bool:
    if t >= 20 and f / t >= 2:
        return True
    else:
        return False

# The total operation duration must not be lower than the PTO operation time.
def r3(o: float, p: float) -> bool:
    if o >= p:
        return True
    else:
        return False

# Total operation time should shouldn’t be lower than driving time.
def r4(o: float, d: float) -> bool:
    if o >= d:
        return True
    else:
        return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r5(s: float, c: float) -> bool:
    if s >= c:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def r6(p: float, l: float) -> bool:
    if p <= l:
        return True
    else:
        return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r7(t: float, p: float, i: float, d: float) -> bool:
    if t >= p + i + d:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
The total operation durationmust not be lower than the driving time.
Stops with PTO engaged should never outnumber total stops.
The load on axle 1 must not surpass the load on axle 3.
The payload cannot exceed the capacity of axle 2.
The payload must not exceed the load carried by axle 3.
";"

Here is the Python3 code based on the given input text:

```
# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(km: float, fuel: float) -> bool:
    if km >= 20 and fuel / km >= 0.05:
        return True
    else:
        return False

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r2(km: float, fuel: float) -> bool:
    if km >= 20 and fuel / km * 100 >= 40:
        return True
    else:
        return False

# The total operation duration must not be lower than the driving time.
def r3(operation_time: float, driving_time: float) -> bool:
    if operation_time >= driving_time:
        return True
    else:
        return False

# Stops with PTO engaged should never outnumber total stops.
def r4(pto_stops: int, total_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 3.
def r5(axle1: float, axle3: float) -> bool:
    if axle1 <= axle3:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 2.
def r6(payload: float, axle2: float) -> bool:
    if payload <= axle2:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def r7(payload: float, axle3: float) -> bool:
    if payload <= axle3:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
PTO operation time must be less than or equal to the total operation time.
The total operation durationmust not be lower than the driving time.
The number of stops where PTO is engaged must not exceed the overall stop count.
The load supported by axle 1 cannot exceed that of axle 2.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
Axle 2's load must always be equal to or greater than the payload.
";"

Here is the Python3 code based on the given input text:

```
# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(km: float, fuel: float) -> bool:
    if km >= 20 and fuel >= 5:
        return True
    else:
        return False

# PTO operation time must be less than or equal to the total operation time.
def r2(pto: float, total: float) -> bool:
    if pto <= total:
        return True
    else:
        return False

# The total operation duration must not be lower than the driving time.
def r3(total: float, driving: float) -> bool:
    if total >= driving:
        return True
    else:
        return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r4(pto_stops: int, overall_stops: int) -> bool:
    if pto_stops <= overall_stops:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r5(axle1: float, axle2: float) -> bool:
    if axle1 <= axle2:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r6(axle1: float, axle3: float) -> bool:
    if axle1 <= axle3:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def r7(axle2: float, payload: float) -> bool:
    if axle2 >= payload:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
The total operation duration must not be lower than the idle time.
Stops with PTO engaged should never outnumber total stops.
The load supported by axle 1 cannot exceed that of axle 2.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
The payload cannot exceed the capacity of axle 2.
The payload cannot exceed the capacity of axle 3.
";"

Here is the Python3 code based on the given input text:

```
# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r1(a: float, b: float) -> bool:
    if a >= 20 and b / a >= 0.4:
        return True
    else:
        return False

# The total operation duration must not be lower than the idle time.
def r2(c: float, d: float) -> bool:
    if c >= d:
        return True
    else:
        return False

# Stops with PTO engaged should never outnumber total stops.
def r3(e: float, f: float) -> bool:
    if e <= f:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r4(g: float, h: float) -> bool:
    if g <= h:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r5(i: float, j: float) -> bool:
    if i <= j:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 2.
def r6(k: float, l: float) -> bool:
    if k <= l:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 3.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
The total operation duration must not be lower than the idle time.
Stops with PTO engaged cannot outnumber the total stops.
Axle 1's load cannot exceed Axle 3's load.
The payload must always be smaller than or equal to the load on axle 2.
The payload must not exceed the load carried by axle 3.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";"

Here is the Python3 code based on the given input text:

```
# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(km: float, fuel: float) -> bool:
    if km >= 20 and fuel >= 5:
        return True
    else:
        return False

# The total operation duration must not be lower than the idle time.
def r2(total_time: float, idle_time: float) -> bool:
    if total_time >= idle_time:
        return True
    else:
        return False

# Stops with PTO engaged cannot outnumber the total stops.
def r3(pto_stops: int, total_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 3's load.
def r4(axle1_load: float, axle3_load: float) -> bool:
    if axle1_load <= axle3_load:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 2.
def r5(payload: float, axle2_load: float) -> bool:
    if payload <= axle2_load:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def r6(payload: float, axle3_load: float) -> bool:
    if payload <= axle3_load:
        return True
    else:
        return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r7(total_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    if total_time >= pto_time + idle_time + driving_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
PTO operation time should be less than or equal to the total operation time.
Driving time should be less than or equal to the total operation time.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
The payload cannot exceed the capacity of axle 2.
The payload cannot exceed the capacity of axle 3.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"

Here is the Python3 code based on the given input text:

```
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption >= 5:
        return True
    else:
        return False

# PTO operation time should be less than or equal to the total operation time.
def r2(pto_time: float, total_time: float) -> bool:
    if pto_time <= total_time:
        return True
    else:
        return False

# Driving time should be less than or equal to the total operation time.
def r3(driving_time: float, total_time: float) -> bool:
    if driving_time <= total_time:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def r4(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load <= axle2_load:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 2.
def r5(payload: float, axle2_capacity: float) -> bool:
    if payload <= axle2_capacity:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 3.
def r6(payload: float, axle3_capacity: float) -> bool:
    if payload <= axle3_capacity:
        return True
    else:
        return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r7(total_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    if total_time >= pto_time + idle_time + driving_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
Total operation time shouldn’t be lower than idle time.
Stops with PTO engaged cannot outnumber the total stops.
The weight on axle 1 cannot surpass the weight on axle 2.
The weight on axle 1 cannot surpass the weight on axle 3.
Axle 2's load must always be equal to or greater than the payload.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"

Here is the Python3 code based on the given input text:

```
# The vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r1(fuel: float, distance: float) -> bool:
    if distance >= 20 and fuel >= 5:
        return True
    else:
        return False

# Total operation time shouldn’t be lower than idle time.
def r2(operation_time: float, idle_time: float) -> bool:
    if operation_time >= idle_time:
        return True
    else:
        return False

# Stops with PTO engaged cannot outnumber the total stops.
def r3(pto_stops: int, total_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r4(axle1_weight: float, axle2_weight: float) -> bool:
    if axle1_weight <= axle2_weight:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r5(axle1_weight: float, axle3_weight: float) -> bool:
    if axle1_weight <= axle3_weight:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def r6(axle2_weight: float, payload: float) -> bool:
    if axle2_weight >= payload:
        return True
    else:
        return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r7(operation_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    if operation_time >= pto_time + idle_time + driving_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
PTO operation time cannot be greater than the total operation time.
Idle time cannot be greater than the total operation time.
The number of stops where PTO is engaged must not exceed the overall stop count.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
Payload must remain below or equal to the load carried by axle 3.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"

Here is the Python3 code based on the given input text:

```
# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r2(c: float, d: float) -> bool:
    if d / c >= 0.4:
        return True
    else:
        return False

# PTO operation time cannot be greater than the total operation time.
def r3(e: float, f: float) -> bool:
    if e <= f:
        return True
    else:
        return False

# Idle time cannot be greater than the total operation time.
def r4(g: float, h: float) -> bool:
    if g <= h:
        return True
    else:
        return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r5(i: float, j: float) -> bool:
    if i <= j:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def r6(k: float, l: float) -> bool:
    if k <= l:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 3.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
PTO operation time must be less than or equal to the total operation time.
Idle time should be less than or equal to the total operation time.
Driving time must always be less than or equal to the total operation time.
The total stop count must not be lower than the count of stops where PTO is engaged.
The load supported by axle 1 cannot exceed that of axle 2.
The payload must not exceed the load carried by axle 2.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";"

Here is the Python3 code based on the given input text:

```
# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r1(fuel: float, distance: float) -> bool:
    if distance >= 20 and fuel / distance >= 0.4:
        return True
    else:
        return False

# PTO operation time must be less than or equal to the total operation time.
def r2(pto: float, total: float) -> bool:
    if pto <= total:
        return True
    else:
        return False

# Idle time should be less than or equal to the total operation time.
def r3(idle: float, total: float) -> bool:
    if idle <= total:
        return True
    else:
        return False

# Driving time must always be less than or equal to the total operation time.
def r4(driving: float, total: float) -> bool:
    if driving <= total:
        return True
    else:
        return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r5(total_stops: int, pto_stops: int) -> bool:
    if total_stops >= pto_stops:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r6(axle1: float, axle2: float) -> bool:
    if axle1 <= axle2:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 2.
def r7(payload: float, axle2: float) -> bool:
    if payload <= axle2:
        return True
    else:
        return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r8(total: float, pto: float, idle: float, driving: float) -> bool:
    if total >= pto + idle + driving:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
PTO operation time cannot be greater than the total operation time.
Total operation time shouldn’t be lower than idle time.
PTO-engaged stops cannot exceed the total number of stops.
The load supported by axle 1 cannot exceed that of axle 2.
The load on axle 1 must not surpass the load on axle 3.
The payload cannot exceed the capacity of axle 3.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";"

Here is the Python3 code based on the given input text:

```
# If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
    if distance / fuel_consumption >= 4:
        return True
    else:
        return False

# PTO operation time cannot be greater than the total operation time.
def r2(pto_time: float, total_time: float) -> bool:
    if pto_time <= total_time:
        return True
    else:
        return False

# Total operation time shouldn’t be lower than idle time.
def r3(total_time: float, idle_time: float) -> bool:
    if total_time >= idle_time:
        return True
    else:
        return False

# PTO-engaged stops cannot exceed the total number of stops.
def r4(pto_stops: float, total_stops: float) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r5(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load <= axle2_load:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 3.
def r6(axle1_load: float, axle3_load: float) -> bool:
    if axle1_load <= axle3_load:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 3.
def r7(payload: float, axle3_capacity: float) -> bool:
    if payload <= axle3_capacity:
        return True
    else:
        return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r8(total_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    if total_time >= pto_time + idle_time + driving_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
The total operation duration must not be lower than the idle time.
Driving time must always be less than or equal to the total operation time.
The total stop count must not be lower than the count of stops where PTO is engaged.
The load on axle 1 must not surpass the load on axle 2.
The weight on axle 1 cannot surpass the weight on axle 3.
Axle 2's load must always be equal to or greater than the payload.
";"

Here is the Python3 code based on the given input text:

```
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption < 5:
        return False
    else:
        return True

# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def r2(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption < 0.4:
        return False
    else:
        return True

# The total operation duration must not be lower than the idle time.
def r3(operation_duration: float, idle_time: float) -> bool:
    if operation_duration < idle_time:
        return False
    else:
        return True

# Driving time must always be less than or equal to the total operation time.
def r4(driving_time: float, operation_duration: float) -> bool:
    if driving_time > operation_duration:
        return False
    else:
        return True

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r5(total_stop_count: int, pto_stop_count: int) -> bool:
    if total_stop_count < pto_stop_count:
        return False
    else:
        return True

# The load on axle 1 must not surpass the load on axle 2.
def r6(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load > axle2_load:
        return False
    else:
        return True

# The weight on axle 1 cannot surpass the weight on axle 3.
def r7(axle1_weight: float, axle3_weight: float) -> bool:
    if axle1_weight > axle3_weight:
        return False
    else:
        return True

# Axle 2's load must always be equal to or greater than the payload.
def r8(axle2_load: float, payload: float) -> bool:
    if axle2_load < payload:
        return False
    else:
        return True
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
Total operation time shouldn’t be lower than PTO operation time.
Idle time must always be less than or equal to the total operation time.
The total operation durationmust not be lower than the driving time.
The payload must not exceed the load carried by axle 2.
The payload must always be smaller than or equal to the load on axle 3.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";"

Here is the Python3 code based on the given input text:

```
# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(km: float, fuel: float) -> bool:
    if fuel / km >= 0.05:
        return True
    else:
        return False

# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r2(km: float, fuel: float) -> bool:
    if fuel / km >= 0.4:
        return True
    else:
        return False

# Total operation time shouldn’t be lower than PTO operation time.
def r3(total_time: float, pto_time: float) -> bool:
    if total_time >= pto_time:
        return True
    else:
        return False

# Idle time must always be less than or equal to the total operation time.
def r4(idle_time: float, total_time: float) -> bool:
    if idle_time <= total_time:
        return True
    else:
        return False

# The total operation durationmust not be lower than the driving time.
def r5(total_time: float, driving_time: float) -> bool:
    if total_time >= driving_time:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 2.
def r6(payload: float, axle2_load: float) -> bool:
    if payload <= axle2_load:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 3.
def r7(payload: float, axle3_load: float) -> bool:
    if payload <= axle3_load:
        return True
    else:
        return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r8(total_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    if total_time >= pto_time + idle_time + driving_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
PTO operation time cannot be greater than the total operation time.
The total operation duration must not be lower than the idle time.
Stops with PTO engaged cannot outnumber the total stops.
The weight on axle 1 cannot surpass the weight on axle 3.
Axle 2's load must always be equal to or greater than the payload.
Payload must remain below or equal to the load carried by axle 3.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"

Here is the Python3 code based on the given input text:

```
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption >= 5:
        return True
    else:
        return False

# PTO operation time cannot be greater than the total operation time.
def r2(pto_operation_time: float, total_operation_time: float) -> bool:
    if pto_operation_time <= total_operation_time:
        return True
    else:
        return False

# The total operation duration must not be lower than the idle time.
def r3(total_operation_time: float, idle_time: float) -> bool:
    if total_operation_time >= idle_time:
        return True
    else:
        return False

# Stops with PTO engaged cannot outnumber the total stops.
def r4(pto_stops: int, total_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r5(axle1_weight: float, axle3_weight: float) -> bool:
    if axle1_weight <= axle3_weight:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def r6(axle2_load: float, payload: float) -> bool:
    if axle2_load >= payload:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 3.
def r7(payload: float, axle3_load: float) -> bool:
    if payload <= axle3_load:
        return True
    else:
        return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r8(pto_operation_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
    if pto_operation_time + idle_time + driving_time <= total_operation_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
PTO operation time should be less than or equal to the total operation time.
Idle time should be less than or equal to the total operation time.
The total operation durationmust not be lower than the driving time.
The number of stops where PTO is engaged must not exceed the overall stop count.
The load supported by axle 1 cannot exceed that of axle 3.
The payload must not exceed the load carried by axle 3.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";"

Here is the Python3 code based on the given input text:

```
# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r1(a: float, b: float) -> bool:
    if a >= 20 and b >= 0.4:
        return True
    else:
        return False

# PTO operation time should be less than or equal to the total operation time.
def r2(pto: float, total: float) -> bool:
    if pto <= total:
        return True
    else:
        return False

# Idle time should be less than or equal to the total operation time.
def r3(idle: float, total: float) -> bool:
    if idle <= total:
        return True
    else:
        return False

# The total operation duration must not be lower than the driving time.
def r4(total: float, driving: float) -> bool:
    if total >= driving:
        return True
    else:
        return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r5(pto_stops: int, overall_stops: int) -> bool:
    if pto_stops <= overall_stops:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 3.
def r6(axle1: float, axle3: float) -> bool:
    if axle1 <= axle3:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def r7(payload: float, axle3: float) -> bool:
    if payload <= axle3:
        return True
    else:
        return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r8(total: float, pto: float, idle: float, driving: float) -> bool:
    if total >= pto + idle + driving:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
PTO operation time should be less than or equal to the total operation time.
Total operation time should shouldn’t be lower than driving time.
The total stop count must not be lower than the count of stops where PTO is engaged.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
Payload must remain below or equal to the load carried by axle 2.
The payload cannot exceed the capacity of axle 3.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";"

Here is the Python3 code based on the given input text:

```
# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(t: float, f: float) -> bool:
    if t >= 20 and f >= 5:
        return True
    else:
        return False

# PTO operation time should be less than or equal to the total operation time.
def r2(a: float, b: float) -> bool:
    if a <= b:
        return True
    else:
        return False

# Total operation time should shouldn’t be lower than driving time.
def r3(c: float, d: float) -> bool:
    if c >= d:
        return True
    else:
        return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r4(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r5(g: float, h: float) -> bool:
    if g <= h:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def r6(i: float, j: float) -> bool:
    if i <= j:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 3.
def r7(k: float, l: float) -> bool:
    if k <= l:
        return True
    else:
        return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r8(m: float, n: float, o: float, p: float) -> bool:
    if m >= n + o + p:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
PTO operation time must be less than or equal to the total operation time.
Idle time should be less than or equal to the total operation time.
Driving time should be less than or equal to the total operation time.
Stops with PTO engaged cannot outnumber the total stops.
The load supported by axle 1 cannot exceed that of axle 2.
Payload must remain below or equal to the load carried by axle 3.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";"

Here is the Python3 code:

# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r1(km: float, fuel: float) -> bool:
    if km >= 20 and fuel < 0.4:
        return False
    else:
        return True

# PTO operation time must be less than or equal to the total operation time.
def r2(pto: float, total: float) -> bool:
    if pto <= total:
        return True
    else:
        return False

# Idle time should be less than or equal to the total operation time.
def r3(idle: float, total: float) -> bool:
    if idle <= total:
        return True
    else:
        return False

# Driving time should be less than or equal to the total operation time.
def r4(driving: float, total: float) -> bool:
    if driving <= total:
        return True
    else:
        return False

# Stops with PTO engaged cannot outnumber the total stops.
def r5(pto_stops: int, total_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r6(axle1: float, axle2: float) -> bool:
    if axle1 <= axle2:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 3.
def r7(payload: float, axle3: float) -> bool:
    if payload <= axle3:
        return True
    else:
        return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r8(total: float, pto: float, idle: float, driving: float) -> bool:
    if total >= pto + idle + driving:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
Idle time should be less than or equal to the total operation time.
Driving time should be less than or equal to the total operation time.
The number of stops where PTO is engaged must not exceed the overall stop count.
The load on axle 1 must not surpass the load on axle 2.
Payload must remain below or equal to the load carried by axle 2.
Payload must remain below or equal to the load carried by axle 3.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"

Here is the Python3 code based on the given input text:

```
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption >= 5:
        return True
    else:
        return False

# Idle time should be less than or equal to the total operation time.
def r2(idle_time: float, total_operation_time: float) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# Driving time should be less than or equal to the total operation time.
def r3(driving_time: float, total_operation_time: float) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r4(pto_stops: int, overall_stops: int) -> bool:
    if pto_stops <= overall_stops:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 2.
def r5(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load <= axle2_load:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def r6(payload: float, axle2_load: float) -> bool:
    if payload <= axle2_load:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 3.
def r7(payload: float, axle3_load: float) -> bool:
    if payload <= axle3_load:
        return True
    else:
        return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r8(pto_operation_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
    if pto_operation_time + idle_time + driving_time <= total_operation_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
Stops with PTO engaged should never outnumber total stops.
The load supported by axle 1 cannot exceed that of axle 2.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
The payload must not exceed the load carried by axle 2.
Payload must remain below or equal to the load carried by axle 3.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";"

Here is the Python3 code based on the given input text:

```
# If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption / distance >= 0.05:
        return True
    else:
        return False

# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r2(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption / (distance / 100) >= 0.4:
        return True
    else:
        return False

# Stops with PTO engaged should never outnumber total stops.
def r3(pto_stops: int, total_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r4(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load <= axle2_load:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r5(axle1_load: float, axle3_load: float) -> bool:
    if axle1_load <= axle3_load:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 2.
def r6(payload: float, axle2_load: float) -> bool:
    if payload <= axle2_load:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 3.
def r7(payload: float, axle3_load: float) -> bool:
    if payload <= axle3_load:
        return True
    else:
        return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r8(operation_duration: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    if operation_duration >= pto_time + idle_time + driving_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
PTO operation time must be less than or equal to the total operation time.
The total stop count must not be lower than the count of stops where PTO is engaged.
The load supported by axle 1 cannot exceed that of axle 2.
Axle 1's load cannot exceed Axle 3's load.
The payload must always be smaller than or equal to the load on axle 2.
Axle 3's load must always be equal to or greater than the payload.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";"

Here is the Python3 code based on the given input text:

```
# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(km: float, fuel: float) -> bool:
    if km >= 20 and fuel >= 5:
        return True
    else:
        return False

# PTO operation time must be less than or equal to the total operation time.
def r2(pto: float, total: float) -> bool:
    if pto <= total:
        return True
    else:
        return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r3(total_stops: int, pto_stops: int) -> bool:
    if total_stops >= pto_stops:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r4(axle1: float, axle2: float) -> bool:
    if axle1 <= axle2:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 3's load.
def r5(axle1: float, axle3: float) -> bool:
    if axle1 <= axle3:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 2.
def r6(payload: float, axle2: float) -> bool:
    if payload <= axle2:
        return True
    else:
        return False

# Axle 3's load must always be equal to or greater than the payload.
def r7(axle3: float, payload: float) -> bool:
    if axle3 >= payload:
        return True
    else:
        return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r8(total: float, pto: float, idle: float, driving: float) -> bool:
    if total >= pto + idle + driving:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
PTO operation time should be less than or equal to the total operation time.
Idle time cannot be greater than the total operation time.
The total operation durationmust not be lower than the driving time.
The total stop count must not be lower than the count of stops where PTO is engaged.
The load supported by axle 1 cannot exceed that of axle 3.
Payload must remain below or equal to the load carried by axle 3.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";"

Here is the Python3 code based on the given input text:

```
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption >= 5:
        return True
    else:
        return False

# PTO operation time should be less than or equal to the total operation time.
def r2(pto_time: float, total_operation_time: float) -> bool:
    if pto_time <= total_operation_time:
        return True
    else:
        return False

# Idle time cannot be greater than the total operation time.
def r3(idle_time: float, total_operation_time: float) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# The total operation durationmust not be lower than the driving time.
def r4(total_operation_time: float, driving_time: float) -> bool:
    if total_operation_time >= driving_time:
        return True
    else:
        return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r5(total_stop_count: int, pto_stop_count: int) -> bool:
    if total_stop_count >= pto_stop_count:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 3.
def r6(axle1_load: float, axle3_load: float) -> bool:
    if axle1_load <= axle3_load:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 3.
def r7(payload: float, axle3_load: float) -> bool:
    if payload <= axle3_load:
        return True
    else:
        return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r8(total_operation_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    if total_operation_time >= pto_time + idle_time + driving_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
PTO operation time must be less than or equal to the total operation time.
The total operation duration must not be lower than the idle time.
PTO-engaged stops cannot exceed the total number of stops.
The load on axle 1 must not surpass the load on axle 2.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
The payload must not exceed the load carried by axle 3.
";"

Here is the Python3 code based on the given input text:

```
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption < 5:
        return False
    else:
        return True

# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r2(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption < 40:
        return False
    else:
        return True

# PTO operation time must be less than or equal to the total operation time.
def r3(pto_operation_time: float, total_operation_time: float) -> bool:
    if pto_operation_time > total_operation_time:
        return False
    else:
        return True

# The total operation duration must not be lower than the idle time.
def r4(total_operation_time: float, idle_time: float) -> bool:
    if total_operation_time < idle_time:
        return False
    else:
        return True

# PTO-engaged stops cannot exceed the total number of stops.
def r5(pto_engaged_stops: float, total_stops: float) -> bool:
    if pto_engaged_stops > total_stops:
        return False
    else:
        return True

# The load on axle 1 must not surpass the load on axle 2.
def r6(load_axle1: float, load_axle2: float) -> bool:
    if load_axle1 > load_axle2:
        return False
    else:
        return True

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r7(load_axle1: float, load_axle3: float) -> bool:
    if load_axle1 > load_axle3:
        return False
    else:
        return True

# The payload must not exceed the load carried by axle 3.
def r8(payload: float, load_axle3: float) -> bool:
    if payload > load_axle3:
        return False
    else:
        return True
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
Total operation time should shouldn’t be lower than driving time.
Stops with PTO engaged cannot outnumber the total stops.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
The payload must not exceed the load carried by axle 2.
Payload must remain below or equal to the load carried by axle 3.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";"

Here is the Python3 code based on the given input text:

```
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption < 5:
        return False
    else:
        return True

# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r2(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption < 0.4:
        return False
    else:
        return True

# Total operation time should shouldn’t be lower than driving time.
def r3(total_operation_time: float, driving_time: float) -> bool:
    if total_operation_time < driving_time:
        return False
    else:
        return True

# Stops with PTO engaged cannot outnumber the total stops.
def r4(pto_stops: int, total_stops: int) -> bool:
    if pto_stops > total_stops:
        return False
    else:
        return True

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def r5(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load > axle2_load:
        return False
    else:
        return True

# The payload must not exceed the load carried by axle 2.
def r6(payload: float, axle2_load: float) -> bool:
    if payload > axle2_load:
        return False
    else:
        return True

# Payload must remain below or equal to the load carried by axle 3.
def r7(payload: float, axle3_load: float) -> bool:
    if payload > axle3_load:
        return False
    else:
        return True

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r8(total_operation_time: float, pto_operation_time: float, idle_time: float, driving_time: float) -> bool:
    if total_operation_time < pto_operation_time + idle_time + driving_time:
        return False
    else:
        return True
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
Total operation time shouldn’t be lower than PTO operation time.
Idle time cannot be greater than the total operation time.
The total operation durationmust not be lower than the driving time.
PTO-engaged stops cannot exceed the total number of stops.
Axle 2's load must always be equal to or greater than the payload.
Axle 3's load must always be equal to or greater than the payload.
";"

Here is the Python3 code based on the given input text:

```
# The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r1(fuel_consumption: float, distance: float) -> bool:
    if distance >= 20 and fuel_consumption >= 0.5:
        return True
    else:
        return False

# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def r2(fuel_consumption: float, distance: float) -> bool:
    if distance >= 20 and fuel_consumption >= 0.4:
        return True
    else:
        return False

# Total operation time shouldn’t be lower than PTO operation time.
def r3(total_operation_time: float, pto_operation_time: float) -> bool:
    if total_operation_time >= pto_operation_time:
        return True
    else:
        return False

# Idle time cannot be greater than the total operation time.
def r4(idle_time: float, total_operation_time: float) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# The total operation durationmust not be lower than the driving time.
def r5(total_operation_duration: float, driving_time: float) -> bool:
    if total_operation_duration >= driving_time:
        return True
    else:
        return False

# PTO-engaged stops cannot exceed the total number of stops.
def r6(pto_engaged_stops: int, total_stops: int) -> bool:
    if ptos_stops <= total_stops:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def r7(axle2_load: float, payload: float) -> bool:
    if axle2_load >= payload:
        return True
    else:
        return False

# Axle 3's load must always be equal to or greater than the payload.
def r8(axle3_load: float, payload: float) -> bool:
    if axle3_load >= payload:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
PTO operation time must be less than or equal to the total operation time.
Idle time must always be less than or equal to the total operation time.
Total operation time should shouldn’t be lower than driving time.
The total stop count must not be lower than the count of stops where PTO is engaged.
The load supported by axle 1 cannot exceed that of axle 2.
The weight on axle 1 cannot surpass the weight on axle 3.
The payload must not exceed the load carried by axle 3.
";"

Here is the Python3 code based on the given input text:

```
# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r1(fuel: float, distance: float) -> bool:
    if distance >= 20 and fuel / distance >= 0.4:
        return True
    else:
        return False

# PTO operation time must be less than or equal to the total operation time.
def r2(pto: float, total: float) -> bool:
    if pto <= total:
        return True
    else:
        return False

# Idle time must always be less than or equal to the total operation time.
def r3(idle: float, total: float) -> bool:
    if idle <= total:
        return True
    else:
        return False

# Total operation time should shouldn’t be lower than driving time.
def r4(total: float, driving: float) -> bool:
    if total >= driving:
        return True
    else:
        return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r5(total_stops: int, pto_stops: int) -> bool:
    if total_stops >= pto_stops:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r6(axle1: float, axle2: float) -> bool:
    if axle1 <= axle2:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r7(axle1: float, axle3: float) -> bool:
    if axle1 <= axle3:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def r8(payload: float, axle3: float) -> bool:
    if payload <= axle3:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
PTO operation time cannot be greater than the total operation time.
Total operation time should shouldn’t be lower than driving time.
The total stop count must not be lower than the count of stops where PTO is engaged.
The load supported by axle 1 cannot exceed that of axle 2.
The payload must always be smaller than or equal to the load on axle 2.
The payload must always be smaller than or equal to the load on axle 3.
";"

Here is the Python3 code based on the given input text:

```
# The vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r1(fuel_consumption: float, distance: float) -> bool:
    if distance >= 20 and fuel_consumption >= 0.5:
        return True
    else:
        return False

# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r2(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption >= 0.4:
        return True
    else:
        return False

# PTO operation time cannot be greater than the total operation time.
def r3(pto_time: float, total_time: float) -> bool:
    if pto_time <= total_time:
        return True
    else:
        return False

# Total operation time should shouldn’t be lower than driving time.
def r4(total_time: float, driving_time: float) -> bool:
    if total_time >= driving_time:
        return True
    else:
        return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r5(total_stops: int, pto_stops: int) -> bool:
    if total_stops >= pto_stops:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r6(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load <= axle2_load:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 2.
def r7(payload: float, axle2_load: float) -> bool:
    if payload <= axle2_load:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 3.
def r8(payload: float, axle3_load: float) -> bool:
    if payload <= axle3_load:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
Total operation time shouldn’t be lower than PTO operation time.
Idle time must always be less than or equal to the total operation time.
Driving time should be less than or equal to the total operation time.
The weight on axle 1 cannot surpass the weight on axle 2.
Axle 2's load must always be equal to or greater than the payload.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"

Here is the Python3 code based on the given input text:

```
# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(km: float, fuel: float) -> bool:
    if km >= 20 and fuel / km >= 0.05:
        return True
    else:
        return False

# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r2(km: float, fuel: float) -> bool:
    if km >= 20 and fuel / km >= 0.4:
        return True
    else:
        return False

# Total operation time shouldn’t be lower than PTO operation time.
def r3(pto: float, total: float) -> bool:
    if total >= pto:
        return True
    else:
        return False

# Idle time must always be less than or equal to the total operation time.
def r4(idle: float, total: float) -> bool:
    if idle <= total:
        return True
    else:
        return False

# Driving time should be less than or equal to the total operation time.
def r5(driving: float, total: float) -> bool:
    if driving <= total:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r6(axle1: float, axle2: float) -> bool:
    if axle1 <= axle2:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def r7(axle2: float, payload: float) -> bool:
    if axle2 >= payload:
        return True
    else:
        return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r8(pto: float, idle: float, driving: float, total: float) -> bool:
    if total >= pto + idle + driving:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
Total operation time shouldn’t be lower than PTO operation time.
Idle time must always be less than or equal to the total operation time.
Stops with PTO engaged should never outnumber total stops.
The weight on axle 1 cannot surpass the weight on axle 2.
Axle 1's load cannot exceed Axle 3's load.
Axle 2's load must always be equal to or greater than the payload.
The payload cannot exceed the capacity of axle 3.
";"

Here is the Python3 code based on the given input text:

```
# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def r1(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption >= 0.4:
        return True
    else:
        return False

# Total operation time shouldn’t be lower than PTO operation time.
def r2(total_operation_time: float, pto_operation_time: float) -> bool:
    if total_operation_time >= pto_operation_time:
        return True
    else:
        return False

# Idle time must always be less than or equal to the total operation time.
def r3(idle_time: float, total_operation_time: float) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# Stops with PTO engaged should never outnumber total stops.
def r4(pto_stops: int, total_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r5(axle1_weight: float, axle2_weight: float) -> bool:
    if axle1_weight <= axle2_weight:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 3's load.
def r6(axle1_load: float, axle3_load: float) -> bool:
    if axle1_load <= axle3_load:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def r7(axle2_load: float, payload: float) -> bool:
    if axle2_load >= payload:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 3.
def r8(payload: float, axle3_capacity: float) -> bool:
    if payload <= axle3_capacity:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
The total operation duration must not be lower than the idle time.
Driving time should be less than or equal to the total operation time.
The total stop count must not be lower than the count of stops where PTO is engaged.
Axle 2's load must always be equal to or greater than the payload.
The payload cannot exceed the capacity of axle 3.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";"

Here is the Python3 code based on the given input text:

```
# If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
def r1(distance: float, fuel_consumption_rate: float) -> bool:
    if distance >= 20 and fuel_consumption_rate / distance >= 0.05:
        return True
    else:
        return False

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r2(distance: float, fuel_consumption_rate: float) -> bool:
    if distance >= 20 and fuel_consumption_rate / (distance / 100) >= 0.4:
        return True
    else:
        return False

# The total operation duration must not be lower than the idle time.
def r3(total_operation_duration: float, idle_time: float) -> bool:
    if total_operation_duration >= idle_time:
        return True
    else:
        return False

# Driving time should be less than or equal to the total operation time.
def r4(driving_time: float, total_operation_duration: float) -> bool:
    if driving_time <= total_operation_duration:
        return True
    else:
        return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r5(total_stop_count: int, pto_stop_count: int) -> bool:
    if total_stop_count >= pto_stop_count:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def r6(axle2_load: float, payload: float) -> bool:
    if axle2_load >= payload:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 3.
def r7(payload: float, axle3_capacity: float) -> bool:
    if payload <= axle3_capacity:
        return True
    else:
        return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r8(total_operation_duration: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    if total_operation_duration >= pto_time + idle_time + driving_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
PTO operation time cannot be greater than the total operation time.
The total operation duration must not be lower than the idle time.
Stops with PTO engaged should never outnumber total stops.
The load on axle 1 must not surpass the load on axle 3.
The payload cannot exceed the capacity of axle 2.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";"

Here is the Python3 code based on the given input text:

```
# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(t: float, f: float) -> bool:
    if t >= 20 and f / t >= 0.25:
        return True
    else:
        return False

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r2(t: float, f: float) -> bool:
    if t >= 20 and f / t >= 4:
        return True
    else:
        return False

# PTO operation time cannot be greater than the total operation time.
def r3(a: float, b: float) -> bool:
    if a <= b:
        return True
    else:
        return False

# The total operation duration must not be lower than the idle time.
def r4(a: float, b: float) -> bool:
    if a >= b:
        return True
    else:
        return False

# Stops with PTO engaged should never outnumber total stops.
def r5(a: float, b: float) -> bool:
    if a <= b:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 3.
def r6(a: float, b: float) -> bool:
    if a <= b:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 2.
def r7(a: float, b: float) -> bool:
    if a <= b:
        return True
    else:
        return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r8(a: float, b: float, c: float) -> bool:
    if a >= b + c:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
PTO operation time cannot be greater than the total operation time.
Total operation time should shouldn’t be lower than driving time.
PTO-engaged stops cannot exceed the total number of stops.
The weight on axle 1 cannot surpass the weight on axle 2.
The load supported by axle 1 cannot exceed that of axle 3.
The payload must always be smaller than or equal to the load on axle 3.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";"

Here is the Python3 code based on the given input text:

```
# The vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r1(fuel: float, distance: float) -> bool:
    if distance >= 20 and fuel >= 5:
        return True
    else:
        return False

# PTO operation time cannot be greater than the total operation time.
def r2(pto: float, total: float) -> bool:
    if pto <= total:
        return True
    else:
        return False

# Total operation time should shouldn’t be lower than driving time.
def r3(total: float, driving: float) -> bool:
    if total >= driving:
        return True
    else:
        return False

# PTO-engaged stops cannot exceed the total number of stops.
def r4(pto_stops: float, total_stops: float) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r5(axle1: float, axle2: float) -> bool:
    if axle1 <= axle2:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 3.
def r6(axle1: float, axle3: float) -> bool:
    if axle1 <= axle3:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 3.
def r7(payload: float, axle3: float) -> bool:
    if payload <= axle3:
        return True
    else:
        return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r8(total: float, pto: float, idle: float, driving: float) -> bool:
    if total >= pto + idle + driving:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
PTO operation time should be less than or equal to the total operation time.
Total operation time shouldn’t be lower than idle time.
Driving time must always be less than or equal to the total operation time.
Stops with PTO engaged cannot outnumber the total stops.
The payload must always be smaller than or equal to the load on axle 2.
The payload must not exceed the load carried by axle 3.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"

Here is the Python3 code based on the given input text:

```
# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r1(fuel: float, distance: float) -> bool:
    if distance >= 20 and fuel >= 0.4:
        return True
    else:
        return False

# PTO operation time should be less than or equal to the total operation time.
def r2(pto: float, total: float) -> bool:
    if pto <= total:
        return True
    else:
        return False

# Total operation time shouldn’t be lower than idle time.
def r3(total: float, idle: float) -> bool:
    if total >= idle:
        return True
    else:
        return False

# Driving time must always be less than or equal to the total operation time.
def r4(driving: float, total: float) -> bool:
    if driving <= total:
        return True
    else:
        return False

# Stops with PTO engaged cannot outnumber the total stops.
def r5(pto_stops: int, total_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 2.
def r6(payload: float, load_axle2: float) -> bool:
    if payload <= load_axle2:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def r7(payload: float, load_axle3: float) -> bool:
    if payload <= load_axle3:
        return True
    else:
        return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r8(pto: float, idle: float, driving: float, total: float) -> bool:
    if pto + idle + driving <= total:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
PTO operation time should be less than or equal to the total operation time.
Idle time must always be less than or equal to the total operation time.
Driving time should be less than or equal to the total operation time.
PTO-engaged stops cannot exceed the total number of stops.
The weight on axle 1 cannot surpass the weight on axle 2.
Payload must remain below or equal to the load carried by axle 2.
The payload cannot exceed the capacity of axle 3.
";"

Here is the Python3 code based on the given input text:

```
# The vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r1(fuel: float, distance: float) -> bool:
    if distance >= 20 and fuel >= 5:
        return True
    else:
        return False

# PTO operation time should be less than or equal to the total operation time.
def r2(pto: float, total: float) -> bool:
    if pto <= total:
        return True
    else:
        return False

# Idle time must always be less than or equal to the total operation time.
def r3(idle: float, total: float) -> bool:
    if idle <= total:
        return True
    else:
        return False

# Driving time should be less than or equal to the total operation time.
def r4(driving: float, total: float) -> bool:
    if driving <= total:
        return True
    else:
        return False

# PTO-engaged stops cannot exceed the total number of stops.
def r5(pto_stops: int, total_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r6(axle1: float, axle2: float) -> bool:
    if axle1 <= axle2:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def r7(payload: float, axle2: float) -> bool:
    if payload <= axle2:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 3.
def r8(payload: float, axle3: float) -> bool:
    if payload <= axle3:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
Total operation time shouldn’t be lower than PTO operation time.
Driving time cannot be greater than the total operation time.
The total stop count must not be lower than the count of stops where PTO is engaged.
Axle 1's load cannot exceed Axle 2's load.
Payload must remain below or equal to the load carried by axle 2.
The payload must always be smaller than or equal to the load on axle 3.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";"

Here is the Python3 code based on the given input text:

```
# If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
    if distance / fuel_consumption >= 4:
        return True
    else:
        return False

# Total operation time shouldn’t be lower than PTO operation time.
def r2(total_operation_time: float, pto_operation_time: float) -> bool:
    if total_operation_time >= pto_operation_time:
        return True
    else:
        return False

# Driving time cannot be greater than the total operation time.
def r3(driving_time: float, total_operation_time: float) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r4(total_stop_count: int, pto_stop_count: int) -> bool:
    if total_stop_count >= pto_stop_count:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 2's load.
def r5(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load <= axle2_load:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def r6(payload: float, axle2_load: float) -> bool:
    if payload <= axle2_load:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 3.
def r7(payload: float, axle3_load: float) -> bool:
    if payload <= axle3_load:
        return True
    else:
        return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r8(total_operation_duration: float, pto_duration: float, idle_duration: float, driving_duration: float) -> bool:
    if total_operation_duration >= pto_duration + idle_duration + driving_duration:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: Total operation time shouldn’t be lower than idle time.
Driving time must always be less than or equal to the total operation time.
Stops with PTO engaged cannot outnumber the total stops.
The weight on axle 1 cannot surpass the weight on axle 2.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
Axle 2's load must always be equal to or greater than the payload.
The payload must not exceed the load carried by axle 3.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";"

Here is the Python3 code based on the given input text:

```
# Total operation time shouldn’t be lower than idle time.
def r1(total_operation_time: float, idle_time: float) -> bool:
    if total_operation_time >= idle_time:
        return True
    else:
        return False

# Driving time must always be less than or equal to the total operation time.
def r2(driving_time: float, total_operation_time: float) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False

# Stops with PTO engaged cannot outnumber the total stops.
def r3(pto_stops: int, total_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r4(axle1_weight: float, axle2_weight: float) -> bool:
    if axle1_weight <= axle2_weight:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r5(axle1_load: float, axle3_load: float) -> bool:
    if axle1_load <= axle3_load:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def r6(axle2_load: float, payload: float) -> bool:
    if axle2_load >= payload:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def r7(payload: float, axle3_load: float) -> bool:
    if payload <= axle3_load:
        return True
    else:
        return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r8(total_operation_time: float, pto_operation_time: float, idle_time: float, driving_time: float) -> bool:
    if total_operation_time >= pto_operation_time + idle_time + driving_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
Total operation time shouldn’t be lower than PTO operation time.
The weight on axle 1 cannot surpass the weight on axle 2.
The weight on axle 1 cannot surpass the weight on axle 3.
Axle 2's load must always be equal to or greater than the payload.
The payload must always be smaller than or equal to the load on axle 3.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";"

Here is the Python3 code based on the given input text:

```
# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(fuel_consumption: float, distance: float) -> bool:
    if distance >= 20 and fuel_consumption >= 0.05:
        return True
    else:
        return False

# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def r2(fuel_consumption: float, distance: float) -> bool:
    if distance >= 20 and fuel_consumption >= 0.4:
        return True
    else:
        return False

# Total operation time shouldn’t be lower than PTO operation time.
def r3(total_operation_time: float, pto_operation_time: float) -> bool:
    if total_operation_time >= pto_operation_time:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r4(axle1_weight: float, axle2_weight: float) -> bool:
    if axle1_weight <= axle2_weight:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r5(axle1_weight: float, axle3_weight: float) -> bool:
    if axle1_weight <= axle3_weight:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def r6(axle2_weight: float, payload: float) -> bool:
    if axle2_weight >= payload:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 3.
def r7(payload: float, axle3_weight: float) -> bool:
    if payload <= axle3_weight:
        return True
    else:
        return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r8(total_operation_time: float, pto_operation_time: float, idle_time: float, driving_time: float) -> bool:
    if total_operation_time >= pto_operation_time + idle_time + driving_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
PTO operation time should be less than or equal to the total operation time.
Idle time should be less than or equal to the total operation time.
Driving time must always be less than or equal to the total operation time.
The total stop count must not be lower than the count of stops where PTO is engaged.
Axle 1's load cannot exceed Axle 2's load.
Payload must remain below or equal to the load carried by axle 2.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"

Here is the Python3 code based on the given input text:

```
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption >= 5:
        return True
    else:
        return False

# PTO operation time should be less than or equal to the total operation time.
def r2(pto_time: float, total_time: float) -> bool:
    if pto_time <= total_time:
        return True
    else:
        return False

# Idle time should be less than or equal to the total operation time.
def r3(idle_time: float, total_time: float) -> bool:
    if idle_time <= total_time:
        return True
    else:
        return False

# Driving time must always be less than or equal to the total operation time.
def r4(driving_time: float, total_time: float) -> bool:
    if driving_time <= total_time:
        return True
    else:
        return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r5(total_stops: int, pto_stops: int) -> bool:
    if total_stops >= pto_stops:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 2's load.
def r6(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load <= axle2_load:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def r7(payload: float, axle2_load: float) -> bool:
    if payload <= axle2_load:
        return True
    else:
        return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r8(pto_time: float, idle_time: float, driving_time: float, total_time: float) -> bool:
    if pto_time + idle_time + driving_time <= total_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
Driving time must always be less than or equal to the total operation time.
The total stop count must not be lower than the count of stops where PTO is engaged.
The weight on axle 1 cannot surpass the weight on axle 3.
The payload cannot exceed the capacity of axle 2.
The payload must not exceed the load carried by axle 3.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";"

Here is the Python3 code based on the given input text:

```
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption < 5:
        return False
    else:
        return True

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r2(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption < 40:
        return False
    else:
        return True

# Driving time must always be less than or equal to the total operation time.
def r3(driving_time: float, operation_time: float) -> bool:
    if driving_time > operation_time:
        return False
    else:
        return True

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r4(total_stops: int, pto_stops: int) -> bool:
    if total_stops < pto_stops:
        return False
    else:
        return True

# The weight on axle 1 cannot surpass the weight on axle 3.
def r5(axle1_weight: float, axle3_weight: float) -> bool:
    if axle1_weight > axle3_weight:
        return False
    else:
        return True

# The payload cannot exceed the capacity of axle 2.
def r6(payload: float, axle2_capacity: float) -> bool:
    if payload > axle2_capacity:
        return False
    else:
        return True

# The payload must not exceed the load carried by axle 3.
def r7(payload: float, axle3_load: float) -> bool:
    if payload > axle3_load:
        return False
    else:
        return True

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r8(operation_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    if operation_time < pto_time + idle_time + driving_time:
        return False
    else:
        return True
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
The total operation duration must not be lower than the PTO operation time.
PTO-engaged stops cannot exceed the total number of stops.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
Axle 1's load cannot exceed Axle 3's load.
The payload cannot exceed the capacity of axle 3.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";"

Here is the Python3 code based on the given input text:

```
# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(km: float, fuel: float) -> bool:
    if km >= 20 and fuel / km >= 0.05:
        return True
    else:
        return False

# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def r2(km: float, fuel: float) -> bool:
    if km >= 20 and fuel / km >= 0.4:
        return True
    else:
        return False

# The total operation duration must not be lower than the PTO operation time.
def r3(total_time: float, pto_time: float) -> bool:
    if total_time >= pto_time:
        return True
    else:
        return False

# PTO-engaged stops cannot exceed the total number of stops.
def r4(pto_stops: int, total_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def r5(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load <= axle2_load:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 3's load.
def r6(axle1_load: float, axle3_load: float) -> bool:
    if axle1_load <= axle3_load:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 3.
def r7(payload: float, axle3_capacity: float) -> bool:
    if payload <= axle3_capacity:
        return True
    else:
        return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r8(total_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    if total_time >= pto_time + idle_time + driving_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
The total operation duration must not be lower than the PTO operation time.
The total operation duration must not be lower than the idle time.
The total stop count must not be lower than the count of stops where PTO is engaged.
Payload must remain below or equal to the load carried by axle 2.
The payload cannot exceed the capacity of axle 3.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";"

Here is the Python3 code based on the given input text:

```
# The vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r1(fuel_consumption: float, distance: float) -> bool:
    if distance >= 20 and fuel_consumption >= 0.5:
        return True
    else:
        return False

# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r2(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption >= 0.4:
        return True
    else:
        return False

# The total operation duration must not be lower than the PTO operation time.
def r3(pto_operation_time: float, total_operation_duration: float) -> bool:
    if total_operation_duration >= pto_operation_time:
        return True
    else:
        return False

# The total operation duration must not be lower than the idle time.
def r4(idle_time: float, total_operation_duration: float) -> bool:
    if total_operation_duration >= idle_time:
        return True
    else:
        return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r5(pto_stop_count: int, total_stop_count: int) -> bool:
    if total_stop_count >= pto_stop_count:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def r6(axle2_load: float, payload: float) -> bool:
    if payload <= axle2_load:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 3.
def r7(axle3_capacity: float, payload: float) -> bool:
    if payload <= axle3_capacity:
        return True
    else:
        return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r8(pto_operation_time: float, idle_time: float, driving_time: float, total_operation_duration: float) -> bool:
    if total_operation_duration >= pto_operation_time + idle_time + driving_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: PTO operation time should be less than or equal to the total operation time.
Idle time must always be less than or equal to the total operation time.
PTO-engaged stops cannot exceed the total number of stops.
Axle 1's load cannot exceed Axle 2's load.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
The payload must not exceed the load carried by axle 2.
Axle 3's load must always be equal to or greater than the payload.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"

Here is the Python3 code based on the given input text:

```
# PTO operation time should be less than or equal to the total operation time.
def r1(pto: float, total_operation_time: float) -> bool:
    if pto <= total_operation_time:
        return True
    else:
        return False

# Idle time must always be less than or equal to the total operation time.
def r2(idle: float, total_operation_time: float) -> bool:
    if idle <= total_operation_time:
        return True
    else:
        return False

# PTO-engaged stops cannot exceed the total number of stops.
def r3(pto_stops: int, total_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 2's load.
def r4(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load <= axle2_load:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r5(axle1_load: float, axle3_load: float) -> bool:
    if axle1_load <= axle3_load:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 2.
def r6(payload: float, axle2_load: float) -> bool:
    if payload <= axle2_load:
        return True
    else:
        return False

# Axle 3's load must always be equal to or greater than the payload.
def r7(axle3_load: float, payload: float) -> bool:
    if axle3_load >= payload:
        return True
    else:
        return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r8(total_operation_time: float, pto: float, idle: float, driving: float) -> bool:
    if total_operation_time >= pto + idle + driving:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
The total operation duration must not be lower than the PTO operation time.
Total operation time shouldn’t be lower than idle time.
The number of stops where PTO is engaged must not exceed the overall stop count.
The weight on axle 1 cannot surpass the weight on axle 2.
The load supported by axle 1 cannot exceed that of axle 3.
The payload cannot exceed the capacity of axle 2.
The payload cannot exceed the capacity of axle 3.
";"

Here is the Python3 code based on the given input text:

```
# The vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r1(fuel: float, distance: float) -> bool:
    if distance >= 20 and fuel >= 5:
        return True
    else:
        return False

# The total operation duration must not be lower than the PTO operation time.
def r2(total_operation_time: float, pto_operation_time: float) -> bool:
    if total_operation_time >= pto_operation_time:
        return True
    else:
        return False

# Total operation time shouldn’t be lower than idle time.
def r3(total_operation_time: float, idle_time: float) -> bool:
    if total_operation_time >= idle_time:
        return True
    else:
        return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r4(pto_stops: int, overall_stops: int) -> bool:
    if pto_stops <= overall_stops:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r5(axle1_weight: float, axle2_weight: float) -> bool:
    if axle1_weight <= axle2_weight:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 3.
def r6(axle1_load: float, axle3_load: float) -> bool:
    if axle1_load <= axle3_load:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 2.
def r7(payload: float, axle2_capacity: float) -> bool:
    if payload <= axle2_capacity:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 3.
def r8(payload: float, axle3_capacity: float) -> bool:
    if payload <= axle3_capacity:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
Total operation time shouldn’t be lower than idle time.
Driving time should be less than or equal to the total operation time.
The load supported by axle 1 cannot exceed that of axle 3.
The payload must not exceed the load carried by axle 2.
The payload must not exceed the load carried by axle 3.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";"

Here is the Python3 code based on the given input text:

```
# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(km: float, fuel: float) -> bool:
    if km >= 20 and fuel / km >= 0.05:
        return True
    else:
        return False

# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def r2(km: float, fuel: float) -> bool:
    if km >= 20 and fuel / km >= 0.4:
        return True
    else:
        return False

# Total operation time shouldn’t be lower than idle time.
def r3(total_time: float, idle_time: float) -> bool:
    if total_time >= idle_time:
        return True
    else:
        return False

# Driving time should be less than or equal to the total operation time.
def r4(driving_time: float, total_time: float) -> bool:
    if driving_time <= total_time:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 3.
def r5(axle1: float, axle3: float) -> bool:
    if axle1 <= axle3:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 2.
def r6(payload: float, axle2: float) -> bool:
    if payload <= axle2:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def r7(payload: float, axle3: float) -> bool:
    if payload <= axle3:
        return True
        else:
            return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r8(total_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    if total_time >= pto_time + idle_time + driving_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
Total operation time shouldn’t be lower than PTO operation time.
Idle time cannot be greater than the total operation time.
Driving time should be less than or equal to the total operation time.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
Payload must remain below or equal to the load carried by axle 2.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"

Here is the Python3 code based on the given input text:

```
# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(km: float, fuel: float) -> bool:
    if km >= 20 and fuel / km >= 0.05:
        return True
    else:
        return False

# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def r2(km: float, fuel: float) -> bool:
    if km >= 20 and fuel / km >= 0.4:
        return True
    else:
        return False

# Total operation time shouldn’t be lower than PTO operation time.
def r3(pto: float, total: float) -> bool:
    if total >= pto:
        return True
    else:
        return False

# Idle time cannot be greater than the total operation time.
def r4(idle: float, total: float) -> bool:
    if idle <= total:
        return True
    else:
        return False

# Driving time should be less than or equal to the total operation time.
def r5(driving: float, total: float) -> bool:
    if driving <= total:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r6(axle1: float, axle3: float) -> bool:
    if axle1 <= axle3:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def r7(payload: float, axle2: float) -> bool:
    if payload <= axle2:
        return True
    else:
        return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r8(pto: float, idle: float, driving: float, total: float) -> bool:
    if total >= pto + idle + driving:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
PTO operation time must be less than or equal to the total operation time.
Idle time should be less than or equal to the total operation time.
The total stop count must not be lower than the count of stops where PTO is engaged.
The weight on axle 1 cannot surpass the weight on axle 2.
Axle 2's load must always be equal to or greater than the payload.
Payload must remain below or equal to the load carried by axle 3.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"

Here is the Python3 code based on the given input text:

```
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption >= 5:
        return True
    else:
        return False

# PTO operation time must be less than or equal to the total operation time.
def r2(pto_time: float, total_time: float) -> bool:
    if pto_time <= total_time:
        return True
    else:
        return False

# Idle time should be less than or equal to the total operation time.
def r3(idle_time: float, total_time: float) -> bool:
    if idle_time <= total_time:
        return True
    else:
        return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r4(total_stops: int, pto_stops: int) -> bool:
    if total_stops >= pto_stops:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r5(axle1_weight: float, axle2_weight: float) -> bool:
    if axle1_weight <= axle2_weight:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def r6(axle2_load: float, payload: float) -> bool:
    if axle2_load >= payload:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 3.
def r7(payload: float, axle3_load: float) -> bool:
    if payload <= axle3_load:
        return True
    else:
        return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r8(total_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    if total_time >= pto_time + idle_time + driving_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
Idle time should be less than or equal to the total operation time.
Driving time must always be less than or equal to the total operation time.
The total stop count must not be lower than the count of stops where PTO is engaged.
The weight on axle 1 cannot surpass the weight on axle 3.
The payload must not exceed the load carried by axle 2.
The payload must always be smaller than or equal to the load on axle 3.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"

Here is the Python3 code based on the given input text:

```
# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def r1(a: float, b: float) -> bool:
    if a >= 20 and b / a >= 0.4:
        return True
    else:
        return False

# Idle time should be less than or equal to the total operation time.
def r2(idle: float, total: float) -> bool:
    if idle <= total:
        return True
    else:
        return False

# Driving time must always be less than or equal to the total operation time.
def r3(driving: float, total: float) -> bool:
    if driving <= total:
        return True
    else:
        return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r4(total_stops: int, pto_stops: int) -> bool:
    if total_stops >= pto_stops:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r5(axle1: float, axle3: float) -> bool:
    if axle1 <= axle3:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 2.
def r6(payload: float, axle2: float) -> bool:
    if payload <= axle2:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 3.
def r7(payload: float, axle3: float) -> bool:
    if payload <= axle3:
        return True
    else:
        return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r8(pto: float, idle: float, driving: float, total: float) -> bool:
    if pto + idle + driving <= total:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
PTO operation time should be less than or equal to the total operation time.
Total operation time shouldn’t be lower than idle time.
Total operation time should shouldn’t be lower than driving time.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
The load supported by axle 1 cannot exceed that of axle 3.
Axle 3's load must always be equal to or greater than the payload.
";"

Here is the Python3 code based on the given input text:

```
# If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
def r1(distance: float, fuel_consumption_rate: float) -> bool:
    if distance >= 20 and fuel_consumption_rate / distance >= 0.05:
        return True
    else:
        return False

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r2(distance: float, fuel_consumption_rate: float) -> bool:
    if distance >= 20 and fuel_consumption_rate / (distance / 100) >= 0.4:
        return True
    else:
        return False

# PTO operation time should be less than or equal to the total operation time.
def r3(pto_operation_time: float, total_operation_time: float) -> bool:
    if pto_operation_time <= total_operation_time:
        return True
    else:
        return False

# Total operation time shouldn’t be lower than idle time.
def r4(total_operation_time: float, idle_time: float) -> bool:
    if total_operation_time >= idle_time:
        return True
    else:
        return False

# Total operation time should shouldn’t be lower than driving time.
def r5(total_operation_time: float, driving_time: float) -> bool:
    if total_operation_time >= driving_time:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def r6(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load <= axle2_load:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 3.
def r7(axle1_load: float, axle3_load: float) -> bool:
    if axle1_load <= axle3_load:
        return True
    else:
        return False

# Axle 3's load must always be equal to or greater than the payload.
def r8(axle3_load: float, payload: float) -> bool:
    if axle3_load >= payload:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
Total operation time shouldn’t be lower than PTO operation time.
Idle time cannot be greater than the total operation time.
Total operation time should shouldn’t be lower than driving time.
PTO-engaged stops cannot exceed the total number of stops.
The payload must always be smaller than or equal to the load on axle 3.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"

Here is the Python3 code based on the given input text:

```
# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r2(c: float, d: float) -> bool:
    if d / c >= 0.4:
        return True
    else:
        return False

# Total operation time shouldn’t be lower than PTO operation time.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Idle time cannot be greater than the total operation time.
def r4(g: float, h: float) -> bool:
    if g <= h:
        return True
    else:
        return False

# Total operation time should shouldn’t be lower than driving time.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# PTO-engaged stops cannot exceed the total number of stops.
def r6(k: float, l: float) -> bool:
    if k <= l:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 3.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r8(o: float, p: float, q: float, r: float) -> bool:
    if o + p + q <= r:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
PTO operation time must be less than or equal to the total operation time.
Idle time must always be less than or equal to the total operation time.
Driving time should be less than or equal to the total operation time.
Stops with PTO engaged should never outnumber total stops.
Axle 2's load must always be equal to or greater than the payload.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";"

Here is the Python3 code based on the given input text:

```
# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(a: float, b: float) -> bool:
    if a >= 20 and b / a >= 0.05:
        return True
    else:
        return False

# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r2(a: float, c: float) -> bool:
    if a >= 20 and c / a >= 0.4:
        return True
    else:
        return False

# PTO operation time must be less than or equal to the total operation time.
def r3(d: float, e: float) -> bool:
    if d <= e:
        return True
    else:
        return False

# Idle time must always be less than or equal to the total operation time.
def r4(f: float, e: float) -> bool:
    if f <= e:
        return True
    else:
        return False

# Driving time should be less than or equal to the total operation time.
def r5(g: float, e: float) -> bool:
    if g <= e:
        return True
    else:
        return False

# Stops with PTO engaged should never outnumber total stops.
def r6(h: float, i: float) -> bool:
    if h <= i:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def r7(j: float, k: float) -> bool:
    if j >= k:
        return True
    else:
        return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r8(e: float, d: float, f: float, g: float) -> bool:
    if e >= d + f + g:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: PTO operation time cannot be greater than the total operation time.
Idle time should be less than or equal to the total operation time.
Driving time cannot be greater than the total operation time.
PTO-engaged stops cannot exceed the total number of stops.
The weight on axle 1 cannot surpass the weight on axle 2.
The load on axle 1 must not surpass the load on axle 3.
The payload cannot exceed the capacity of axle 3.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"

Here is the Python3 code based on the given input text:

```
# PTO operation time cannot be greater than the total operation time.
def r1(pto: float, total: float) -> bool:
    if pto <= total:
        return True
    else:
        return False

# Idle time should be less than or equal to the total operation time.
def r2(idle: float, total: float) -> bool:
    if idle <= total:
        return True
    else:
        return False

# Driving time cannot be greater than the total operation time.
def r3(driving: float, total: float) -> bool:
    if driving <= total:
        return True
    else:
        return False

# PTO-engaged stops cannot exceed the total number of stops.
def r4(pto_stops: int, total_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r5(axle1: float, axle2: float) -> bool:
    if axle1 <= axle2:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 3.
def r6(axle1: float, axle3: float) -> bool:
    if axle1 <= axle3:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 3.
def r7(payload: float, axle3: float) -> bool:
    if payload <= axle3:
        return True
    else:
        return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r8(pto: float, idle: float, driving: float, total: float) -> bool:
    if pto + idle + driving <= total:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
Idle time cannot be greater than the total operation time.
Driving time must always be less than or equal to the total operation time.
The load supported by axle 1 cannot exceed that of axle 2.
The load supported by axle 1 cannot exceed that of axle 3.
The payload must not exceed the load carried by axle 2.
The payload must not exceed the load carried by axle 3.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";"

Here is the Python3 code based on the given input text:

```
# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r1(fuel: float, distance: float) -> bool:
    if distance >= 20 and fuel / distance >= 0.4:
        return True
    else:
        return False

# Idle time cannot be greater than the total operation time.
def r2(idle: float, operation: float) -> bool:
    if idle <= operation:
        return True
    else:
        return False

# Driving time must always be less than or equal to the total operation time.
def r3(driving: float, operation: float) -> bool:
    if driving <= operation:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r4(axle1: float, axle2: float) -> bool:
    if axle1 <= axle2:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 3.
def r5(axle1: float, axle3: float) -> bool:
    if axle1 <= axle3:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 2.
def r6(payload: float, axle2: float) -> bool:
    if payload <= axle2:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def r7(payload: float, axle3: float) -> bool:
    if payload <= axle3:
        return True
    else:
        return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r8(operation: float, pto: float, idle: float, driving: float) -> bool:
    if operation >= pto + idle + driving:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
Driving time must always be less than or equal to the total operation time.
Stops with PTO engaged cannot outnumber the total stops.
The weight on axle 1 cannot surpass the weight on axle 2.
The load on axle 1 must not surpass the load on axle 3.
Axle 2's load must always be equal to or greater than the payload.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"

Here is the Python3 code based on the given input text:

```
# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r2(c: float, d: float) -> bool:
    if d / c >= 0.4:
        return True
    else:
        return False

# Driving time must always be less than or equal to the total operation time.
def r3(e: float, f: float) -> bool:
    if e <= f:
        return True
    else:
        return False

# Stops with PTO engaged cannot outnumber the total stops.
def r4(g: float, h: float) -> bool:
    if g <= h:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r5(i: float, j: float) -> bool:
    if i <= j:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 3.
def r6(k: float, l: float) -> bool:
    if k <= l:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def r7(m: float, n: float) -> bool:
    if m >= n:
        return True
    else:
        return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
The total operation duration must not be lower than the PTO operation time.
Idle time must always be less than or equal to the total operation time.
PTO-engaged stops cannot exceed the total number of stops.
The load supported by axle 1 cannot exceed that of axle 3.
The payload must always be smaller than or equal to the load on axle 2.
Axle 3's load must always be equal to or greater than the payload.
";"

Here is the Python3 code based on the given input text:

```
# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r2(a: float, c: float) -> bool:
    if c / a >= 0.4:
        return True
    else:
        return False

# The total operation duration must not be lower than the PTO operation time.
def r3(d: float, e: float) -> bool:
    if d >= e:
        return True
    else:
        return False

# Idle time must always be less than or equal to the total operation time.
def r4(f: float, d: float) -> bool:
    if f <= d:
        return True
    else:
        return False

# PTO-engaged stops cannot exceed the total number of stops.
def r5(g: float, h: float) -> bool:
    if g <= h:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 3.
def r6(i: float, j: float) -> bool:
    if i <= j:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 2.
def r7(k: float, l: float) -> bool:
    if k <= l:
        return True
    else:
        return False

# Axle 3's load must always be equal to or greater than the payload.
def r8(m: float, k: float) -> bool:
    if m >= k:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
PTO operation time must be less than or equal to the total operation time.
Idle time should be less than or equal to the total operation time.
Driving time should be less than or equal to the total operation time.
PTO-engaged stops cannot exceed the total number of stops.
The weight on axle 1 cannot surpass the weight on axle 2.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
The payload must not exceed the load carried by axle 2.
";"

Here is the Python3 code based on the given input text:

```
# If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
    if fuel_consumption / distance >= 0.05:
        return True
    else:
        return False

# PTO operation time must be less than or equal to the total operation time.
def r2(pto_time: float, total_time: float) -> bool:
    if pto_time <= total_time:
        return True
    else:
        return False

# Idle time should be less than or equal to the total operation time.
def r3(idle_time: float, total_time: float) -> bool:
    if idle_time <= total_time:
        return True
    else:
        return False

# Driving time should be less than or equal to the total operation time.
def r4(driving_time: float, total_time: float) -> bool:
    if driving_time <= total_time:
        return True
    else:
        return False

# PTO-engaged stops cannot exceed the total number of stops.
def r5(pto_stops: int, total_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r6(axle1_weight: float, axle2_weight: float) -> bool:
    if axle1_weight <= axle2_weight:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r7(axle1_load: float, axle3_load: float) -> bool:
    if axle1_load <= axle3_load:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 2.
def r8(payload: float, axle2_load: float) -> bool:
    if payload <= axle2_load:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
PTO operation time must be less than or equal to the total operation time.
Idle time cannot be greater than the total operation time.
The total operation durationmust not be lower than the driving time.
The load on axle 1 must not surpass the load on axle 2.
The load on axle 1 must not surpass the load on axle 3.
Payload must remain below or equal to the load carried by axle 2.
";"

Here is the Python3 code based on the given input text:

```
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption < 5:
        return False
    else:
        return True

# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def r2(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption < 0.4:
        return False
    else:
        return True

# PTO operation time must be less than or equal to the total operation time.
def r3(pto_operation_time: float, total_operation_time: float) -> bool:
    if pto_operation_time > total_operation_time:
        return False
    else:
        return True

# Idle time cannot be greater than the total operation time.
def r4(idle_time: float, total_operation_time: float) -> bool:
    if idle_time > total_operation_time:
        return False
    else:
        return True

# The total operation durationmust not be lower than the driving time.
def r5(total_operation_time: float, driving_time: float) -> bool:
    if total_operation_time < driving_time:
        return False
    else:
        return True

# The load on axle 1 must not surpass the load on axle 2.
def r6(load_axle1: float, load_axle2: float) -> bool:
    if load_axle1 > load_axle2:
        return False
    else:
        return True

# The load on axle 1 must not surpass the load on axle 3.
def r7(load_axle1: float, load_axle3: float) -> bool:
    if load_axle1 > load_axle3:
        return False
    else:
        return True

# Payload must remain below or equal to the load carried by axle 2.
def r8(payload: float, load_axle2: float) -> bool:
    if payload > load_axle2:
        return False
    else:
        return True
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
PTO operation time cannot be greater than the total operation time.
Total operation time shouldn’t be lower than idle time.
Total operation time should shouldn’t be lower than driving time.
Stops with PTO engaged should never outnumber total stops.
Axle 1's load cannot exceed Axle 2's load.
The payload must always be smaller than or equal to the load on axle 2.
The payload must always be smaller than or equal to the load on axle 3.
";"

Here is the Python3 code based on the given input text:

```
# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r1(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption < 0.4:
        return False
    else:
        return True

# PTO operation time cannot be greater than the total operation time.
def r2(pto_time: float, total_time: float) -> bool:
    if pto_time > total_time:
        return False
    else:
        return True

# Total operation time shouldn’t be lower than idle time.
def r3(total_time: float, idle_time: float) -> bool:
    if total_time < idle_time:
        return False
    else:
        return True

# Total operation time should shouldn’t be lower than driving time.
def r4(total_time: float, driving_time: float) -> bool:
    if total_time < driving_time:
        return False
    else:
        return True

# Stops with PTO engaged should never outnumber total stops.
def r5(pto_stops: int, total_stops: int) -> bool:
    if pto_stops >= total_stops:
        return False
    else:
        return True

# Axle 1's load cannot exceed Axle 2's load.
def r6(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load > axle2_load:
        return False
    else:
        return True

# The payload must always be smaller than or equal to the load on axle 2.
def r7(payload: float, axle2_load: float) -> bool:
    if payload > axle2_load:
        return False
    else:
        return True

# The payload must always be smaller than or equal to the load on axle 3.
def r8(payload: float, axle3_load: float) -> bool:
    if payload > axle3_load:
        return False
    else:
        return True
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
The total operation duration must not be lower than the idle time.
Driving time must always be less than or equal to the total operation time.
PTO-engaged stops cannot exceed the total number of stops.
Axle 1's load cannot exceed Axle 3's load.
Payload must remain below or equal to the load carried by axle 2.
Payload must remain below or equal to the load carried by axle 3.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"

Here is the Python3 code based on the given input text:

```
# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(km: float, fuel: float) -> bool:
    if km >= 20 and fuel >= 5:
        return True
    else:
        return False

# The total operation duration must not be lower than the idle time.
def r2(total_time: float, idle_time: float) -> bool:
    if total_time >= idle_time:
        return True
    else:
        return False

# Driving time must always be less than or equal to the total operation time.
def r3(driving_time: float, total_time: float) -> bool:
    if driving_time <= total_time:
        return True
    else:
        return False

# PTO-engaged stops cannot exceed the total number of stops.
def r4(pto_stops: float, total_stops: float) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 3's load.
def r5(axle1_load: float, axle3_load: float) -> bool:
    if axle1_load <= axle3_load:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def r6(payload: float, axle2_load: float) -> bool:
    if payload <= axle2_load:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 3.
def r7(payload: float, axle3_load: float) -> bool:
    if payload <= axle3_load:
        return True
    else:
        return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r8(total_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    if total_time >= pto_time + idle_time + driving_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
Idle time cannot be greater than the total operation time.
Total operation time should shouldn’t be lower than driving time.
Stops with PTO engaged cannot outnumber the total stops.
The weight on axle 1 cannot surpass the weight on axle 2.
Axle 1's load cannot exceed Axle 3's load.
Axle 3's load must always be equal to or greater than the payload.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"

Here is the Python3 code based on the given input text:

```
# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r1(fuel: float, distance: float) -> bool:
    if distance >= 20 and fuel >= 0.4:
        return True
    else:
        return False

# Idle time cannot be greater than the total operation time.
def r2(idle: float, operation: float) -> bool:
    if idle <= operation:
        return True
    else:
        return False

# Total operation time should shouldn’t be lower than driving time.
def r3(operation: float, driving: float) -> bool:
    if operation >= driving:
        return True
    else:
        return False

# Stops with PTO engaged cannot outnumber the total stops.
def r4(pto_stops: float, total_stops: float) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r5(axle1: float, axle2: float) -> bool:
    if axle1 <= axle2:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 3's load.
def r6(axle1: float, axle3: float) -> bool:
    if axle1 <= axle3:
        return True
    else:
        return False

# Axle 3's load must always be equal to or greater than the payload.
def r7(axle3: float, payload: float) -> bool:
    if axle3 >= payload:
        return True
    else:
        return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r8(operation: float, pto: float, idle: float, driving: float) -> bool:
    if operation >= pto + idle + driving:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
Total operation time shouldn’t be lower than PTO operation time.
The total operation duration must not be lower than the idle time.
Driving time must always be less than or equal to the total operation time.
The load on axle 1 must not surpass the load on axle 3.
The payload must not exceed the load carried by axle 2.
The payload must always be smaller than or equal to the load on axle 3.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";"

Here is the Python3 code based on the given input text:

```
# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(km: float, fuel: float) -> bool:
    if km >= 20 and fuel / km >= 0.05:
        return True
    else:
        return False

# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def r2(km: float, fuel: float) -> bool:
    if km >= 20 and fuel / km >= 0.4:
        return True
    else:
        return False

# Total operation time shouldn’t be lower than PTO operation time.
def r3(total_time: float, pto_time: float) -> bool:
    if total_time >= pto_time:
        return True
    else:
        return False

# The total operation duration must not be lower than the idle time.
def r4(total_time: float, idle_time: float) -> bool:
    if total_time >= idle_time:
        return True
    else:
        return False

# Driving time must always be less than or equal to the total operation time.
def r5(driving_time: float, total_time: float) -> bool:
    if driving_time <= total_time:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 3.
def r6(axle1: float, axle3: float) -> bool:
    if axle1 <= axle3:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 2.
def r7(payload: float, axle2: float) -> bool:
    if payload <= axle2:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 3.
def r8(payload: float, axle3: float) -> bool:
    if payload <= axle3:
        return True
    else:
        return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r9(total_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    if total_time >= pto_time + idle_time + driving_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
PTO operation time cannot be greater than the total operation time.
The total operation duration must not be lower than the idle time.
Driving time cannot be greater than the total operation time.
The load supported by axle 1 cannot exceed that of axle 2.
The load on axle 1 must not surpass the load on axle 3.
Axle 2's load must always be equal to or greater than the payload.
Payload must remain below or equal to the load carried by axle 3.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";"

Here is the Python3 code based on the given input text:

```
# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(t: float, f: float) -> bool:
    if t >= 20 and f >= 5:
        return True
    else:
        return False

# PTO operation time cannot be greater than the total operation time.
def r2(pto: float, tot: float) -> bool:
    if pto <= tot:
        return True
    else:
        return False

# The total operation duration must not be lower than the idle time.
def r3(tot: float, idle: float) -> bool:
    if tot >= idle:
        return True
    else:
        return False

# Driving time cannot be greater than the total operation time.
def r4(drive: float, tot: float) -> bool:
    if drive <= tot:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r5(axle1: float, axle2: float) -> bool:
    if axle1 <= axle2:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 3.
def r6(axle1: float, axle3: float) -> bool:
    if axle1 <= axle3:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def r7(axle2: float, payload: float) -> bool:
    if axle2 >= payload:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 3.
def r8(payload: float, axle3: float) -> bool:
    if payload <= axle3:
        return True
    else:
        return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r9(tot: float, pto: float, idle: float, drive: float) -> bool:
    if tot >= pto + idle + drive:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
The total operation duration must not be lower than the PTO operation time.
Idle time should be less than or equal to the total operation time.
The number of stops where PTO is engaged must not exceed the overall stop count.
The weight on axle 1 cannot surpass the weight on axle 2.
Axle 1's load cannot exceed Axle 3's load.
Payload must remain below or equal to the load carried by axle 3.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";"

Here is the Python3 code based on the given input text:

```
# The vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r1(fuel_consumption: float, distance: float) -> bool:
    if distance >= 20 and fuel_consumption >= 5:
        return True
    else:
        return False

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r2(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption >= 0.4:
        return True
    else:
        return False

# The total operation duration must not be lower than the PTO operation time.
def r3(total_operation_time: float, pto_operation_time: float) -> bool:
    if total_operation_time >= pto_operation_time:
        return True
    else:
        return False

# Idle time should be less than or equal to the total operation time.
def r4(idle_time: float, total_operation_time: float) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r5(pto_stops: int, overall_stops: int) -> bool:
    if pto_stops <= overall_stops:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r6(axle1_weight: float, axle2_weight: float) -> bool:
    if axle1_weight <= axle2_weight:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 3's load.
def r7(axle1_load: float, axle3_load: float) -> bool:
    if axle1_load <= axle3_load:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 3.
def r8(payload: float, axle3_load: float) -> bool:
    if payload <= axle3_load:
        return True
    else:
        return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r9(total_operation_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    if total_operation_time >= pto_time + idle_time + driving_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
PTO operation time must be less than or equal to the total operation time.
Idle time should be less than or equal to the total operation time.
Driving time cannot be greater than the total operation time.
The number of stops where PTO is engaged must not exceed the overall stop count.
The load on axle 1 must not surpass the load on axle 2.
The payload must always be smaller than or equal to the load on axle 2.
The payload cannot exceed the capacity of axle 3.
";"

Here is the Python3 code based on the given input text:

```
# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(t: float, f: float) -> bool:
    if f / t >= 0.25:
        return True
    else:
        return False

# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r2(t: float, f: float) -> bool:
    if f / t >= 0.4:
        return True
    else:
        return False

# PTO operation time must be less than or equal to the total operation time.
def r3(p: float, t: float) -> bool:
    if p <= t:
        return True
    else:
        return False

# Idle time should be less than or equal to the total operation time.
def r4(i: float, t: float) -> bool:
    if i <= t:
        return True
    else:
        return False

# Driving time cannot be greater than the total operation time.
def r5(d: float, t: float) -> bool:
    if d <= t:
        return True
    else:
        return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r6(s: float, p: float) -> bool:
    if s >= p:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 2.
def r7(l1: float, l2: float) -> bool:
    if l1 <= l2:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 2.
def r8(p: float, l2: float) -> bool:
    if p <= l2:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 3.
def r9(p: float, c: float) -> bool:
    if p <= c:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
PTO operation time should be less than or equal to the total operation time.
Idle time must always be less than or equal to the total operation time.
Driving time must always be less than or equal to the total operation time.
PTO-engaged stops cannot exceed the total number of stops.
Axle 1's load cannot exceed Axle 2's load.
The weight on axle 1 cannot surpass the weight on axle 3.
Payload must remain below or equal to the load carried by axle 2.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"

Here is the Python3 code based on the given input text:

```
# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r1(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption < 0.4:
        return False
    else:
        return True

# PTO operation time should be less than or equal to the total operation time.
def r2(pto_time: float, total_time: float) -> bool:
    if pto_time <= total_time:
        return True
    else:
        return False

# Idle time must always be less than or equal to the total operation time.
def r3(idle_time: float, total_time: float) -> bool:
    if idle_time <= total_time:
        return True
    else:
        return False

# Driving time must always be less than or equal to the total operation time.
def r4(driving_time: float, total_time: float) -> bool:
    if driving_time <= total_time:
        return True
    else:
        return False

# PTO-engaged stops cannot exceed the total number of stops.
def r5(pto_stops: int, total_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 2's load.
def r6(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load <= axle2_load:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r7(axle1_weight: float, axle3_weight: float) -> bool:
    if axle1_weight <= axle3_weight:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def r8(payload: float, axle2_load: float) -> bool:
    if payload <= axle2_load:
        return True
    else:
        return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r9(total_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    if total_time >= pto_time + idle_time + driving_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
PTO operation time should be less than or equal to the total operation time.
Driving time cannot be greater than the total operation time.
Stops with PTO engaged cannot outnumber the total stops.
The load supported by axle 1 cannot exceed that of axle 2.
The weight on axle 1 cannot surpass the weight on axle 3.
The payload must not exceed the load carried by axle 2.
Axle 3's load must always be equal to or greater than the payload.
";"

Here is the Python3 code based on the given input text:

```
# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r2(a: float, c: float) -> bool:
    if c / a >= 0.4:
        return True
    else:
        return False

# PTO operation time should be less than or equal to the total operation time.
def r3(d: float, e: float) -> bool:
    if d <= e:
        return True
    else:
        return False

# Driving time cannot be greater than the total operation time.
def r4(f: float, e: float) -> bool:
    if f <= e:
        return True
    else:
        return False

# Stops with PTO engaged cannot outnumber the total stops.
def r5(g: float, h: float) -> bool:
    if g <= h:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r6(i: float, j: float) -> bool:
    if i <= j:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r7(k: float, l: float) -> bool:
    if k <= l:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 2.
def r8(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Axle 3's load must always be equal to or greater than the payload.
def r9(o: float, p: float) -> bool:
    if o >= p:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
Idle time cannot be greater than the total operation time.
Driving time should be less than or equal to the total operation time.
The total stop count must not be lower than the count of stops where PTO is engaged.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
The load supported by axle 1 cannot exceed that of axle 3.
The payload must not exceed the load carried by axle 2.
The payload must not exceed the load carried by axle 3.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"

Here is the Python3 code based on the given input text:

```
# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def r1(a: float, b: float) -> bool:
    if a >= 20 and b / a >= 0.4:
        return True
    else:
        return False

# Idle time cannot be greater than the total operation time.
def r2(i: float, t: float) -> bool:
    if i <= t:
        return True
    else:
        return False

# Driving time should be less than or equal to the total operation time.
def r3(d: float, t: float) -> bool:
    if d <= t:
        return True
    else:
        return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r4(s: int, p: int) -> bool:
    if s >= p:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def r5(l1: float, l2: float) -> bool:
    if l1 <= l2:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 3.
def r6(l1: float, l3: float) -> bool:
    if l1 <= l3:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 2.
def r7(p: float, l2: float) -> bool:
    if p <= l2:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def r8(p: float, l3: float) -> bool:
    if p <= l3:
        return True
    else:
        return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r9(t1: float, t2: float, t3: float, t: float) -> bool:
    if t1 + t2 + t3 <= t:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
PTO operation time should be less than or equal to the total operation time.
Idle time should be less than or equal to the total operation time.
Driving time cannot be greater than the total operation time.
The total stop count must not be lower than the count of stops where PTO is engaged.
Axle 1's load cannot exceed Axle 2's load.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
The payload cannot exceed the capacity of axle 3.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"

Here is the Python3 code based on the given input text:

```
# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(km: float, fuel: float) -> bool:
    if km >= 20 and fuel >= 5:
        return True
    else:
        return False

# PTO operation time should be less than or equal to the total operation time.
def r2(pto: float, total: float) -> bool:
    if pto <= total:
        return True
    else:
        return False

# Idle time should be less than or equal to the total operation time.
def r3(idle: float, total: float) -> bool:
    if idle <= total:
        return True
    else:
        return False

# Driving time cannot be greater than the total operation time.
def r4(driving: float, total: float) -> bool:
    if driving <= total:
        return True
    else:
        return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r5(total_stops: int, pto_stops: int) -> bool:
    if total_stops >= pto_stops:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 2's load.
def r6(axle1: float, axle2: float) -> bool:
    if axle1 <= axle2:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r7(axle1: float, axle3: float) -> bool:
    if axle1 <= axle3:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 3.
def r8(payload: float, axle3: float) -> bool:
    if payload <= axle3:
        return True
    else:
        return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r9(pto: float, idle: float, driving: float, total: float) -> bool:
    if pto + idle + driving <= total:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
PTO operation time should be less than or equal to the total operation time.
The total operation duration must not be lower than the idle time.
The total operation durationmust not be lower than the driving time.
Stops with PTO engaged cannot outnumber the total stops.
The load on axle 1 must not surpass the load on axle 2.
Axle 2's load must always be equal to or greater than the payload.
Axle 3's load must always be equal to or greater than the payload.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";"

Here is the Python3 code based on the given input text:

```
# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r1(a: float, b: float) -> bool:
    if a >= 20 and b < 0.4:
        return False
    else:
        return True

# PTO operation time should be less than or equal to the total operation time.
def r2(pto: float, total: float) -> bool:
    if pto <= total:
        return True
    else:
        return False

# The total operation duration must not be lower than the idle time.
def r3(total: float, idle: float) -> bool:
    if total >= idle:
        return True
    else:
        return False

# The total operation duration must not be lower than the driving time.
def r4(total: float, driving: float) -> bool:
    if total >= driving:
        return True
    else:
        return False

# Stops with PTO engaged cannot outnumber the total stops.
def r5(pto_stops: int, total_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 2.
def r6(axle1: float, axle2: float) -> bool:
    if axle1 <= axle2:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def r7(axle2: float, payload: float) -> bool:
    if axle2 >= payload:
        return True
    else:
        return False

# Axle 3's load must always be equal to or greater than the payload.
def r8(axle3: float, payload: float) -> bool:
    if axle3 >= payload:
        return True
    else:
        return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r9(total: float, pto: float, idle: float, driving: float) -> bool:
    if total >= pto + idle + driving:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
PTO operation time must be less than or equal to the total operation time.
Idle time cannot be greater than the total operation time.
Driving time should be less than or equal to the total operation time.
PTO-engaged stops cannot exceed the total number of stops.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
The load on axle 1 must not surpass the load on axle 3.
Axle 2's load must always be equal to or greater than the payload.
";"

Here is the Python3 code based on the given input text:

```
# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(t: float, f: float) -> bool:
    if f / t >= 0.25:
        return True
    else:
        return False

# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r2(t: float, f: float) -> bool:
    if f / t >= 40:
        return True
    else:
        return False

# PTO operation time must be less than or equal to the total operation time.
def r3(p: float, t: float) -> bool:
    if p <= t:
        return True
    else:
        return False

# Idle time cannot be greater than the total operation time.
def r4(i: float, t: float) -> bool:
    if i <= t:
        return True
    else:
        return False

# Driving time should be less than or equal to the total operation time.
def r5(d: float, t: float) -> bool:
    if d <= t:
        return True
    else:
        return False

# PTO-engaged stops cannot exceed the total number of stops.
def r6(p: float, s: float) -> bool:
    if p <= s:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def r7(a1: float, a2: float) -> bool:
    if a1 <= a2:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 3.
def r8(a1: float, a3: float) -> bool:
    if a1 <= a3:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def r9(a2: float, p: float) -> bool:
    if a2 >= p:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
The total operation duration must not be lower than the idle time.
The total operation durationmust not be lower than the driving time.
Stops with PTO engaged cannot outnumber the total stops.
The load supported by axle 1 cannot exceed that of axle 2.
The load on axle 1 must not surpass the load on axle 3.
Axle 3's load must always be equal to or greater than the payload.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";"

Here is the Python3 code based on the given input text:

```
# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(t: float, f: float) -> bool:
    if f / t >= 0.25:
        return True
    else:
        return False

# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r2(t: float, f: float) -> bool:
    if f / t >= 0.4:
        return True
    else:
        return False

# The total operation duration must not be lower than the idle time.
def r3(o: float, i: float) -> bool:
    if o >= i:
        return True
    else:
        return False

# The total operation duration must not be lower than the driving time.
def r4(o: float, d: float) -> bool:
    if o >= d:
        return True
    else:
        return False

# Stops with PTO engaged cannot outnumber the total stops.
def r5(p: int, t: int) -> bool:
    if p <= t:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r6(l1: float, l2: float) -> bool:
    if l1 <= l2:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 3.
def r7(l1: float, l3: float) -> bool:
    if l1 <= l3:
        return True
    else:
        return False

# Axle 3's load must always be equal to or greater than the payload.
def r8(l3: float, p: float) -> bool:
    if l3 >= p:
        return True
    else:
        return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r9(o: float, p: float, d: float) -> bool:
    if o >= p + d:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
The total operation duration must not be lower than the PTO operation time.
Idle time must always be less than or equal to the total operation time.
Stops with PTO engaged should never outnumber total stops.
The load supported by axle 1 cannot exceed that of axle 2.
Axle 1's load cannot exceed Axle 3's load.
Axle 2's load must always be equal to or greater than the payload.
The payload must not exceed the load carried by axle 3.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";"

Here is the Python3 code based on the given input text:

```
# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.4:
        return True
    else:
        return False

# The total operation duration must not be lower than the PTO operation time.
def r2(c: float, d: float) -> bool:
    if d <= c:
        return True
    else:
        return False

# Idle time must always be less than or equal to the total operation time.
def r3(e: float, f: float) -> bool:
    if e <= f:
        return True
    else:
        return False

# Stops with PTO engaged should never outnumber total stops.
def r4(g: float, h: float) -> bool:
    if g <= h:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r5(i: float, j: float) -> bool:
    if i <= j:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 3's load.
def r6(k: float, l: float) -> bool:
    if k <= l:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def r7(m: float, n: float) -> bool:
    if m >= n:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r9(q: float, r: float, s: float, t: float) -> bool:
    if q >= r + s + t:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
PTO operation time should be less than or equal to the total operation time.
Idle time must always be less than or equal to the total operation time.
Driving time should be less than or equal to the total operation time.
PTO-engaged stops cannot exceed the total number of stops.
The load supported by axle 1 cannot exceed that of axle 2.
The payload must always be smaller than or equal to the load on axle 2.
Payload must remain below or equal to the load carried by axle 3.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"

Here is the Python3 code based on the given input text:

```
# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(km: float, fuel: float) -> bool:
    if km >= 20 and fuel >= 5:
        return True
    else:
        return False

# PTO operation time should be less than or equal to the total operation time.
def r2(pto: float, total: float) -> bool:
    if pto <= total:
        return True
    else:
        return False

# Idle time must always be less than or equal to the total operation time.
def r3(idle: float, total: float) -> bool:
    if idle <= total:
        return True
    else:
        return False

# Driving time should be less than or equal to the total operation time.
def r4(driving: float, total: float) -> bool:
    if driving <= total:
        return True
    else:
        return False

# PTO-engaged stops cannot exceed the total number of stops.
def r5(pto_stops: float, total_stops: float) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r6(axle1: float, axle2: float) -> bool:
    if axle1 <= axle2:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 2.
def r7(payload: float, axle2: float) -> bool:
    if payload <= axle2:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 3.
def r8(payload: float, axle3: float) -> bool:
    if payload <= axle3:
        return True
    else:
        return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r9(total: float, pto: float, idle: float, driving: float) -> bool:
    if total >= pto + idle + driving:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
PTO operation time must be less than or equal to the total operation time.
The total operation durationmust not be lower than the driving time.
The load supported by axle 1 cannot exceed that of axle 2.
The load supported by axle 1 cannot exceed that of axle 3.
The payload cannot exceed the capacity of axle 2.
The payload must not exceed the load carried by axle 3.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";"

Here is the Python3 code based on the given input text:

```
# The vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r1(fuel: float, distance: float) -> bool:
    if distance >= 20 and fuel >= 5:
        return True
    else:
        return False

# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r2(fuel: float) -> bool:
    if fuel >= 40:
        return True
    else:
        return False

# PTO operation time must be less than or equal to the total operation time.
def r3(pto: float, total: float) -> bool:
    if pto <= total:
        return True
    else:
        return False

# The total operation duration must not be lower than the driving time.
def r4(total: float, driving: float) -> bool:
    if total >= driving:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r5(axle1: float, axle2: float) -> bool:
    if axle1 <= axle2:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 3.
def r6(axle1: float, axle3: float) -> bool:
    if axle1 <= axle3:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 2.
def r7(payload: float, axle2: float) -> bool:
    if payload <= axle2:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def r8(payload: float, axle3: float) -> bool:
    if payload <= axle3:
        return True
    else:
        return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r9(total: float, pto: float, idle: float, driving: float) -> bool:
    if total >= pto + idle + driving:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
Idle time must always be less than or equal to the total operation time.
Driving time cannot be greater than the total operation time.
PTO-engaged stops cannot exceed the total number of stops.
The load supported by axle 1 cannot exceed that of axle 2.
Axle 1's load cannot exceed Axle 3's load.
The payload cannot exceed the capacity of axle 2.
Axle 3's load must always be equal to or greater than the payload.
";"

Here is the Python3 code based on the given input text:

```
# The vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r1(fuel: float, distance: float) -> bool:
    if distance >= 20 and fuel >= 0.5:
        return True
    else:
        return False

# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r2(fuel: float, distance: float) -> bool:
    if distance >= 20 and fuel >= 0.4:
        return True
    else:
        return False

# Idle time must always be less than or equal to the total operation time.
def r3(idle: float, operation: float) -> bool:
    if idle <= operation:
        return True
    else:
        return False

# Driving time cannot be greater than the total operation time.
def r4(driving: float, operation: float) -> bool:
    if driving <= operation:
        return True
    else:
        return False

# PTO-engaged stops cannot exceed the total number of stops.
def r5(pto_stops: float, total_stops: float) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r6(axle1: float, axle2: float) -> bool:
    if axle1 <= axle2:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 3's load.
def r7(axle1: float, axle3: float) -> bool:
    if axle1 <= axle3:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 2.
def r8(payload: float, axle2: float) -> bool:
    if payload <= axle2:
        return True
    else:
        return False

# Axle 3's load must always be equal to or greater than the payload.
def r9(axle3: float, payload: float) -> bool:
    if axle3 >= payload:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
PTO operation time cannot be greater than the total operation time.
PTO-engaged stops cannot exceed the total number of stops.
The weight on axle 1 cannot surpass the weight on axle 2.
The weight on axle 1 cannot surpass the weight on axle 3.
The payload cannot exceed the capacity of axle 2.
Payload must remain below or equal to the load carried by axle 3.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";"

Here is the Python3 code based on the given input text:

```
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
    if fuel_consumption >= 0.05:
        return True
    else:
        return False

# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r2(distance: float, fuel_consumption: float) -> bool:
    if fuel_consumption * 100 / distance >= 40:
        return True
    else:
        return False

# PTO operation time cannot be greater than the total operation time.
def r3(pto_time: float, total_time: float) -> bool:
    if pto_time <= total_time:
        return True
    else:
        return False

# PTO-engaged stops cannot exceed the total number of stops.
def r4(pto_stops: int, total_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r5(axle1_weight: float, axle2_weight: float) -> bool:
    if axle1_weight <= axle2_weight:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r6(axle1_weight: float, axle3_weight: float) -> bool:
    if axle1_weight <= axle3_weight:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 2.
def r7(payload: float, axle2_capacity: float) -> bool:
    if payload <= axle2_capacity:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 3.
def r8(payload: float, axle3_load: float) -> bool:
    if payload <= axle3_load:
        return True
    else:
        return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r9(total_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    if total_time >= pto_time + idle_time + driving_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
The total operation duration must not be lower than the PTO operation time.
Total operation time should shouldn’t be lower than driving time.
Stops with PTO engaged cannot outnumber the total stops.
Axle 1's load cannot exceed Axle 2's load.
The load on axle 1 must not surpass the load on axle 3.
The payload cannot exceed the capacity of axle 2.
The payload cannot exceed the capacity of axle 3.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";"

Here is the Python3 code based on the given input text:

```
# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(km: float, fuel: float) -> bool:
    if km >= 20 and fuel >= 5:
        return True
    else:
        return False

# The total operation duration must not be lower than the PTO operation time.
def r2(total_time: float, pto_time: float) -> bool:
    if total_time >= pto_time:
        return True
    else:
        return False

# Total operation time should shouldn’t be lower than driving time.
def r3(total_time: float, driving_time: float) -> bool:
    if total_time >= driving_time:
        return True
    else:
        return False

# Stops with PTO engaged cannot outnumber the total stops.
def r4(pto_stops: int, total_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 2's load.
def r5(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load <= axle2_load:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 3.
def r6(axle1_load: float, axle3_load: float) -> bool:
    if axle1_load <= axle3_load:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 2.
def r7(payload: float, axle2_capacity: float) -> bool:
    if payload <= axle2_capacity:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 3.
def r8(payload: float, axle3_capacity: float) -> bool:
    if payload <= axle3_capacity:
        return True
    else:
        return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r9(total_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    if total_time >= pto_time + idle_time + driving_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
Idle time must always be less than or equal to the total operation time.
The total operation durationmust not be lower than the driving time.
Stops with PTO engaged cannot outnumber the total stops.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
Axle 1's load cannot exceed Axle 3's load.
The payload cannot exceed the capacity of axle 2.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"

Here is the Python3 code based on the given input text:

```
# The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r1(fuel: float, distance: float) -> bool:
    if distance >= 20 and fuel < 5:
        return False
    else:
        return True

# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def r2(fuel: float, distance: float) -> bool:
    if distance >= 20 and fuel < 0.4:
        return False
    else:
        return True

# Idle time must always be less than or equal to the total operation time.
def r3(idle: float, operation: float) -> bool:
    if idle > operation:
        return False
    else:
        return True

# The total operation durationmust not be lower than the driving time.
def r4(operation: float, driving: float) -> bool:
    if operation < driving:
        return False
    else:
        return True

# Stops with PTO engaged cannot outnumber the total stops.
def r5(pto_stops: int, total_stops: int) -> bool:
    if pto_stops > total_stops:
        return False
    else:
        return True

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def r6(axle1: float, axle2: float) -> bool:
    if axle1 > axle2:
        return False
    else:
        return True

# Axle 1's load cannot exceed Axle 3's load.
def r7(axle1: float, axle3: float) -> bool:
    if axle1 > axle3:
        return False
    else:
        return True

# The payload cannot exceed the capacity of axle 2.
def r8(payload: float, axle2: float) -> bool:
    if payload > axle2:
        return False
    else:
        return True

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r9(pto: float, idle: float, driving: float, operation: float) -> bool:
    if pto + idle + driving > operation:
        return False
    else:
        return True
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
PTO operation time cannot be greater than the total operation time.
The total operation duration must not be lower than the idle time.
Driving time cannot be greater than the total operation time.
Stops with PTO engaged should never outnumber total stops.
The weight on axle 1 cannot surpass the weight on axle 2.
The weight on axle 1 cannot surpass the weight on axle 3.
Axle 2's load must always be equal to or greater than the payload.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";"

Here is the Python3 code based on the given input text:

```
# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(km: float, fuel: float) -> bool:
    if km >= 20 and fuel >= 5:
        return True
    else:
        return False

# PTO operation time cannot be greater than the total operation time.
def r2(pto: float, total: float) -> bool:
    if pto <= total:
        return True
    else:
        return False

# The total operation duration must not be lower than the idle time.
def r3(total: float, idle: float) -> bool:
    if total >= idle:
        return True
    else:
        return False

# Driving time cannot be greater than the total operation time.
def r4(driving: float, total: float) -> bool:
    if driving <= total:
        return True
    else:
        return False

# Stops with PTO engaged should never outnumber total stops.
def r5(pto_stops: int, total_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r6(axle1: float, axle2: float) -> bool:
    if axle1 <= axle2:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r7(axle1: float, axle3: float) -> bool:
    if axle1 <= axle3:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def r8(axle2: float, payload: float) -> bool:
    if axle2 >= payload:
        return True
    else:
        return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r9(total: float, pto: float, idle: float, driving: float) -> bool:
    if total >= pto + idle + driving:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
PTO operation time cannot be greater than the total operation time.
Idle time must always be less than or equal to the total operation time.
The total operation durationmust not be lower than the driving time.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
The weight on axle 1 cannot surpass the weight on axle 3.
The payload cannot exceed the capacity of axle 2.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"

Here is the Python3 code based on the given input text:

```
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption < 5:
        return False
    else:
        return True

# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r2(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption / distance < 0.4:
        return False
    else:
        return True

# PTO operation time cannot be greater than the total operation time.
def r3(pto_time: float, total_time: float) -> bool:
    if pto_time > total_time:
        return False
    else:
        return True

# Idle time must always be less than or equal to the total operation time.
def r4(idle_time: float, total_time: float) -> bool:
    if idle_time > total_time:
        return False
    else:
        return True

# The total operation duration must not be lower than the driving time.
def r5(total_time: float, driving_time: float) -> bool:
    if total_time < driving_time:
        return False
    else:
        return True

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def r6(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load > axle2_load:
        return False
    else:
        return True

# The weight on axle 1 cannot surpass the weight on axle 3.
def r7(axle1_weight: float, axle3_weight: float) -> bool:
    if axle1_weight > axle3_weight:
        return False
    else:
        return True

# The payload cannot exceed the capacity of axle 2.
def r8(payload: float, axle2_capacity: float) -> bool:
    if payload > axle2_capacity:
        return False
    else:
        return True

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r9(pto_time: float, idle_time: float, driving_time: float, total_time: float) -> bool:
    if pto_time + idle_time + driving_time > total_time:
        return False
    else:
        return True
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
PTO operation time should be less than or equal to the total operation time.
Driving time must always be less than or equal to the total operation time.
Stops with PTO engaged should never outnumber total stops.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
Axle 1's load cannot exceed Axle 3's load.
Axle 2's load must always be equal to or greater than the payload.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"

Here is the Python3 code based on the given input text:

```
# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r2(a: float, c: float) -> bool:
    if c / a >= 0.4:
        return True
    else:
        return False

# PTO operation time should be less than or equal to the total operation time.
def r3(d: float, e: float) -> bool:
    if d <= e:
        return True
    else:
        return False

# Driving time must always be less than or equal to the total operation time.
def r4(f: float, e: float) -> bool:
    if f <= e:
        return True
    else:
        return False

# Stops with PTO engaged should never outnumber total stops.
def r5(g: float, h: float) -> bool:
    if g <= h:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def r6(i: float, j: float) -> bool:
    if i <= j:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 3's load.
def r7(i: float, k: float) -> bool:
    if i <= k:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def r8(j: float, l: float) -> bool:
    if j >= l:
        return True
    else:
        return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r9(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
The total operation duration must not be lower than the PTO operation time.
The total operation durationmust not be lower than the driving time.
Stops with PTO engaged cannot outnumber the total stops.
Axle 1's load cannot exceed Axle 2's load.
The payload must not exceed the load carried by axle 2.
The payload must not exceed the load carried by axle 3.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"

Here is the Python3 code based on the given input text:

```
# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r2(a: float, c: float) -> bool:
    if c / a >= 4:
        return True
    else:
        return False

# The total operation duration must not be lower than the PTO operation time.
def r3(t: float, p: float) -> bool:
    if t >= p:
        return True
    else:
        return False

# The total operation duration must not be lower than the driving time.
def r4(t: float, d: float) -> bool:
    if t >= d:
        return True
    else:
        return False

# Stops with PTO engaged cannot outnumber the total stops.
def r5(s: int, t: int) -> bool:
    if s <= t:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 2's load.
def r6(a1: float, a2: float) -> bool:
    if a1 <= a2:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 2.
def r7(p: float, a2: float) -> bool:
    if p <= a2:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def r8(p: float, a3: float) -> bool:
    if p <= a3:
        return True
    else:
        return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r9(t: float, p: float, i: float, d: float) -> bool:
    if t >= p + i + d:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
PTO operation time must be less than or equal to the total operation time.
Idle time must always be less than or equal to the total operation time.
Total operation time should shouldn’t be lower than driving time.
The weight on axle 1 cannot surpass the weight on axle 2.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
Axle 3's load must always be equal to or greater than the payload.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"

Here is the Python3 code based on the given input text:

```
# The vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r1(fuel_consumption: float, distance: float) -> bool:
    if distance >= 20 and fuel_consumption >= 0.5:
        return True
    else:
        return False

# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r2(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption >= 0.4:
        return True
    else:
        return False

# PTO operation time must be less than or equal to the total operation time.
def r3(pto_time: float, total_time: float) -> bool:
    if pto_time <= total_time:
        return True
    else:
        return False

# Idle time must always be less than or equal to the total operation time.
def r4(idle_time: float, total_time: float) -> bool:
    if idle_time <= total_time:
        return True
    else:
        return False

# Total operation time should shouldn’t be lower than driving time.
def r5(total_time: float, driving_time: float) -> bool:
    if total_time >= driving_time:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r6(axle1_weight: float, axle2_weight: float) -> bool:
    if axle1_weight <= axle2_weight:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r7(axle1_load: float, axle3_load: float) -> bool:
    if axle1_load <= axle3_load:
        return True
    else:
        return False

# Axle 3's load must always be equal to or greater than the payload.
def r8(axle3_load: float, payload: float) -> bool:
    if axle3_load >= payload:
        return True
    else:
        return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r9(pto_time: float, idle_time: float, driving_time: float, total_time: float) -> bool:
    if pto_time + idle_time + driving_time <= total_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
PTO operation time should be less than or equal to the total operation time.
Total operation time should shouldn’t be lower than driving time.
PTO-engaged stops cannot exceed the total number of stops.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
The load supported by axle 1 cannot exceed that of axle 3.
Payload must remain below or equal to the load carried by axle 2.
Axle 3's load must always be equal to or greater than the payload.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";"

Here is the Python3 code based on the given input text:

```
# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def r1(a: float, b: float) -> bool:
    if a >= 20 and b / a >= 0.4:
        return True
    else:
        return False

# PTO operation time should be less than or equal to the total operation time.
def r2(x: float, y: float) -> bool:
    if x <= y:
        return True
    else:
        return False

# Total operation time should shouldn’t be lower than driving time.
def r3(z: float, w: float) -> bool:
    if z >= w:
        return True
    else:
        return False

# PTO-engaged stops cannot exceed the total number of stops.
def r4(u: float, v: float) -> bool:
    if u <= v:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def r5(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 3.
def r6(m: float, o: float) -> bool:
    if m <= o:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def r7(p: float, n: float) -> bool:
    if p <= n:
        return True
    else:
        return False

# Axle 3's load must always be equal to or greater than the payload.
def r8(o: float, p: float) -> bool:
    if o >= p:
        return True
    else:
        return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r9(x: float, y: float, z: float) -> bool:
    if x + y + z >= x:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
Idle time should be less than or equal to the total operation time.
The total operation durationmust not be lower than the driving time.
PTO-engaged stops cannot exceed the total number of stops.
The load on axle 1 must not surpass the load on axle 2.
Axle 2's load must always be equal to or greater than the payload.
The payload must always be smaller than or equal to the load on axle 3.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";"

Here is the Python3 code based on the given input text:

```
# The vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r1(fuel_consumption: float, distance: float) -> bool:
    if distance >= 20 and fuel_consumption >= 0.5:
        return True
    else:
        return False

# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r2(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption >= 0.4:
        return True
    else:
        return False

# Idle time should be less than or equal to the total operation time.
def r3(idle_time: float, operation_time: float) -> bool:
    if idle_time <= operation_time:
        return True
    else:
        return False

# The total operation durationmust not be lower than the driving time.
def r4(operation_time: float, driving_time: float) -> bool:
    if operation_time >= driving_time:
        return True
    else:
        return False

# PTO-engaged stops cannot exceed the total number of stops.
def r5(pto_stops: float, total_stops: float) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 2.
def r6(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load <= axle2_load:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def r7(axle2_load: float, payload: float) -> bool:
    if axle2_load >= payload:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 3.
def r8(payload: float, axle3_load: float) -> bool:
    if payload <= axle3_load:
        return True
    else:
        return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r9(operation_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    if operation_time >= pto_time + idle_time + driving_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
PTO operation time should be less than or equal to the total operation time.
Idle time must always be less than or equal to the total operation time.
The load on axle 1 must not surpass the load on axle 2.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
Payload must remain below or equal to the load carried by axle 2.
The payload must not exceed the load carried by axle 3.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";"

Here is the Python3 code based on the given input text:

```
# If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
def r1(distance: float, fuel_consumption_rate: float) -> bool:
    if distance >= 20 and fuel_consumption_rate >= 0.5:
        return True
    else:
        return False

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r2(distance: float, fuel_consumption_rate: float) -> bool:
    if distance >= 20 and fuel_consumption_rate >= 0.4:
        return True
    else:
        return False

# PTO operation time should be less than or equal to the total operation time.
def r3(pto_operation_time: float, total_operation_time: float) -> bool:
    if pto_operation_time <= total_operation_time:
        return True
    else:
        return False

# Idle time must always be less than or equal to the total operation time.
def r4(idle_time: float, total_operation_time: float) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 2.
def r5(load_axle1: float, load_axle2: float) -> bool:
    if load_axle1 <= load_axle2:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r6(load_axle1: float, load_axle3: float) -> bool:
    if load_axle1 <= load_axle3:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def r7(payload: float, load_axle2: float) -> bool:
    if payload <= load_axle2:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def r8(payload: float, load_axle3: float) -> bool:
    if payload <= load_axle3:
        return True
    else:
        return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r9(pto_operation_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
    if pto_operation_time + idle_time + driving_time <= total_operation_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
The total operation duration must not be lower than the PTO operation time.
Idle time cannot be greater than the total operation time.
Total operation time should shouldn’t be lower than driving time.
The weight on axle 1 cannot surpass the weight on axle 2.
The payload must not exceed the load carried by axle 2.
The payload cannot exceed the capacity of axle 3.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"

Here is the Python3 code based on the given input text:

```
# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r2(c: float, d: float) -> bool:
    if d / c >= 0.4:
        return True
    else:
        return False

# The total operation duration must not be lower than the PTO operation time.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Idle time cannot be greater than the total operation time.
def r4(g: float, h: float) -> bool:
    if g <= h:
        return True
    else:
        return False

# Total operation time should shouldn’t be lower than driving time.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r6(k: float, l: float) -> bool:
    if k <= l:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 2.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 3.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
PTO operation time should be less than or equal to the total operation time.
Total operation time shouldn’t be lower than idle time.
Driving time must always be less than or equal to the total operation time.
The load supported by axle 1 cannot exceed that of axle 2.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
Axle 2's load must always be equal to or greater than the payload.
The payload must always be smaller than or equal to the load on axle 3.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"

Here is the Python3 code based on the given input text:

```
# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r1(fuel: float, distance: float) -> bool:
    if distance >= 20 and fuel >= 0.4:
        return True
    else:
        return False

# PTO operation time should be less than or equal to the total operation time.
def r2(pto: float, total: float) -> bool:
    if pto <= total:
        return True
    else:
        return False

# Total operation time shouldn’t be lower than idle time.
def r3(total: float, idle: float) -> bool:
    if total >= idle:
        return True
    else:
        return False

# Driving time must always be less than or equal to the total operation time.
def r4(driving: float, total: float) -> bool:
    if driving <= total:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r5(axle1: float, axle2: float) -> bool:
    if axle1 <= axle2:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r6(axle1: float, axle3: float) -> bool:
    if axle1 <= axle3:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def r7(axle2: float, payload: float) -> bool:
    if axle2 >= payload:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 3.
def r8(payload: float, axle3: float) -> bool:
    if payload <= axle3:
        return True
    else:
        return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r9(pto: float, idle: float, driving: float, total: float) -> bool:
    if pto + idle + driving <= total:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
Total operation time shouldn’t be lower than PTO operation time.
Total operation time shouldn’t be lower than idle time.
The total operation durationmust not be lower than the driving time.
The number of stops where PTO is engaged must not exceed the overall stop count.
Axle 1's load cannot exceed Axle 2's load.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";"

Here is the Python3 code based on the given input text:

```
# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r2(c: float, d: float) -> bool:
    if d / c >= 0.4:
        return True
    else:
        return False

# Total operation time shouldn’t be lower than PTO operation time.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Total operation time shouldn’t be lower than idle time.
def r4(e: float, g: float) -> bool:
    if e >= g:
        return True
    else:
        return False

# The total operation durationmust not be lower than the driving time.
def r5(e: float, h: float) -> bool:
    if e >= h:
        return True
    else:
        return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r6(i: float, j: float) -> bool:
    if i <= j:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 2's load.
def r7(k: float, l: float) -> bool:
    if k <= l:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r8(k: float, m: float) -> bool:
    if k <= m:
        return True
    else:
        return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r9(e: float, f: float, g: float, h: float) -> bool:
    if e >= f + g + h:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
Idle time must always be less than or equal to the total operation time.
The total operation durationmust not be lower than the driving time.
Axle 1's load cannot exceed Axle 2's load.
The load on axle 1 must not surpass the load on axle 3.
The payload must not exceed the load carried by axle 2.
The payload must always be smaller than or equal to the load on axle 3.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";"

Here is the Python3 code based on the given input text:

```
# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r2(c: float, d: float) -> bool:
    if d / c >= 0.4:
        return True
    else:
        return False

# Idle time must always be less than or equal to the total operation time.
def r3(e: float, f: float) -> bool:
    if e <= f:
        return True
    else:
        return False

# The total operation duration must not be lower than the driving time.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 2's load.
def r5(i: float, j: float) -> bool:
    if i <= j:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 3.
def r6(k: float, l: float) -> bool:
    if k <= l:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 2.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 3.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r9(q: float, r: float, s: float, t: float) -> bool:
    if q >= r + s + t:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
PTO operation time cannot be greater than the total operation time.
The total operation duration must not be lower than the idle time.
Driving time should be less than or equal to the total operation time.
The number of stops where PTO is engaged must not exceed the overall stop count.
The load on axle 1 must not surpass the load on axle 2.
Payload must remain below or equal to the load carried by axle 3.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";"

Here is the Python3 code based on the given input text:

```
# The vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r1(fuel_consumption: float, distance: float) -> bool:
    if distance >= 20 and fuel_consumption >= 5:
        return True
    else:
        return False

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r2(distance: float, fuel_consumption_rate: float) -> bool:
    if distance >= 20 and fuel_consumption_rate >= 0.4:
        return True
    else:
        return False

# PTO operation time cannot be greater than the total operation time.
def r3(pto_operation_time: float, total_operation_time: float) -> bool:
    if pto_operation_time <= total_operation_time:
        return True
    else:
        return False

# The total operation duration must not be lower than the idle time.
def r4(total_operation_time: float, idle_time: float) -> bool:
    if total_operation_time >= idle_time:
        return True
    else:
        return False

# Driving time should be less than or equal to the total operation time.
def r5(driving_time: float, total_operation_time: float) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r6(pto_stops: int, overall_stops: int) -> bool:
    if pto_stops <= overall_stops:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 2.
def r7(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load <= axle2_load:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 3.
def r8(payload: float, axle3_load: float) -> bool:
    if payload <= axle3_load:
        return True
    else:
        return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r9(total_operation_time: float, pto_operation_time: float, idle_time: float, driving_time: float) -> bool:
    if total_operation_time >= pto_operation_time + idle_time + driving_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
PTO operation time cannot be greater than the total operation time.
Idle time cannot be greater than the total operation time.
The number of stops where PTO is engaged must not exceed the overall stop count.
The weight on axle 1 cannot surpass the weight on axle 3.
Payload must remain below or equal to the load carried by axle 2.
The payload must not exceed the load carried by axle 3.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"

Here is the Python3 code based on the given input text:

```
# The vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r1(fuel_consumption: float, distance: float) -> bool:
    if distance >= 20 and fuel_consumption >= 5:
        return True
    else:
        return False

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r2(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption >= 0.4:
        return True
    else:
        return False

# PTO operation time cannot be greater than the total operation time.
def r3(pto_time: float, total_time: float) -> bool:
    if pto_time <= total_time:
        return True
    else:
        return False

# Idle time cannot be greater than the total operation time.
def r4(idle_time: float, total_time: float) -> bool:
    if idle_time <= total_time:
        return True
    else:
        return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r5(pto_stops: int, overall_stops: int) -> bool:
    if pto_stops <= overall_stops:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r6(axle1_weight: float, axle3_weight: float) -> bool:
    if axle1_weight <= axle3_weight:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def r7(payload: float, axle2_load: float) -> bool:
    if payload <= axle2_load:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def r8(payload: float, axle3_load: float) -> bool:
    if payload <= axle3_load:
        return True
    else:
        return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r9(total_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    if total_time >= pto_time + idle_time + driving_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
PTO operation time must be less than or equal to the total operation time.
Idle time must always be less than or equal to the total operation time.
Total operation time should shouldn’t be lower than driving time.
PTO-engaged stops cannot exceed the total number of stops.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
Axle 2's load must always be equal to or greater than the payload.
Payload must remain below or equal to the load carried by axle 3.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";"

Here is the Python3 code based on the given input text:

```
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption >= 5:
        return True
    else:
        return False

# PTO operation time must be less than or equal to the total operation time.
def r2(pto_operation_time: float, total_operation_time: float) -> bool:
    if pto_operation_time <= total_operation_time:
        return True
    else:
        return False

# Idle time must always be less than or equal to the total operation time.
def r3(idle_time: float, total_operation_time: float) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# Total operation time should shouldn’t be lower than driving time.
def r4(total_operation_time: float, driving_time: float) -> bool:
    if total_operation_time >= driving_time:
        return True
    else:
        return False

# PTO-engaged stops cannot exceed the total number of stops.
def r5(pto_engaged_stops: int, total_stops: int) -> bool:
    if pto_engaged_stops <= total_stops:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r6(axle1_load: float, axle3_load: float) -> bool:
    if axle1_load <= axle3_load:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def r7(axle2_load: float, payload: float) -> bool:
    if axle2_load >= payload:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 3.
def r8(payload: float, axle3_load: float) -> bool:
    if payload <= axle3_load:
        return True
    else:
        return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r9(total_operation_time: float, pto_operation_time: float, idle_time: float, driving_time: float) -> bool:
    if total_operation_time >= pto_operation_time + idle_time + driving_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
Driving time should be less than or equal to the total operation time.
PTO-engaged stops cannot exceed the total number of stops.
The weight on axle 1 cannot surpass the weight on axle 2.
The load on axle 1 must not surpass the load on axle 3.
The payload must always be smaller than or equal to the load on axle 2.
The payload must always be smaller than or equal to the load on axle 3.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";"

Here is the Python3 code based on the given input text:

```
# The vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r1(fuel_consumption: float, distance: float) -> bool:
    if distance >= 20 and fuel_consumption >= 5:
        return True
    else:
        return False

# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r2(fuel_consumption: float) -> bool:
    if fuel_consumption >= 40:
        return True
    else:
        return False

# Driving time should be less than or equal to the total operation time.
def r3(driving_time: float, operation_time: float) -> bool:
    if driving_time <= operation_time:
        return True
    else:
        return False

# PTO-engaged stops cannot exceed the total number of stops.
def r4(pto_stops: int, total_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r5(axle1_weight: float, axle2_weight: float) -> bool:
    if axle1_weight <= axle2_weight:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 3.
def r6(axle1_load: float, axle3_load: float) -> bool:
    if axle1_load <= axle3_load:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 2.
def r7(payload: float, axle2_load: float) -> bool:
    if payload <= axle2_load:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 3.
def r8(payload: float, axle3_load: float) -> bool:
    if payload <= axle3_load:
        return True
    else:
        return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r9(operation_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    if operation_time >= pto_time + idle_time + driving_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
PTO operation time cannot be greater than the total operation time.
Idle time should be less than or equal to the total operation time.
The total operation durationmust not be lower than the driving time.
Stops with PTO engaged cannot outnumber the total stops.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
The payload cannot exceed the capacity of axle 2.
Axle 3's load must always be equal to or greater than the payload.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";"

Here is the Python3 code based on the given input text:

```
# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.4:
        return True
    else:
        return False

# PTO operation time cannot be greater than the total operation time.
def r2(c: float, d: float) -> bool:
    if c <= d:
        return True
    else:
        return False

# Idle time should be less than or equal to the total operation time.
def r3(e: float, f: float) -> bool:
    if e <= f:
        return True
    else:
        return False

# The total operation duration must not be lower than the driving time.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Stops with PTO engaged cannot outnumber the total stops.
def r5(i: float, j: float) -> bool:
    if i <= j:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r6(k: float, l: float) -> bool:
    if k <= l:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 2.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Axle 3's load must always be equal to or greater than the payload.
def r8(o: float, p: float) -> bool:
    if o >= p:
        return True
    else:
        return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r9(q: float, r: float, s: float, t: float) -> bool:
    if q >= r + s + t:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
PTO operation time should be less than or equal to the total operation time.
Idle time must always be less than or equal to the total operation time.
The total operation durationmust not be lower than the driving time.
The number of stops where PTO is engaged must not exceed the overall stop count.
Axle 1's load cannot exceed Axle 3's load.
Payload must remain below or equal to the load carried by axle 2.
Payload must remain below or equal to the load carried by axle 3.
";"

Here is the Python3 code based on the given input text:

```
# If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
    if fuel_consumption / distance >= 0.05:
        return True
    else:
        return False

# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r2(distance: float, fuel_consumption: float) -> bool:
    if fuel_consumption * 100 / distance >= 40:
        return True
    else:
        return False

# PTO operation time should be less than or equal to the total operation time.
def r3(pto_time: float, total_time: float) -> bool:
    if pto_time <= total_time:
        return True
    else:
        return False

# Idle time must always be less than or equal to the total operation time.
def r4(idle_time: float, total_time: float) -> bool:
    if idle_time <= total_time:
        return True
    else:
        return False

# The total operation duration must not be lower than the driving time.
def r5(total_time: float, driving_time: float) -> bool:
    if total_time >= driving_time:
        return True
    else:
        return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r6(pto_stops: int, overall_stops: int) -> bool:
    if pto_stops <= overall_stops:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 3's load.
def r7(axle1_load: float, axle3_load: float) -> bool:
    if axle1_load <= axle3_load:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def r8(payload: float, axle2_load: float) -> bool:
    if payload <= axle2_load:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 3.
def r9(payload: float, axle3_load: float) -> bool:
    if payload <= axle3_load:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
The total operation duration must not be lower than the PTO operation time.
Idle time should be less than or equal to the total operation time.
The total operation durationmust not be lower than the driving time.
The number of stops where PTO is engaged must not exceed the overall stop count.
The load supported by axle 1 cannot exceed that of axle 2.
The payload must not exceed the load carried by axle 2.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"

Here is the Python3 code based on the given input text:

```
# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(t: float, f: float) -> bool:
    if t >= 20 and f / t >= 0.25:
        return True
    else:
        return False

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r2(t: float, f: float) -> bool:
    if t >= 20 and f / t >= 4:
        return True
    else:
        return False

# The total operation duration must not be lower than the PTO operation time.
def r3(t: float, p: float) -> bool:
    if t >= p:
        return True
    else:
        return False

# Idle time should be less than or equal to the total operation time.
def r4(i: float, t: float) -> bool:
    if i <= t:
        return True
    else:
        return False

# The total operation duration must not be lower than the driving time.
def r5(t: float, d: float) -> bool:
    if t >= d:
        return True
    else:
        return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r6(s: int, p: int) -> bool:
    if s <= p:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r7(l1: float, l2: float) -> bool:
    if l1 <= l2:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 2.
def r8(p: float, l2: float) -> bool:
    if p <= l2:
        return True
    else:
        return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r9(t: float, p: float, i: float, d: float) -> bool:
    if t >= p + i + d:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
Total operation time shouldn’t be lower than PTO operation time.
Idle time should be less than or equal to the total operation time.
Driving time must always be less than or equal to the total operation time.
Stops with PTO engaged cannot outnumber the total stops.
The load on axle 1 must not surpass the load on axle 3.
Payload must remain below or equal to the load carried by axle 2.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";"

Here is the Python3 code based on the given input text:

```
# The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r1(fuel_consumption: float, distance: float) -> bool:
    if distance >= 20 and fuel_consumption >= 0.5:
        return True
    else:
        return False

# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r2(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption >= 0.4:
        return True
    else:
        return False

# Total operation time shouldn’t be lower than PTO operation time.
def r3(total_operation_time: float, pto_operation_time: float) -> bool:
    if total_operation_time >= pto_operation_time:
        return True
    else:
        return False

# Idle time should be less than or equal to the total operation time.
def r4(idle_time: float, total_operation_time: float) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# Driving time must always be less than or equal to the total operation time.
def r5(driving_time: float, total_operation_time: float) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False

# Stops with PTO engaged cannot outnumber the total stops.
def r6(pto_stops: int, total_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 3.
def r7(axle1_load: float, axle3_load: float) -> bool:
    if axle1_load <= axle3_load:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def r8(payload: float, axle2_load: float) -> bool:
    if payload <= axle2_load:
        return True
    else:
        return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r9(total_operation_time: float, pto_operation_time: float, idle_time: float, driving_time: float) -> bool:
    if total_operation_time >= pto_operation_time + idle_time + driving_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
PTO operation time should be less than or equal to the total operation time.
Total operation time shouldn’t be lower than idle time.
Driving time should be less than or equal to the total operation time.
The number of stops where PTO is engaged must not exceed the overall stop count.
The weight on axle 1 cannot surpass the weight on axle 2.
The load supported by axle 1 cannot exceed that of axle 3.
The payload must always be smaller than or equal to the load on axle 3.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";"

Here is the Python3 code based on the given input text:

```
# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r1(fuel: float, distance: float) -> bool:
    if distance >= 20 and fuel >= 0.4:
        return True
    else:
        return False

# PTO operation time should be less than or equal to the total operation time.
def r2(pto: float, total: float) -> bool:
    if pto <= total:
        return True
    else:
        return False

# Total operation time shouldn’t be lower than idle time.
def r3(total: float, idle: float) -> bool:
    if total >= idle:
        return True
    else:
        return False

# Driving time should be less than or equal to the total operation time.
def r4(driving: float, total: float) -> bool:
    if driving <= total:
        return True
    else:
        return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r5(pto_stops: int, overall_stops: int) -> bool:
    if pto_stops <= overall_stops:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r6(axle1: float, axle2: float) -> bool:
    if axle1 <= axle2:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 3.
def r7(axle1: float, axle3: float) -> bool:
    if axle1 <= axle3:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 3.
def r8(payload: float, axle3: float) -> bool:
    if payload <= axle3:
        return True
    else:
        return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r9(total: float, pto: float, idle: float, driving: float) -> bool:
    if total >= pto + idle + driving:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
The total operation duration must not be lower than the idle time.
Total operation time should shouldn’t be lower than driving time.
The total stop count must not be lower than the count of stops where PTO is engaged.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
Payload must remain below or equal to the load carried by axle 2.
The payload must not exceed the load carried by axle 3.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";"

Here is the Python3 code based on the given input text:

```
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption < 5:
        return False
    else:
        return True

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r2(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption < 40:
        return False
    else:
        return True

# The total operation duration must not be lower than the idle time.
def r3(operation_duration: float, idle_time: float) -> bool:
    if operation_duration < idle_time:
        return False
    else:
        return True

# Total operation time should shouldn’t be lower than driving time.
def r4(operation_duration: float, driving_time: float) -> bool:
    if operation_duration < driving_time:
        return False
    else:
        return True

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r5(total_stops: int, pto_stops: int) -> bool:
    if total_stops < pto_stops:
        return False
    else:
        return True

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r6(axle1_load: float, axle3_load: float) -> bool:
    if axle1_load > axle3_load:
        return False
    else:
        return True

# Payload must remain below or equal to the load carried by axle 2.
def r7(payload: float, axle2_load: float) -> bool:
    if payload > axle2_load:
        return False
    else:
        return True

# The payload must not exceed the load carried by axle 3.
def r8(payload: float, axle3_load: float) -> bool:
    if payload > axle3_load:
        return False
    else:
        return True

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r9(operation_duration: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    if operation_duration < pto_time + idle_time + driving_time:
        return False
    else:
        return True
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
PTO operation time cannot be greater than the total operation time.
Idle time should be less than or equal to the total operation time.
The number of stops where PTO is engaged must not exceed the overall stop count.
Axle 1's load cannot exceed Axle 2's load.
The load on axle 1 must not surpass the load on axle 3.
Axle 2's load must always be equal to or greater than the payload.
The payload must not exceed the load carried by axle 3.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"

Here is the Python3 code based on the given input text:

```
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
    if fuel_consumption >= 5:
        return True
    else:
        return False

# PTO operation time cannot be greater than the total operation time.
def r2(pto_time: float, total_time: float) -> bool:
    if pto_time <= total_time:
        return True
    else:
        return False

# Idle time should be less than or equal to the total operation time.
def r3(idle_time: float, total_time: float) -> bool:
    if idle_time <= total_time:
        return True
    else:
        return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r4(pto_stops: int, overall_stops: int) -> bool:
    if pto_stops <= overall_stops:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 2's load.
def r5(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load <= axle2_load:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 3.
def r6(axle1_load: float, axle3_load: float) -> bool:
    if axle1_load <= axle3_load:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def r7(axle2_load: float, payload: float) -> bool:
    if axle2_load >= payload:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def r8(payload: float, axle3_load: float) -> bool:
    if payload <= axle3_load:
        return True
    else:
        return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r9(total_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    if total_time >= pto_time + idle_time + driving_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
PTO operation time cannot be greater than the total operation time.
Idle time cannot be greater than the total operation time.
Driving time cannot be greater than the total operation time.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
Axle 1's load cannot exceed Axle 3's load.
The payload must always be smaller than or equal to the load on axle 2.
The payload must not exceed the load carried by axle 3.
";"

Here is the Python3 code based on the given input text:

```
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption >= 5:
        return True
    else:
        return False

# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r2(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption / distance >= 0.4:
        return True
    else:
        return False

# PTO operation time cannot be greater than the total operation time.
def r3(pto_time: float, total_time: float) -> bool:
    if pto_time <= total_time:
        return True
    else:
        return False

# Idle time cannot be greater than the total operation time.
def r4(idle_time: float, total_time: float) -> bool:
    if idle_time <= total_time:
        return True
    else:
        return False

# Driving time cannot be greater than the total operation time.
def r5(driving_time: float, total_time: float) -> bool:
    if driving_time <= total_time:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def r6(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load <= axle2_load:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 3's load.
def r7(axle1_load: float, axle3_load: float) -> bool:
    if axle1_load <= axle3_load:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 2.
def r8(payload: float, axle2_load: float) -> bool:
    if payload <= axle2_load:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def r9(payload: float, axle3_load: float) -> bool:
    if payload <= axle3_load:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
PTO operation time should be less than or equal to the total operation time.
Idle time cannot be greater than the total operation time.
Driving time should be less than or equal to the total operation time.
PTO-engaged stops cannot exceed the total number of stops.
Axle 2's load must always be equal to or greater than the payload.
Axle 3's load must always be equal to or greater than the payload.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"

Here is the Python3 code based on the given input text:

```
# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r2(a: float, c: float) -> bool:
    if c / a >= 0.4:
        return True
    else:
        return False

# PTO operation time should be less than or equal to the total operation time.
def r3(d: float, e: float) -> bool:
    if d <= e:
        return True
    else:
        return False

# Idle time cannot be greater than the total operation time.
def r4(f: float, e: float) -> bool:
    if f <= e:
        return True
    else:
        return False

# Driving time should be less than or equal to the total operation time.
def r5(g: float, e: float) -> bool:
    if g <= e:
        return True
    else:
        return False

# PTO-engaged stops cannot exceed the total number of stops.
def r6(h: float, i: float) -> bool:
    if h <= i:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def r7(j: float, k: float) -> bool:
    if j >= k:
        return True
    else:
        return False

# Axle 3's load must always be equal to or greater than the payload.
def r8(l: float, k: float) -> bool:
    if l >= k:
        return True
    else:
        return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r9(d: float, f: float, g: float, e: float) -> bool:
    if d + f + g <= e:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
PTO operation time should be less than or equal to the total operation time.
Idle time cannot be greater than the total operation time.
The total stop count must not be lower than the count of stops where PTO is engaged.
The load on axle 1 must not surpass the load on axle 2.
The weight on axle 1 cannot surpass the weight on axle 3.
The payload must not exceed the load carried by axle 2.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"

Here is the Python3 code based on the given input text:

```
# The vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r1(fuel: float, distance: float) -> bool:
    if distance >= 20 and fuel >= 0.5:
        return True
    else:
        return False

# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r2(distance: float, fuel: float) -> bool:
    if distance >= 20 and fuel / distance >= 0.4:
        return True
    else:
        return False

# PTO operation time should be less than or equal to the total operation time.
def r3(pto: float, total: float) -> bool:
    if pto <= total:
        return True
    else:
        return False

# Idle time cannot be greater than the total operation time.
def r4(idle: float, total: float) -> bool:
    if idle <= total:
        return True
    else:
        return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r5(total_stops: int, pto_stops: int) -> bool:
    if total_stops >= pto_stops:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 2.
def r6(axle1: float, axle2: float) -> bool:
    if axle1 <= axle2:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r7(axle1: float, axle3: float) -> bool:
    if axle1 <= axle3:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 2.
def r8(payload: float, axle2: float) -> bool:
    if payload <= axle2:
        return True
    else:
        return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r9(pto: float, idle: float, driving: float) -> bool:
    if pto + idle + driving >= 0:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
Total operation time shouldn’t be lower than PTO operation time.
Idle time cannot be greater than the total operation time.
Stops with PTO engaged cannot outnumber the total stops.
The load supported by axle 1 cannot exceed that of axle 2.
The payload cannot exceed the capacity of axle 2.
Payload must remain below or equal to the load carried by axle 3.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";"

Here is the Python3 code based on the given input text:

```
# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(km: float, fuel: float) -> bool:
    if km >= 20 and fuel / km >= 0.05:
        return True
    else:
        return False

# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def r2(km: float, fuel: float) -> bool:
    if km >= 20 and fuel / km >= 0.4:
        return True
    else:
        return False

# Total operation time shouldn’t be lower than PTO operation time.
def r3(total_time: float, pto_time: float) -> bool:
    if total_time >= pto_time:
        return True
    else:
        return False

# Idle time cannot be greater than the total operation time.
def r4(idle_time: float, total_time: float) -> bool:
    if idle_time <= total_time:
        return True
    else:
        return False

# Stops with PTO engaged cannot outnumber the total stops.
def r5(pto_stops: int, total_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r6(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load <= axle2_load:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 2.
def r7(payload: float, axle2_capacity: float) -> bool:
    if payload <= axle2_capacity:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 3.
def r8(payload: float, axle3_load: float) -> bool:
    if payload <= axle3_load:
        return True
    else:
        return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r9(total_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    if total_time >= pto_time + idle_time + driving_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: PTO operation time must be less than or equal to the total operation time.
Idle time must always be less than or equal to the total operation time.
The total operation durationmust not be lower than the driving time.
The total stop count must not be lower than the count of stops where PTO is engaged.
The weight on axle 1 cannot surpass the weight on axle 2.
The weight on axle 1 cannot surpass the weight on axle 3.
Payload must remain below or equal to the load carried by axle 2.
The payload must not exceed the load carried by axle 3.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";"

Here is the Python3 code based on the given input text:

```
# PTO operation time must be less than or equal to the total operation time.
def r1(pto: float, total_operation_time: float) -> bool:
    if pto <= total_operation_time:
        return True
    else:
        return False

# Idle time must always be less than or equal to the total operation time.
def r2(idle_time: float, total_operation_time: float) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# The total operation duration must not be lower than the driving time.
def r3(total_operation_time: float, driving_time: float) -> bool:
    if total_operation_time >= driving_time:
        return True
    else:
        return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r4(total_stop_count: int, pto_stop_count: int) -> bool:
    if total_stop_count >= pto_stop_count:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r5(axle1_weight: float, axle2_weight: float) -> bool:
    if axle1_weight <= axle2_weight:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r6(axle1_weight: float, axle3_weight: float) -> bool:
    if axle1_weight <= axle3_weight:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def r7(payload: float, axle2_load: float) -> bool:
    if payload <= axle2_load:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def r8(payload: float, axle3_load: float) -> bool:
    if payload <= axle3_load:
        return True
    else:
        return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r9(total_operation_time: float, pto: float, idle_time: float, driving_time: float) -> bool:
    if total_operation_time >= pto + idle_time + driving_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
PTO operation time cannot be greater than the total operation time.
Idle time must always be less than or equal to the total operation time.
The total stop count must not be lower than the count of stops where PTO is engaged.
Axle 1's load cannot exceed Axle 2's load.
The weight on axle 1 cannot surpass the weight on axle 3.
Axle 2's load must always be equal to or greater than the payload.
The payload must always be smaller than or equal to the load on axle 3.
";"

Here is the Python3 code based on the given input text:

```
# If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
    if fuel_consumption / distance >= 0.05:
        return True
    else:
        return False

# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def r2(distance: float, fuel_consumption: float) -> bool:
    if fuel_consumption / distance >= 0.4:
        return True
    else:
        return False

# PTO operation time cannot be greater than the total operation time.
def r3(pto_time: float, total_time: float) -> bool:
    if pto_time <= total_time:
        return True
    else:
        return False

# Idle time must always be less than or equal to the total operation time.
def r4(idle_time: float, total_time: float) -> bool:
    if idle_time <= total_time:
        return True
    else:
        return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r5(total_stops: int, pto_stops: int) -> bool:
    if total_stops >= pto_stops:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 2's load.
def r6(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load <= axle2_load:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r7(axle1_weight: float, axle3_weight: float) -> bool:
    if axle1_weight <= axle3_weight:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def r8(axle2_load: float, payload: float) -> bool:
    if axle2_load >= payload:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 3.
def r9(payload: float, axle3_load: float) -> bool:
    if payload <= axle3_load:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
PTO operation time cannot be greater than the total operation time.
Total operation time should shouldn’t be lower than driving time.
The total stop count must not be lower than the count of stops where PTO is engaged.
Axle 1's load cannot exceed Axle 2's load.
The load on axle 1 must not surpass the load on axle 3.
The payload must always be smaller than or equal to the load on axle 3.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"

Here is the Python3 code based on the given input text:

```
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption >= 5:
        return True
    else:
        return False

# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r2(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption / distance >= 0.4:
        return True
    else:
        return False

# PTO operation time cannot be greater than the total operation time.
def r3(pto_time: float, total_time: float) -> bool:
    if pto_time <= total_time:
        return True
    else:
        return False

# Total operation time should shouldn’t be lower than driving time.
def r4(total_time: float, driving_time: float) -> bool:
    if total_time >= driving_time:
        return True
    else:
        return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r5(total_stops: int, pto_stops: int) -> bool:
    if total_stops >= pto_stops:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 2's load.
def r6(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load <= axle2_load:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 3.
def r7(axle1_load: float, axle3_load: float) -> bool:
    if axle1_load <= axle3_load:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 3.
def r8(payload: float, axle3_load: float) -> bool:
    if payload <= axle3_load:
        return True
    else:
        return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r9(pto_time: float, idle_time: float, driving_time: float, total_time: float) -> bool:
    if pto_time + idle_time + driving_time <= total_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
PTO operation time should be less than or equal to the total operation time.
Idle time cannot be greater than the total operation time.
The total operation durationmust not be lower than the driving time.
The total stop count must not be lower than the count of stops where PTO is engaged.
The weight on axle 1 cannot surpass the weight on axle 2.
The weight on axle 1 cannot surpass the weight on axle 3.
Axle 3's load must always be equal to or greater than the payload.
";"

Here is the Python3 code based on the given input text:

```
# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(fuel_consumption_per_hour: float, distance: float) -> bool:
    if distance >= 20 and fuel_consumption_per_hour >= 0.05:
        return True
    else:
        return False

# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r2(fuel_consumption_per_distance: float, distance: float) -> bool:
    if distance >= 20 and fuel_consumption_per_distance >= 0.4:
        return True
    else:
        return False

# PTO operation time should be less than or equal to the total operation time.
def r3(pto_operation_time: float, total_operation_time: float) -> bool:
    if pto_operation_time <= total_operation_time:
        return True
    else:
        return False

# Idle time cannot be greater than the total operation time.
def r4(idle_time: float, total_operation_time: float) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# The total operation durationmust not be lower than the driving time.
def r5(total_operation_duration: float, driving_time: float) -> bool:
    if total_operation_duration >= driving_time:
        return True
    else:
        return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r6(total_stop_count: int, pto_stop_count: int) -> bool:
    if total_stop_count >= pto_stop_count:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r7(axle1_weight: float, axle2_weight: float) -> bool:
    if axle1_weight <= axle2_weight:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r8(axle1_weight: float, axle3_weight: float) -> bool:
    if axle1_weight <= axle3_weight:
        return True
    else:
        return False

# Axle 3's load must always be equal to or greater than the payload.
def r9(axle3_weight: float, payload: float) -> bool:
    if axle3_weight >= payload:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
The total operation duration must not be lower than the PTO operation time.
Idle time must always be less than or equal to the total operation time.
Driving time cannot be greater than the total operation time.
The total stop count must not be lower than the count of stops where PTO is engaged.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
Axle 1's load cannot exceed Axle 3's load.
Axle 2's load must always be equal to or greater than the payload.
Axle 3's load must always be equal to or greater than the payload.
";"

Here is the Python3 code based on the given input text:

```
# The vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r1(fuel: float, distance: float) -> bool:
    if distance >= 20 and fuel >= 5:
        return True
    else:
        return False

# The total operation duration must not be lower than the PTO operation time.
def r2(total_operation_time: float, pto_operation_time: float) -> bool:
    if total_operation_time >= pto_operation_time:
        return True
    else:
        return False

# Idle time must always be less than or equal to the total operation time.
def r3(idle_time: float, total_operation_time: float) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# Driving time cannot be greater than the total operation time.
def r4(driving_time: float, total_operation_time: float) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r5(total_stop_count: int, pto_stop_count: int) -> bool:
    if total_stop_count >= pto_stop_count:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def r6(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load <= axle2_load:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 3's load.
def r7(axle1_load: float, axle3_load: float) -> bool:
    if axle1_load <= axle3_load:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def r8(axle2_load: float, payload: float) -> bool:
    if axle2_load >= payload:
        return True
    else:
        return False

# Axle 3's load must always be equal to or greater than the payload.
def r9(axle3_load: float, payload: float) -> bool:
    if axle3_load >= payload:
        return True
    else:
        return False
```"
