Prompt;Mistral
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: The number of stops where PTO is engaged must not exceed the overall stop count.
The payload cannot exceed the capacity of axle 3.
";" # The number of stops where PTO is engaged must not exceed the overall stop count.
def r1(pto_stops: int, overall_stops: int) -> bool:
 if pto_stops <= overall_stops:
 return True
 else:
 return False

# The payload cannot exceed the capacity of axle 3.
def r2(payload: float, axle_3_capacity: float) -> bool:
 if payload <= axle_3_capacity:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
Stops with PTO engaged cannot outnumber the total stops.
";" # For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance >= 20:
 if fuel_consumption / (distance / 100) >= 0.4:
 return True
 else:
 return False

 # Stops with PTO engaged cannot outnumber the total stops.
def r2(num_stops_pto_engaged: int, total_stops: int) -> bool:
 if num_stops_pto_engaged <= total_stops:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: The load carried by axle 1 must be smaller than or equal to the load on axle 3.
Total operation time should be at least the sum of PTO, idle, and driving times.
";" # The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r1(axle_1_load: float, axle_3_load: float) -> bool:
    if axle_1_load <= axle_3_load:
        return True
    else:
        return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r2(pto_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
    if total_operation_time >= (pto_time + idle_time + driving_time):
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: PTO operation time must be less than or equal to the total operation time.
Axle 1's load cannot exceed Axle 3's load.
";" # If PTO operation time must be less than or equal to the total operation time.
def r1(pto_operation_time: float, total_operation_time: float) -> bool:
 if pto_operation_time <= total_operation_time:
 return True
 else:
 return False

# Axle 1's load cannot exceed Axle 3's load.
def r2(axle_1_load: float, axle_3_load: float) -> bool:
 if axle_1_load <= axle_3_load:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
The payload cannot exceed the capacity of axle 3.
";" # The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance >= 20:
 if fuel_consumption / distance <= 0.4:
 return True
 else:
 return False

# The payload cannot exceed the capacity of axle 3.
def r2(payload: float, axle_3_capacity: float) -> bool:
 if payload <= axle_3_capacity:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
Driving time should be less than or equal to the total operation time.
";" # For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r1(trip_length: float, fuel_consumption: float) -> bool:
 if (trip_length / 100) * fuel_consumption >= 40:
 return True
 else:
 return False

# Driving time should be less than or equal to the total operation time.
def r2(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: The payload must always be smaller than or equal to the load on axle 2.
The payload must always be smaller than or equal to the load on axle 3.
";" # If the payload is smaller than or equal to the load on axle 2.
def r1(payload: float, load_axle_2: float) -> bool:
    if payload <= load_axle_2:
        return True
    else:
        return False

# If the payload is smaller than or equal to the load on axle 3.
def r2(payload: float, load_axle_3: float) -> bool:
    if payload <= load_axle_3:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: PTO-engaged stops cannot exceed the total number of stops.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
";" # PTO-engaged stops cannot exceed the total number of stops.
def r1(pto_engaged_stops: int, total_stops: int) -> bool:
 if pto_engaged_stops <= total_stops:
 return True
 else:
 return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r2(load_axle1: float, load_axle3: float) -> bool:
 if load_axle1 <= load_axle3:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
Axle 2's load must always be equal to or greater than the payload.
";" # If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r1(vehicle_distance: float, fuel_consumption: float) -> bool:
 if fuel_consumption * 100 > 40 * vehicle_distance:
 return False
 else:
 return True

# Axle 2's load must always be equal to or greater than the payload.
def r2(axle_2_load: float, payload: float) -> bool:
 if axle_2_load >= payload:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: The load on axle 1 must not surpass the load on axle 2.
The weight on axle 1 cannot surpass the weight on axle 3.
";" # The load on axle 1 must not surpass the load on axle 2.
def r1(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load <= axle2_load:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r2(axle1_weight: float, axle3_weight: float) -> bool:
    if axle1_weight <= axle3_weight:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: Idle time cannot be greater than the total operation time.
Driving time should be less than or equal to the total operation time.
";" # If idle time cannot be greater than the total operation time.
def r1(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# If driving time should be less than or equal to the total operation time.
def r2(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: Axle 1's load cannot exceed Axle 2's load.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";" # Axle 1's load cannot exceed Axle 2's load.
def r1(a1: float, a2: float) -> bool:
 if a1 <= a2:
 return True
 else:
 return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r2(total_duration: float, pto_duration: float, idle_duration: float, driving_duration: float) -> bool:
 if total_duration >= (pto_duration + idle_duration + driving_duration):
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
Total operation time shouldn’t be lower than idle time.
";" # The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance >= 20:
 if fuel_consumption >= 0.4:
 return True
 else:
 return False

# Total operation time shouldn’t be lower than idle time.
def r2(operation_time: float, idle_time: float) -> bool:
 if operation_time >= idle_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: The total operation durationmust not be lower than the driving time.
Axle 1's load cannot exceed Axle 3's load.
";" # The total operation duration must not be lower than the driving time.
def r1(total_duration: float, driving_time: float) -> bool:
 if total_duration < driving_time:
 return False
 else:
 return True

# Axle 1's load cannot exceed Axle 3's load.
def r2(axle1_load: float, axle3_load: float) -> bool:
 if axle1_load > axle3_load:
 return False
 else:
 return True"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: PTO operation time should be less than or equal to the total operation time.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";" # If PTO operation time is less than or equal to total operation time.
def r1(pto_time: float, total_time: float) -> bool:
 if pto_time <= total_time:
 return True
 else:
 return False

# If total operation time is greater than or equal to the sum of PTO operation time, idle time, and driving time.
def r2(total_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
 if total_time >= (pto_time + idle_time + driving_time):
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
PTO operation time cannot be greater than the total operation time.
";" # The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r1(distance: float, consumption: float) -> bool:
 if distance >= 20 and consumption <= (distance / 5):
 return False
 else:
 return True

# PTO operation time cannot be greater than the total operation time.
def r2(pto_time: float, total_time: float) -> bool:
 if pto_time <= total_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: Idle time should be less than or equal to the total operation time.
The load supported by axle 1 cannot exceed that of axle 3.
";" # If idle time is less than or equal to total operation time.
def r1(idle_time: float, total_operation_time: float) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 3.
def r2(axle_1_load: float, axle_3_load: float) -> bool:
    if axle_1_load <= axle_3_load:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: PTO operation time cannot be greater than the total operation time.
The payload must not exceed the load carried by axle 3.
";" # If PTO operation time cannot be greater than the total operation time.
def r1(pto_operation_time: float, total_operation_time: float) -> bool:
 if pto_operation_time <= total_operation_time:
 return True
 else:
 return False

# The payload must not exceed the load carried by axle 3.
def r2(payload: float, load_axle_3: float) -> bool:
 if payload <= load_axle_3:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
";" # If the vehicle traveled at least 20 km, its average hourly fuel consumption cannot be less than 5 dm³/h.
def r1(km: float, fuel_consumption: float) -> bool:
 if km >= 20 and fuel_consumption / km < 0.2:
 return False
 else:
 return True

# If the vehicle traveled 20 km or more, its minimum average fuel consumption per 100 km is 40 dm³/100 km.
def r2(km: float, fuel_consumption: float) -> bool:
 if km >= 20:
 target_consumption = fuel_consumption / km * 100
 if target_consumption < 40:
 return False
 else:
 return True"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: The total operation durationmust not be lower than the driving time.
PTO-engaged stops cannot exceed the total number of stops.
";" # The total operation duration must not be lower than the driving time.
def r1(total_duration: float, driving_time: float) -> bool:
 if total_duration < driving_time:
 return False
 else:
 return True

# PTO-engaged stops cannot exceed the total number of stops.
def r2(pto_stops: int, total_stops: int) -> bool:
 if pto_stops > total_stops:
 return False
 else:
 return True"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: The load supported by axle 1 cannot exceed that of axle 2.
The payload cannot exceed the capacity of axle 3.
";" # The load supported by axle 1 cannot exceed that of axle 2.
def r1(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load <= axle2_load:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 3.
def r2(payload: float, axle3_capacity: float) -> bool:
    if payload <= axle3_capacity:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
The weight on axle 1 cannot surpass the weight on axle 3.
";" # For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance >= 20:
 if fuel_consumption <= (distance / 5):
 return True
 else:
 return False

 # The weight on axle 1 cannot surpass the weight on axle 3.
def r2(weight_axle1: float, weight_axle3: float) -> bool:
 if weight_axle1 <= weight_axle3:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
Total operation time should be at least the sum of PTO, idle, and driving times.
";" # If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance / fuel_consumption <= 4:
 return False
 else:
 return True

# Total operation time should be at least the sum of PTO, idle, and driving times.
def total\_operation\_time(pto\_time: float, idle\_time: float, driving\_time: float) -> float:
 return pto\_time + idle\_time + driving\_time

# Check if the total operation time is no less than the sum of PTO, idle, and driving times.
def r2(pto\_time: float, idle\_time: float, driving\_time: float, total\_operation\_time: float) -> bool:
 if total\_operation\_time >= pto\_time + idle\_time + driving\_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: Stops with PTO engaged cannot outnumber the total stops.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";" # If the number of stops with PTO engaged cannot outnumber the total stops, define a function 'r1' that takes the number of stops with PTO engaged and the total number of stops as arguments and returns True if the former is less than or equal to the latter.
def r1(pto_stops: int, total_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# If the total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times, define a function 'r2' that takes the total operation time and the sum of PTO operation, idle, and driving times as arguments and returns True if the former is greater than or equal to the latter.
def r2(total_operation_time: float, total_time: float) -> bool:
    if total_operation_time >= total_time:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: The load supported by axle 1 cannot exceed that of axle 3.
Payload must remain below or equal to the load carried by axle 3.
";" # If the load supported by axle 1 cannot exceed that of axle 3.
def r1(axle_1: float, axle_3: float) -> bool:
    if axle_1 <= axle_3:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 3.
def r2(payload: float, axle_3: float) -> bool:
    if payload <= axle_3:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: Idle time must always be less than or equal to the total operation time.
Payload must remain below or equal to the load carried by axle 3.
";" # If idle time must always be less than or equal to total operation time, define a function 'r1' that takes two arguments 'idle' and 'total_operation' and returns True if idle is less than or equal to total_operation, and False otherwise.
def r1(idle: float, total_operation: float) -> bool:
    if idle <= total_operation:
        return True
    else:
        return False

# If payload must remain below or equal to the load carried by axle 3, define a function 'r2' that takes two arguments 'payload' and 'load_axle_3' and returns True if payload is less than or equal to load_axle_3, and False otherwise.
def r2(payload: float, load_axle_3: float) -> bool:
    if payload <= load_axle_3:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
The load on axle 1 must not surpass the load on axle 2.
";" # For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r1(trip_length_km: float, fuel_consumption_rate: float) -> bool:
 if trip_length_km >= 20 and fuel_consumption_rate >= 40:
 return True
 else:
 return False

# The load on axle 1 must not surpass the load on axle 2.
def r2(load_axle1: float, load_axle2: float) -> bool:
 if load_axle1 <= load_axle2:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: Driving time must always be less than or equal to the total operation time.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";" # Driving time must always be less than or equal to the total operation time.
def r1(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r2(total_operation_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
 if total_operation_time >= (pto_time + idle_time + driving_time):
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: The total operation duration must not be lower than the PTO operation time.
The number of stops where PTO is engaged must not exceed the overall stop count.
";" # If the total operation duration is not lower than the PTO operation time, the condition is satisfied.
def r1(total_duration: float, pto_operation_time: float) -> bool:
 if total_duration >= pto_operation_time:
 return True
 else:
 return False

# If the number of stops where PTO is engaged does not exceed the overall stop count, the condition is satisfied.
def r2(num_pto_stops: int, overall_stop_count: int) -> bool:
 if num_pto_stops <= overall_stop_count:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: Total operation time shouldn’t be lower than idle time.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";" # If the total operation time is lower than idle time, the condition is not met.
def r1(total_operation_time: float, idle_time: float) -> bool:
 if total_operation_time < idle_time:
 return False
 else:
 return True

# The total operation duration must always be greater than or equal to the sum of PTO time, idle time, and driving time.
def r2(total_operation_duration: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
 if total_operation_duration >= pto_time + idle_time + driving_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
The total operation duration must not be lower than the idle time.
";" # If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance / 100 >= 20 and fuel_consumption / (distance / 100) < 0.05:
 return False
 else:
 return True

# The total operation duration must not be lower than the idle time.
def r2(operation_duration: float, idle_time: float) -> bool:
 if operation_duration < idle_time:
 return False
 else:
 return True"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
";" # The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance >= 20 and fuel_consumption / distance <= 0.04:
 return True
 else:
 return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r2(load_axle1: float, load_axle3: float) -> bool:
 if load_axle1 <= load_axle3:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: Driving time should be less than or equal to the total operation time.
The payload must not exceed the load carried by axle 3.
";" # Driving time should be less than or equal to the total operation time.
def r1(driving_time: float, total_operation_time: float) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def r2(payload: float, load_axle_3: float) -> bool:
    if payload <= load_axle_3:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: The total operation duration must not be lower than the PTO operation time.
Axle 2's load must always be equal to or greater than the payload.
";" # If the total operation duration must not be lower than the PTO operation time.
def r1(total_duration: float, pto_operation_time: float) -> bool:
 if total_duration >= pto_operation_time:
 return True
 else:
 return False

# Axle 2's load must always be equal to or greater than the payload.
def r2(axle_2_load: float, payload: float) -> bool:
 if axle_2_load >= payload:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: The payload cannot exceed the capacity of axle 3.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";" # The payload cannot exceed the capacity of axle 3.
def r1(payload: float, axle_3_capacity: float) -> bool:
 if payload <= axle_3_capacity:
 return True
 else:
 return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r2(pto_duration: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if total_operation_time >= pto_duration + idle_time + driving_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: Idle time should be less than or equal to the total operation time.
The load on axle 1 must not surpass the load on axle 2.
";" # If idle time is less than or equal to total operation time.
def r1(idle_time: float, total_operation_time: float) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 2.
def r2(load_axle1: float, load_axle2: float) -> bool:
    if load_axle1 <= load_axle2:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: The total stop count must not be lower than the count of stops where PTO is engaged.
The weight on axle 1 cannot surpass the weight on axle 2.
";" # The total stop count must not be lower than the count of stops where PTO is engaged.
def r1(stop_count: int, pto_stops: int) -> bool:
 if stop_count >= pto_stops:
 return True
 else:
 return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r2(weight_axle1: float, weight_axle2: float) -> bool:
 if weight_axle1 <= weight_axle2:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: Driving time should be less than or equal to the total operation time.
The weight on axle 1 cannot surpass the weight on axle 2.
";" # Driving time should be less than or equal to the total operation time.
def r1(driving_time: float, total_operation_time: float) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r2(weight_axle1: float, weight_axle2: float) -> bool:
    if weight_axle1 <= weight_axle2:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
Stops with PTO engaged cannot outnumber the total stops.
";" # For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(distance: float, fuel_consumption_per_hour: float) -> bool:
 if distance / fuel_consumption_per_hour >= 4:
 return True
 else:
 return False

# Stops with PTO engaged cannot outnumber the total stops.
def r2(num_stops_pto_engaged: int, total_stops: int) -> bool:
 if num_stops_pto_engaged <= total_stops:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
The payload must always be smaller than or equal to the load on axle 2.
";" # If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance <= 20:
 return False
 elif fuel_consumption / distance < 0.005:
 return False
 else:
 return True

# The payload must always be smaller than or equal to the load on axle 2.
def r2(payload: float, load_on_axle_2: float) -> bool:
 if payload > load_on_axle_2:
 return False
 else:
 return True"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: PTO operation time must be less than or equal to the total operation time.
Idle time should be less than or equal to the total operation time.
";" # If PTO operation time is less than or equal to total operation time.
def r1(pto_operation_time: float, total_operation_time: float) -> bool:
    if pto_operation_time <= total_operation_time:
        return True
    else:
        return False

# If idle time is less than or equal to total operation time.
def r2(idle_time: float, total_operation_time: float) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
PTO operation time must be less than or equal to the total operation time.
";" # The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r1(total_distance: float, average_fuel_consumption: float) -> bool:
 if total_distance >= 20 and average_fuel_consumption >= 0.04:
 return True
 else:
 return False

# PTO operation time must be less than or equal to the total operation time.
def r2(pto_operation_time: float, total_operation_time: float) -> bool:
 if pto_operation_time <= total_operation_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: Total operation time shouldn’t be lower than PTO operation time.
Driving time should be less than or equal to the total operation time.
";" # If the total operation time is greater than or equal to PTO operation time.
def r1(pto: float, total: float) -> bool:
 if total >= pto:
 return True
 else:
 return False

# If the driving time is less than or equal to the total operation time.
def r2(total: float, driving: float) -> bool:
 if driving <= total:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: Driving time should be less than or equal to the total operation time.
The payload must always be smaller than or equal to the load on axle 2.
";" # Driving time should be less than or equal to the total operation time.
def r1(driving_time: float, total_operation_time: float) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 2.
def r2(payload: float, load_on_axle_2: float) -> bool:
    if payload <= load_on_axle_2:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
Driving time must always be less than or equal to the total operation time.
";" # If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
def r1(distance: float, fuel_consumption_rate: float) -> bool:
 if distance >= 20 and fuel_consumption_rate <= (distance / 60):
 return True
 else:
 return False

# Driving time must always be less than or equal to the total operation time.
def r2(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
Axle 3's load must always be equal to or greater than the payload.
";" # For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance >= 20:
 if fuel_consumption <= (distance / 5):
 return True
 else:
 return False

 # Axle 3's load must always be equal to or greater than the payload.
def r2(axle_3_load: float, payload: float) -> bool:
 if axle_3_load >= payload:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: Total operation time shouldn’t be lower than idle time.
Stops with PTO engaged cannot outnumber the total stops.
";" # If the total operation time is not lower than idle time.
def r1(operation_time: float, idle_time: float) -> bool:
 if operation_time >= idle_time:
 return True
 else:
 return False

# If the number of stops with PTO engaged cannot outnumber the total stops.
def r2(pto_stops: int, total_stops: int) -> bool:
 if pto_stops <= total_stops:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: PTO-engaged stops cannot exceed the total number of stops.
Payload must remain below or equal to the load carried by axle 2.
";" # If PTO-engaged stops cannot exceed the total number of stops, define a variable for the total number of stops and a variable for PTO-engaged stops.
total_stops: int
pto_engaged_stops: int

# Define a rule that checks if PTO-engaged stops are less than or equal to the total number of stops.
def r1(total_stops: int, pto_engaged_stops: int) -> bool:
 if pto_engaged_stops <= total_stops:
 return True
 else:
 return False

# If Payload must remain below or equal to the load carried by axle 2, define a variable for the payload and a variable for the load carried by axle 2.
payload: float
load_axle2: float

# Define a rule that checks if payload is less than or equal to the load carried by axle 2.
def r2(payload: float, load_axle2: float) -> bool:
 if payload <= load_axle2:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: Idle time must always be less than or equal to the total operation time.
Payload must remain below or equal to the load carried by axle 2.
";" # If idle time must always be less than or equal to total operation time, define a function 'r1' that takes two arguments 'idle' and 'total_operation' and returns True if idle is less than or equal to total_operation, and False otherwise.
def r1(idle: float, total_operation: float) -> bool:
    if idle <= total_operation:
        return True
    else:
        return False

# If payload must remain below or equal to the load carried by axle 2, define a function 'r2' that takes two arguments 'payload' and 'load_axle_2' and returns True if payload is less than or equal to load_axle_2, and False otherwise.
def r2(payload: float, load_axle_2: float) -> bool:
    if payload <= load_axle_2:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: The load carried by axle 1 must be smaller than or equal to the load on axle 2.
The payload cannot exceed the capacity of axle 2.
";" # The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def r1(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load <= axle2_load:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 2.
def r2(payload: float, axle2_capacity: float) -> bool:
    if payload <= axle2_capacity:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
Idle time should be less than or equal to the total operation time.
The weight on axle 1 cannot surpass the weight on axle 3.
";" # The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r1(total_distance: float, average_fuel_consumption: float) -> bool:
 if total_distance >= 20 and average_fuel_consumption * 100 >= 40:
 return True
 else:
 return False

# Idle time should be less than or equal to the total operation time.
def r2(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r3(weight_axle_1: float, weight_axle_3: float) -> bool:
 if weight_axle_1 <= weight_axle_3:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
Total operation time should shouldn’t be lower than driving time.
";" # If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
def r1(distance: float, fuel_consumption_rate: float) -> bool:
 if distance >= 20 and fuel_consumption_rate <= (5 / 10):
 return True
 else:
 return False

# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r2(distance: float, fuel_consumption_per_100km: float) -> bool:
 if distance >= 20 and fuel_consumption_per_100km == 40:
 return True
 else:
 return False

# Total operation time should not be lower than driving time.
def r3(total_operation_time: float, driving_time: float) -> bool:
 if total_operation_time >= driving_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: Idle time should be less than or equal to the total operation time.
Total operation time should shouldn’t be lower than driving time.
The load on axle 1 must not surpass the load on axle 2.
";" # If idle time is less than or equal to total operation time.
def r1(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# If total operation time is greater than or equal to driving time.
def r2(total_operation_time: float, driving_time: float) -> bool:
 if total_operation_time >= driving_time:
 return True
 else:
 return False

# The load on axle 1 must not be greater than the load on axle 2.
def r3(load_axle1: float, load_axle2: float) -> bool:
 if load_axle1 <= load_axle2:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: The load supported by axle 1 cannot exceed that of axle 2.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
The payload cannot exceed the capacity of axle 3.
";" # The load supported by axle 1 cannot exceed that of axle 2.
def r1(axle1_load: float, axle2_load: float) -> bool:
 if axle1_load <= axle2_load:
 return True
 else:
 return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r2(axle1_load: float, axle3_load: float) -> bool:
 if axle1_load <= axle3_load:
 return True
 else:
 return False

# The payload cannot exceed the capacity of axle 3.
def r3(payload: float, axle3_capacity: float) -> bool:
 if payload <= axle3_capacity:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
The total operation durationmust not be lower than the driving time.
Axle 2's load must always be equal to or greater than the payload.
";" # For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(distance: float, fuel_consumption_per_hour: float) -> bool:
 if distance / fuel_consumption_per_hour >= 20:
 if fuel_consumption_per_hour <= 5:
 return True
 else:
 return False

# The total operation duration must not be lower than the driving time.
def r2(total_operation_duration: float, driving_time: float) -> bool:
 if total_operation_duration >= driving_time:
 return True
 else:
 return False

# Axle 2's load must always be equal to or greater than the payload.
def r3(axle_2_load: float, payload: float) -> bool:
 if axle_2_load >= payload:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
Driving time should be less than or equal to the total operation time.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
";" # For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r1(trip_length: float, fuel_consumption: float) -> bool:
 if trip_length >= 20 and fuel_consumption / trip_length <= 0.4:
 return True
 else:
 return False

# Driving time should be less than or equal to the total operation time.
def r2(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r3(load_axle1: float, load_axle3: float) -> bool:
 if load_axle1 <= load_axle3:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
Total operation time shouldn’t be lower than PTO operation time.
";" # When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(total_distance: float, avg_fuel_consumption: float) -> bool:
 if total_distance >= 20 and avg_fuel_consumption * 100 <= 500:
 return True
 else:
 return False

# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r2(total_distance: float, avg_fuel_consumption: float) -> bool:
 if total_distance >= 20 and avg_fuel_consumption >= 4:
 return True
 else:
 return False

# Total operation time shouldn’t be lower than PTO operation time.
def r3(operation_time: float, pto_operation_time: float) -> bool:
 if operation_time >= pto_operation_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: PTO operation time should be less than or equal to the total operation time.
Driving time must always be less than or equal to the total operation time.
Stops with PTO engaged should never outnumber total stops.
";" # PTO operation time should be less than or equal to the total operation time.
def r1(pto_time: float, total_time: float) -> bool:
 if pto_time / total_time <= 1:
 return True
 else:
 return False

# Driving time must always be less than or equal to the total operation time.
def r2(driving_time: float, total_time: float) -> bool:
 if driving_time / total_time <= 1:
 return True
 else:
 return False

# Stops with PTO engaged should never outnumber total stops.
def r3(pto_stops: int, total_stops: int) -> bool:
 if pto_stops <= total_stops:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: The total operation duration must not be lower than the idle time.
The number of stops where PTO is engaged must not exceed the overall stop count.
Payload must remain below or equal to the load carried by axle 3.
";" # The total operation duration must not be lower than the idle time.
def r1(operation_duration: float, idle_time: float) -> bool:
 if operation_duration >= idle_time:
 return True
 else:
 return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r2(num_stops_pto_engaged: int, overall_stop_count: int) -> bool:
 if num_stops_pto_engaged <= overall_stop_count:
 return True
 else:
 return False

# Payload must remain below or equal to the load carried by axle 3.
def r3(payload: float, load_axle_3: float) -> bool:
 if payload <= load_axle_3:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: Idle time must always be less than or equal to the total operation time.
The load on axle 1 must not surpass the load on axle 3.
Total operation time should be at least the sum of PTO, idle, and driving times.
";" # Idle time must always be less than or equal to the total operation time.
def r1(idle: float, total_operation: float) -> bool:
 if idle <= total_operation:
 return True
 else:
 return False

# The load on axle 1 must not surpass the load on axle 3.
def r2(load_axle1: float, load_axle3: float) -> bool:
 if load_axle1 <= load_axle3:
 return True
 else:
 return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r3(pto: float, idle: float, driving: float, total_operation: float) -> bool:
 if total_operation >= pto + idle + driving:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
The load supported by axle 1 cannot exceed that of axle 2.
Axle 2's load must always be equal to or greater than the payload.
";" # If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r1(vehicle_distance: float, fuel_consumption: float) -> bool:
 if fuel_consumption * 100 / vehicle_distance <= 40:
 return False
 else:
 return True

# The load supported by axle 1 cannot exceed that of axle 2.
def r2(axle1_load: float, axle2_load: float) -> bool:
 if axle1_load <= axle2_load:
 return True
 else:
 return False

# Axle 2's load must always be equal to or greater than the payload.
def r3(axle2_load: float, payload: float) -> bool:
 if axle2_load >= payload:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
PTO operation time cannot be greater than the total operation time.
The weight on axle 1 cannot surpass the weight on axle 3.
";" # For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r1(trip_length: float, fuel_consumption: float) -> bool:
 if trip_length >= 20 and fuel_consumption / trip_length <= 0.4:
 return True
 else:
 return False

# PTO operation time cannot be greater than the total operation time.
def r2(pto_time: float, total_time: float) -> bool:
 if pto_time <= total_time:
 return True
 else:
 return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r3(weight_axle1: float, weight_axle3: float) -> bool:
 if weight_axle1 <= weight_axle3:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: Total operation time shouldn’t be lower than idle time.
Driving time should be less than or equal to the total operation time.
Axle 2's load must always be equal to or greater than the payload.
";" # Total operation time shouldn't be lower than idle time.
def r1(operation_time: float, idle_time: float) -> bool:
    if operation_time >= idle_time:
        return True
    else:
        return False

# Driving time should be less than or equal to the total operation time.
def r2(driving_time: float, operation_time: float) -> bool:
    if driving_time <= operation_time:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def r3(axle_2_load: float, payload: float) -> bool:
    if axle_2_load >= payload:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
Idle time cannot be greater than the total operation time.
Payload must remain below or equal to the load carried by axle 3.
";" # If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
def r1(distance: float, fuel_consumption_rate: float) -> bool:
 if distance >= 20:
 if fuel_consumption_rate <= (distance / 60) * 5:
 return True
 else:
 return False

# Idle time cannot be greater than the total operation time.
def r2(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# Payload must remain below or equal to the load carried by axle 3.
def r3(payload: float, load_axle_3: float) -> bool:
 if payload <= load_axle_3:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: The total operation durationmust not be lower than the driving time.
Stops with PTO engaged should never outnumber total stops.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";" # The total operation duration must not be lower than the driving time.
def r1(operation_duration: float, driving_time: float) -> bool:
 if operation_duration >= driving_time:
 return True
 else:
 return False

# Stops with PTO engaged should never outnumber total stops.
def r2(pto_stops: int, total_stops: int) -> bool:
 if pto_stops <= total_stops:
 return True
 else:
 return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r3(pto_duration: float, idle_time: float, driving_time: float, operation_time: float) -> bool:
 if operation_time >= pto_duration + idle_time + driving_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: The weight on axle 1 cannot surpass the weight on axle 2.
Axle 1's load cannot exceed Axle 3's load.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";" # The weight on axle 1 cannot surpass the weight on axle 2.
def r1(w1: float, w2: float) -> bool:
 if w1 > w2:
 return False
 else:
 return True

# Axle 1's load cannot exceed Axle 3's load.
def r2(l1: float, l3: float) -> bool:
 if l1 > l3:
 return False
 else:
 return True

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r3(total_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
 if total_time >= pto_time + idle_time + driving_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
";" # If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
def r1(distance: float, fuel_consumption_rate_per_hour: float) -> bool:
 if distance >= 20 and fuel_consumption_rate_per_hour <= (5 / 10.1):
 return True
 else:
 return False

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r2(distance: float, fuel_consumption_rate_per_100_km: float) -> bool:
 if distance >= 20 and fuel_consumption_rate_per_100_km >= 40:
 return True
 else:
 return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r3(load_axle_1: float, load_axle_3: float) -> bool:
 if load_axle_1 <= load_axle_3:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: Idle time must always be less than or equal to the total operation time.
The load supported by axle 1 cannot exceed that of axle 2.
The weight on axle 1 cannot surpass the weight on axle 3.
";" # Idle time must always be less than or equal to the total operation time.
def r1(idle_time: float, total_operation_time: float) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r2(load_axle1: float, load_axle2: float) -> bool:
    if load_axle1 <= load_axle2:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r3(weight_axle1: float, weight_axle3: float) -> bool:
    if weight_axle1 <= weight_axle3:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
The payload cannot exceed the capacity of axle 3.
";" # If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance >= 20:
 if fuel_consumption / (distance / 60) < 0.0833:
 return False
 else:
 return True

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r2(distance: float, fuel_consumption: float) -> bool:
 if distance >= 20:
 if fuel_consumption / distance >= 0.04:
 return True
 else:
 return False

# The payload cannot exceed the capacity of axle 3.
def r3(payload: float, axle_3_capacity: float) -> bool:
 if payload <= axle_3_capacity:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: PTO-engaged stops cannot exceed the total number of stops.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
The payload must always be smaller than or equal to the load on axle 2.
";" # PTO-engaged stops cannot exceed the total number of stops.
def r1(pto_engaged_stops: int, total_stops: int) -> bool:
 if pto_engaged_stops <= total_stops:
 return True
 else:
 return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def r2(load_axle1: float, load_axle2: float) -> bool:
 if load_axle1 <= load_axle2:
 return True
 else:
 return False

# The payload must always be smaller than or equal to the load on axle 2.
def r3(payload: float, load_axle2: float) -> bool:
 if payload <= load_axle2:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
Stops with PTO engaged cannot outnumber the total stops.
Axle 2's load must always be equal to or greater than the payload.
";" # The vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r1(hourly_consumption: float, distance: float) -> bool:
 if distance >= 20 and hourly_consumption < 5:
 return False
 else:
 return True

# Stops with PTO engaged cannot outnumber the total stops.
def r2(num_stops_pto_engaged: int, total_stops: int) -> bool:
 if num_stops_pto_engaged <= total_stops:
 return True
 else:
 return False

# Axle 2's load must always be equal to or greater than the payload.
def r3(axle_2_load: float, payload: float) -> bool:
 if axle_2_load >= payload:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
Total operation time shouldn’t be lower than idle time.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";" # If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
def r1(distance: float, fuel_consumption_rate: float) -> bool:
 if distance >= 20:
 if fuel_consumption_rate / (distance / 1000) <= 0.05:
 return True
 else:
 return False

# Total operation time shouldn’t be lower than idle time.
def r2(operation_time: float, idle_time: float) -> bool:
 if operation_time >= idle_time:
 return True
 else:
 return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r3(operation_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
 if operation_time >= (pto_time + idle_time + driving_time):
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
Stops with PTO engaged should never outnumber total stops.
The load on axle 1 must not surpass the load on axle 2.
";" # The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance >= 20:
 if fuel_consumption / distance <= 0.4:
 return True
 else:
 return False

# Stops with PTO engaged should never outnumber total stops.
def r2(stops_with_pto: int, total_stops: int) -> bool:
 if stops_with_pto <= total_stops:
 return True
 else:
 return False

# The load on axle 1 must not surpass the load on axle 2.
def r3(load_axle1: float, load_axle2: float) -> bool:
 if load_axle1 <= load_axle2:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
The total operation durationmust not be lower than the driving time.
The weight on axle 1 cannot surpass the weight on axle 2.
";" # When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance >= 20 and fuel_consumption <= (40 * 0.01):
 return False
 else:
 return True

# The total operation duration must not be lower than the driving time.
def r2(total_duration: float, driving_time: float) -> bool:
 if total_duration >= driving_time:
 return True
 else:
 return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r3(weight_axle1: float, weight_axle2: float) -> bool:
 if weight_axle1 <= weight_axle2:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
Idle time cannot be greater than the total operation time.
The payload must always be smaller than or equal to the load on axle 3.
";" # When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance >= 20 and fuel_consumption <= (40 * 0.01):
 return True
 else:
 return False

# Idle time cannot be greater than the total operation time.
def r2(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# The payload must always be smaller than or equal to the load on axle 3.
def r3(payload: float, load_on_axle_3: float) -> bool:
 if payload <= load_on_axle_3:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: PTO operation time should be less than or equal to the total operation time.
The number of stops where PTO is engaged must not exceed the overall stop count.
Axle 1's load cannot exceed Axle 2's load.
";" # PTO operation time should be less than or equal to the total operation time.
def r1(pto_operation_time: float, total_operation_time: float) -> bool:
 if pto_operation_time <= total_operation_time:
 return True
 else:
 return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r2(pto_stop_count: int, overall_stop_count: int) -> bool:
 if pto_stop_count <= overall_stop_count:
 return True
 else:
 return False

# Axle 1's load cannot exceed Axle 2's load.
def r3(axle1_load: float, axle2_load: float) -> bool:
 if axle1_load <= axle2_load:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
Idle time cannot be greater than the total operation time.
PTO-engaged stops cannot exceed the total number of stops.
";" # If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
def r1(distance: float, fuel_consumption_rate: float) -> bool:
 if distance / 60 >= 20 and fuel_consumption_rate <= 0.0833: # 5 dm³/h to km/h
 return True
 else:
 return False

# Idle time cannot be greater than the total operation time.
def r2(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# PTO-engaged stops cannot exceed the total number of stops.
def r3(pto_engaged_stops: int, total_stops: int) -> bool:
 if pto_engaged_stops <= total_stops:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: The total operation duration must not be lower than the PTO operation time.
Idle time should be less than or equal to the total operation time.
The total stop count must not be lower than the count of stops where PTO is engaged.
";" # The total operation duration must not be lower than the PTO operation time.
def r1(total_duration: float, pto_operation_time: float) -> bool:
 if total_duration >= pto_operation_time:
 return True
 else:
 return False

# Idle time should be less than or equal to the total operation time.
def r2(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r3(total_stop_count: int, pto_engaged_count: int) -> bool:
 if total_stop_count >= pto_engaged_count:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: Idle time cannot be greater than the total operation time.
PTO-engaged stops cannot exceed the total number of stops.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";" # Idle time cannot be greater than the total operation time.
def r1(idle_time: float, total_operation_time: float) -> bool:
 if idle_time / total_operation_time <= 1:
 return True
 else:
 return False

# PTO-engaged stops cannot exceed the total number of stops.
def r2(pto_engaged_stops: int, total_stops: int) -> bool:
 if pto_engaged_stops <= total_stops:
 return True
 else:
 return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r3(pto_operation_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if pto_operation_time + idle_time + driving_time <= total_operation_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: The total operation duration must not be lower than the PTO operation time.
The total operation duration must not be lower than the idle time.
Driving time should be less than or equal to the total operation time.
";" # The total operation duration must not be lower than the PTO operation time.
def r1(total_duration: float, pto_operation_time: float) -> bool:
 if total_duration >= pto_operation_time:
 return True
 else:
 return False

# The total operation duration must not be lower than the idle time.
def r2(total_duration: float, idle_time: float) -> bool:
 if total_duration >= idle_time:
 return True
 else:
 return False

# Driving time should be less than or equal to the total operation time.
def r3(driving_time: float, total_duration: float) -> bool:
 if driving_time <= total_duration:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
The weight on axle 1 cannot surpass the weight on axle 3.
Total operation time should be at least the sum of PTO, idle, and driving times.
";" # If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance >= 20:
 return fuel_consumption >= 0.005
 else:
 return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r2(weight_axle_1: float, weight_axle_3: float) -> bool:
 return weight_axle_1 <= weight_axle_3

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r3(pto: float, idle: float, driving: float, total_operation_time: float) -> bool:
 return total_operation_time >= pto + idle + driving"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: Idle time must always be less than or equal to the total operation time.
The load supported by axle 1 cannot exceed that of axle 3.
Payload must remain below or equal to the load carried by axle 3.
";" # Idle time must always be less than or equal to the total operation time.
def r1(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# The load supported by axle 1 cannot exceed that of axle 3.
def r2(load_axle_1: float, load_axle_3: float) -> bool:
 if load_axle_1 <= load_axle_3:
 return True
 else:
 return False

# Payload must remain below or equal to the load carried by axle 3.
def r3(payload: float, load_axle_3: float) -> bool:
 if payload <= load_axle_3:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
Total operation time shouldn’t be lower than PTO operation time.
The weight on axle 1 cannot surpass the weight on axle 2.
";" # The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance >= 20:
 if fuel_consumption / distance <= 0.4:
 return False
 else:
 return True

# Total operation time shouldn’t be lower than PTO operation time.
def r2(total_operation_time: float, pto_operation_time: float) -> bool:
 if total_operation_time >= pto_operation_time:
 return True
 else:
 return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r3(weight_axle1: float, weight_axle2: float) -> bool:
 if weight_axle1 <= weight_axle2:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
The payload must always be smaller than or equal to the load on axle 2.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";" # If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r1(vehicle_distance: float, fuel_consumption: float) -> bool:
 if fuel_consumption * 100 / vehicle_distance <= 40:
 return False
 else:
 return True

# The payload must always be smaller than or equal to the load on axle 2.
def r2(payload: float, load_axle_2: float) -> bool:
 if payload <= load_axle_2:
 return True
 else:
 return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r3(total_operation_duration: float, pto_duration: float, idle_duration: float, driving_duration: float) -> bool:
 if total_operation_duration >= pto_duration + idle_duration + driving_duration:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
PTO operation time must be less than or equal to the total operation time.
The payload must not exceed the load carried by axle 3.
";" # The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance >= 20:
 if fuel_consumption / distance <= 0.4:
 return True
 else:
 return False

# PTO operation time must be less than or equal to the total operation time.
def r2(pto_time: float, total_time: float) -> bool:
 if pto_time <= total_time:
 return True
 else:
 return False

# The payload must not exceed the load carried by axle 3.
def r3(payload: float, axle_3_load: float) -> bool:
 if payload <= axle_3_load:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
PTO operation time cannot be greater than the total operation time.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";" # The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r1(total_distance: float, avg_fuel_consumption: float) -> bool:
 if total_distance >= 20 and avg_fuel_consumption <= 0.04:
 return True
 else:
 return False

# PTO operation time cannot be greater than the total operation time.
def r2(pto_time: float, total_operation_time: float) -> bool:
 if pto_time <= total_operation_time:
 return True
 else:
 return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r3(pto_time: float, idle_time: float, driving_time: float) -> bool:
 if total_operation_time >= (pto_time + idle_time + driving_time):
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
The load supported by axle 1 cannot exceed that of axle 2.
";" # For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(journey_length: float, fuel_consumption_per_hour: float) -> bool:
 if journey_length >= 20 and fuel_consumption_per_hour <= (5/100):
 return True
 else:
 return False

# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r2(journey_length: float, fuel_consumption_per_distance: float) -> bool:
 if journey_length >= 20 and fuel_consumption_per_distance >= 40:
 return True
 else:
 return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r3(load_axle_1: float, load_axle_2: float) -> bool:
 if load_axle_1 <= load_axle_2:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: The total operation duration must not be lower than the idle time.
Stops with PTO engaged should never outnumber total stops.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
";" # The total operation duration must not be lower than the idle time.
def r1(operation_duration: float, idle_time: float) -> bool:
 if operation_duration >= idle_time:
 return True
 else:
 return False

# Stops with PTO engaged should never outnumber total stops.
def r2(pto_stops: int, total_stops: int) -> bool:
 if pto_stops <= total_stops:
 return True
 else:
 return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def r3(load_axle1: float, load_axle2: float) -> bool:
 if load_axle1 <= load_axle2:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: Total operation time should shouldn’t be lower than driving time.
The number of stops where PTO is engaged must not exceed the overall stop count.
Axle 1's load cannot exceed Axle 2's load.
";" # Total operation time should not be lower than driving time.
def r1(total_operation_time: float, driving_time: float) -> bool:
if total_operation_time >= driving_time:
return True
else:
return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r2(num_stops_pto_engaged: int, overall_stop_count: int) -> bool:
if num_stops_pto_engaged <= overall_stop_count:
return True
else:
return False

# Axle 1's load cannot exceed Axle 2's load.
def r3(axle_1_load: float, axle_2_load: float) -> bool:
if axle_1_load <= axle_2_load:
return True
else:
return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: The total operation duration must not be lower than the PTO operation time.
The load supported by axle 1 cannot exceed that of axle 2.
Axle 3's load must always be equal to or greater than the payload.
";" # The total operation duration must not be lower than the PTO operation time.
def r1(total_duration: float, pto_operation_time: float) -> bool:
 if total_duration >= pto_operation_time:
 return True
 else:
 return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r2(axle1_load: float, axle2_load: float) -> bool:
 if axle1_load <= axle2_load:
 return True
 else:
 return False

# Axle 3's load must always be equal to or greater than the payload.
def r3(axle3_load: float, payload: float) -> bool:
 if axle3_load >= payload:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
The total operation durationmust not be lower than the driving time.
Payload must remain below or equal to the load carried by axle 2.
";" # The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r1(total_fuel_consumed: float, total_distance: float) -> bool:
 if total_distance >= 20 and total_fuel_consumed / total_distance <= 0.04:
 return True
 else:
 return False

# The total operation duration must not be lower than the driving time.
def r2(total_operation_duration: float, driving_time: float) -> bool:
 if total_operation_duration >= driving_time:
 return True
 else:
 return False

# Payload must remain below or equal to the load carried by axle 2.
def r3(payload: float, load_axle_2: float) -> bool:
 if payload <= load_axle_2:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
PTO operation time should be less than or equal to the total operation time.
Axle 3's load must always be equal to or greater than the payload.
";" # If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance >= 20:
 return fuel_consumption >= 0.005
 else:
 return True

# PTO operation time should be less than or equal to the total operation time.
def r2(pto_operation_time: float, total_operation_time: float) -> bool:
 return pto_operation_time <= total_operation_time

# Axle 3's load must always be equal to or greater than the payload.
def r3(axle_3_load: float, payload: float) -> bool:
 return axle_3_load >= payload"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: Total operation time shouldn’t be lower than PTO operation time.
PTO-engaged stops cannot exceed the total number of stops.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";" # Total operation time shouldn't be lower than PTO operation time.
def r1(pto_operation_time: float, total_operation_time: float) -> bool:
 if total_operation_time < pto_operation_time:
 return False
 else:
 return True

# PTO-engaged stops cannot exceed the total number of stops.
def r2(pto_engaged_stops: int, total_stops: int) -> bool:
 if pto_engaged_stops > total_stops:
 return False
 else:
 return True

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r3(pto_operation_time: float, idle_time: float, driving_time: float) -> bool:
 if pto_operation_time + idle_time + driving_time <= total_operation_time:
 return False
 else:
 return True"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: Driving time must always be less than or equal to the total operation time.
The number of stops where PTO is engaged must not exceed the overall stop count.
The load on axle 1 must not surpass the load on axle 3.
";" # Driving time must always be less than or equal to the total operation time.
def r1(driving_time: float, total_operation_time: float) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r2(num_stops_pto_engaged: int, overall_stop_count: int) -> bool:
    if num_stops_pto_engaged <= overall_stop_count:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 3.
def r3(load_axle_1: float, load_axle_3: float) -> bool:
    if load_axle_1 <= load_axle_3:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: The total operation duration must not be lower than the idle time.
Payload must remain below or equal to the load carried by axle 2.
The payload must not exceed the load carried by axle 3.
";" # The total operation duration must not be lower than the idle time.
def r1(duration: float, idle_time: float) -> bool:
 if duration >= idle_time:
 return True
 else:
 return False

# Payload must remain below or equal to the load carried by axle 2.
def r2(payload: float, axle_2_load: float) -> bool:
 if payload <= axle_2_load:
 return True
 else:
 return False

# The payload must not exceed the load carried by axle 3.
def r3(payload: float, axle_3_load: float) -> bool:
 if payload <= axle_3_load:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: Idle time must always be less than or equal to the total operation time.
PTO-engaged stops cannot exceed the total number of stops.
The payload cannot exceed the capacity of axle 2.
";" # Idle time must always be less than or equal to the total operation time.
def r1(idle_time: float, total_operation_time: float) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# PTO-engaged stops cannot exceed the total number of stops.
def r2(pto_engaged_stops: int, total_stops: int) -> bool:
    if pto_engaged_stops <= total_stops:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 2.
def r3(payload: float, axle_2_capacity: float) -> bool:
    if payload <= axle_2_capacity:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
The load on axle 1 must not surpass the load on axle 2.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";" # The vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r1(vehicle_fuel_consumption: float, traveled_distance: float) -> bool:
 if traveled_distance >= 20 and vehicle_fuel_consumption <= 5:
 return False
 else:
 return True

# The load on axle 1 must not surpass the load on axle 2.
def r2(load_axle1: float, load_axle2: float) -> bool:
 if load_axle1 <= load_axle2:
 return True
 else:
 return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r3(total_operation_time: float, pto_operation_time: float, idle_time: float, driving_time: float) -> bool:
 if total_operation_time >= (pto_operation_time + idle_time + driving_time):
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: The number of stops where PTO is engaged must not exceed the overall stop count.
Payload must remain below or equal to the load carried by axle 2.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";" # The number of stops where PTO is engaged must not exceed the overall stop count.
def r1(pto_stops: int, overall_stops: int) -> bool:
 if pto_stops <= overall_stops:
 return True
 else:
 return False

# Payload must remain below or equal to the load carried by axle 2.
def r2(payload: float, axle_2_load: float) -> bool:
 if payload <= axle_2_load:
 return True
 else:
 return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r3(operation_time: float, pto_duration: float, idle_time: float, driving_time: float) -> bool:
 if operation_time >= (pto_duration + idle_time + driving_time):
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: PTO operation time cannot be greater than the total operation time.
Idle time should be less than or equal to the total operation time.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";" # PTO operation time cannot be greater than the total operation time.
def r1(pto_operation_time: float, total_operation_time: float) -> bool:
 if pto_operation_time / total_operation_time <= 1:
 return True
 else:
 return False

# Idle time should be less than or equal to the total operation time.
def r2(idle_time: float, total_operation_time: float) -> bool:
 if idle_time / total_operation_time <= 1:
 return True
 else:
 return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r3(pto_operation_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if (pto_operation_time / total_operation_time) + (idle_time / total_operation_time) + (driving_time / total_operation_time) <= 1:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: Axle 1's load cannot exceed Axle 2's load.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
Payload must remain below or equal to the load carried by axle 2.
";" # Axle 1's load cannot exceed Axle 2's load.
def r1(a1: float, a2: float) -> bool:
 if a1 <= a2:
 return True
 else:
 return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r2(a1: float, a3: float) -> bool:
 if a1 <= a3:
 return True
 else:
 return False

# Payload must remain below or equal to the load carried by axle 2.
def r3(payload: float, a2: float) -> bool:
 if payload <= a2:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: Total operation time shouldn’t be lower than PTO operation time.
Total operation time should shouldn’t be lower than driving time.
The total stop count must not be lower than the count of stops where PTO is engaged.
The payload must always be smaller than or equal to the load on axle 2.
";" # Total operation time shouldn’t be lower than PTO operation time.
def r1(pto_operation_time: float, total_operation_time: float) -> bool:
 if total_operation_time / pto_operation_time >= 1:
 return True
 else:
 return False

# Total operation time should shouldn’t be lower than driving time.
def r2(driving_time: float, total_operation_time: float) -> bool:
 if total_operation_time / driving_time >= 1:
 return True
 else:
 return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r3(stop_count: int, pto_engaged_stops: int) -> bool:
 if stop_count >= pto_engaged_stops:
 return True
 else:
 return False

# The payload must always be smaller than or equal to the load on axle 2.
def r4(payload: float, load_on_axle_2: float) -> bool:
 if payload <= load_on_axle_2:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
Idle time must always be less than or equal to the total operation time.
The load supported by axle 1 cannot exceed that of axle 2.
";" # The vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance >= 20 and fuel_consumption / 3.6 < 5:
 return False
 else:
 return True

# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def r2(distance: float, fuel_consumption: float) -> bool:
 if distance >= 20 and fuel_consumption / distance >= 0.04:
 return True
 else:
 return False

# Idle time must always be less than or equal to the total operation time.
def r3(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r4(load_axle1: float, load_axle2: float) -> bool:
 if load_axle1 <= load_axle2:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
PTO operation time cannot be greater than the total operation time.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";" # If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance / 100 >= 0.2 and fuel_consumption < 5:
 return False
 else:
 return True

# PTO operation time cannot be greater than the total operation time.
def r2(pto_time: float, total_time: float) -> bool:
 if pto_time > total_time:
 return False
 else:
 return True

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def r3(load_axle1: float, load_axle2: float) -> bool:
 if load_axle1 <= load_axle2:
 return True
 else:
 return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r4(pto_time: float, idle_time: float, driving_time: float, total_time: float) -> bool:
 if total_time >= pto_time + idle_time + driving_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: PTO operation time should be less than or equal to the total operation time.
Stops with PTO engaged cannot outnumber the total stops.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
Payload must remain below or equal to the load carried by axle 2.
";" # PTO operation time should be less than or equal to the total operation time.
def r1(pto_time: float, total_time: float) -> bool:
 if pto_time <= total_time:
 return True
 else:
 return False

# Stops with PTO engaged cannot outnumber the total stops.
def r2(pto_stops: int, total_stops: int) -> bool:
 if pto_stops <= total_stops:
 return True
 else:
 return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r3(axle1_load: float, axle3_load: float) -> bool:
 if axle1_load <= axle3_load:
 return True
 else:
 return False

# Payload must remain below or equal to the load carried by axle 2.
def r4(payload: float, axle2_load: float) -> bool:
 if payload <= axle2_load:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: The total operation duration must not be lower than the PTO operation time.
Total operation time shouldn’t be lower than idle time.
Axle 1's load cannot exceed Axle 3's load.
The payload must always be smaller than or equal to the load on axle 2.
";" # The total operation duration must not be lower than the PTO operation time.
def r1(total_duration: float, pto_operation_time: float) -> bool:
 if total_duration >= pto_operation_time:
 return True
 else:
 return False

# Total operation time shouldn’t be lower than idle time.
def r2(total_duration: float, idle_time: float) -> bool:
 if total_duration >= idle_time:
 return True
 else:
 return False

# Axle 1's load cannot exceed Axle 3's load.
def r3(axle_1_load: float, axle_3_load: float) -> bool:
 if axle_1_load <= axle_3_load:
 return True
 else:
 return False

# The payload must always be smaller than or equal to the load on axle 2.
def r4(payload: float, axle_2_load: float) -> bool:
 if payload <= axle_2_load:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
The payload cannot exceed the capacity of axle 3.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";" # The vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r1(distance: float, consumption: float) -> bool:
 if distance >= 20 and consumption / (distance / 60) < 0.0833:
 return False
 else:
 return True

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r2(distance: float, consumption: float) -> bool:
 if distance >= 20 and consumption / distance >= 0.04:
 return True
 else:
 return False

# The payload cannot exceed the capacity of axle 3.
def r3(payload: float, capacity: float) -> bool:
 if payload <= capacity:
 return True
 else:
 return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r4(pto_time: float, idle_time: float, driving_time: float, total_time: float) -> bool:
 if total_time >= pto_time + idle_time + driving_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: Total operation time shouldn’t be lower than PTO operation time.
The total operation durationmust not be lower than the driving time.
Payload must remain below or equal to the load carried by axle 2.
Total operation time should be at least the sum of PTO, idle, and driving times.
";" # Total operation time shouldn't be lower than PTO operation time.
def r1(pto_time: float, total_time: float) -> bool:
 if total_time / pto_time >= 1:
 return True
 else:
 return False

# The total operation duration must not be lower than the driving time.
def r2(driving_time: float, total_time: float) -> bool:
 if total_time / driving_time >= 1:
 return True
 else:
 return False

# Payload must remain below or equal to the load carried by axle 2.
def r3(payload: float, axle_2_load: float) -> bool:
 if payload <= axle_2_load:
 return True
 else:
 return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r4(pto_time: float, idle_time: float, driving_time: float, total_time: float) -> bool:
 if total_time / (pto_time + idle_time + driving_time) >= 1:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: Idle time must always be less than or equal to the total operation time.
Driving time must always be less than or equal to the total operation time.
Stops with PTO engaged should never outnumber total stops.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";" # Idle time must always be less than or equal to the total operation time.
def r1(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# Driving time must always be less than or equal to the total operation time.
def r2(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False

# Stops with PTO engaged should never outnumber total stops.
def r3(pto_stops: int, total_stops: int) -> bool:
 if pto_stops <= total_stops:
 return True
 else:
 return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r4(pto_duration: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if pto_duration + idle_time + driving_time <= total_operation_time:
 return False
 else:
 return True"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: PTO-engaged stops cannot exceed the total number of stops.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
The payload must not exceed the load carried by axle 3.
Total operation time should be at least the sum of PTO, idle, and driving times.
";" # PTO-engaged stops cannot exceed the total number of stops.
def r1(pto_stops: int, total_stops: int) -> bool:
 if pto_stops <= total_stops:
 return True
 else:
 return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r2(load_axle1: float, load_axle3: float) -> bool:
 if load_axle1 <= load_axle3:
 return True
 else:
 return False

# The payload must not exceed the load carried by axle 3.
def r3(payload: float, load_axle3: float) -> bool:
 if payload <= load_axle3:
 return True
 else:
 return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r4(pto_time: float, idle_time: float, driving_time: float, total_time: float) -> bool:
 if pto_time + idle_time + driving_time <= total_time:
 return False
 else:
 return True"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
Payload must remain below or equal to the load carried by axle 2.
Payload must remain below or equal to the load carried by axle 3.
Total operation time should be at least the sum of PTO, idle, and driving times.
";" # When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance >= 20 and fuel_consumption <= 0.04:
 return False
 elif distance >= 20 and fuel_consumption >= 0.04:
 return True
 else:
 return False

# Payload must remain below or equal to the load carried by axle 2.
def r2(payload: float, axle_2_load: float) -> bool:
 if payload <= axle_2_load:
 return True
 else:
 return False

# Payload must remain below or equal to the load carried by axle 3.
def r3(payload: float, axle_3_load: float) -> bool:
 if payload <= axle_3_load:
 return True
 else:
 return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r4(pto_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if total_operation_time >= pto_time + idle_time + driving_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
Axle 1's load cannot exceed Axle 2's load.
Payload must remain below or equal to the load carried by axle 3.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";" # When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(km: float, fuel_consumption: float) -> bool:
 if km >= 20 and fuel_consumption <= 5:
 return True
 else:
 return False

# Axle 1's load cannot exceed Axle 2's load.
def r2(axle1_load: float, axle2_load: float) -> bool:
 if axle1_load <= axle2_load:
 return True
 else:
 return False

# Payload must remain below or equal to the load carried by axle 3.
def r3(payload: float, axle3_load: float) -> bool:
 if payload <= axle3_load:
 return True
 else:
 return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r4(total_duration: float, pto_duration: float, idle_duration: float, driving_duration: float) -> bool:
 if total_duration >= (pto_duration + idle_duration + driving_duration):
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: The total operation duration must not be lower than the idle time.
Total operation time should shouldn’t be lower than driving time.
Stops with PTO engaged cannot outnumber the total stops.
Axle 2's load must always be equal to or greater than the payload.
";" # The total operation duration must not be lower than the idle time.
def r1(operation_duration: float, idle_time: float) -> bool:
 if operation_duration >= idle_time:
 return True
 else:
 return False

# Total operation time should not be lower than driving time.
def r2(operation_time: float, driving_time: float) -> bool:
 if operation_time >= driving_time:
 return True
 else:
 return False

# Stops with PTO engaged cannot outnumber the total stops.
def r3(num_stops_pto_engaged: int, total_stops: int) -> bool:
 if num_stops_pto_engaged <= total_stops:
 return True
 else:
 return False

# Axle 2's load must always be equal to or greater than the payload.
def r4(axle_2_load: float, payload: float) -> bool:
 if axle_2_load >= payload:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
Driving time should be less than or equal to the total operation time.
Stops with PTO engaged cannot outnumber the total stops.
The payload must always be smaller than or equal to the load on axle 3.
";" # For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance >= 20 and fuel_consumption / distance <= 0.4:
 return True
 else:
 return False

# Driving time should be less than or equal to the total operation time.
def r2(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False

# Stops with PTO engaged cannot outnumber the total stops.
def r3(num_stops_pto_engaged: int, total_num_stops: int) -> bool:
 if num_stops_pto_engaged <= total_num_stops:
 return True
 else:
 return False

# The payload must always be smaller than or equal to the load on axle 3.
def r4(payload: float, load_axle_3: float) -> bool:
 if payload <= load_axle_3:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: Idle time cannot be greater than the total operation time.
The total stop count must not be lower than the count of stops where PTO is engaged.
Payload must remain below or equal to the load carried by axle 3.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";" # Idle time cannot be greater than the total operation time.
def r1(idle_time: float, total_operation_time: float) -> bool:
 if idle_time / total_operation_time <= 1:
 return True
 else:
 return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r2(total_stop_count: int, pto_engaged_count: int) -> bool:
 if total_stop_count >= pto_engaged_count:
 return True
 else:
 return False

# Payload must remain below or equal to the load carried by axle 3.
def r3(payload: float, load_axle_3: float) -> bool:
 if payload <= load_axle_3:
 return True
 else:
 return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r4(total_operation_duration: float, pto_duration: float, idle_duration: float, driving_duration: float) -> bool:
 if total_operation_duration >= (pto_duration + idle_duration + driving_duration):
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: PTO operation time cannot be greater than the total operation time.
Axle 2's load must always be equal to or greater than the payload.
The payload must not exceed the load carried by axle 3.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";" # PTO operation time cannot be greater than the total operation time.
def r1(pto_operation_time: float, total_operation_time: float) -> bool:
 if pto_operation_time / total_operation_time <= 1:
 return True
 else:
 return False

# Axle 2's load must always be equal to or greater than the payload.
def r2(axle_2_load: float, payload: float) -> bool:
 if axle_2_load >= payload:
 return True
 else:
 return False

# The payload must not exceed the load carried by axle 3.
def r3(payload: float, axle_3_load: float) -> bool:
 if payload <= axle_3_load:
 return True
 else:
 return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r4(pto_operation_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if total_operation_time >= (pto_operation_time + idle_time + driving_time):
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
Total operation time shouldn’t be lower than idle time.
The total operation durationmust not be lower than the driving time.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";" # When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(km: float, fuel_consumption: float) -> bool:
 if km >= 20 and fuel_consumption <= 5:
 return True
 else:
 return False

# Total operation time shouldn’t be lower than idle time.
def r2(operation_time: float, idle_time: float) -> bool:
 if operation_time >= idle_time:
 return True
 else:
 return False

# The total operation duration must not be lower than the driving time.
def r3(operation_time: float, driving_time: float) -> bool:
 if operation_time >= driving_time:
 return True
 else:
 return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r4(operation_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
 if operation_time >= pto_time + idle_time + driving_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
The total stop count must not be lower than the count of stops where PTO is engaged.
The load on axle 1 must not surpass the load on axle 2.
";" # The vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r1(km: int, fuel_consumption: float) -> bool:
 if km >= 20 and fuel_consumption / km <= 0.25:
 return False
 else:
 return True

# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r2(km: int, fuel_consumption: float) -> bool:
 if km < 20:
 return False
 if fuel_consumption / km > 0.4:
 return False
 else:
 return True

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r3(stop_count: int, pto_stop_count: int) -> bool:
 if stop_count < pto_stop_count:
 return False
 else:
 return True

# The load on axle 1 must not surpass the load on axle 2.
def r4(load_axle1: float, load_axle2: float) -> bool:
 if load_axle1 > load_axle2:
 return False
 else:
 return True"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
The total operation duration must not be lower than the PTO operation time.
Stops with PTO engaged cannot outnumber the total stops.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
";" # The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r1(total_distance: float, average_fuel_consumption: float) -> bool:
 if total_distance >= 20 and average_fuel_consumption * 100 >= 40:
 return True
 else:
 return False

# The total operation duration must not be lower than the PTO operation time.
def r2(total_operation_duration: float, pto_operation_time: float) -> bool:
 if total_operation_duration >= pto_operation_time:
 return True
 else:
 return False

# Stops with PTO engaged cannot outnumber the total stops.
def r3(num_stops_pto_engaged: int, total_num_stops: int) -> bool:
 if num_stops_pto_engaged <= total_num_stops:
 return True
 else:
 return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r4(load_axle_1: float, load_axle_3: float) -> bool:
 if load_axle_1 <= load_axle_3:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: Total operation time shouldn’t be lower than PTO operation time.
Idle time cannot be greater than the total operation time.
Stops with PTO engaged cannot outnumber the total stops.
The load on axle 1 must not surpass the load on axle 3.
";" # Total operation time shouldn't be lower than PTO operation time.
def r1(pto_operation_time: float, total_operation_time: float) -> bool:
 if total_operation_time >= pto_operation_time:
 return True
 else:
 return False

# Idle time cannot be greater than the total operation time.
def r2(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# Stops with PTO engaged cannot outnumber the total stops.
def r3(pto_engaged_stops: int, total_stops: int) -> bool:
 if pto_engaged_stops <= total_stops:
 return True
 else:
 return False

# The load on axle 1 must not surpass the load on axle 3.
def r4(load_axle_1: float, load_axle_3: float) -> bool:
 if load_axle_1 <= load_axle_3:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
Stops with PTO engaged should never outnumber total stops.
The weight on axle 1 cannot surpass the weight on axle 2.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";" # If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance / 100 >= 2 and fuel_consumption / distance <= 0.05:
 return True
 else:
 return False

# Stops with PTO engaged should never outnumber total stops.
def r2(pto_stops: int, total_stops: int) -> bool:
 if pto_stops <= total_stops:
 return True
 else:
 return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r3(weight_axle1: float, weight_axle2: float) -> bool:
 if weight_axle1 <= weight_axle2:
 return True
 else:
 return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r4(pto_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if pto_time + idle_time + driving_time <= total_operation_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: PTO operation time cannot be greater than the total operation time.
PTO-engaged stops cannot exceed the total number of stops.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
The payload must always be smaller than or equal to the load on axle 3.
";" # PTO operation time cannot be greater than the total operation time.
def r1(pto_operation_time: float, total_operation_time: float) -> bool:
 if pto_operation_time <= total_operation_time:
 return True
 else:
 return False

# PTO-engaged stops cannot exceed the total number of stops.
def r2(pto_engaged_stops: int, total_stops: int) -> bool:
 if pto_engaged_stops <= total_stops:
 return True
 else:
 return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r3(load_axle_1: float, load_axle_3: float) -> bool:
 if load_axle_1 <= load_axle_3:
 return True
 else:
 return False

# The payload must always be smaller than or equal to the load on axle 3.
def r4(payload: float, load_axle_3: float) -> bool:
 if payload <= load_axle_3:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
Total operation time shouldn’t be lower than PTO operation time.
The load supported by axle 1 cannot exceed that of axle 3.
The payload cannot exceed the capacity of axle 2.
";" # The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r1(total_distance: float, average_fuel_consumption: float) -> bool:
 if total_distance >= 20 and average_fuel_consumption * 100 >= 40:
 return True
 else:
 return False

# Total operation time shouldn’t be lower than PTO operation time.
def r2(total_operation_time: float, pto_operation_time: float) -> bool:
 if total_operation_time >= pto_operation_time:
 return True
 else:
 return False

# The load supported by axle 1 cannot exceed that of axle 3.
def r3(load_axle_1: float, load_axle_3: float) -> bool:
 if load_axle_1 <= load_axle_3:
 return True
 else:
 return False

# The payload cannot exceed the capacity of axle 2.
def r4(payload: float, capacity_axle_2: float) -> bool:
 if payload <= capacity_axle_2:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
Idle time must always be less than or equal to the total operation time.
The payload must always be smaller than or equal to the load on axle 2.
";" # If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
def r1(distance: float, fuel_consumption_rate: float) -> bool:
 if distance >= 20 and fuel_consumption_rate <= (40 / 100 * 5):
 return True
 else:
 return False

# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r2(distance: float, fuel_consumption_per_100km: float) -> bool:
 if distance >= 20 and fuel_consumption_per_100km >= 40:
 return True
 else:
 return False

# Idle time must always be less than or equal to the total operation time.
def r3(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# The payload must always be smaller than or equal to the load on axle 2.
def r4(payload: float, load_on_axle2: float) -> bool:
 if payload <= load_on_axle2:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: PTO operation time should be less than or equal to the total operation time.
The total operation durationmust not be lower than the driving time.
The load on axle 1 must not surpass the load on axle 3.
The payload must not exceed the load carried by axle 3.
";" # PTO operation time should be less than or equal to the total operation time.
def r1(pto_time: float, total_time: float) -> bool:
 if pto_time <= total_time:
 return True
 else:
 return False

# The total operation duration must not be lower than the driving time.
def r2(total_time: float, driving_time: float) -> bool:
 if total_time >= driving_time:
 return True
 else:
 return False

# The load on axle 1 must not surpass the load on axle 3.
def r3(axle_1_load: float, axle_3_load: float) -> bool:
 if axle_1_load <= axle_3_load:
 return True
 else:
 return False

# The payload must not exceed the load carried by axle 3.
def r4(payload: float, axle_3_load: float) -> bool:
 if payload + axle_3_load >= axle_3_load:
 return False
 else:
 return True"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
The total stop count must not be lower than the count of stops where PTO is engaged.
Payload must remain below or equal to the load carried by axle 2.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";" # For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(journey_length: float, fuel_consumption_per_hour: float) -> bool:
 if journey_length >= 20 and fuel_consumption_per_hour <= 0.16666667: # 5 dm³/h = 5000 cm³/h = 5000 / 1000000 = 0.05 dm³/h = 0.05 / 60 = 0.16666667 dm³/h
 return True
 else:
 return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r2(stop_count: int, pto_engaged_count: int) -> bool:
 if stop_count >= pto_engaged_count:
 return True
 else:
 return False

# Payload must remain below or equal to the load carried by axle 2.
def r3(payload: float, axle_2_load: float) -> bool:
 if payload <= axle_2_load:
 return True
 else:
 return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r4(pto_time: float, idle_time: float, driving_time: float, operation_duration: float) -> bool:
 if pto_time + idle_time + driving_time <= operation_duration:
 return False
 else:
 return True"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
PTO operation time should be less than or equal to the total operation time.
Axle 1's load cannot exceed Axle 3's load.
The payload must not exceed the load carried by axle 3.
";" # The vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r1(hourly_fuel_consumption: float, distance: float) -> bool:
 if distance >= 20 and hourly_fuel_consumption <= 0.2:
 return False
 else:
 return True

# PTO operation time should be less than or equal to the total operation time.
def r2(pto_operation_time: float, total_operation_time: float) -> bool:
 if pto_operation_time <= total_operation_time:
 return True
 else:
 return False

# Axle 1's load cannot exceed Axle 3's load.
def r3(axle_1_load: float, axle_3_load: float) -> bool:
 if axle_1_load <= axle_3_load:
 return True
 else:
 return False

# The payload must not exceed the load carried by axle 3.
def r4(payload: float, axle_3_load: float) -> bool:
 if payload <= axle_3_load:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
The weight on axle 1 cannot surpass the weight on axle 3.
The payload must always be smaller than or equal to the load on axle 3.
";" # The vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r1(vehicle_fuel_consumption: float, distance: float) -> bool:
 if distance >= 20 and vehicle_fuel_consumption / distance <= 0.25:
 return False
 else:
 return True

# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r2(vehicle_fuel_consumption: float, distance: float) -> bool:
 if distance >= 20 and vehicle_fuel_consumption / distance < 0.4:
 return False
 else:
 return True

# The weight on axle 1 cannot surpass the weight on axle 3.
def r3(axle_1_weight: float, axle_3_weight: float) -> bool:
 if axle_1_weight <= axle_3_weight:
 return True
 else:
 return False

# The payload must always be smaller than or equal to the load on axle 3.
def r4(payload: float, axle_3_load: float) -> bool:
 if payload <= axle_3_load:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: The total operation duration must not be lower than the idle time.
Driving time should be less than or equal to the total operation time.
The load on axle 1 must not surpass the load on axle 2.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";" # The total operation duration must not be lower than the idle time.
def r1(operation_duration: float, idle_time: float) -> bool:
 if operation_duration >= idle_time:
 return True
 else:
 return False

# Driving time should be less than or equal to the total operation time.
def r2(driving_time: float, operation_time: float) -> bool:
 if driving_time <= operation_time:
 return True
 else:
 return False

# The load on axle 1 must not surpass the load on axle 2.
def r3(load_axle1: float, load_axle2: float) -> bool:
 if load_axle1 <= load_axle2:
 return True
 else:
 return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r4(pto_time: float, idle_time: float, driving_time: float, operation_duration: float) -> bool:
 if pto_time + idle_time + driving_time <= operation_duration:
 return False
 else:
 return True"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
PTO operation time should be less than or equal to the total operation time.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
The payload must always be smaller than or equal to the load on axle 2.
";" # If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
def r1(distance: float, fuel_consumption_rate: float) -> bool:
 if distance / 60 >= 20 and fuel_consumption_rate <= 0.05:
 return True
 else:
 return False

# PTO operation time should be less than or equal to the total operation time.
def r2(pto_operation_time: float, total_operation_time: float) -> bool:
 if pto_operation_time <= total_operation_time:
 return True
 else:
 return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def r3(load_axle_1: float, load_axle_2: float) -> bool:
 if load_axle_1 <= load_axle_2:
 return True
 else:
 return False

# The payload must always be smaller than or equal to the load on axle 2.
def r4(payload: float, load_axle_2: float) -> bool:
 if payload <= load_axle_2:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: PTO operation time must be less than or equal to the total operation time.
Total operation time shouldn’t be lower than idle time.
The number of stops where PTO is engaged must not exceed the overall stop count.
Axle 1's load cannot exceed Axle 2's load.
";" # PTO operation time must be less than or equal to the total operation time.
def r1(pto_operation_time: float, total_operation_time: float) -> bool:
 if pto_operation_time <= total_operation_time:
 return True
 else:
 return False

# Total operation time shouldn’t be lower than idle time.
def r2(total_operation_time: float, idle_time: float) -> bool:
 if total_operation_time >= idle_time:
 return True
 else:
 return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r3(stop_count_pto_engaged: int, overall_stop_count: int) -> bool:
 if stop_count_pto_engaged <= overall_stop_count:
 return True
 else:
 return False

# Axle 1's load cannot exceed Axle 2's load.
def r4(axle_1_load: float, axle_2_load: float) -> bool:
 if axle_1_load <= axle_2_load:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
Driving time cannot be greater than the total operation time.
The load supported by axle 1 cannot exceed that of axle 2.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";" # When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(km: float, fuel_consumption: float) -> bool:
 if km >= 20 and fuel_consumption <= 5:
 return True
 else:
 return False

# Driving time cannot be greater than the total operation time.
def r2(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r3(axle1_load: float, axle2_load: float) -> bool:
 if axle1_load <= axle2_load:
 return True
 else:
 return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r4(pto_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if pto_time + idle_time + driving_time <= total_operation_time:
 return False
 else:
 return True"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
The total operation duration must not be lower than the PTO operation time.
Driving time must always be less than or equal to the total operation time.
The payload must not exceed the load carried by axle 2.
";" # When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance >= 20 and fuel_consumption <= (40 * 0.01):
 return False
 else:
 return True

# The total operation duration must not be lower than the PTO operation time.
def r2(total_duration: float, pto_duration: float) -> bool:
 if total_duration >= pto_duration:
 return True
 else:
 return False

# Driving time must always be less than or equal to the total operation time.
def r3(driving_time: float, total_duration: float) -> bool:
 if driving_time <= total_duration:
 return True
 else:
 return False

# The payload must not exceed the load carried by axle 2.
def r4(payload: float, axle_2_load: float) -> bool:
 if payload <= axle_2_load:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
Stops with PTO engaged should never outnumber total stops.
The payload cannot exceed the capacity of axle 2.
Axle 3's load must always be equal to or greater than the payload.
";" # If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance / 20 >= 1 and fuel_consumption / 5 <= 1:
 return True
 else:
 return False

# Stops with PTO engaged should never outnumber total stops.
def r2(num_stops_pto_engaged: int, total_num_stops: int) -> bool:
 if num_stops_pto_engaged <= total_num_stops:
 return True
 else:
 return False

# The payload cannot exceed the capacity of axle 2.
def r3(payload: float, axle_2_capacity: float) -> bool:
 if payload <= axle_2_capacity:
 return True
 else:
 return False

# Axle 3's load must always be equal to or greater than the payload.
def r4(axle_3_load: float, payload: float) -> bool:
 if axle_3_load >= payload:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
PTO operation time should be less than or equal to the total operation time.
The payload must not exceed the load carried by axle 2.
Total operation time should be at least the sum of PTO, idle, and driving times.
";" # The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance >= 20:
 if fuel_consumption / distance <= 0.4:
 return True
 else:
 return False

# PTO operation time should be less than or equal to the total operation time.
def r2(pto_time: float, total_operation_time: float) -> bool:
 if pto_time <= total_operation_time:
 return True
 else:
 return False

# The payload must not exceed the load carried by axle 2.
def r3(payload: float, axle_2_load: float) -> bool:
 if payload <= axle_2_load:
 return True
 else:
 return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r4(pto_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if total_operation_time >= (pto_time + idle_time + driving_time):
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: The weight on axle 1 cannot surpass the weight on axle 2.
The load supported by axle 1 cannot exceed that of axle 3.
Payload must remain below or equal to the load carried by axle 2.
The payload cannot exceed the capacity of axle 3.
";" # The weight on axle 1 cannot surpass the weight on axle 2.
def r1(w1: float, w2: float) -> bool:
 if w1 <= w2:
 return True
 else:
 return False

# The load supported by axle 1 cannot exceed that of axle 3.
def r2(l1: float, l3: float) -> bool:
 if l1 <= l3:
 return True
 else:
 return False

# Payload must remain below or equal to the load carried by axle 2.
def r3(p: float, l2: float) -> bool:
 if p <= l2:
 return True
 else:
 return False

# The payload cannot exceed the capacity of axle 3.
def r4(p: float, c: float) -> bool:
 if p <= c:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
The total operation duration must not be lower than the PTO operation time.
Axle 2's load must always be equal to or greater than the payload.
";" # When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(km: float, fuel_consumption: float) -> bool:
 if km >= 20 and fuel_consumption / km <= 0.25:
 return True
 else:
 return False

# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r2(km: float, fuel_consumption_per_100km: float) -> bool:
 if km >= 20 and fuel_consumption_per_100km >= 40:
 return True
 else:
 return False

# The total operation duration must not be lower than the PTO operation time.
def r3(operation_duration: float, pto_operation_time: float) -> bool:
 if operation_duration >= pto_operation_time:
 return True
 else:
 return False

# Axle 2's load must always be equal to or greater than the payload.
def r4(axle_2_load: float, payload: float) -> bool:
 if axle_2_load >= payload:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
The payload must always be smaller than or equal to the load on axle 2.
Axle 3's load must always be equal to or greater than the payload.
";" # If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance / 20 >= 1 and fuel_consumption / 5 <= 1:
 return True
 else:
 return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r2(axle_1_load: float, axle_3_load: float) -> bool:
 if axle_1_load <= axle_3_load:
 return True
 else:
 return False

# The payload must always be smaller than or equal to the load on axle 2.
def r3(payload: float, axle_2_load: float) -> bool:
 if payload <= axle_2_load:
 return True
 else:
 return False

# Axle 3's load must always be equal to or greater than the payload.
def r4(axle_3_load: float, payload: float) -> bool:
 if axle_3_load >= payload:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
Stops with PTO engaged should never outnumber total stops.
The weight on axle 1 cannot surpass the weight on axle 2.
Axle 1's load cannot exceed Axle 3's load.
";" # The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance >= 20 and fuel_consumption <= 0.4:
 return True
 else:
 return False

# Stops with PTO engaged should never outnumber total stops.
def r2(pto_stops: int, total_stops: int) -> bool:
 if pto_stops <= total_stops:
 return True
 else:
 return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r3(axle1_weight: float, axle2_weight: float) -> bool:
 if axle1_weight <= axle2_weight:
 return True
 else:
 return False

# Axle 1's load cannot exceed Axle 3's load.
def r4(axle1_load: float, axle3_load: float) -> bool:
 if axle1_load <= axle3_load:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
Idle time cannot be greater than the total operation time.
The number of stops where PTO is engaged must not exceed the overall stop count.
Axle 1's load cannot exceed Axle 3's load.
";" # The vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r1(hourly_consumption: float, distance: float) -> bool:
 if distance >= 20 and hourly_consumption < 5:
 return False
 else:
 return True

# Idle time cannot be greater than the total operation time.
def r2(idle_time: float, total_operation_time: float) -> bool:
 if idle_time > total_operation_time:
 return False
 else:
 return True

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r3(num_stops_pto_engaged: int, overall_stop_count: int) -> bool:
 if num_stops_pto_engaged > overall_stop_count:
 return False
 else:
 return True

# Axle 1's load cannot exceed Axle 3's load.
def r4(axle_1_load: float, axle_3_load: float) -> bool:
 if axle_1_load > axle_3_load:
 return False
 else:
 return True"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
The total operation duration must not be lower than the idle time.
The load supported by axle 1 cannot exceed that of axle 3.
Axle 3's load must always be equal to or greater than the payload.
";" # When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance / 60 >= 20 and fuel_consumption <= 0.0833:
 return True
 else:
 return False

 # The total operation duration must not be lower than the idle time.
def r2(operation_duration: float, idle_time: float) -> bool:
 if operation_duration >= idle_time:
 return True
 else:
 return False

 # Axle 1's load cannot exceed that of axle 3.
def r3(axle_1_load: float, axle_3_load: float) -> bool:
 if axle_1_load <= axle_3_load:
 return True
 else:
 return False

 # Axle 3's load must always be equal to or greater than the payload.
def r4(axle_3_load: float, payload: float) -> bool:
 if axle_3_load >= payload:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
PTO operation time cannot be greater than the total operation time.
Driving time should be less than or equal to the total operation time.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";" # If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance / 100 >= 2 and fuel_consumption / (distance / 100) < 0.05:
 return False
 else:
 return True

# PTO operation time cannot be greater than the total operation time.
def r2(pto_time: float, total_time: float) -> bool:
 if pto_time > total_time:
 return False
 else:
 return True

# Driving time should be less than or equal to the total operation time.
def r3(driving_time: float, total_time: float) -> bool:
 if driving_time > total_time:
 return False
 else:
 return True

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r4(pto_time: float, idle_time: float, driving_time: float, total_time: float) -> bool:
 if total_time < (pto_time + idle_time + driving_time):
 return False
 else:
 return True"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
The total operation duration must not be lower than the idle time.
The load on axle 1 must not surpass the load on axle 3.
Axle 2's load must always be equal to or greater than the payload.
";" # The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance >= 20:
 if fuel_consumption / distance <= 0.4:
 return False
 else:
 return True

# The total operation duration must not be lower than the idle time.
def r2(operation_duration: float, idle_time: float) -> bool:
 if operation_duration >= idle_time:
 return True
 else:
 return False

# The load on axle 1 must not surpass the load on axle 3.
def r3(axle_1_load: float, axle_3_load: float) -> bool:
 if axle_1_load <= axle_3_load:
 return True
 else:
 return False

# Axle 2's load must always be equal to or greater than the payload.
def r4(axle_2_load: float, payload: float) -> bool:
 if axle_2_load >= payload:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
The number of stops where PTO is engaged must not exceed the overall stop count.
The load supported by axle 1 cannot exceed that of axle 3.
Payload must remain below or equal to the load carried by axle 3.
";" # For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance >= 20 and fuel_consumption <= 0.16666667: # 20 km is equal to 20000 m, and 5 dm³/h is equal to 5000 m³/h, so the condition is 20000 > 20000*fuel_consumption
 return True
 else:
 return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r2(num_stops_pto: int, num_stops_total: int) -> bool:
 if num_stops_pto <= num_stops_total:
 return True
 else:
 return False

# The load supported by axle 1 cannot exceed that of axle 3.
def r3(load_axle1: float, load_axle3: float) -> bool:
 if load_axle1 <= load_axle3:
 return True
 else:
 return False

# Payload must remain below or equal to the load carried by axle 3.
def r4(payload: float, load_axle3: float) -> bool:
 if payload <= load_axle3:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: PTO operation time must be less than or equal to the total operation time.
Idle time should be less than or equal to the total operation time.
The payload must not exceed the load carried by axle 3.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";" # PTO operation time must be less than or equal to the total operation time.
def r1(pto_operation_time: float, total_operation_time: float) -> bool:
 if pto_operation_time <= total_operation_time:
 return True
 else:
 return False

# Idle time should be less than or equal to the total operation time.
def r2(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# The payload must not exceed the load carried by axle 3.
def r3(payload: float, load_axle_3: float) -> bool:
 if payload <= load_axle_3:
 return True
 else:
 return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r4(pto_operation_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if pto_operation_time + idle_time + driving_time >= total_operation_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: The load on axle 1 must not surpass the load on axle 3.
Payload must remain below or equal to the load carried by axle 2.
The payload must not exceed the load carried by axle 3.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";" # The load on axle 1 must not surpass the load on axle 3.
def r1(axle_1_load: float, axle_3_load: float) -> bool:
 if axle_1_load / axle_3_load <= 1:
 return True
 else:
 return False

# Payload must remain below or equal to the load carried by axle 2.
def r2(payload: float, axle_2_load: float) -> bool:
 if payload <= axle_2_load:
 return True
 else:
 return False

# The payload must not exceed the load carried by axle 3.
def r3(payload: float, axle_3_load: float) -> bool:
 if payload <= axle_3_load:
 return True
 else:
 return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r4(pto_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if pto_time + idle_time + driving_time <= total_operation_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
Idle time must always be less than or equal to the total operation time.
Driving time must always be less than or equal to the total operation time.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";" # The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r1(total_distance: float, average_fuel_consumption: float) -> bool:
 if total_distance >= 20 and average_fuel_consumption * 100 >= 40:
 return True
 else:
 return False

# Idle time must always be less than or equal to the total operation time.
def r2(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# Driving time must always be less than or equal to the total operation time.
def r3(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r4(pto_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if pto_time + idle_time + driving_time <= total_operation_time:
 return False
 else:
 return True"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
Driving time should be less than or equal to the total operation time.
PTO-engaged stops cannot exceed the total number of stops.
The load on axle 1 must not surpass the load on axle 2.
";" # The vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r1(hourly_fuel_consumption: float, distance: float) -> bool:
 if distance >= 20 and hourly_fuel_consumption <= 0.2:
 return False
 else:
 return True

# Driving time should be less than or equal to the total operation time.
def r2(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False

# PTO-engaged stops cannot exceed the total number of stops.
def r3(pto_engaged_stops: int, total_stops: int) -> bool:
 if pto_engaged_stops <= total_stops:
 return True
 else:
 return False

# The load on axle 1 must not surpass the load on axle 2.
def r4(load_axle_1: float, load_axle_2: float) -> bool:
 if load_axle_1 <= load_axle_2:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
The total operation duration must not be lower than the idle time.
Driving time must always be less than or equal to the total operation time.
The payload cannot exceed the capacity of axle 3.
";" # When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(km: float, fuel_consumption: float) -> bool:
 if km >= 20 and fuel_consumption <= 5:
 return True
 else:
 return False

# The total operation duration must not be lower than the idle time.
def r2(total_duration: float, idle_time: float) -> bool:
 if total_duration >= idle_time:
 return True
 else:
 return False

# Driving time must always be less than or equal to the total operation time.
def r3(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False

# The payload cannot exceed the capacity of axle 3.
def r4(payload: float, axle_3_capacity: float) -> bool:
 if payload <= axle_3_capacity:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: Stops with PTO engaged cannot outnumber the total stops.
The weight on axle 1 cannot surpass the weight on axle 3.
Axle 2's load must always be equal to or greater than the payload.
Total operation time should be at least the sum of PTO, idle, and driving times.
";" # Stops with PTO engaged cannot outnumber the total stops.
def r1(pto_engaged: int, total_stops: int) -> bool:
 if pto_engaged <= total_stops:
 return True
 else:
 return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r2(axle_1_weight: float, axle_3_weight: float) -> bool:
 if axle_1_weight <= axle_3_weight:
 return True
 else:
 return False

# Axle 2's load must always be equal to or greater than the payload.
def r3(axle_2_load: float, payload: float) -> bool:
 if axle_2_load >= payload:
 return True
 else:
 return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r4(pto_time: float, idle_time: float, driving_time: float) -> bool:
 if pto_time + idle_time + driving_time <= total_operation_time:
 return False
 else:
 return True

# total_operation_time not provided in the text, so it's not included in the code.
# You should define it before using it in r4 function."
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: PTO operation time must be less than or equal to the total operation time.
The total operation duration must not be lower than the idle time.
The weight on axle 1 cannot surpass the weight on axle 3.
The payload cannot exceed the capacity of axle 3.
";" # PTO operation time must be less than or equal to the total operation time.
def r1(pto_time: float, total_time: float) -> bool:
 if pto_time <= total_time:
 return True
 else:
 return False

# The total operation duration must not be lower than the idle time.
def r2(total_time: float, idle_time: float) -> bool:
 if total_time >= idle_time:
 return True
 else:
 return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r3(axle_1_weight: float, axle_3_weight: float) -> bool:
 if axle_1_weight <= axle_3_weight:
 return True
 else:
 return False

# The payload cannot exceed the capacity of axle 3.
def r4(payload: float, axle_3_capacity: float) -> bool:
 if payload <= axle_3_capacity:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
Idle time must always be less than or equal to the total operation time.
PTO-engaged stops cannot exceed the total number of stops.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
The payload must always be smaller than or equal to the load on axle 2.
";" # For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r1(trip_length: float, fuel_consumption: float) -> bool:
 if trip_length >= 20 and fuel_consumption / trip_length <= 0.4:
 return True
 else:
 return False

# Idle time must always be less than or equal to the total operation time.
def r2(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# PTO-engaged stops cannot exceed the total number of stops.
def r3(pto_stops: int, total_stops: int) -> bool:
 if pto_stops <= total_stops:
 return True
 else:
 return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r4(load_axle1: float, load_axle3: float) -> bool:
 if load_axle1 <= load_axle3:
 return True
 else:
 return False

# The payload must always be smaller than or equal to the load on axle 2.
def r5(payload: float, load_axle2: float) -> bool:
 if payload <= load_axle2:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
PTO operation time cannot be greater than the total operation time.
Total operation time should shouldn’t be lower than driving time.
The payload must always be smaller than or equal to the load on axle 3.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";" # The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r1(total_distance: float, average_fuel_consumption: float) -> bool:
 if total_distance >= 20 and average_fuel_consumption * 100 >= 40:
 return True
 else:
 return False

# PTO operation time cannot be greater than the total operation time.
def r2(pto_operation_time: float, total_operation_time: float) -> bool:
 if pto_operation_time <= total_operation_time:
 return True
 else:
 return False

# Total operation time should not be lower than driving time.
def r3(total_operation_time: float, driving_time: float) -> bool:
 if total_operation_time >= driving_time:
 return True
 else:
 return False

# The payload must always be smaller than or equal to the load on axle 3.
def r4(payload: float, load_on_axle_3: float) -> bool:
 if payload <= load_on_axle_3:
 return True
 else:
 return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r5(pto_operation_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if total_operation_time >= pto_operation_time + idle_time + driving_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: The total operation duration must not be lower than the PTO operation time.
Total operation time shouldn’t be lower than idle time.
Stops with PTO engaged should never outnumber total stops.
Axle 1's load cannot exceed Axle 2's load.
The payload cannot exceed the capacity of axle 2.
";" # The total operation duration must not be lower than the PTO operation time.
def r1(total_operation_time: float, pto_operation_time: float) -> bool:
 if total_operation_time >= pto_operation_time:
 return True
 else:
 return False

# Total operation time shouldn’t be lower than idle time.
def r2(total_operation_time: float, idle_time: float) -> bool:
 if total_operation_time >= idle_time:
 return True
 else:
 return False

# Stops with PTO engaged should never outnumber total stops.
def r3(pto_stops: int, total_stops: int) -> bool:
 if pto_stops <= total_stops:
 return True
 else:
 return False

# Axle 1's load cannot exceed Axle 2's load.
def r4(axle_1_load: float, axle_2_load: float) -> bool:
 if axle_1_load <= axle_2_load:
 return True
 else:
 return False

# The payload cannot exceed the capacity of axle 2.
def r5(payload: float, axle_2_capacity: float) -> bool:
 if payload <= axle_2_capacity:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
The load on axle 1 must not surpass the load on axle 2.
Axle 1's load cannot exceed Axle 3's load.
The payload must not exceed the load carried by axle 2.
The payload must not exceed the load carried by axle 3.
";" # The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance >= 20 and fuel_consumption * 100 / distance <= 4:
 return True
 else:
 return False

# The load on axle 1 must not surpass the load on axle 2.
def r2(axle1_load: float, axle2_load: float) -> bool:
 if axle1_load <= axle2_load:
 return True
 else:
 return False

# Axle 1's load cannot exceed Axle 3's load.
def r3(axle1_load: float, axle3_load: float) -> bool:
 if axle1_load <= axle3_load:
 return True
 else:
 return False

# The payload must not exceed the load carried by axle 2.
def r4(payload: float, axle2_load: float) -> bool:
 if payload + axle2_load >= axle2_load:
 return False
 else:
 return True

# The payload must not exceed the load carried by axle 3.
def r5(payload: float, axle3_load: float) -> bool:
 if payload + axle3_load >= axle3_load:
 return False
 else:
 return True"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
The load supported by axle 1 cannot exceed that of axle 2.
Payload must remain below or equal to the load carried by axle 2.
The payload must always be smaller than or equal to the load on axle 3.
Total operation time should be at least the sum of PTO, idle, and driving times.
";" # When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(km: float, fuel_consumption: float) -> bool:
 if km >= 20 and fuel_consumption <= 0.2:
 return True
 else:
 return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r2(axle1_load: float, axle2_load: float) -> bool:
 if axle1_load <= axle2_load:
 return True
 else:
 return False

# Payload must remain below or equal to the load carried by axle 2.
def r3(payload: float, axle2_load: float) -> bool:
 if payload <= axle2_load:
 return True
 else:
 return False

# The payload must always be smaller than or equal to the load on axle 3.
def r4(payload: float, axle3_load: float) -> bool:
 if payload <= axle3_load:
 return True
 else:
 return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r5(total_operation_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
 if total_operation_time >= (pto_time + idle_time + driving_time):
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
The total stop count must not be lower than the count of stops where PTO is engaged.
The weight on axle 1 cannot surpass the weight on axle 2.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
The payload must always be smaller than or equal to the load on axle 3.
";" # The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance >= 20 and fuel_consumption <= 0.4:
 return True
 else:
 return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r2(total_stops: int, pto_stops: int) -> bool:
 if total_stops >= pto_stops:
 return True
 else:
 return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r3(weight_axle1: float, weight_axle2: float) -> bool:
 if weight_axle1 <= weight_axle2:
 return True
 else:
 return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r4(load_axle1: float, load_axle3: float) -> bool:
 if load_axle1 <= load_axle3:
 return True
 else:
 return False

# The payload must always be smaller than or equal to the load on axle 3.
def r5(payload: float, load_axle3: float) -> bool:
 if payload <= load_axle3:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
Driving time must always be less than or equal to the total operation time.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
The payload cannot exceed the capacity of axle 2.
";" # The vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r1(distance: float, consumption: float) -> bool:
 if distance >= 20 and consumption / distance <= 0.2:
 return False
 else:
 return True

# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def r2(distance: float, consumption: float) -> bool:
 if distance >= 20 and consumption / distance >= 0.4:
 return True
 else:
 return False

# Driving time must always be less than or equal to the total operation time.
def r3(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def r4(load_axle1: float, load_axle2: float) -> bool:
 if load_axle1 <= load_axle2:
 return True
 else:
 return False

# The payload cannot exceed the capacity of axle 2.
def r5(payload: float, capacity: float) -> bool:
 if payload <= capacity:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
PTO operation time should be less than or equal to the total operation time.
Stops with PTO engaged cannot outnumber the total stops.
The payload must not exceed the load carried by axle 3.
";" # When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(total_distance: float, hourly_consumption: float) -> bool:
 if total_distance / 20 >= 1 and hourly_consumption <= 0.25:
 return True
 else:
 return False

# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r2(total_distance: float, fuel_consumption_per_100km: float) -> bool:
 if total_distance >= 20 and fuel_consumption_per_100km >= 40:
 return True
 else:
 return False

# PTO operation time should be less than or equal to the total operation time.
def r3(pto_time: float, total_operation_time: float) -> bool:
 if pto_time <= total_operation_time:
 return True
 else:
 return False

# Stops with PTO engaged cannot outnumber the total stops.
def r4(num_stops_pto_engaged: int, total_num_stops: int) -> bool:
 if num_stops_pto_engaged <= total_num_stops:
 return True
 else:
 return False

# The payload must not exceed the load carried by axle 3.
def r5(payload: float, load_axle_3: float) -> bool:
 if payload <= load_axle_3:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
The total operation duration must not be lower than the PTO operation time.
Driving time cannot be greater than the total operation time.
Axle 2's load must always be equal to or greater than the payload.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";" # For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r1(trip_length: float, fuel_consumption: float) -> bool:
 if trip_length >= 20 and fuel_consumption / trip_length * 100 <= 40:
 return True
 else:
 return False

# The total operation duration must not be lower than the PTO operation time.
def r2(pto_time: float, total_operation_time: float) -> bool:
 if pto_time <= total_operation_time:
 return True
 else:
 return False

# Driving time cannot be greater than the total operation time.
def r3(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False

# Axle 2's load must always be equal to or greater than the payload.
def r4(axle_2_load: float, payload: float) -> bool:
 if axle_2_load >= payload:
 return True
 else:
 return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r5(pto_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if pto_time + idle_time + driving_time <= total_operation_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: PTO operation time must be less than or equal to the total operation time.
Driving time must always be less than or equal to the total operation time.
The number of stops where PTO is engaged must not exceed the overall stop count.
Payload must remain below or equal to the load carried by axle 2.
Axle 3's load must always be equal to or greater than the payload.
";" # PTO operation time must be less than or equal to the total operation time.
def r1(pto_operation_time: float, total_operation_time: float) -> bool:
 if pto_operation_time <= total_operation_time:
 return True
 else:
 return False

# Driving time must always be less than or equal to the total operation time.
def r2(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r3(pto_engaged_count: int, overall_stop_count: int) -> bool:
 if pto_engaged_count <= overall_stop_count:
 return True
 else:
 return False

# Payload must remain below or equal to the load carried by axle 2.
def r4(payload: float, axle_2_load: float) -> bool:
 if payload <= axle_2_load:
 return True
 else:
 return False

# Axle 3's load must always be equal to or greater than the payload.
def r5(axle_3_load: float, payload: float) -> bool:
 if axle_3_load >= payload:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: The total operation duration must not be lower than the PTO operation time.
Idle time cannot be greater than the total operation time.
Driving time should be less than or equal to the total operation time.
Stops with PTO engaged should never outnumber total stops.
Axle 1's load cannot exceed Axle 3's load.
";" # The total operation duration must not be lower than the PTO operation time.
def r1(total_duration: float, pto_time: float) -> bool:
 if total_duration >= pto_time:
 return True
 else:
 return False

# Idle time cannot be greater than the total operation time.
def r2(idle_time: float, total_duration: float) -> bool:
 if idle_time <= total_duration:
 return True
 else:
 return False

# Driving time should be less than or equal to the total operation time.
def r3(driving_time: float, total_duration: float) -> bool:
 if driving_time <= total_duration:
 return True
 else:
 return False

# Stops with PTO engaged should never outnumber total stops.
def r4(pto_stops: int, total_stops: int) -> bool:
 if pto_stops <= total_stops:
 return True
 else:
 return False

# Axle 1's load cannot exceed Axle 3's load.
def r5(axle_1_load: float, axle_3_load: float) -> bool:
 if axle_1_load <= axle_3_load:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
Total operation time shouldn’t be lower than idle time.
Stops with PTO engaged should never outnumber total stops.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
";" # When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance >= 20 and fuel_consumption * 3.6 / distance <= 0.139:
 return True
 else:
 return False

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r2(distance: float, fuel_consumption: float) -> bool:
 if distance >= 20 and fuel_consumption * 100 / distance >= 40:
 return True
 else:
 return False

# Total operation time shouldn’t be lower than idle time.
def r3(operation_time: float, idle_time: float) -> bool:
 if operation_time >= idle_time:
 return True
 else:
 return False

# Stops with PTO engaged should never outnumber total stops.
def r4(stops_with_pto: int, total_stops: int) -> bool:
 if stops_with_pto <= total_stops:
 return True
 else:
 return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r5(load_axle_1: float, load_axle_3: float) -> bool:
 if load_axle_1 <= load_axle_3:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: PTO operation time must be less than or equal to the total operation time.
The weight on axle 1 cannot surpass the weight on axle 2.
The load supported by axle 1 cannot exceed that of axle 3.
Payload must remain below or equal to the load carried by axle 2.
Payload must remain below or equal to the load carried by axle 3.
";" # PTO operation time must be less than or equal to the total operation time.
def r1(pto_operation_time: float, total_operation_time: float) -> bool:
    if pto_operation_time <= total_operation_time:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r2(weight_axle_1: float, weight_axle_2: float) -> bool:
    if weight_axle_1 <= weight_axle_2:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 3.
def r3(load_axle_1: float, load_axle_3: float) -> bool:
    if load_axle_1 <= load_axle_3:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def r4(payload: float, load_axle_2: float) -> bool:
    if payload <= load_axle_2:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 3.
def r5(payload: float, load_axle_3: float) -> bool:
    if payload <= load_axle_3:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
Idle time must always be less than or equal to the total operation time.
Driving time must always be less than or equal to the total operation time.
Stops with PTO engaged should never outnumber total stops.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
";" # If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance / 20 >= 1 and fuel_consumption / 5 <= 1:
 return True
 else:
 return False

# Idle time must always be less than or equal to the total operation time.
def r2(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# Driving time must always be less than or equal to the total operation time.
def r3(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False

# Stops with PTO engaged should never outnumber total stops.
def r4(stops_with_pto: int, total_stops: int) -> bool:
 if stops_with_pto <= total_stops:
 return True
 else:
 return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def r5(load_axle1: float, load_axle2: float) -> bool:
 if load_axle1 <= load_axle2:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
Idle time cannot be greater than the total operation time.
The total operation durationmust not be lower than the driving time.
The weight on axle 1 cannot surpass the weight on axle 2.
The load on axle 1 must not surpass the load on axle 3.
";" # When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(km: float, fuel_consumption: float) -> bool:
 if km >= 20 and fuel_consumption <= (5 / 60.0):
 return True
 else:
 return False

# Idle time cannot be greater than the total operation time.
def r2(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# The total operation duration must not be lower than the driving time.
def r3(total_operation_time: float, driving_time: float) -> bool:
 if total_operation_time >= driving_time:
 return True
 else:
 return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r4(weight_axle1: float, weight_axle2: float) -> bool:
 if weight_axle1 <= weight_axle2:
 return True
 else:
 return False

# The load on axle 1 must not surpass the load on axle 3.
def r5(load_axle1: float, load_axle3: float) -> bool:
 if load_axle1 <= load_axle3:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: PTO operation time must be less than or equal to the total operation time.
The total operation duration must not be lower than the idle time.
The weight on axle 1 cannot surpass the weight on axle 3.
The payload must always be smaller than or equal to the load on axle 2.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";" # PTO operation time must be less than or equal to the total operation time.
def r1(pto_operation_time: float, total_operation_time: float) -> bool:
 if pto_operation_time <= total_operation_time:
 return True
 else:
 return False

# The total operation duration must not be lower than the idle time.
def r2(total_operation_duration: float, idle_time: float) -> bool:
 if total_operation_duration >= idle_time:
 return True
 else:
 return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r3(weight_axle_1: float, weight_axle_3: float) -> bool:
 if weight_axle_1 <= weight_axle_3:
 return True
 else:
 return False

# The payload must always be smaller than or equal to the load on axle 2.
def r4(payload: float, load_axle_2: float) -> bool:
 if payload <= load_axle_2:
 return True
 else:
 return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r5(pto_operation_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if pto_operation_time + idle_time + driving_time <= total_operation_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: PTO operation time cannot be greater than the total operation time.
Idle time cannot be greater than the total operation time.
The number of stops where PTO is engaged must not exceed the overall stop count.
The payload cannot exceed the capacity of axle 2.
Axle 3's load must always be equal to or greater than the payload.
";" # PTO operation time cannot be greater than the total operation time.
def r1(pto_operation_time: float, total_operation_time: float) -> bool:
 if pto_operation_time <= total_operation_time:
 return True
 else:
 return False

# Idle time cannot be greater than the total operation time.
def r2(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r3(pto_stops: int, overall_stops: int) -> bool:
 if pto_stops <= overall_stops:
 return True
 else:
 return False

# The payload cannot exceed the capacity of axle 2.
def r4(payload: float, axle_2_capacity: float) -> bool:
 if payload <= axle_2_capacity:
 return True
 else:
 return False

# Axle 3's load must always be equal to or greater than the payload.
def r5(axle_3_load: float, payload: float) -> bool:
 if axle_3_load >= payload:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
Idle time should be less than or equal to the total operation time.
The total operation durationmust not be lower than the driving time.
Axle 2's load must always be equal to or greater than the payload.
The payload must always be smaller than or equal to the load on axle 3.
";" # The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r1(total_distance: float, average_fuel_consumption: float) -> bool:
 if total_distance >= 20 and average_fuel_consumption >= 0.4:
 return True
 else:
 return False

# Idle time should be less than or equal to the total operation time.
def r2(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# The total operation duration must not be lower than the driving time.
def r3(total_operation_time: float, driving_time: float) -> bool:
 if total_operation_time >= driving_time:
 return True
 else:
 return False

# Axle 2's load must always be equal to or greater than the payload.
def r4(axle_2_load: float, payload: float) -> bool:
 if axle_2_load >= payload:
 return True
 else:
 return False

# The payload must always be smaller than or equal to the load on axle 3.
def r5(payload: float, axle_3_load: float) -> bool:
 if payload <= axle_3_load:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
Total operation time shouldn’t be lower than idle time.
Driving time must always be less than or equal to the total operation time.
Stops with PTO engaged should never outnumber total stops.
The payload must always be smaller than or equal to the load on axle 2.
";" # When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance >= 20 and fuel_consumption <= (40 * 0.01):
 return False
 else:
 return True

# Total operation time shouldn’t be lower than idle time.
def r2(operation_time: float, idle_time: float) -> bool:
 if operation_time >= idle_time:
 return True
 else:
 return False

# Driving time must always be less than or equal to the total operation time.
def r3(driving_time: float, operation_time: float) -> bool:
 if driving_time <= operation_time:
 return True
 else:
 return False

# Stops with PTO engaged should never outnumber total stops.
def r4(pto_stops: int, total_stops: int) -> bool:
 if pto_stops <= total_stops:
 return True
 else:
 return False

# The payload must always be smaller than or equal to the load on axle 2.
def r5(payload: float, load_on_axle2: float) -> bool:
 if payload <= load_on_axle2:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
The total operation duration must not be lower than the PTO operation time.
The total operation duration must not be lower than the idle time.
Driving time must always be less than or equal to the total operation time.
The payload must not exceed the load carried by axle 3.
";" # For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r1(trip_distance: float, fuel_consumption: float) -> bool:
 if trip_distance >= 20 and fuel_consumption / trip_distance <= 0.4:
 return True
 else:
 return False

# The total operation duration must not be lower than the PTO operation time.
def r2(total_duration: float, pto_operation_time: float) -> bool:
 if total_duration >= pto_operation_time:
 return True
 else:
 return False

# The total operation duration must not be lower than the idle time.
def r3(total_duration: float, idle_time: float) -> bool:
 if total_duration >= idle_time:
 return True
 else:
 return False

# Driving time must always be less than or equal to the total operation time.
def r4(driving_time: float, total_duration: float) -> bool:
 if driving_time <= total_duration:
 return True
 else:
 return False

# The payload must not exceed the load carried by axle 3.
def r5(payload: float, axle_3_load: float) -> bool:
 if payload <= axle_3_load:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
PTO operation time cannot be greater than the total operation time.
Driving time cannot be greater than the total operation time.
The payload must not exceed the load carried by axle 2.
";" # If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
def r1(distance: float, fuel_consumption_rate_per_hour: float) -> bool:
 if distance >= 20 and fuel_consumption_rate_per_hour <= (40 / 100 * 5):
 return True
 else:
 return False

# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r2(distance: float, fuel_consumption_per_100km: float) -> bool:
 if distance >= 20 and fuel_consumption_per_100km >= 40:
 return True
 else:
 return False

# PTO operation time cannot be greater than the total operation time.
def r3(pto_operation_time: float, total_operation_time: float) -> bool:
 if pto_operation_time <= total_operation_time:
 return True
 else:
 return False

# Driving time cannot be greater than the total operation time.
def r4(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False

# The payload must not exceed the load carried by axle 2.
def r5(payload: float, load_axle_2: float) -> bool:
 if payload <= load_axle_2:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
PTO operation time must be less than or equal to the total operation time.
Driving time should be less than or equal to the total operation time.
The weight on axle 1 cannot surpass the weight on axle 2.
The payload must not exceed the load carried by axle 3.
";" # If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance / 20 >= 1 and fuel_consumption / distance <= 0.25:
 return True
 else:
 return False

# PTO operation time must be less than or equal to the total operation time.
def r2(pto_time: float, total_operation_time: float) -> bool:
 if pto_time <= total_operation_time:
 return True
 else:
 return False

# Driving time should be less than or equal to the total operation time.
def r3(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r4(weight_axle1: float, weight_axle2: float) -> bool:
 if weight_axle1 <= weight_axle2:
 return True
 else:
 return False

# The payload must not exceed the load carried by axle 3.
def r5(payload: float, load_axle3: float) -> bool:
 if payload <= load_axle3:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
Total operation time shouldn’t be lower than PTO operation time.
Idle time should be less than or equal to the total operation time.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";" # The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance >= 20 and fuel_consumption <= 0.4:
 return True
 else:
 return False

# Total operation time shouldn’t be lower than PTO operation time.
def r2(total_operation_time: float, pto_operation_time: float) -> bool:
 if total_operation_time >= pto_operation_time:
 return True
 else:
 return False

# Idle time should be less than or equal to the total operation time.
def r3(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r4(load_axle_1: float, load_axle_3: float) -> bool:
 if load_axle_1 <= load_axle_3:
 return True
 else:
 return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r5(pto_operation_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if total_operation_time >= pto_operation_time + idle_time + driving_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: Total operation time shouldn’t be lower than idle time.
Driving time should be less than or equal to the total operation time.
The number of stops where PTO is engaged must not exceed the overall stop count.
The load supported by axle 1 cannot exceed that of axle 2.
The weight on axle 1 cannot surpass the weight on axle 3.
";" # Total operation time shouldn't be lower than idle time.
def r1(operation_time: float, idle_time: float) -> bool:
    if operation_time >= idle_time:
        return True
    else:
        return False

# Driving time should be less than or equal to the total operation time.
def r2(driving_time: float, operation_time: float) -> bool:
    if driving_time <= operation_time:
        return True
    else:
        return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r3(pto_stops: int, overall_stops: int) -> bool:
    if pto_stops <= overall_stops:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r4(load_axle1: float, load_axle2: float) -> bool:
    if load_axle1 <= load_axle2:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r5(weight_axle1: float, weight_axle3: float) -> bool:
    if weight_axle1 <= weight_axle3:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
Idle time cannot be greater than the total operation time.
The total stop count must not be lower than the count of stops where PTO is engaged.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
Total operation time should be at least the sum of PTO, idle, and driving times.
";" # For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r1(trip_length: float, fuel_consumption: float) -> bool:
 if trip_length >= 20 and fuel_consumption / trip_length <= 0.4:
 return True
 else:
 return False

# Idle time cannot be greater than the total operation time.
def r2(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r3(stop_count: int, pto_stops: int) -> bool:
 if stop_count >= pto_stops:
 return True
 else:
 return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r4(load_axle1: float, load_axle3: float) -> bool:
 if load_axle1 <= load_axle3:
 return True
 else:
 return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r5(pto_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if total_operation_time >= pto_time + idle_time + driving_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: Total operation time shouldn’t be lower than idle time.
The load on axle 1 must not surpass the load on axle 2.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
The payload cannot exceed the capacity of axle 2.
The payload cannot exceed the capacity of axle 3.
";" # Total operation time shouldn't be lower than idle time.
def r1(operation_time: float, idle_time: float) -> bool:
    if operation_time >= idle_time:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 2.
def r2(load_axle1: float, load_axle2: float) -> bool:
    if load_axle1 <= load_axle2:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r3(load_axle1: float, load_axle3: float) -> bool:
    if load_axle1 <= load_axle3:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 2.
def r4(payload: float, capacity_axle2: float) -> bool:
    if payload <= capacity_axle2:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 3.
def r5(payload: float, capacity_axle3: float) -> bool:
    if payload <= capacity_axle3:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: Total operation time should shouldn’t be lower than driving time.
The load supported by axle 1 cannot exceed that of axle 2.
Axle 2's load must always be equal to or greater than the payload.
Axle 3's load must always be equal to or greater than the payload.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";" # Total operation time should not be lower than driving time.
def r1(total_operation_time: float, driving_time: float) -> bool:
 if total_operation_time >= driving_time:
 return True
 else:
 return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r2(axle_1_load: float, axle_2_load: float) -> bool:
 if axle_1_load <= axle_2_load:
 return True
 else:
 return False

# Axle 2's load must always be equal to or greater than the payload.
def r3(axle_2_load: float, payload: float) -> bool:
 if axle_2_load >= payload:
 return True
 else:
 return False

# Axle 3's load must always be equal to or greater than the payload.
def r4(axle_3_load: float, payload: float) -> bool:
 if axle_3_load >= payload:
 return True
 else:
 return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r5(total_operation_time: float, pto_duration: float, idle_time: float, driving_time: float) -> bool:
 if total_operation_time >= (pto_duration + idle_time + driving_time):
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
Total operation time shouldn’t be lower than PTO operation time.
Idle time should be less than or equal to the total operation time.
The payload must not exceed the load carried by axle 2.
Total operation time should be at least the sum of PTO, idle, and driving times.
";" # The vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r1(fuel_consumption: float, distance: float) -> bool:
 if distance / fuel_consumption <= 20 or fuel_consumption < 5:
 return False
 else:
 return True

# Total operation time shouldn't be lower than PTO operation time.
def r2(total_operation_time: float, pto_operation_time: float) -> bool:
 if total_operation_time < pto_operation_time:
 return False
 else:
 return True

# Idle time should be less than or equal to the total operation time.
def r3(idle_time: float, total_operation_time: float) -> bool:
 if idle_time > total_operation_time:
 return False
 else:
 return True

# The payload must not exceed the load carried by axle 2.
def r4(payload: float, axle_2_load: float) -> bool:
 if payload > axle_2_load:
 return False
 else:
 return True

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r5(pto_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if total_operation_time < pto_time + idle_time + driving_time:
 return False
 else:
 return True"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: PTO operation time should be less than or equal to the total operation time.
The total operation duration must not be lower than the idle time.
PTO-engaged stops cannot exceed the total number of stops.
The payload must not exceed the load carried by axle 3.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";" # PTO operation time should be less than or equal to the total operation time.
def r1(pto_operation_time: float, total_operation_time: float) -> bool:
 if pto_operation_time <= total_operation_time:
 return True
 else:
 return False

# The total operation duration must not be lower than the idle time.
def r2(total_operation_time: float, idle_time: float) -> bool:
 if total_operation_time >= idle_time:
 return True
 else:
 return False

# PTO-engaged stops cannot exceed the total number of stops.
def r3(pto_engaged_stops: int, total_stops: int) -> bool:
 if pto_engaged_stops <= total_stops:
 return True
 else:
 return False

# The payload must not exceed the load carried by axle 3.
def r4(payload: float, load_axle_3: float) -> bool:
 if payload <= load_axle_3:
 return True
 else:
 return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r5(pto_operation_time: float, idle_time: float, driving_time: float) -> bool:
 if pto_operation_time + idle_time + driving_time <= total_operation_time:
 return False
 else:
 return True"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
The total operation durationmust not be lower than the driving time.
The load on axle 1 must not surpass the load on axle 3.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";" # The vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r1(vehicle_fuel_consumption: float, traveled_distance: float) -> bool:
 if traveled_distance >= 20 and vehicle_fuel_consumption / 3.6 < 5:
 return False
 else:
 return True

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r2(vehicle_fuel_consumption: float, traveled_distance: float) -> bool:
 if traveled_distance >= 20:
 fuel_consumed = vehicle_fuel_consumption * traveled_distance / 3.6
 if fuel_consumed / traveled_distance < 0.04:
 return False
 else:
 return True

# The total operation duration must not be lower than the driving time.
def r3(operation_duration: float, driving_time: float) -> bool:
 if operation_duration < driving_time:
 return False
 else:
 return True

# The load on axle 1 must not surpass the load on axle 3.
def r4(load_axle_1: float, load_axle_3: float) -> bool:
 if load_axle_1 > load_axle_3:
 return False
 else:
 return True

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r5(pto_operation_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if total_operation_time < pto_operation_time + idle_time + driving_time:
 return False
 else:
 return True"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
The total operation duration must not be lower than the idle time.
Driving time should be less than or equal to the total operation time.
The payload must not exceed the load carried by axle 3.
Total operation time should be at least the sum of PTO, idle, and driving times.
";" # For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(journey_length: float, fuel_consumption_per_hour: float) -> bool:
 if journey_length >= 20 and fuel_consumption_per_hour <= 0.05:
 return True
 else:
 return False

# The total operation duration must not be lower than the idle time.
def r2(total_operation_duration: float, idle_time: float) -> bool:
 if total_operation_duration >= idle_time:
 return True
 else:
 return False

# Driving time should be less than or equal to the total operation time.
def r3(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False

# The payload must not exceed the load carried by axle 3.
def r4(payload: float, load_axle_3: float) -> bool:
 if payload <= load_axle_3:
 return True
 else:
 return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r5(pto_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if total_operation_time >= pto_time + idle_time + driving_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
The total operation duration must not be lower than the idle time.
Total operation time should shouldn’t be lower than driving time.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
Payload must remain below or equal to the load carried by axle 3.
";" # The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r1(hourly_fuel_consumption: float, distance: float) -> bool:
 if distance >= 20 and hourly_fuel_consumption <= 0.2:
 return False
 else:
 return True

# The total operation duration must not be lower than the idle time.
def r2(total_operation_duration: float, idle_time: float) -> bool:
 if total_operation_duration >= idle_time:
 return True
 else:
 return False

# Total operation time should not be lower than driving time.
def r3(total_operation_time: float, driving_time: float) -> bool:
 if total_operation_time >= driving_time:
 return True
 else:
 return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def r4(load_axle_1: float, load_axle_2: float) -> bool:
 if load_axle_1 <= load_axle_2:
 return True
 else:
 return False

# Payload must remain below or equal to the load carried by axle 3.
def r5(payload: float, load_axle_3: float) -> bool:
 if payload <= load_axle_3:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
Driving time should be less than or equal to the total operation time.
Stops with PTO engaged should never outnumber total stops.
The payload must not exceed the load carried by axle 3.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";" # If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance / 100 and fuel_consumption * 10 > 40:
 return True
 else:
 return False

# Driving time should be less than or equal to the total operation time.
def r2(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False

# Stops with PTO engaged should never outnumber total stops.
def r3(pto_stops: int, total_stops: int) -> bool:
 if pto_stops <= total_stops:
 return True
 else:
 return False

# The payload must not exceed the load carried by axle 3.
def r4(payload: float, axle_3_load: float) -> bool:
 if payload <= axle_3_load:
 return True
 else:
 return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r5(pto_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if pto_time + idle_time + driving_time <= total_operation_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
Driving time must always be less than or equal to the total operation time.
Stops with PTO engaged cannot outnumber the total stops.
The load on axle 1 must not surpass the load on axle 3.
";" # If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
def r1(distance: float, fuel_consumption_rate: float) -> bool:
 if distance >= 20 and fuel_consumption_rate <= (40 / 100 * distance) / 60:
 return True
 else:
 return False

# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def r2(distance: float, fuel_consumption: float) -> bool:
 if distance >= 20 and fuel_consumption >= 40 * distance / 100:
 return True
 else:
 return False

# Driving time must always be less than or equal to the total operation time.
def r3(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False

# Stops with PTO engaged cannot outnumber the total stops.
def r4(num_stops_pto_engaged: int, total_stops: int) -> bool:
 if num_stops_pto_engaged <= total_stops:
 return True
 else:
 return False

# The load on axle 1 must not surpass the load on axle 3.
def r5(load_axle1: float, load_axle3: float) -> bool:
 if load_axle1 <= load_axle3:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
The load on axle 1 must not surpass the load on axle 3.
Axle 2's load must always be equal to or greater than the payload.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";" # For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(journey_length: float, fuel_consumption_per_hour: float) -> bool:
 if journey_length >= 20 and fuel_consumption_per_hour <= (5 / 60):
 return True
 else:
 return False

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r2(journey_length: float, fuel_consumption_per_100_km: float) -> bool:
 if journey_length >= 20 and fuel_consumption_per_100_km >= 40:
 return True
 else:
 return False

# The load on axle 1 must not surpass the load on axle 3.
def r3(axle_1_load: float, axle_3_load: float) -> bool:
 if axle_1_load <= axle_3_load:
 return True
 else:
 return False

# Axle 2's load must always be equal to or greater than the payload.
def r4(axle_2_load: float, payload: float) -> bool:
 if axle_2_load >= payload:
 return True
 else:
 return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r5(pto_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if pto_time + idle_time + driving_time <= total_operation_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
The total operation duration must not be lower than the idle time.
The weight on axle 1 cannot surpass the weight on axle 2.
Axle 2's load must always be equal to or greater than the payload.
";" # When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(km: float, fuel_consumption: float) -> bool:
 if km >= 20 and fuel_consumption / (km / 60) <= 0.083:
 return True
 else:
 return False

# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def r2(km: float, fuel_consumption: float) -> bool:
 if km >= 20 and fuel_consumption >= 40 * km / 100:
 return True
 else:
 return False

# The total operation duration must not be lower than the idle time.
def r3(operation_duration: float, idle_time: float) -> bool:
 if operation_duration >= idle_time:
 return True
 else:
 return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r4(weight_axle1: float, weight_axle2: float) -> bool:
 if weight_axle1 <= weight_axle2:
 return True
 else:
 return False

# Axle 2's load must always be equal to or greater than the payload.
def r5(axle2_load: float, payload: float) -> bool:
 if axle2_load >= payload:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
PTO operation time should be less than or equal to the total operation time.
Total operation time shouldn’t be lower than idle time.
The number of stops where PTO is engaged must not exceed the overall stop count.
The weight on axle 1 cannot surpass the weight on axle 2.
";" # The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r1(total_distance: float, average_fuel_consumption: float) -> bool:
 if total_distance >= 20 and average_fuel_consumption * 100 >= 40:
 return True
 else:
 return False

# PTO operation time should be less than or equal to the total operation time.
def r2(pto_operation_time: float, total_operation_time: float) -> bool:
 if pto_operation_time <= total_operation_time:
 return True
 else:
 return False

# Total operation time shouldn’t be lower than idle time.
def r3(total_operation_time: float, idle_time: float) -> bool:
 if total_operation_time >= idle_time:
 return True
 else:
 return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r4(stop_count_with_pto: int, overall_stop_count: int) -> bool:
 if stop_count_with_pto <= overall_stop_count:
 return True
 else:
 return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r5(weight_axle_1: float, weight_axle_2: float) -> bool:
 if weight_axle_1 <= weight_axle_2:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
Idle time must always be less than or equal to the total operation time.
Driving time must always be less than or equal to the total operation time.
The load supported by axle 1 cannot exceed that of axle 2.
The payload must not exceed the load carried by axle 2.
";" # If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance / 20 >= 1 and fuel_consumption / distance <= 0.25:
 return True
 else:
 return False

# Idle time must always be less than or equal to the total operation time.
def r2(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# Driving time must always be less than or equal to the total operation time.
def r3(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r4(load_axle1: float, load_axle2: float) -> bool:
 if load_axle1 <= load_axle2:
 return True
 else:
 return False

# The payload must not exceed the load carried by axle 2.
def r5(payload: float, load_axle2: float) -> bool:
 if payload <= load_axle2:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
Driving time should be less than or equal to the total operation time.
The total stop count must not be lower than the count of stops where PTO is engaged.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
";" # If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance >= 20 and fuel_consumption / (distance / 100) < 0.05:
 return False
 else:
 return True

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r2(distance: float, fuel_consumption: float) -> bool:
 if distance >= 20 and fuel_consumption / distance >= 0.04:
 return True
 else:
 return False

# Driving time should be less than or equal to the total operation time.
def r3(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r4(total_stops: int, pto_stops: int) -> bool:
 if total_stops >= pto_stops:
 return True
 else:
 return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def r5(load_axle1: float, load_axle2: float) -> bool:
 if load_axle1 <= load_axle2:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: Idle time cannot be greater than the total operation time.
Driving time must always be less than or equal to the total operation time.
Stops with PTO engaged cannot outnumber the total stops.
Axle 2's load must always be equal to or greater than the payload.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";" # Idle time cannot be greater than the total operation time.
def r1(idle_time: float, total_operation_time: float) -> bool:
 if idle_time / total_operation_time <= 1:
 return True
 else:
 return False

# Driving time must always be less than or equal to the total operation time.
def r2(driving_time: float, total_operation_time: float) -> bool:
 if driving_time / total_operation_time <= 1:
 return True
 else:
 return False

# Stops with PTO engaged cannot outnumber the total stops.
def r3(pto_stops: int, total_stops: int) -> bool:
 if pto_stops <= total_stops:
 return True
 else:
 return False

# Axle 2's load must always be equal to or greater than the payload.
def r4(axle_2_load: float, payload: float) -> bool:
 if axle_2_load >= payload:
 return True
 else:
 return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r5(pto_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if (pto_time + idle_time + driving_time) / total_operation_time <= 1:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
The total operation duration must not be lower than the PTO operation time.
Driving time must always be less than or equal to the total operation time.
The payload cannot exceed the capacity of axle 3.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";" # When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(km: float, fuel_consumption: float) -> bool:
 if km >= 20 and fuel_consumption <= 0.2:
 return True
 else:
 return False

# The total operation duration must not be lower than the PTO operation time.
def r2(total_duration: float, pto_duration: float) -> bool:
 if total_duration >= pto_duration:
 return True
 else:
 return False

# Driving time must always be less than or equal to the total operation time.
def r3(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False

# The payload cannot exceed the capacity of axle 3.
def r4(payload: float, axle_3_capacity: float) -> bool:
 if payload <= axle_3_capacity:
 return True
 else:
 return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r5(pto_duration: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if pto_duration + idle_time + driving_time <= total_operation_time:
 return False
 else:
 return True"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: Total operation time shouldn’t be lower than PTO operation time.
Stops with PTO engaged should never outnumber total stops.
The weight on axle 1 cannot surpass the weight on axle 3.
Axle 2's load must always be equal to or greater than the payload.
Payload must remain below or equal to the load carried by axle 3.
";" # Total operation time shouldn't be lower than PTO operation time.
def r1(total_operation_time: float, pto_operation_time: float) -> bool:
    if total_operation_time >= pto_operation_time:
        return True
    else:
        return False

# Stops with PTO engaged should never outnumber total stops.
def r2(pto_stops: int, total_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r3(axle_1_weight: float, axle_3_weight: float) -> bool:
    if axle_1_weight <= axle_3_weight:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def r4(axle_2_load: float, payload: float) -> bool:
    if axle_2_load >= payload:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 3.
def r5(payload: float, axle_3_load: float) -> bool:
    if payload <= axle_3_load:
        return True
    else:
        return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
Driving time should be less than or equal to the total operation time.
The number of stops where PTO is engaged must not exceed the overall stop count.
The payload must not exceed the load carried by axle 3.
";" # For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(distance: float, fuel_consumption_per_hour: float) -> bool:
 if distance >= 20 and fuel_consumption_per_hour <= (5 / 10):
 return True
 else:
 return False

# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def r2(distance: float, fuel_consumption_per_distance: float) -> bool:
 if distance >= 20 and fuel_consumption_per_distance >= 0.4:
 return True
 else:
 return False

# Driving time should be less than or equal to the total operation time.
def r3(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r4(num_stops_pto_engaged: int, overall_stop_count: int) -> bool:
 if num_stops_pto_engaged <= overall_stop_count:
 return True
 else:
 return False

# The payload must not exceed the load carried by axle 3.
def r5(payload: float, load_axle_3: float) -> bool:
 if payload <= load_axle_3:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: Idle time must always be less than or equal to the total operation time.
Driving time must always be less than or equal to the total operation time.
Stops with PTO engaged cannot outnumber the total stops.
The weight on axle 1 cannot surpass the weight on axle 2.
The payload cannot exceed the capacity of axle 2.
";" # Idle time must always be less than or equal to the total operation time.
def r1(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# Driving time must always be less than or equal to the total operation time.
def r2(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False

# Stops with PTO engaged cannot outnumber the total stops.
def r3(num_stops_pto_engaged: int, total_stops: int) -> bool:
 if num_stops_pto_engaged <= total_stops:
 return True
 else:
 return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r4(weight_axle_1: float, weight_axle_2: float) -> bool:
 if weight_axle_1 <= weight_axle_2:
 return True
 else:
 return False

# The payload cannot exceed the capacity of axle 2.
def r5(payload: float, capacity_axle_2: float) -> bool:
 if payload <= capacity_axle_2:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
PTO operation time must be less than or equal to the total operation time.
Idle time must always be less than or equal to the total operation time.
Total operation time should shouldn’t be lower than driving time.
The payload must not exceed the load carried by axle 2.
";" # The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r1(fuel\_consumption: float, distance: float) -> bool:
if distance >= 20 and fuel\_consumption <= 0.2:
return False
else:
return True

# PTO operation time must be less than or equal to the total operation time.
def r2(pto\_time: float, total\_operation\_time: float) -> bool:
if pto\_time <= total\_operation\_time:
return True
else:
return False

# Idle time must always be less than or equal to the total operation time.
def r3(idle\_time: float, total\_operation\_time: float) -> bool:
if idle\_time <= total\_operation\_time:
return True
else:
return False

# Total operation time should not be lower than driving time.
def r4(total\_operation\_time: float, driving\_time: float) -> bool:
if total\_operation\_time >= driving\_time:
return True
else:
return False

# The payload must not exceed the load carried by axle 2.
def r5(payload: float, axle\_2\_load: float) -> bool:
if payload <= axle\_2\_load:
return True
else:
return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
Total operation time shouldn’t be lower than PTO operation time.
The total operation durationmust not be lower than the driving time.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
";" # If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance >= 20 and fuel_consumption / distance <= 0.2:
 return False
 else:
 return True

# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r2(total_distance: float, total_fuel_consumed: float) -> bool:
 if total_distance >= 20 and total_fuel_consumed / total_distance >= 0.4:
 return False
 else:
 return True

# Total operation time shouldn’t be lower than PTO operation time.
def r3(total_operation_time: float, pto_operation_time: float) -> bool:
 if total_operation_time >= pto_operation_time:
 return True
 else:
 return False

# The total operation duration must not be lower than the driving time.
def r4(total_operation_duration: float, driving_time: float) -> bool:
 if total_operation_duration >= driving_time:
 return True
 else:
 return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r5(load_axle_1: float, load_axle_3: float) -> bool:
 if load_axle_1 <= load_axle_3:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
PTO operation time should be less than or equal to the total operation time.
Driving time cannot be greater than the total operation time.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";" # For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(journey_length: float, avg_fuel_consumption_per_hour: float) -> bool:
 if journey_length >= 20 and avg_fuel_consumption_per_hour <= 0.16666667: # 5 dm³/h = 5000 cm³/h = 5000 / 1000000 = 0.05 dm³/h
 return True
 else:
 return False

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r2(journey_length: float, fuel_consumption_per_100_km: float) -> bool:
 if journey_length >= 20 and fuel_consumption_per_100_km >= 0.04:
 return True
 else:
 return False

# PTO operation time should be less than or equal to the total operation time.
def r3(pto_operation_time: float, total_operation_time: float) -> bool:
 if pto_operation_time <= total_operation_time:
 return True
 else:
 return False

# Driving time cannot be greater than the total operation time.
def r4(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r5(pto_operation_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if pto_operation_time + idle_time + driving_time <= total_operation_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
PTO operation time cannot be greater than the total operation time.
Axle 1's load cannot exceed Axle 2's load.
The weight on axle 1 cannot surpass the weight on axle 3.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";" # For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r1(trip_length: float, fuel_consumption: float) -> bool:
 if trip_length >= 20 and fuel_consumption / trip_length <= 0.4:
 return True
 else:
 return False

# PTO operation time cannot be greater than the total operation time.
def r2(pto_time: float, total_time: float) -> bool:
 if pto_time <= total_time:
 return True
 else:
 return False

# Axle 1's load cannot exceed Axle 2's load.
def r3(axle1_load: float, axle2_load: float) -> bool:
 if axle1_load <= axle2_load:
 return True
 else:
 return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r4(axle1_weight: float, axle3_weight: float) -> bool:
 if axle1_weight <= axle3_weight:
 return True
 else:
 return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r5(pto_time: float, idle_time: float, driving_time: float, total_time: float) -> bool:
 if total_time >= pto_time + idle_time + driving_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
Idle time must always be less than or equal to the total operation time.
Driving time should be less than or equal to the total operation time.
Axle 1's load cannot exceed Axle 3's load.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";" # If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance / 20 >= 1 and fuel_consumption / 60 < 0.0833:
 return False
 else:
 return True

# Idle time must always be less than or equal to the total operation time.
def r2(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# Driving time should be less than or equal to the total operation time.
def r3(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False

# Axle 1's load cannot exceed Axle 3's load.
def r4(axle_1_load: float, axle_3_load: float) -> bool:
 if axle_1_load <= axle_3_load:
 return True
 else:
 return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r5(pto_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if pto_time + idle_time + driving_time <= total_operation_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
The total operation duration must not be lower than the PTO operation time.
Total operation time should shouldn’t be lower than driving time.
Stops with PTO engaged should never outnumber total stops.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";" # For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(journey_length: float, avg_fuel_consumption: float) -> bool:
 if journey_length >= 20 and avg_fuel_consumption <= 0.2:
 return journey_length / avg_fuel_consumption >= 20
 else:
 return False

# The total operation duration must not be lower than the PTO operation time.
def r2(total_operation_time: float, pto_operation_time: float) -> bool:
 return total_operation_time >= pto_operation_time

# Total operation time should not be lower than driving time.
def r3(total_operation_time: float, driving_time: float) -> bool:
 return total_operation_time >= driving_time

# Stops with PTO engaged should never outnumber total stops.
def r4(num_stops_pto_engaged: int, total_num_stops: int) -> bool:
 return num_stops_pto_engaged <= total_num_stops

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r5(total_operation_time: float, pto_operation_time: float, idle_time: float, driving_time: float) -> bool:
 return total_operation_time >= pto_operation_time + idle_time + driving_time"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
Total operation time shouldn’t be lower than PTO operation time.
Total operation time shouldn’t be lower than idle time.
Driving time must always be less than or equal to the total operation time.
The number of stops where PTO is engaged must not exceed the overall stop count.
Total operation time should be at least the sum of PTO, idle, and driving times.
";" # If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance / 20 >= 1 and fuel_consumption / 5 <= 1:
 return True
 else:
 return False

# Total operation time shouldn’t be lower than PTO operation time.
def r2(total_operation_time: float, pto_operation_time: float) -> bool:
 if total_operation_time >= pto_operation_time:
 return True
 else:
 return False

# Total operation time shouldn’t be lower than idle time.
def r3(total_operation_time: float, idle_time: float) -> bool:
 if total_operation_time >= idle_time:
 return True
 else:
 return False

# Driving time must always be less than or equal to the total operation time.
def r4(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r5(pto_stops: int, overall_stops: int) -> bool:
 if pto_stops <= overall_stops:
 return True
 else:
 return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r6(total_operation_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
 if total_operation_time >= pto_time + idle_time + driving_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: Total operation time shouldn’t be lower than PTO operation time.
Idle time cannot be greater than the total operation time.
Axle 1's load cannot exceed Axle 2's load.
Axle 1's load cannot exceed Axle 3's load.
Axle 3's load must always be equal to or greater than the payload.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";" # Total operation time shouldn't be lower than PTO operation time.
def r1(pto_time: float, total_time: float) -> bool:
 if total_time / pto_time >= 1:
 return True
 else:
 return False

# Idle time cannot be greater than the total operation time.
def r2(idle_time: float, total_time: float) -> bool:
 if idle_time / total_time <= 1:
 return True
 else:
 return False

# Axle 1's load cannot exceed Axle 2's load.
def r3(axle1_load: float, axle2_load: float) -> bool:
 if axle1_load / axle2_load <= 1:
 return True
 else:
 return False

# Axle 1's load cannot exceed Axle 3's load.
def r4(axle1_load: float, axle3_load: float) -> bool:
 if axle1_load / axle3_load <= 1:
 return True
 else:
 return False

# Axle 3's load must always be equal to or greater than the payload.
def r5(axle3_load: float, payload: float) -> bool:
 if axle3_load >= payload:
 return True
 else:
 return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r6(pto_time: float, idle_time: float, driving_time: float, total_time: float) -> bool:
 if total_time / (pto_time + idle_time + driving_time) >= 1:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
PTO operation time must be less than or equal to the total operation time.
Total operation time shouldn’t be lower than idle time.
Driving time cannot be greater than the total operation time.
The payload must not exceed the load carried by axle 2.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";" # When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(total_distance: float, fuel_consumption: float) -> bool:
 if total_distance / 20 >= 1 and fuel_consumption / total_distance <= 0.25:
 return True
 else:
 return False

# PTO operation time must be less than or equal to the total operation time.
def r2(pto_time: float, total_operation_time: float) -> bool:
 if pto_time <= total_operation_time:
 return True
 else:
 return False

# Total operation time shouldn’t be lower than idle time.
def r3(total_operation_time: float, idle_time: float) -> bool:
 if total_operation_time >= idle_time:
 return True
 else:
 return False

# Driving time cannot be greater than the total operation time.
def r4(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False

# The payload must not exceed the load carried by axle 2.
def r5(payload: float, load_axle_2: float) -> bool:
 if payload <= load_axle_2:
 return True
 else:
 return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r6(pto_time: float, idle_time: float, driving_time: float, total_operation_duration: float) -> bool:
 if total_operation_duration >= pto_time + idle_time + driving_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
PTO operation time should be less than or equal to the total operation time.
Idle time must always be less than or equal to the total operation time.
Driving time should be less than or equal to the total operation time.
The payload must not exceed the load carried by axle 2.
Total operation time should be at least the sum of PTO, idle, and driving times.
";" # When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance >= 20 and fuel_consumption <= (40 * 0.01):
 return True
 else:
 return False

# PTO operation time should be less than or equal to the total operation time.
def r2(pto_time: float, total_operation_time: float) -> bool:
 if pto_time <= total_operation_time:
 return True
 else:
 return False

# Idle time must always be less than or equal to the total operation time.
def r3(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# Driving time should be less than or equal to the total operation time.
def r4(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False

# The payload must not exceed the load carried by axle 2.
def r5(payload: float, axle_2_load: float) -> bool:
 if payload <= axle_2_load:
 return True
 else:
 return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r6(pto_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if total_operation_time >= (pto_time + idle_time + driving_time):
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
The total operation duration must not be lower than the PTO operation time.
Idle time must always be less than or equal to the total operation time.
The weight on axle 1 cannot surpass the weight on axle 3.
The payload must always be smaller than or equal to the load on axle 3.
";" # If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance >= 20:
 if fuel_consumption / (distance / 100) >= 0.05:
 return True
 else:
 return False

# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r2(distance: float, fuel_consumption: float) -> bool:
 if distance >= 20:
 if fuel_consumption / (distance / 100) >= 0.04:
 return True
 else:
 return False

# The total operation duration must not be lower than the PTO operation time.
def r3(operation_duration: float, pto_operation_time: float) -> bool:
 if operation_duration >= pto_operation_time:
 return True
 else:
 return False

# Idle time must always be less than or equal to the total operation time.
def r4(idle_time: float, operation_duration: float) -> bool:
 if idle_time <= operation_duration:
 return True
 else:
 return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r5(weight_axle1: float, weight_axle3: float) -> bool:
 if weight_axle1 <= weight_axle3:
 return True
 else:
 return False

# The payload must always be smaller than or equal to the load on axle 3.
def r6(payload: float, load_axle3: float) -> bool:
 if payload <= load_axle3:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
Idle time cannot be greater than the total operation time.
Stops with PTO engaged should never outnumber total stops.
Axle 1's load cannot exceed Axle 3's load.
The payload must not exceed the load carried by axle 3.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";" # The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r1(total_distance: float, average_fuel_consumption: float) -> bool:
 if total_distance >= 20 and average_fuel_consumption * 100 >= 40:
 return True
 else:
 return False

# Idle time cannot be greater than the total operation time.
def r2(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# Stops with PTO engaged should never outnumber total stops.
def r3(pto_stops: int, total_stops: int) -> bool:
 if pto_stops <= total_stops:
 return True
 else:
 return False

# Axle 1's load cannot exceed Axle 3's load.
def r4(axle_1_load: float, axle_3_load: float) -> bool:
 if axle_1_load <= axle_3_load:
 return True
 else:
 return False

# The payload must not exceed the load carried by axle 3.
def r5(payload: float, axle_3_load: float) -> bool:
 if payload <= axle_3_load:
 return True
 else:
 return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r6(pto_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if pto_time + idle_time + driving_time <= total_operation_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
PTO operation time cannot be greater than the total operation time.
The total operation durationmust not be lower than the driving time.
The payload cannot exceed the capacity of axle 2.
The payload must always be smaller than or equal to the load on axle 3.
";" # If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance >= 20:
 if fuel_consumption / (distance / 100) <= 0.05:
 return False
 else:
 return True

# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def r2(distance: float, fuel_consumption: float) -> bool:
 if distance >= 20:
 if fuel_consumption / distance >= 0.04:
 return True
 else:
 return False

# PTO operation time cannot be greater than the total operation time.
def r3(pto_time: float, total_time: float) -> bool:
 if pto_time <= total_time:
 return True
 else:
 return False

# The total operation duration must not be lower than the driving time.
def r4(total_time: float, driving_time: float) -> bool:
 if total_time >= driving_time:
 return True
 else:
 return False

# The payload cannot exceed the capacity of axle 2.
def r5(payload: float, axle_2_capacity: float) -> bool:
 if payload <= axle_2_capacity:
 return True
 else:
 return False

# The payload must always be smaller than or equal to the load on axle 3.
def r6(payload: float, load_on_axle_3: float) -> bool:
 if payload <= load_on_axle_3:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
The total operation duration must not be lower than the PTO operation time.
Driving time must always be less than or equal to the total operation time.
Stops with PTO engaged should never outnumber total stops.
The load supported by axle 1 cannot exceed that of axle 3.
";" # The vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance >= 20 and fuel_consumption / distance <= 0.2:
 return False
 else:
 return True

# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r2(distance: float, fuel_consumption_per_distance: float) -> bool:
 if distance >= 20 and fuel_consumption_per_distance > 0.4:
 return False
 else:
 return True

# The total operation duration must not be lower than the PTO operation time.
def r3(total_operation_duration: float, pto_operation_time: float) -> bool:
 if total_operation_duration >= pto_operation_time:
 return True
 else:
 return False

# Driving time must always be less than or equal to the total operation time.
def r4(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False

# Stops with PTO engaged should never outnumber total stops.
def r5(num_stops_pto_engaged: int, total_num_stops: int) -> bool:
 if num_stops_pto_engaged <= total_num_stops:
 return True
 else:
 return False

# The load supported by axle 1 cannot exceed that of axle 3.
def r6(load_axle_1: float, load_axle_3: float) -> bool:
 if load_axle_1 <= load_axle_3:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
The total operation durationmust not be lower than the driving time.
The number of stops where PTO is engaged must not exceed the overall stop count.
The weight on axle 1 cannot surpass the weight on axle 3.
The payload must always be smaller than or equal to the load on axle 3.
";" # When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance >= 20 and fuel_consumption / (distance / 60) >= 0.0833:
 return True
 else:
 return False

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r2(distance: float, fuel_consumption: float, total_fuel_consumption: float) -> bool:
 if distance >= 20 and total_fuel_consumption / distance >= 0.04:
 return True
 else:
 return False

# The total operation duration must not be lower than the driving time.
def r3(operation_duration: float, driving_time: float) -> bool:
 if operation_duration >= driving_time:
 return True
 else:
 return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r4(num_stops_pto: int, overall_stops: int) -> bool:
 if num_stops_pto <= overall_stops:
 return True
 else:
 return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r5(weight_axle1: float, weight_axle3: float) -> bool:
 if weight_axle1 <= weight_axle3:
 return True
 else:
 return False

# The payload must always be smaller than or equal to the load on axle 3.
def r6(payload: float, load_axle3: float) -> bool:
 if payload <= load_axle3:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
PTO operation time should be less than or equal to the total operation time.
Idle time must always be less than or equal to the total operation time.
The total operation durationmust not be lower than the driving time.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";" # When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(total_distance: float, avg_fuel_consumption: float) -> bool:
 if total_distance >= 20 and avg_fuel_consumption <= 5:
 return True
 else:
 return False

# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r2(total_distance: float, avg_fuel_consumption_per_distance: float) -> bool:
 if total_distance >= 20 and avg_fuel_consumption_per_distance >= 40:
 return True
 else:
 return False

# PTO operation time should be less than or equal to the total operation time.
def r3(pto_time: float, total_operation_time: float) -> bool:
 if pto_time <= total_operation_time:
 return True
 else:
 return False

# Idle time must always be less than or equal to the total operation time.
def r4(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# The total operation duration must not be lower than the driving time.
def r5(total_operation_time: float, driving_time: float) -> bool:
 if total_operation_time >= driving_time:
 return True
 else:
 return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r6(pto_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if total_operation_time >= pto_time + idle_time + driving_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
PTO operation time must be less than or equal to the total operation time.
Total operation time shouldn’t be lower than idle time.
The number of stops where PTO is engaged must not exceed the overall stop count.
The load supported by axle 1 cannot exceed that of axle 3.
The payload must not exceed the load carried by axle 3.
";" # If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance / 20 >= 1 and fuel_consumption / 5 <= 1:
 return True
 else:
 return False

# PTO operation time must be less than or equal to the total operation time.
def r2(pto_time: float, total_operation_time: float) -> bool:
 if pto_time <= total_operation_time:
 return True
 else:
 return False

# Total operation time shouldn’t be lower than idle time.
def r3(total_operation_time: float, idle_time: float) -> bool:
 if total_operation_time >= idle_time:
 return True
 else:
 return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r4(stop_count_with_pto: int, overall_stop_count: int) -> bool:
 if stop_count_with_pto <= overall_stop_count:
 return True
 else:
 return False

# The load supported by axle 1 cannot exceed that of axle 3.
def r5(load_axle_1: float, load_axle_3: float) -> bool:
 if load_axle_1 <= load_axle_3:
 return True
 else:
 return False

# The payload must not exceed the load carried by axle 3.
def r6(payload: float, load_axle_3: float) -> bool:
 if payload <= load_axle_3:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
PTO-engaged stops cannot exceed the total number of stops.
Payload must remain below or equal to the load carried by axle 2.
The payload must not exceed the load carried by axle 3.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";" # If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance >= 20 and fuel_consumption / distance <= 0.2:
 return False
 else:
 return True

# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r2(total_distance: float, total_fuel_consumed: float) -> bool:
 if total_distance >= 20 and total_fuel_consumed / total_distance >= 0.4:
 return False
 else:
 return True

# PTO-engaged stops cannot exceed the total number of stops.
def r3(pto_stops: int, total_stops: int) -> bool:
 if pto_stops <= total_stops:
 return True
 else:
 return False

# Payload must remain below or equal to the load carried by axle 2.
def r4(payload: float, axle_2_load: float) -> bool:
 if payload <= axle_2_load:
 return True
 else:
 return False

# The payload must not exceed the load carried by axle 3.
def r5(payload: float, axle_3_load: float) -> bool:
 if payload <= axle_3_load:
 return True
 else:
 return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r6(pto_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if pto_time + idle_time + driving_time <= total_operation_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
PTO operation time must be less than or equal to the total operation time.
Idle time should be less than or equal to the total operation time.
The total stop count must not be lower than the count of stops where PTO is engaged.
Axle 2's load must always be equal to or greater than the payload.
Axle 3's load must always be equal to or greater than the payload.
";" # For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r1(trip_length: float, fuel_consumption: float) -> bool:
 if trip_length >= 20 and fuel_consumption / trip_length * 100 <= 40:
 return True
 else:
 return False

# PTO operation time must be less than or equal to the total operation time.
def r2(pto_time: float, total_time: float) -> bool:
 if pto_time <= total_time:
 return True
 else:
 return False

# Idle time should be less than or equal to the total operation time.
def r3(idle_time: float, total_time: float) -> bool:
 if idle_time <= total_time:
 return True
 else:
 return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r4(stop_count: int, pto_stops: int) -> bool:
 if stop_count >= pto_stops:
 return True
 else:
 return False

# Axle 2's load must always be equal to or greater than the payload.
def r5(axle_2_load: float, payload: float) -> bool:
 if axle_2_load >= payload:
 return True
 else:
 return False

# Axle 3's load must always be equal to or greater than the payload.
def r6(axle_3_load: float, payload: float) -> bool:
 if axle_3_load >= payload:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
PTO operation time cannot be greater than the total operation time.
Driving time must always be less than or equal to the total operation time.
The total stop count must not be lower than the count of stops where PTO is engaged.
Payload must remain below or equal to the load carried by axle 2.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";" # If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance / 20 >= 1 and fuel_consumption / distance <= 0.25:
 return True
 else:
 return False

# PTO operation time cannot be greater than the total operation time.
def r2(pto_time: float, total_operation_time: float) -> bool:
 if pto_time <= total_operation_time:
 return True
 else:
 return False

# Driving time must always be less than or equal to the total operation time.
def r3(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r4(stop_count: int, pto_stop_count: int) -> bool:
 if stop_count >= pto_stop_count:
 return True
 else:
 return False

# Payload must remain below or equal to the load carried by axle 2.
def r5(payload: float, axle_2_load: float) -> bool:
 if payload <= axle_2_load:
 return True
 else:
 return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r6(pto_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if total_operation_time >= (pto_time + idle_time + driving_time):
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
Total operation time shouldn’t be lower than PTO operation time.
Idle time should be less than or equal to the total operation time.
The total stop count must not be lower than the count of stops where PTO is engaged.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";" # For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(journey_length: float, fuel_consumption_per_hour: float) -> bool:
 if journey_length >= 20 and fuel_consumption_per_hour <= 0.005:
 return True
 else:
 return False

# Total operation time shouldn’t be lower than PTO operation time.
def r2(total_operation_time: float, pto_operation_time: float) -> bool:
 if total_operation_time >= pto_operation_time:
 return True
 else:
 return False

# Idle time should be less than or equal to the total operation time.
def r3(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r4(total_stop_count: int, pto_engaged_stop_count: int) -> bool:
 if total_stop_count >= pto_engaged_stop_count:
 return True
 else:
 return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def r5(load_axle_1: float, load_axle_2: float) -> bool:
 if load_axle_1 <= load_axle_2:
 return True
 else:
 return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r6(total_operation_time: float, pto_operation_time: float, idle_time: float, driving_time: float) -> bool:
 if total_operation_time >= (pto_operation_time + idle_time + driving_time):
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
The total operation duration must not be lower than the PTO operation time.
The total operation duration must not be lower than the idle time.
Driving time cannot be greater than the total operation time.
The weight on axle 1 cannot surpass the weight on axle 2.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";" # The vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r1(hourly_fuel_consumption: float, distance: float) -> bool:
 if distance >= 20 and hourly_fuel_consumption <= 0.005:
 return False
 else:
 return True

# The total operation duration must not be lower than the PTO operation time.
def r2(total_operation_duration: float, pto_operation_time: float) -> bool:
 if total_operation_duration < pto_operation_time:
 return False
 else:
 return True

# The total operation duration must not be lower than the idle time.
def r3(total_operation_duration: float, idle_time: float) -> bool:
 if total_operation_duration < idle_time:
 return False
 else:
 return True

# Driving time cannot be greater than the total operation time.
def r4(driving_time: float, total_operation_time: float) -> bool:
 if driving_time > total_operation_time:
 return False
 else:
 return True

# The weight on axle 1 cannot surpass the weight on axle 2.
def r5(weight_axle1: float, weight_axle2: float) -> bool:
 if weight_axle1 > weight_axle2:
 return False
 else:
 return True

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r6(pto_operation_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if pto_operation_time + idle_time + driving_time > total_operation_time:
 return False
 else:
 return True"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: The total operation duration must not be lower than the PTO operation time.
The total operation duration must not be lower than the idle time.
Total operation time should shouldn’t be lower than driving time.
Stops with PTO engaged should never outnumber total stops.
The payload must not exceed the load carried by axle 3.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";" # The total operation duration must not be lower than the PTO operation time.
def r1(total_duration: float, pto_time: float) -> bool:
 if total_duration >= pto_time:
 return True
 else:
 return False

# The total operation duration must not be lower than the idle time.
def r2(total_duration: float, idle_time: float) -> bool:
 if total_duration >= idle_time:
 return True
 else:
 return False

# Total operation time should not be lower than driving time.
def r3(total_duration: float, driving_time: float) -> bool:
 if total_duration >= driving_time:
 return True
 else:
 return False

# Stops with PTO engaged should never outnumber total stops.
def r4(pto_stops: int, total_stops: int) -> bool:
 if pto_stops <= total_stops:
 return True
 else:
 return False

# The payload must not exceed the load carried by axle 3.
def r5(payload: float, axle_3_load: float) -> bool:
 if payload <= axle_3_load:
 return True
 else:
 return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r6(pto_time: float, idle_time: float, driving_time: float) -> bool:
 if pto_time + idle_time + driving_time <= total_duration:
 return False
 else:
 return True"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
PTO operation time should be less than or equal to the total operation time.
Total operation time should shouldn’t be lower than driving time.
Stops with PTO engaged cannot outnumber the total stops.
The payload must always be smaller than or equal to the load on axle 2.
The payload must always be smaller than or equal to the load on axle 3.
";" # When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance >= 20 and fuel_consumption <= (40 * 0.01):
 return True
 else:
 return False

# PTO operation time should be less than or equal to the total operation time.
def r2(pto_time: float, total_operation_time: float) -> bool:
 if pto_time <= total_operation_time:
 return True
 else:
 return False

# Total operation time should not be lower than driving time.
def r3(total_operation_time: float, driving_time: float) -> bool:
 if total_operation_time >= driving_time:
 return True
 else:
 return False

# Stops with PTO engaged cannot outnumber the total stops.
def r4(pto_stops_count: int, total_stops_count: int) -> bool:
 if pto_stops_count <= total_stops_count:
 return True
 else:
 return False

# The payload must always be smaller than or equal to the load on axle 2.
def r5(payload: float, load_on_axle_2: float) -> bool:
 if payload <= load_on_axle_2:
 return True
 else:
 return False

# The payload must always be smaller than or equal to the load on axle 3.
def r6(payload: float, load_on_axle_3: float) -> bool:
 if payload <= load_on_axle_3:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: PTO operation time must be less than or equal to the total operation time.
Idle time must always be less than or equal to the total operation time.
The total operation durationmust not be lower than the driving time.
The load supported by axle 1 cannot exceed that of axle 3.
The payload must always be smaller than or equal to the load on axle 2.
Total operation time should be at least the sum of PTO, idle, and driving times.
";" # PTO operation time must be less than or equal to the total operation time.
def r1(pto: float, total: float) -> bool:
 if pto <= total:
 return True
 else:
 return False

# Idle time must always be less than or equal to the total operation time.
def r2(idle: float, total: float) -> bool:
 if idle <= total:
 return True
 else:
 return False

# The total operation duration must not be lower than the driving time.
def r3(total: float, driving: float) -> bool:
 if total >= driving:
 return True
 else:
 return False

# The load supported by axle 1 cannot exceed that of axle 3.
def r4(axle1: float, axle3: float) -> bool:
 if axle1 <= axle3:
 return True
 else:
 return False

# The payload must always be smaller than or equal to the load on axle 2.
def r5(payload: float, axle2: float) -> bool:
 if payload <= axle2:
 return True
 else:
 return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r6(pto: float, idle: float, driving: float, total: float) -> bool:
 if total >= pto + idle + driving:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: The total operation duration must not be lower than the idle time.
Driving time cannot be greater than the total operation time.
Stops with PTO engaged should never outnumber total stops.
The weight on axle 1 cannot surpass the weight on axle 2.
The weight on axle 1 cannot surpass the weight on axle 3.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";" # The total operation duration must not be lower than the idle time.
def r1(operation_duration: float, idle_time: float) -> bool:
 if operation_duration >= idle_time:
 return True
 else:
 return False

# Driving time cannot be greater than the total operation time.
def r2(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False

# Stops with PTO engaged should never outnumber total stops.
def r3(pto_stops: int, total_stops: int) -> bool:
 if pto_stops <= total_stops:
 return True
 else:
 return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r4(weight_axle1: float, weight_axle2: float) -> bool:
 if weight_axle1 <= weight_axle2:
 return True
 else:
 return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r5(weight_axle1: float, weight_axle3: float) -> bool:
 if weight_axle1 <= weight_axle3:
 return True
 else:
 return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r6(pto_duration: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if total_operation_time >= pto_duration + idle_time + driving_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: Idle time cannot be greater than the total operation time.
Driving time should be less than or equal to the total operation time.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
The load on axle 1 must not surpass the load on axle 3.
Payload must remain below or equal to the load carried by axle 2.
The payload must always be smaller than or equal to the load on axle 3.
";" # Idle time cannot be greater than the total operation time.
def r1(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# Driving time should be less than or equal to the total operation time.
def r2(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def r3(load_axle1: float, load_axle2: float) -> bool:
 if load_axle1 <= load_axle2:
 return True
 else:
 return False

# The load on axle 1 must not surpass the load on axle 3.
def r4(load_axle1: float, load_axle3: float) -> bool:
 if load_axle1 <= load_axle3:
 return True
 else:
 return False

# Payload must remain below or equal to the load carried by axle 2.
def r5(payload: float, load_axle2: float) -> bool:
 if payload <= load_axle2:
 return True
 else:
 return False

# The payload must always be smaller than or equal to the load on axle 3.
def r6(payload: float, load_axle3: float) -> bool:
 if payload <= load_axle3:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
Total operation time should shouldn’t be lower than driving time.
The number of stops where PTO is engaged must not exceed the overall stop count.
The weight on axle 1 cannot surpass the weight on axle 3.
Payload must remain below or equal to the load carried by axle 2.
Payload must remain below or equal to the load carried by axle 3.
";" # The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance >= 20 and fuel_consumption <= 0.4:
 return True
 else:
 return False

# Total operation time should not be lower than driving time.
def r2(total_operation_time: float, driving_time: float) -> bool:
 if total_operation_time >= driving_time:
 return True
 else:
 return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r3(num_stops_pto: int, num_stops_total: int) -> bool:
 if num_stops_pto <= num_stops_total:
 return True
 else:
 return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r4(weight_axle1: float, weight_axle3: float) -> bool:
 if weight_axle1 <= weight_axle3:
 return True
 else:
 return False

# Payload must remain below or equal to the load carried by axle 2.
def r5(payload: float, load_axle2: float) -> bool:
 if payload <= load_axle2:
 return True
 else:
 return False

# Payload must remain below or equal to the load carried by axle 3.
def r6(payload: float, load_axle3: float) -> bool:
 if payload <= load_axle3:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
Total operation time shouldn’t be lower than PTO operation time.
PTO-engaged stops cannot exceed the total number of stops.
The load on axle 1 must not surpass the load on axle 2.
The weight on axle 1 cannot surpass the weight on axle 3.
Total operation time should be at least the sum of PTO, idle, and driving times.
";" # If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r1(vehicle_distance: float, fuel_consumption: float) -> bool:
 if fuel_consumption * 100 / vehicle_distance <= 40:
 return False
 else:
 return True

# Total operation time shouldn’t be lower than PTO operation time.
def r2(total_operation_time: float, pto_operation_time: float) -> bool:
 if total_operation_time < pto_operation_time:
 return False
 else:
 return True

# PTO-engaged stops cannot exceed the total number of stops.
def r3(pto_engaged_stops: int, total_stops: int) -> bool:
 if pto_engaged_stops > total_stops:
 return False
 else:
 return True

# The load on axle 1 must not surpass the load on axle 2.
def r4(load_axle1: float, load_axle2: float) -> bool:
 if load_axle1 > load_axle2:
 return False
 else:
 return True

# The weight on axle 1 cannot surpass the weight on axle 3.
def r5(weight_axle1: float, weight_axle3: float) -> bool:
 if weight_axle1 > weight_axle3:
 return False
 else:
 return True

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r6(total_operation_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
 if total_operation_time < (pto_time + idle_time + driving_time):
 return False
 else:
 return True"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
PTO operation time must be less than or equal to the total operation time.
Idle time should be less than or equal to the total operation time.
The weight on axle 1 cannot surpass the weight on axle 3.
Axle 2's load must always be equal to or greater than the payload.
";" # If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance >= 20:
 if fuel_consumption / (distance / 100) >= 0.05:
 return True
 else:
 return False

# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r2(distance: float, fuel_consumption: float) -> bool:
 if distance >= 20:
 if fuel_consumption / (distance / 100) >= 0.04:
 return True
 else:
 return False

# PTO operation time must be less than or equal to the total operation time.
def r3(pto_time: float, total_time: float) -> bool:
 if pto_time <= total_time:
 return True
 else:
 return False

# Idle time should be less than or equal to the total operation time.
def r4(idle_time: float, total_time: float) -> bool:
 if idle_time <= total_time:
 return True
 else:
 return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r5(axle1_weight: float, axle3_weight: float) -> bool:
 if axle1_weight <= axle3_weight:
 return True
 else:
 return False

# Axle 2's load must always be equal to or greater than the payload.
def r6(axle2_load: float, payload: float) -> bool:
 if axle2_load >= payload:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
Axle 1's load cannot exceed Axle 3's load.
Payload must remain below or equal to the load carried by axle 2.
The payload must always be smaller than or equal to the load on axle 3.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";" # The vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r1(vehicle_fuel_consumption: float, traveled_distance: float) -> bool:
 if traveled_distance >= 20 and vehicle_fuel_consumption <= (5 / 3600):
 return False
 else:
 return True

# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r2(vehicle_fuel_consumption_per_distance: float, traveled_distance: float) -> bool:
 if traveled_distance >= 20 and vehicle_fuel_consumption_per_distance > 0.04:
 return False
 else:
 return True

# Axle 1's load cannot exceed Axle 3's load.
def r3(axle_1_load: float, axle_3_load: float) -> bool:
 if axle_1_load <= axle_3_load:
 return True
 else:
 return False

# Payload must remain below or equal to the load carried by axle 2.
def r4(payload: float, axle_2_load: float) -> bool:
 if payload <= axle_2_load:
 return True
 else:
 return False

# The payload must always be smaller than or equal to the load on axle 3.
def r5(payload: float, axle_3_load: float) -> bool:
 if payload <= axle_3_load:
 return True
 else:
 return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r6(total_operation_time: float, pto_operation_time: float, idle_time: float, driving_time: float) -> bool:
 if total_operation_time >= (pto_operation_time + idle_time + driving_time):
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
PTO operation time should be less than or equal to the total operation time.
Idle time should be less than or equal to the total operation time.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
The weight on axle 1 cannot surpass the weight on axle 3.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";" # The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r1(total_distance: float, fuel_consumption: float) -> bool:
 if total_distance >= 20 and fuel_consumption * 100 / total_distance <= 40:
 return True
 else:
 return False

# PTO operation time should be less than or equal to the total operation time.
def r2(pto_time: float, total_operation_time: float) -> bool:
 if pto_time <= total_operation_time:
 return True
 else:
 return False

# Idle time should be less than or equal to the total operation time.
def r3(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def r4(load_axle1: float, load_axle2: float) -> bool:
 if load_axle1 <= load_axle2:
 return True
 else:
 return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r5(weight_axle1: float, weight_axle3: float) -> bool:
 if weight_axle1 <= weight_axle3:
 return True
 else:
 return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r6(pto_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if pto_time + idle_time + driving_time <= total_operation_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
Total operation time shouldn’t be lower than PTO operation time.
The total stop count must not be lower than the count of stops where PTO is engaged.
The load on axle 1 must not surpass the load on axle 3.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";" # When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(total_distance: float, hourly_consumption: float) -> bool:
 if total_distance >= 20 and hourly_consumption <= 0.2:
 return True
 else:
 return False

# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r2(total_distance: float, avg_consumption_100km: float) -> bool:
 if total_distance >= 20 and avg_consumption_100km >= 0.4:
 return True
 else:
 return False

# Total operation time shouldn’t be lower than PTO operation time.
def r3(operation_time: float, pto_operation_time: float) -> bool:
 if operation_time >= pto_operation_time:
 return True
 else:
 return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r4(total_stops: int, pto_stops: int) -> bool:
 if total_stops >= pto_stops:
 return True
 else:
 return False

# The load on axle 1 must not surpass the load on axle 3.
def r5(load_axle1: float, load_axle3: float) -> bool:
 if load_axle1 <= load_axle3:
 return True
 else:
 return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r6(operation_time: float, pto_operation_time: float, idle_time: float, driving_time: float) -> bool:
 if operation_time >= (pto_operation_time + idle_time + driving_time):
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
Idle time should be less than or equal to the total operation time.
Stops with PTO engaged should never outnumber total stops.
The load supported by axle 1 cannot exceed that of axle 2.
The payload must always be smaller than or equal to the load on axle 3.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";" # The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r1(total_distance: float, average_fuel_consumption: float) -> bool:
 if total_distance >= 20 and average_fuel_consumption * 100 >= 40:
 return True
 else:
 return False

# Idle time should be less than or equal to the total operation time.
def r2(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# Stops with PTO engaged should never outnumber total stops.
def r3(pto_stops: int, total_stops: int) -> bool:
 if pto_stops <= total_stops:
 return True
 else:
 return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r4(axle_1_load: float, axle_2_load: float) -> bool:
 if axle_1_load <= axle_2_load:
 return True
 else:
 return False

# The payload must always be smaller than or equal to the load on axle 3.
def r5(payload: float, axle_3_load: float) -> bool:
 if payload <= axle_3_load:
 return True
 else:
 return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r6(pto_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if total_operation_time >= pto_time + idle_time + driving_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
PTO operation time should be less than or equal to the total operation time.
Idle time should be less than or equal to the total operation time.
Driving time cannot be greater than the total operation time.
Axle 1's load cannot exceed Axle 2's load.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
";" # The vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r1(fuel_consumption: float, distance: float) -> bool:
 if distance >= 20 and fuel_consumption <= 0.005:
 return False
 else:
 return True

# PTO operation time should be less than or equal to the total operation time.
def r2(pto_time: float, total_time: float) -> bool:
 if pto_time <= total_time:
 return True
 else:
 return False

# Idle time should be less than or equal to the total operation time.
def r3(idle_time: float, total_time: float) -> bool:
 if idle_time <= total_time:
 return True
 else:
 return False

# Driving time cannot be greater than the total operation time.
def r4(driving_time: float, total_time: float) -> bool:
 if driving_time <= total_time:
 return True
 else:
 return False

# Axle 1's load cannot exceed Axle 2's load.
def r5(axle1_load: float, axle2_load: float) -> bool:
 if axle1_load <= axle2_load:
 return True
 else:
 return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r6(axle1_load: float, axle3_load: float) -> bool:
 if axle1_load <= axle3_load:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
The total operation durationmust not be lower than the driving time.
Stops with PTO engaged cannot outnumber the total stops.
Axle 1's load cannot exceed Axle 3's load.
The payload must always be smaller than or equal to the load on axle 3.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";" # The vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r1(hourly_fuel_consumption: float, distance: float) -> bool:
 if distance >= 20 and hourly_fuel_consumption <= 5:
 return False
 else:
 return True

# The total operation duration must not be lower than the driving time.
def r2(total_operation_duration: float, driving_time: float) -> bool:
 if total_operation_duration < driving_time:
 return False
 else:
 return True

# Stops with PTO engaged cannot outnumber the total stops.
def r3(num_stops_pto_engaged: int, total_num_stops: int) -> bool:
 if num_stops_pto_engaged > total_num_stops:
 return False
 else:
 return True

# Axle 1's load cannot exceed Axle 3's load.
def r4(axle_1_load: float, axle_3_load: float) -> bool:
 if axle_1_load > axle_3_load:
 return False
 else:
 return True

# The payload must always be smaller than or equal to the load on axle 3.
def r5(payload: float, axle_3_load: float) -> bool:
 if payload > axle_3_load:
 return False
 else:
 return True

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r6(pto_time: float, idle_time: float, driving_time: float, total_operation_duration: float) -> bool:
 if total_operation_duration < (pto_time + idle_time + driving_time):
 return False
 else:
 return True"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
The total operation duration must not be lower than the PTO operation time.
The total operation durationmust not be lower than the driving time.
Axle 1's load cannot exceed Axle 2's load.
The weight on axle 1 cannot surpass the weight on axle 3.
Axle 3's load must always be equal to or greater than the payload.
";" # For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(journey_length: float, fuel_consumption_per_hour: float) -> bool:
 if journey_length >= 20 and fuel_consumption_per_hour <= 0.2:
 return True
 else:
 return False

# The total operation duration must not be lower than the PTO operation time.
def r2(total_operation_duration: float, pto_operation_time: float) -> bool:
 if total_operation_duration >= pto_operation_time:
 return True
 else:
 return False

# The total operation duration must not be lower than the driving time.
def r3(total_operation_duration: float, driving_time: float) -> bool:
 if total_operation_duration >= driving_time:
 return True
 else:
 return False

# Axle 1's load cannot exceed Axle 2's load.
def r4(axle_1_load: float, axle_2_load: float) -> bool:
 if axle_1_load <= axle_2_load:
 return True
 else:
 return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r5(axle_1_weight: float, axle_3_weight: float) -> bool:
 if axle_1_weight <= axle_3_weight:
 return True
 else:
 return False

# Axle 3's load must always be equal to or greater than the payload.
def r6(axle_3_load: float, payload: float) -> bool:
 if axle_3_load >= payload:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
Idle time cannot be greater than the total operation time.
Driving time must always be less than or equal to the total operation time.
Stops with PTO engaged cannot outnumber the total stops.
Total operation time should be at least the sum of PTO, idle, and driving times.
";" # If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
def r1(distance: float, fuel_consumption_rate: float) -> bool:
 if distance >= 20 and fuel_consumption_rate <= (40 / 100 * distance) / 60:
 return True
 else:
 return False

# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def r2(distance: float, fuel_consumption_per_distance: float) -> bool:
 if distance >= 20 and fuel_consumption_per_distance >= 40:
 return True
 else:
 return False

# Idle time cannot be greater than the total operation time.
def r3(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# Driving time must always be less than or equal to the total operation time.
def r4(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False

# Stops with PTO engaged cannot outnumber the total stops.
def r5(pto_stops: int, total_stops: int) -> bool:
 if pto_stops <= total_stops:
 return True
 else:
 return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r6(pto_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if pto_time + idle_time + driving_time <= total_operation_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
Total operation time shouldn’t be lower than idle time.
The total stop count must not be lower than the count of stops where PTO is engaged.
The weight on axle 1 cannot surpass the weight on axle 2.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
The payload must always be smaller than or equal to the load on axle 3.
";" # For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r1(trip_length: float, fuel_consumption: float) -> bool:
 if trip_length >= 20 and fuel_consumption / trip_length * 100 <= 40:
 return True
 else:
 return False

# Total operation time shouldn’t be lower than idle time.
def r2(operation_time: float, idle_time: float) -> bool:
 if operation_time >= idle_time:
 return True
 else:
 return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r3(stop_count: int, pto_stops: int) -> bool:
 if stop_count >= pto_stops:
 return True
 else:
 return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r4(weight_axle1: float, weight_axle2: float) -> bool:
 if weight_axle1 <= weight_axle2:
 return True
 else:
 return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r5(load_axle1: float, load_axle3: float) -> bool:
 if load_axle1 <= load_axle3:
 return True
 else:
 return False

# The payload must always be smaller than or equal to the load on axle 3.
def r6(payload: float, load_axle3: float) -> bool:
 if payload <= load_axle3:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
Total operation time shouldn’t be lower than idle time.
Stops with PTO engaged cannot outnumber the total stops.
Axle 1's load cannot exceed Axle 2's load.
Payload must remain below or equal to the load carried by axle 3.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";" # For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(total_distance: float, avg_fuel_consumption_per_hour: float) -> bool:
 if total_distance / (avg_fuel_consumption_per_hour * 60) >= 20 and avg_fuel_consumption_per_hour >= 0.05:
 return True
 else:
 return False

# Total operation time shouldn’t be lower than idle time.
def r2(operation_time: float, idle_time: float) -> bool:
 if operation_time >= idle_time:
 return True
 else:
 return False

# Stops with PTO engaged cannot outnumber the total stops.
def r3(num_stops_with_pto: int, total_num_stops: int) -> bool:
 if num_stops_with_pto <= total_num_stops:
 return True
 else:
 return False

# Axle 1's load cannot exceed Axle 2's load.
def r4(axle_1_load: float, axle_2_load: float) -> bool:
 if axle_1_load <= axle_2_load:
 return True
 else:
 return False

# Payload must remain below or equal to the load carried by axle 3.
def r5(payload: float, axle_3_load: float) -> bool:
 if payload <= axle_3_load:
 return True
 else:
 return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r6(pto_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if total_operation_time >= pto_time + idle_time + driving_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
Total operation time shouldn’t be lower than idle time.
PTO-engaged stops cannot exceed the total number of stops.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
The payload cannot exceed the capacity of axle 2.
Total operation time should be at least the sum of PTO, idle, and driving times.
";" # For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(journey_length: float, fuel_consumption_per_hour: float) -> bool:
 if journey_length >= 20 and fuel_consumption_per_hour <= 0.005:
 return True
 else:
 return False

# Total operation time shouldn’t be lower than idle time.
def r2(operation_time: float, idle_time: float) -> bool:
 if operation_time >= idle_time:
 return True
 else:
 return False

# PTO-engaged stops cannot exceed the total number of stops.
def r3(pto_stops: int, total_stops: int) -> bool:
 if pto_stops <= total_stops:
 return True
 else:
 return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def r4(load_axle1: float, load_axle2: float) -> bool:
 if load_axle1 <= load_axle2:
 return True
 else:
 return False

# The payload cannot exceed the capacity of axle 2.
def r5(payload: float, axle2_capacity: float) -> bool:
 if payload <= axle2_capacity:
 return True
 else:
 return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r6(pto_time: float, idle_time: float, driving_time: float, operation_time: float) -> bool:
 if operation_time >= pto_time + idle_time + driving_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
The total operation durationmust not be lower than the driving time.
The weight on axle 1 cannot surpass the weight on axle 2.
The load supported by axle 1 cannot exceed that of axle 3.
Total operation time should be at least the sum of PTO, idle, and driving times.
";" # The vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r1(vehicle_fuel_consumption: float, distance: float) -> bool:
 if distance >= 20 and vehicle_fuel_consumption / distance <= 0.2:
 return False
 else:
 return True

# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r2(vehicle_fuel_consumption: float, distance: float) -> bool:
 if distance >= 20 and vehicle_fuel_consumption / distance < 0.4:
 return False
 else:
 return True

# The total operation duration must not be lower than the driving time.
def r3(operation_duration: float, driving_time: float) -> bool:
 if operation_duration >= driving_time:
 return True
 else:
 return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r4(weight_axle1: float, weight_axle2: float) -> bool:
 if weight_axle1 <= weight_axle2:
 return True
 else:
 return False

# The load supported by axle 1 cannot exceed that of axle 3.
def r5(load_axle1: float, load_axle3: float) -> bool:
 if load_axle1 <= load_axle3:
 return True
 else:
 return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r6(pto_time: float, idle_time: float, driving_time: float, operation_time: float) -> bool:
 if operation_time >= pto_time + idle_time + driving_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
The total operation duration must not be lower than the idle time.
PTO-engaged stops cannot exceed the total number of stops.
Axle 2's load must always be equal to or greater than the payload.
The payload cannot exceed the capacity of axle 3.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";" # If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
def r1(distance: float, fuel_consumption_rate: float) -> bool:
 if distance / 60 >= 20 and fuel_consumption_rate <= 5:
 return True
 else:
 return False

# The total operation duration must not be lower than the idle time.
def r2(operation_duration: float, idle_time: float) -> bool:
 if operation_duration >= idle_time:
 return True
 else:
 return False

# PTO-engaged stops cannot exceed the total number of stops.
def r3(pto_stops: int, total_stops: int) -> bool:
 if pto_stops <= total_stops:
 return True
 else:
 return False

# Axle 2's load must always be equal to or greater than the payload.
def r4(axle_2_load: float, payload: float) -> bool:
 if axle_2_load >= payload:
 return True
 else:
 return False

# The payload cannot exceed the capacity of axle 3.
def r5(payload: float, axle_3_capacity: float) -> bool:
 if payload <= axle_3_capacity:
 return True
 else:
 return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r6(pto_time: float, idle_time: float, driving_time: float, operation_duration: float) -> bool:
 if pto_time + idle_time + driving_time <= operation_duration:
 return False
 else:
 return True"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
Total operation time shouldn’t be lower than PTO operation time.
The load on axle 1 must not surpass the load on axle 3.
Payload must remain below or equal to the load carried by axle 2.
The payload must always be smaller than or equal to the load on axle 3.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";" # If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
def r1(distance: float, fuel_consumption_rate: float) -> bool:
 if distance / 100 >= 20 and fuel_consumption_rate / 3600 <= 0.005:
 return True
 else:
 return False

# Total operation time shouldn’t be lower than PTO operation time.
def r2(total_operation_time: float, pto_operation_time: float) -> bool:
 if total_operation_time >= pto_operation_time:
 return True
 else:
 return False

# The load on axle 1 must not surpass the load on axle 3.
def r3(load_axle1: float, load_axle3: float) -> bool:
 if load_axle1 <= load_axle3:
 return True
 else:
 return False

# Payload must remain below or equal to the load carried by axle 2.
def r4(payload: float, load_axle2: float) -> bool:
 if payload <= load_axle2:
 return True
 else:
 return False

# The payload must always be smaller than or equal to the load on axle 3.
def r5(payload: float, load_axle3: float) -> bool:
 if payload <= load_axle3:
 return True
 else:
 return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r6(total_operation_time: float, pto_operation_time: float, idle_time: float, driving_time: float) -> bool:
 if total_operation_time >= (pto_operation_time + idle_time + driving_time):
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: PTO operation time should be less than or equal to the total operation time.
Driving time must always be less than or equal to the total operation time.
The number of stops where PTO is engaged must not exceed the overall stop count.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
The payload must always be smaller than or equal to the load on axle 3.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";" # PTO operation time should be less than or equal to the total operation time.
def r1(pto_operation_time: float, total_operation_time: float) -> bool:
 if pto_operation_time / total_operation_time <= 1:
 return True
 else:
 return False

# Driving time must always be less than or equal to the total operation time.
def r2(driving_time: float, total_operation_time: float) -> bool:
 if driving_time / total_operation_time <= 1:
 return True
 else:
 return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r3(pto_stops_count: int, overall_stops_count: int) -> bool:
 if pto_stops_count <= overall_stops_count:
 return True
 else:
 return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def r4(load_axle_1: float, load_axle_2: float) -> bool:
 if load_axle_1 <= load_axle_2:
 return True
 else:
 return False

# The payload must always be smaller than or equal to the load on axle 3.
def r5(payload: float, load_axle_3: float) -> bool:
 if payload <= load_axle_3:
 return True
 else:
 return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r6(pto_operation_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if (pto_operation_time + idle_time + driving_time) / total_operation_time <= 1:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
PTO operation time must be less than or equal to the total operation time.
The total operation durationmust not be lower than the driving time.
The load supported by axle 1 cannot exceed that of axle 2.
Payload must remain below or equal to the load carried by axle 2.
The payload must always be smaller than or equal to the load on axle 3.
";" # When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(km: float, fuel_consumption: float) -> bool:
 if km >= 20 and fuel_consumption <= 0.2:
 return True
 else:
 return False

# PTO operation time must be less than or equal to the total operation time.
def r2(pto_time: float, total_operation_time: float) -> bool:
 if pto_time <= total_operation_time:
 return True
 else:
 return False

# The total operation duration must not be lower than the driving time.
def r3(total_operation_time: float, driving_time: float) -> bool:
 if total_operation_time >= driving_time:
 return True
 else:
 return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r4(axle1_load: float, axle2_load: float) -> bool:
 if axle1_load <= axle2_load:
 return True
 else:
 return False

# Payload must remain below or equal to the load carried by axle 2.
def r5(payload: float, axle2_load: float) -> bool:
 if payload <= axle2_load:
 return True
 else:
 return False

# The payload must always be smaller than or equal to the load on axle 3.
def r6(payload: float, axle3_load: float) -> bool:
 if payload <= axle3_load:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: Idle time should be less than or equal to the total operation time.
The total operation durationmust not be lower than the driving time.
The number of stops where PTO is engaged must not exceed the overall stop count.
The weight on axle 1 cannot surpass the weight on axle 3.
Payload must remain below or equal to the load carried by axle 2.
Axle 3's load must always be equal to or greater than the payload.
";" # Idle time should be less than or equal to the total operation time.
def r1(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# The total operation duration must not be lower than the driving time.
def r2(total_operation_duration: float, driving_time: float) -> bool:
 if total_operation_duration >= driving_time:
 return True
 else:
 return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r3(num_stops_pto_engaged: int, overall_stop_count: int) -> bool:
 if num_stops_pto_engaged <= overall_stop_count:
 return True
 else:
 return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r4(weight_axle_1: float, weight_axle_3: float) -> bool:
 if weight_axle_1 <= weight_axle_3:
 return True
 else:
 return False

# Payload must remain below or equal to the load carried by axle 2.
def r5(payload: float, load_axle_2: float) -> bool:
 if payload <= load_axle_2:
 return True
 else:
 return False

# Axle 3's load must always be equal to or greater than the payload.
def r6(payload: float, load_axle_3: float) -> bool:
 if load_axle_3 >= payload:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
Driving time cannot be greater than the total operation time.
PTO-engaged stops cannot exceed the total number of stops.
The load supported by axle 1 cannot exceed that of axle 2.
Payload must remain below or equal to the load carried by axle 3.
";" # When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(total_distance: float, hourly_consumption: float) -> bool:
 if total_distance >= 20 and hourly_consumption <= 0.2:
 return True
 else:
 return False

# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r2(total_distance: float, avg_consumption: float) -> bool:
 if total_distance >= 20 and avg_consumption >= 0.4:
 return True
 else:
 return False

# Driving time cannot be greater than the total operation time.
def r3(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False

# PTO-engaged stops cannot exceed the total number of stops.
def r4(pto_stops: int, total_stops: int) -> bool:
 if pto_stops <= total_stops:
 return True
 else:
 return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r5(axle1_load: float, axle2_load: float) -> bool:
 if axle1_load <= axle2_load:
 return True
 else:
 return False

# Payload must remain below or equal to the load carried by axle 3.
def r6(payload: float, axle3_load: float) -> bool:
 if payload <= axle3_load:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: Driving time must always be less than or equal to the total operation time.
PTO-engaged stops cannot exceed the total number of stops.
The load supported by axle 1 cannot exceed that of axle 2.
The payload must always be smaller than or equal to the load on axle 2.
The payload must not exceed the load carried by axle 3.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";" # Driving time must always be less than or equal to the total operation time.
def r1(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False

# PTO-engaged stops cannot exceed the total number of stops.
def r2(pto_stops: int, total_stops: int) -> bool:
 if pto_stops <= total_stops:
 return True
 else:
 return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r3(axle1_load: float, axle2_load: float) -> bool:
 if axle1_load <= axle2_load:
 return True
 else:
 return False

# The payload must always be smaller than or equal to the load on axle 2.
def r4(payload: float, axle2_load: float) -> bool:
 if payload <= axle2_load:
 return True
 else:
 return False

# The payload must not exceed the load carried by axle 3.
def r5(payload: float, axle3_load: float) -> bool:
 if payload <= axle3_load:
 return True
 else:
 return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r6(pto_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if pto_time + idle_time + driving_time <= total_operation_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
The total operation duration must not be lower than the idle time.
Stops with PTO engaged should never outnumber total stops.
The load on axle 1 must not surpass the load on axle 2.
The payload must not exceed the load carried by axle 3.
";" # When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance >= 20 and fuel_consumption <= (5/3.6): # 5 dm³ to dm³/h conversion
 return True
 else:
 return False

# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r2(distance: float, fuel_consumption: float) -> bool:
 if distance >= 20 and fuel_consumption >= (40/100):
 return True
 else:
 return False

# The total operation duration must not be lower than the idle time.
def r3(operation_duration: float, idle_time: float) -> bool:
 if operation_duration >= idle_time:
 return True
 else:
 return False

# Stops with PTO engaged should never outnumber total stops.
def r4(num_stops_pto_engaged: int, total_stops: int) -> bool:
 if num_stops_pto_engaged <= total_stops:
 return True
 else:
 return False

# The load on axle 1 must not surpass the load on axle 2.
def r5(load_axle1: float, load_axle2: float) -> bool:
 if load_axle1 <= load_axle2:
 return True
 else:
 return False

# The payload must not exceed the load carried by axle 3.
def r6(payload: float, load_axle3: float) -> bool:
 if payload <= load_axle3:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
Axle 1's load cannot exceed Axle 2's load.
The load on axle 1 must not surpass the load on axle 3.
The payload must not exceed the load carried by axle 2.
The payload must not exceed the load carried by axle 3.
";" # If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance >= 20:
 if fuel_consumption / (distance / 100) <= 0.05:
 return False
 else:
 return True

# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def r2(distance: float, fuel_consumption: float) -> bool:
 if distance >= 20:
 if fuel_consumption / distance >= 0.04:
 return True
 else:
 return False

# Axle 1's load cannot exceed Axle 2's load.
def r3(axle1_load: float, axle2_load: float) -> bool:
 if axle1_load <= axle2_load:
 return True
 else:
 return False

# The load on axle 1 must not surpass the load on axle 3.
def r4(axle1_load: float, axle3_load: float) -> bool:
 if axle1_load <= axle3_load:
 return True
 else:
 return False

# The payload must not exceed the load carried by axle 2.
def r5(payload: float, axle2_load: float) -> bool:
 if payload <= axle2_load:
 return True
 else:
 return False

# The payload must not exceed the load carried by axle 3.
def r6(payload: float, axle3_load: float) -> bool:
 if payload <= axle3_load:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
Total operation time shouldn’t be lower than PTO operation time.
PTO-engaged stops cannot exceed the total number of stops.
The load on axle 1 must not surpass the load on axle 2.
Axle 2's load must always be equal to or greater than the payload.
The payload must always be smaller than or equal to the load on axle 3.
";" # When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance >= 20 and fuel_consumption <= (40 * 0.01):
 return False
 else:
 return True

# Total operation time shouldn’t be lower than PTO operation time.
def r2(total_operation_time: float, pto_operation_time: float) -> bool:
 if total_operation_time >= pto_operation_time:
 return True
 else:
 return False

# PTO-engaged stops cannot exceed the total number of stops.
def r3(pto_engaged_stops: int, total_stops: int) -> bool:
 if pto_engaged_stops <= total_stops:
 return True
 else:
 return False

# The load on axle 1 must not surpass the load on axle 2.
def r4(axle_1_load: float, axle_2_load: float) -> bool:
 if axle_1_load <= axle_2_load:
 return True
 else:
 return False

# Axle 2's load must always be equal to or greater than the payload.
def r5(axle_2_load: float, payload: float) -> bool:
 if axle_2_load >= payload:
 return True
 else:
 return False

# The payload must always be smaller than or equal to the load on axle 3.
def r6(payload: float, axle_3_load: float) -> bool:
 if payload <= axle_3_load:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
The total operation duration must not be lower than the PTO operation time.
Stops with PTO engaged cannot outnumber the total stops.
The load supported by axle 1 cannot exceed that of axle 3.
Payload must remain below or equal to the load carried by axle 2.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";" # If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
def r1(distance: float, fuel_consumption_rate: float) -> bool:
 if distance / 60 >= 20 and fuel_consumption_rate <= 5:
 return True
 else:
 return False

# The total operation duration must not be lower than the PTO operation time.
def r2(total_operation_duration: float, pto_operation_time: float) -> bool:
 if total_operation_duration >= pto_operation_time:
 return True
 else:
 return False

# Stops with PTO engaged cannot outnumber the total stops.
def r3(num_stops_pto_engaged: int, total_num_stops: int) -> bool:
 if num_stops_pto_engaged <= total_num_stops:
 return True
 else:
 return False

# The load supported by axle 1 cannot exceed that of axle 3.
def r4(load_axle_1: float, load_axle_3: float) -> bool:
 if load_axle_1 <= load_axle_3:
 return True
 else:
 return False

# Payload must remain below or equal to the load carried by axle 2.
def r5(payload: float, load_axle_2: float) -> bool:
 if payload <= load_axle_2:
 return True
 else:
 return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r6(pto_operation_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if pto_operation_time + idle_time + driving_time <= total_operation_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
PTO operation time cannot be greater than the total operation time.
Total operation time shouldn’t be lower than idle time.
Payload must remain below or equal to the load carried by axle 2.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";" # When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(total_distance: float, avg_fuel_consumption: float) -> bool:
 if total_distance >= 20 and avg_fuel_consumption <= 0.05:
 return True
 else:
 return False

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r2(total_distance: float, fuel_consumption_per_100km: float) -> bool:
 if total_distance >= 20 and fuel_consumption_per_100km >= 0.04:
 return True
 else:
 return False

# PTO operation time cannot be greater than the total operation time.
def r3(pto_time: float, total_operation_time: float) -> bool:
 if pto_time <= total_operation_time:
 return True
 else:
 return False

# Total operation time shouldn’t be lower than idle time.
def r4(total_operation_time: float, idle_time: float) -> bool:
 if total_operation_time >= idle_time:
 return True
 else:
 return False

# Payload must remain below or equal to the load carried by axle 2.
def r5(payload: float, load_axle_2: float) -> bool:
 if payload <= load_axle_2:
 return True
 else:
 return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r6(pto_time: float, idle_time: float, driving_time: float, total_operation_duration: float) -> bool:
 if total_operation_duration >= pto_time + idle_time + driving_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
Total operation time shouldn’t be lower than PTO operation time.
Driving time cannot be greater than the total operation time.
Stops with PTO engaged should never outnumber total stops.
The load on axle 1 must not surpass the load on axle 3.
Payload must remain below or equal to the load carried by axle 2.
";" # If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance / 20 >= 1 and fuel_consumption / 5 <= 1:
 return True
 else:
 return False

# Total operation time shouldn’t be lower than PTO operation time.
def r2(total_operation_time: float, pto_operation_time: float) -> bool:
 if total_operation_time >= pto_operation_time:
 return True
 else:
 return False

# Driving time cannot be greater than the total operation time.
def r3(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False

# Stops with PTO engaged should never outnumber total stops.
def r4(stops_with_pto: int, total_stops: int) -> bool:
 if stops_with_pto <= total_stops:
 return True
 else:
 return False

# The load on axle 1 must not surpass the load on axle 3.
def r5(load_axle1: float, load_axle3: float) -> bool:
 if load_axle1 <= load_axle3:
 return True
 else:
 return False

# Payload must remain below or equal to the load carried by axle 2.
def r6(payload: float, load_axle2: float) -> bool:
 if payload <= load_axle2:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
Total operation time shouldn’t be lower than PTO operation time.
Idle time cannot be greater than the total operation time.
The load supported by axle 1 cannot exceed that of axle 2.
The weight on axle 1 cannot surpass the weight on axle 3.
Payload must remain below or equal to the load carried by axle 2.
";" # The vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r1(fuel_consumption: float, distance: float) -> bool:
 if distance >= 20 and fuel_consumption <= 0.005:
 return False
 else:
 return True

# Total operation time shouldn't be lower than PTO operation time.
def r2(total_operation_time: float, pto_operation_time: float) -> bool:
 if total_operation_time < pto_operation_time:
 return False
 else:
 return True

# Idle time cannot be greater than the total operation time.
def r3(idle_time: float, total_operation_time: float) -> bool:
 if idle_time > total_operation_time:
 return False
 else:
 return True

# The load supported by axle 1 cannot exceed that of axle 2.
def r4(load_axle1: float, load_axle2: float) -> bool:
 if load_axle1 > load_axle2:
 return False
 else:
 return True

# The weight on axle 1 cannot surpass the weight on axle 3.
def r5(weight_axle1: float, weight_axle3: float) -> bool:
 if weight_axle1 > weight_axle3:
 return False
 else:
 return True

# Payload must remain below or equal to the load carried by axle 2.
def r6(payload: float, load_axle2: float) -> bool:
 if payload > load_axle2:
 return False
 else:
 return True"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
Total operation time shouldn’t be lower than PTO operation time.
The total operation duration must not be lower than the idle time.
Stops with PTO engaged should never outnumber total stops.
The load supported by axle 1 cannot exceed that of axle 3.
Payload must remain below or equal to the load carried by axle 3.
Total operation time should be at least the sum of PTO, idle, and driving times.
";" # When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(total_distance: float, fuel_consumption: float) -> bool:
 if total_distance / 20 >= 1 and fuel_consumption / total_distance <= 0.25:
 return True
 else:
 return False

# Total operation time shouldn’t be lower than PTO operation time.
def r2(total_operation_time: float, pto_operation_time: float) -> bool:
 if total_operation_time >= pto_operation_time:
 return True
 else:
 return False

# The total operation duration must not be lower than the idle time.
def r3(total_operation_duration: float, idle_time: float) -> bool:
 if total_operation_duration >= idle_time:
 return True
 else:
 return False

# Stops with PTO engaged should never outnumber total stops.
def r4(pto_stops: int, total_stops: int) -> bool:
 if pto_stops <= total_stops:
 return True
 else:
 return False

# The load supported by axle 1 cannot exceed that of axle 3.
def r5(axle_1_load: float, axle_3_load: float) -> bool:
 if axle_1_load <= axle_3_load:
 return True
 else:
 return False

# Payload must remain below or equal to the load carried by axle 3.
def r6(payload: float, axle_3_load: float) -> bool:
 if payload <= axle_3_load:
 return True
 else:
 return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r7(total_operation_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
 if total_operation_time >= (pto_time + idle_time + driving_time):
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
PTO operation time must be less than or equal to the total operation time.
Idle time cannot be greater than the total operation time.
Stops with PTO engaged cannot outnumber the total stops.
Axle 1's load cannot exceed Axle 2's load.
Axle 1's load cannot exceed Axle 3's load.
Axle 2's load must always be equal to or greater than the payload.
";" # If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance / fuel_consumption <= 0.025:
 return False
 else:
 return True

# PTO operation time must be less than or equal to the total operation time.
def r2(pto_time: float, total_time: float) -> bool:
 if pto_time <= total_time:
 return True
 else:
 return False

# Idle time cannot be greater than the total operation time.
def r3(idle_time: float, total_time: float) -> bool:
 if idle_time <= total_time:
 return True
 else:
 return False

# Stops with PTO engaged cannot outnumber the total stops.
def r4(pto_stops: int, total_stops: int) -> bool:
 if pto_stops <= total_stops:
 return True
 else:
 return False

# Axle 1's load cannot exceed Axle 2's load.
def r5(axle1_load: float, axle2_load: float) -> bool:
 if axle1_load <= axle2_load:
 return True
 else:
 return False

# Axle 1's load cannot exceed Axle 3's load.
def r6(axle1_load: float, axle3_load: float) -> bool:
 if axle1_load <= axle3_load:
 return True
 else:
 return False

# Axle 2's load must always be equal to or greater than the payload.
def r7(axle2_load: float, payload: float) -> bool:
 if axle2_load >= payload:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
The total stop count must not be lower than the count of stops where PTO is engaged.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
The payload cannot exceed the capacity of axle 2.
The payload cannot exceed the capacity of axle 3.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";" # The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r1(total_distance: float, average_fuel_consumption: float) -> bool:
 if total_distance >= 20 and average_fuel_consumption * 100 >= 40:
 return True
 else:
 return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r2(total_stops: int, pto_stops: int) -> bool:
 if total_stops >= pto_stops:
 return True
 else:
 return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def r3(load_axle1: float, load_axle2: float) -> bool:
 if load_axle1 <= load_axle2:
 return True
 else:
 return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r4(load_axle1: float, load_axle3: float) -> bool:
 if load_axle1 <= load_axle3:
 return True
 else:
 return False

# The payload cannot exceed the capacity of axle 2.
def r5(payload: float, axle2_capacity: float) -> bool:
 if payload <= axle2_capacity:
 return True
 else:
 return False

# The payload cannot exceed the capacity of axle 3.
def r6(payload: float, axle3_capacity: float) -> bool:
 if payload <= axle3_capacity:
 return True
 else:
 return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r7(pto_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if pto_time + idle_time + driving_time <= total_operation_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
PTO operation time must be less than or equal to the total operation time.
Idle time should be less than or equal to the total operation time.
Driving time must always be less than or equal to the total operation time.
Axle 1's load cannot exceed Axle 3's load.
Payload must remain below or equal to the load carried by axle 2.
";" # If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance >= 20:
 if fuel_consumption / (distance / 100) >= 0.05:
 return True
 else:
 return False

# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r2(distance: float, average_fuel_consumption: float) -> bool:
 if distance >= 20:
 if average_fuel_consumption >= 0.04:
 return True
 else:
 return False

# PTO operation time must be less than or equal to the total operation time.
def r3(pto_time: float, total_operation_time: float) -> bool:
 if pto_time <= total_operation_time:
 return True
 else:
 return False

# Idle time should be less than or equal to the total operation time.
def r4(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# Driving time must always be less than or equal to the total operation time.
def r5(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False

# Axle 1's load cannot exceed Axle 3's load.
def r6(axle_1_load: float, axle_3_load: float) -> bool:
 if axle_1_load <= axle_3_load:
 return True
 else:
 return False

# Payload must remain below or equal to the load carried by axle 2.
def r7(payload: float, axle_2_load: float) -> bool:
 if payload <= axle_2_load:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
PTO operation time should be less than or equal to the total operation time.
Stops with PTO engaged should never outnumber total stops.
Axle 1's load cannot exceed Axle 3's load.
The payload must not exceed the load carried by axle 3.
Total operation time should be at least the sum of PTO, idle, and driving times.
";" # The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r1(vehicle_fuel_consumption: float, distance: float) -> bool:
 if distance >= 20 and vehicle_fuel_consumption / distance <= 0.2:
 return False
 else:
 return True

# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r2(vehicle_fuel_consumption: float, distance: float) -> bool:
 if distance >= 20 and vehicle_fuel_consumption / distance < 0.4:
 return False
 else:
 return True

# PTO operation time should be less than or equal to the total operation time.
def r3(pto_time: float, total_operation_time: float) -> bool:
 if pto_time <= total_operation_time:
 return True
 else:
 return False

# Stops with PTO engaged should never outnumber total stops.
def r4(pto_stops: int, total_stops: int) -> bool:
 if pto_stops <= total_stops:
 return True
 else:
 return False

# Axle 1's load cannot exceed Axle 3's load.
def r5(axle_1_load: float, axle_3_load: float) -> bool:
 if axle_1_load <= axle_3_load:
 return True
 else:
 return False

# The payload must not exceed the load carried by axle 3.
def r6(payload: float, axle_3_load: float) -> bool:
 if payload <= axle_3_load:
 return True
 else:
 return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r7(pto_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if total_operation_time >= pto_time + idle_time + driving_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
PTO operation time must be less than or equal to the total operation time.
Stops with PTO engaged should never outnumber total stops.
The weight on axle 1 cannot surpass the weight on axle 2.
The payload must not exceed the load carried by axle 3.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";" # If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
def r1(distance: float, fuel_consumption_rate: float) -> bool:
 if distance / 100 >= 2 and fuel_consumption_rate / 5 <= 1:
 return True
 else:
 return False

# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r2(distance: float, fuel_consumption_per_distance: float) -> bool:
 if distance / 100 >= 2 and fuel_consumption_per_distance >= 40:
 return True
 else:
 return False

# PTO operation time must be less than or equal to the total operation time.
def r3(pto_time: float, total_operation_time: float) -> bool:
 if pto_time <= total_operation_time:
 return True
 else:
 return False

# Stops with PTO engaged should never outnumber total stops.
def r4(pto_stops: int, total_stops: int) -> bool:
 if pto_stops <= total_stops:
 return True
 else:
 return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r5(axle1_weight: float, axle2_weight: float) -> bool:
 if axle1_weight <= axle2_weight:
 return True
 else:
 return False

# The payload must not exceed the load carried by axle 3.
def r6(payload: float, axle3_load: float) -> bool:
 if payload <= axle3_load:
 return True
 else:
 return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r7(pto_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if pto_time + idle_time + driving_time <= total_operation_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
The total operation duration must not be lower than the PTO operation time.
Total operation time shouldn’t be lower than idle time.
PTO-engaged stops cannot exceed the total number of stops.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
The payload must not exceed the load carried by axle 2.
The payload cannot exceed the capacity of axle 3.
";" # If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r1(vehicle_distance: float, fuel_consumption: float) -> bool:
 if fuel_consumption * 100 / vehicle_distance <= 40:
 return False
 else:
 return True

# The total operation duration must not be lower than the PTO operation time.
def r2(total_operation_duration: float, pto_operation_time: float) -> bool:
 if total_operation_duration < pto_operation_time:
 return False
 else:
 return True

# Total operation time shouldn’t be lower than idle time.
def r3(total_operation_time: float, idle_time: float) -> bool:
 if total_operation_time < idle_time:
 return False
 else:
 return True

# PTO-engaged stops cannot exceed the total number of stops.
def r4(pto_engaged_stops: int, total_stops: int) -> bool:
 if pto_engaged_stops > total_stops:
 return False
 else:
 return True

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r5(load_axle1: float, load_axle3: float) -> bool:
 if load_axle1 > load_axle3:
 return False
 else:
 return True

# The payload must not exceed the load carried by axle 2.
def r6(payload: float, load_axle2: float) -> bool:
 if payload > load_axle2:
 return False
 else:
 return True

# The payload cannot exceed the capacity of axle 3.
def r7(payload: float, axle3_capacity: float) -> bool:
 if payload > axle3_capacity:
 return False
 else:
 return True"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
Total operation time shouldn’t be lower than idle time.
Driving time should be less than or equal to the total operation time.
The number of stops where PTO is engaged must not exceed the overall stop count.
The weight on axle 1 cannot surpass the weight on axle 2.
The load on axle 1 must not surpass the load on axle 3.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";" # If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance / 100 >= 20 and fuel_consumption / distance <= 0.05:
 return True
 else:
 return False

# Total operation time shouldn’t be lower than idle time.
def r2(operation_time: float, idle_time: float) -> bool:
 if operation_time >= idle_time:
 return True
 else:
 return False

# Driving time should be less than or equal to the total operation time.
def r3(driving_time: float, operation_time: float) -> bool:
 if driving_time <= operation_time:
 return True
 else:
 return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r4(pto_stops: int, overall_stops: int) -> bool:
 if pto_stops <= overall_stops:
 return True
 else:
 return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r5(weight_axle1: float, weight_axle2: float) -> bool:
 if weight_axle1 <= weight_axle2:
 return True
 else:
 return False

# The load on axle 1 must not surpass the load on axle 3.
def r6(load_axle1: float, load_axle3: float) -> bool:
 if load_axle1 <= load_axle3:
 return True
 else:
 return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r7(pto_time: float, idle_time: float, driving_time: float, operation_time: float) -> bool:
 if pto_time + idle_time + driving_time <= operation_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: Total operation time shouldn’t be lower than PTO operation time.
Idle time must always be less than or equal to the total operation time.
The total operation durationmust not be lower than the driving time.
Stops with PTO engaged should never outnumber total stops.
The weight on axle 1 cannot surpass the weight on axle 2.
The payload cannot exceed the capacity of axle 2.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";" # Total operation time shouldn't be lower than PTO operation time.
def r1(pto_time: float, total_time: float) -> bool:
 if pto_time <= total_time:
 return False
 else:
 return True

# Idle time must always be less than or equal to the total operation time.
def r2(idle_time: float, total_time: float) -> bool:
 if idle_time <= total_time:
 return True
 else:
 return False

# The total operation duration must not be lower than the driving time.
def r3(total_duration: float, driving_time: float) -> bool:
 if total_duration >= driving_time:
 return True
 else:
 return False

# Stops with PTO engaged should never outnumber total stops.
def r4(pto_stops: int, total_stops: int) -> bool:
 if pto_stops <= total_stops:
 return True
 else:
 return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r5(axle1_weight: float, axle2_weight: float) -> bool:
 if axle1_weight <= axle2_weight:
 return True
 else:
 return False

# The payload cannot exceed the capacity of axle 2.
def r6(payload: float, axle2_capacity: float) -> bool:
 if payload <= axle2_capacity:
 return True
 else:
 return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r7(pto_time: float, idle_time: float, driving_time: float, total_time: float) -> bool:
 if pto_time + idle_time + driving_time <= total_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: Idle time must always be less than or equal to the total operation time.
Driving time must always be less than or equal to the total operation time.
The total stop count must not be lower than the count of stops where PTO is engaged.
Axle 1's load cannot exceed Axle 2's load.
Axle 1's load cannot exceed Axle 3's load.
Axle 2's load must always be equal to or greater than the payload.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";" # Idle time must always be less than or equal to the total operation time.
def r1(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# Driving time must always be less than or equal to the total operation time.
def r2(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r3(total_stop_count: int, pto_engaged_count: int) -> bool:
 if total_stop_count >= pto_engaged_count:
 return True
 else:
 return False

# Axle 1's load cannot exceed Axle 2's load.
def r4(axle_1_load: float, axle_2_load: float) -> bool:
 if axle_1_load <= axle_2_load:
 return True
 else:
 return False

# Axle 1's load cannot exceed Axle 3's load.
def r5(axle_1_load: float, axle_3_load: float) -> bool:
 if axle_1_load <= axle_3_load:
 return True
 else:
 return False

# Axle 2's load must always be equal to or greater than the payload.
def r6(axle_2_load: float, payload: float) -> bool:
 if axle_2_load >= payload:
 return True
 else:
 return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r7(pto_operation_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if pto_operation_time + idle_time + driving_time <= total_operation_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
The total operation duration must not be lower than the PTO operation time.
Idle time must always be less than or equal to the total operation time.
Total operation time should shouldn’t be lower than driving time.
The number of stops where PTO is engaged must not exceed the overall stop count.
The load on axle 1 must not surpass the load on axle 3.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";" # For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(journey_length: float, fuel_consumption_per_hour: float) -> bool:
 if journey_length >= 20 and fuel_consumption_per_hour <= 0.005:
 return True
 else:
 return False

# The total operation duration must not be lower than the PTO operation time.
def r2(total_operation_duration: float, pto_operation_time: float) -> bool:
 if total_operation_duration >= pto_operation_time:
 return True
 else:
 return False

# Idle time must always be less than or equal to the total operation time.
def r3(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# Total operation time should not be lower than driving time.
def r4(total_operation_time: float, driving_time: float) -> bool:
 if total_operation_time >= driving_time:
 return True
 else:
 return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r5(pto_engaged_stops: int, overall_stops: int) -> bool:
 if pto_engaged_stops <= overall_stops:
 return True
 else:
 return False

# The load on axle 1 must not surpass the load on axle 3.
def r6(load_axle_1: float, load_axle_3: float) -> bool:
 if load_axle_1 <= load_axle_3:
 return True
 else:
 return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r7(pto_operation_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if total_operation_time >= pto_operation_time + idle_time + driving_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
Idle time should be less than or equal to the total operation time.
The load supported by axle 1 cannot exceed that of axle 2.
The load supported by axle 1 cannot exceed that of axle 3.
The payload must always be smaller than or equal to the load on axle 2.
Axle 3's load must always be equal to or greater than the payload.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";" # If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance / 100 >= 0.2 and fuel_consumption / 5 <= 1:
 return True
 else:
 return False

# Idle time should be less than or equal to the total operation time.
def r2(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r3(axle1_load: float, axle2_load: float) -> bool:
 if axle1_load <= axle2_load:
 return True
 else:
 return False

# The load supported by axle 1 cannot exceed that of axle 3.
def r4(axle1_load: float, axle3_load: float) -> bool:
 if axle1_load <= axle3_load:
 return True
 else:
 return False

# The payload must always be smaller than or equal to the load on axle 2.
def r5(payload: float, axle2_load: float) -> bool:
 if payload <= axle2_load:
 return True
 else:
 return False

# Axle 3's load must always be equal to or greater than the payload.
def r6(payload: float, axle3_load: float) -> bool:
 if axle3_load >= payload:
 return True
 else:
 return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r7(pto_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if pto_time + idle_time + driving_time <= total_operation_time:
 return False
 else:
 return True"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
The total operation duration must not be lower than the PTO operation time.
The total operation durationmust not be lower than the driving time.
The number of stops where PTO is engaged must not exceed the overall stop count.
The load on axle 1 must not surpass the load on axle 2.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
Axle 3's load must always be equal to or greater than the payload.
";" # For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r1(trip_length: float, fuel_consumption: float) -> bool:
 if trip_length >= 20 and fuel_consumption / trip_length * 100 >= 40:
 return True
 else:
 return False

# The total operation duration must not be lower than the PTO operation time.
def r2(total_duration: float, pto_duration: float) -> bool:
 if total_duration >= pto_duration:
 return True
 else:
 return False

# The total operation duration must not be lower than the driving time.
def r3(total_duration: float, driving_time: float) -> bool:
 if total_duration >= driving_time:
 return True
 else:
 return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r4(num_stops_pto: int, overall_stops: int) -> bool:
 if num_stops_pto <= overall_stops:
 return True
 else:
 return False

# The load on axle 1 must not surpass the load on axle 2.
def r5(axle_1_load: float, axle_2_load: float) -> bool:
 if axle_1_load <= axle_2_load:
 return True
 else:
 return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r6(axle_1_load: float, axle_3_load: float) -> bool:
 if axle_1_load <= axle_3_load:
 return True
 else:
 return False

# Axle 3's load must always be equal to or greater than the payload.
def r7(axle_3_load: float, payload: float) -> bool:
 if axle_3_load >= payload:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: PTO operation time should be less than or equal to the total operation time.
The total operation duration must not be lower than the idle time.
Axle 1's load cannot exceed Axle 2's load.
Axle 1's load cannot exceed Axle 3's load.
The payload cannot exceed the capacity of axle 2.
The payload must always be smaller than or equal to the load on axle 3.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";" # PTO operation time should be less than or equal to the total operation time.
def r1(pto_operation_time: float, total_operation_time: float) -> bool:
 if pto_operation_time <= total_operation_time:
 return True
 else:
 return False

# The total operation duration must not be lower than the idle time.
def r2(total_operation_duration: float, idle_time: float) -> bool:
 if total_operation_duration >= idle_time:
 return True
 else:
 return False

# Axle 1's load cannot exceed Axle 2's load.
def r3(axle_1_load: float, axle_2_load: float) -> bool:
 if axle_1_load <= axle_2_load:
 return True
 else:
 return False

# Axle 1's load cannot exceed Axle 3's load.
def r4(axle_1_load: float, axle_3_load: float) -> bool:
 if axle_1_load <= axle_3_load:
 return True
 else:
 return False

# The payload cannot exceed the capacity of axle 2.
def r5(payload: float, axle_2_capacity: float) -> bool:
 if payload <= axle_2_capacity:
 return True
 else:
 return False

# The payload must always be smaller than or equal to the load on axle 3.
def r6(payload: float, axle_3_load: float) -> bool:
 if payload <= axle_3_load:
 return True
 else:
 return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r7(pto_operation_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if pto_operation_time + idle_time + driving_time <= total_operation_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
Stops with PTO engaged cannot outnumber the total stops.
The weight on axle 1 cannot surpass the weight on axle 2.
The payload must always be smaller than or equal to the load on axle 2.
The payload must not exceed the load carried by axle 3.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";" # For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(journey_length: float, avg_fuel_consumption_per_hour: float) -> bool:
 if journey_length >= 20 and avg_fuel_consumption_per_hour <= 0.167: # 5 dm³/h to dm³/h
 return True
 else:
 return False

# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r2(journey_length: float, avg_fuel_consumption_per_100_km: float) -> bool:
 if journey_length >= 20 and avg_fuel_consumption_per_100_km >= 0.04:
 return True
 else:
 return False

# Stops with PTO engaged cannot outnumber the total stops.
def r3(num_stops_pto_engaged: int, total_num_stops: int) -> bool:
 if num_stops_pto_engaged <= total_num_stops:
 return True
 else:
 return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r4(weight_axle_1: float, weight_axle_2: float) -> bool:
 if weight_axle_1 <= weight_axle_2:
 return True
 else:
 return False

# The payload must always be smaller than or equal to the load on axle 2.
def r5(payload: float, load_axle_2: float) -> bool:
 if payload <= load_axle_2:
 return True
 else:
 return False

# The payload must not exceed the load carried by axle 3.
def r6(payload: float, load_axle_3: float) -> bool:
 if payload <= load_axle_3:
 return True
 else:
 return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r7(total_operation_time: float, pto_operation_time: float, idle_time: float, driving_time: float) -> bool:
 if total_operation_time >= pto_operation_time + idle_time + driving_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
The total operation duration must not be lower than the PTO operation time.
Total operation time shouldn’t be lower than idle time.
Driving time cannot be greater than the total operation time.
Stops with PTO engaged cannot outnumber the total stops.
The load on axle 1 must not surpass the load on axle 2.
The weight on axle 1 cannot surpass the weight on axle 3.
";" # If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance / 100 and fuel_consumption * 100 < 4000:
 return False
 else:
 return True

# The total operation duration must not be lower than the PTO operation time.
def r2(total_operation_time: float, pto_operation_time: float) -> bool:
 if total_operation_time < pto_operation_time:
 return False
 else:
 return True

# Total operation time shouldn’t be lower than idle time.
def r3(total_operation_time: float, idle_time: float) -> bool:
 if total_operation_time < idle_time:
 return False
 else:
 return True

# Driving time cannot be greater than the total operation time.
def r4(driving_time: float, total_operation_time: float) -> bool:
 if driving_time > total_operation_time:
 return False
 else:
 return True

# Stops with PTO engaged cannot outnumber the total stops.
def r5(num_stops_pto_engaged: int, total_stops: int) -> bool:
 if num_stops_pto_engaged > total_stops:
 return False
 else:
 return True

# The load on axle 1 must not surpass the load on axle 2.
def r6(load_axle1: float, load_axle2: float) -> bool:
 if load_axle1 > load_axle2:
 return False
 else:
 return True

# The weight on axle 1 cannot surpass the weight on axle 3.
def r7(weight_axle1: float, weight_axle3: float) -> bool:
 if weight_axle1 > weight_axle3:
 return False
 else:
 return True"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: The total operation duration must not be lower than the PTO operation time.
Idle time should be less than or equal to the total operation time.
PTO-engaged stops cannot exceed the total number of stops.
The load on axle 1 must not surpass the load on axle 2.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
Payload must remain below or equal to the load carried by axle 2.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";" # The total operation duration must not be lower than the PTO operation time.
def r1(total_duration: float, pto_time: float) -> bool:
 if total_duration >= pto_time:
 return True
 else:
 return False

# Idle time should be less than or equal to the total operation time.
def r2(idle_time: float, total_duration: float) -> bool:
 if idle_time <= total_duration:
 return True
 else:
 return False

# PTO-engaged stops cannot exceed the total number of stops.
def r3(pto_stops: int, total_stops: int) -> bool:
 if pto_stops <= total_stops:
 return True
 else:
 return False

# The load on axle 1 must not surpass the load on axle 2.
def r4(axle1_load: float, axle2_load: float) -> bool:
 if axle1_load <= axle2_load:
 return True
 else:
 return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r5(axle1_load: float, axle3_load: float) -> bool:
 if axle1_load <= axle3_load:
 return True
 else:
 return False

# Payload must remain below or equal to the load carried by axle 2.
def r6(payload: float, axle2_load: float) -> bool:
 if payload <= axle2_load:
 return True
 else:
 return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r7(pto_time: float, idle_time: float, driving_time: float, total_duration: float) -> bool:
 if total_duration >= (pto_time + idle_time + driving_time):
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
PTO operation time cannot be greater than the total operation time.
Total operation time shouldn’t be lower than idle time.
Total operation time should shouldn’t be lower than driving time.
The payload cannot exceed the capacity of axle 2.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";" # When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(total_distance: float, avg_fuel_consumption: float) -> bool:
 if total_distance / 100 >= 20 and avg_fuel_consumption * 60 / total_distance <= 0.083:
 return True
 else:
 return False

# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r2(total_distance: float, avg_fuel_consumption: float) -> bool:
 if total_distance / 100 >= 20 and avg_fuel_consumption >= 0.4:
 return True
 else:
 return False

# PTO operation time cannot be greater than the total operation time.
def r3(pto_time: float, total_operation_time: float) -> bool:
 if pto_time <= total_operation_time:
 return True
 else:
 return False

# Total operation time shouldn’t be lower than idle time.
def r4(total_operation_time: float, idle_time: float) -> bool:
 if total_operation_time >= idle_time:
 return True
 else:
 return False

# Total operation time should shouldn’t be lower than driving time.
def r5(total_operation_time: float, driving_time: float) -> bool:
 if total_operation_time >= driving_time:
 return True
 else:
 return False

# The payload cannot exceed the capacity of axle 2.
def r6(payload: float, axle_2_capacity: float) -> bool:
 if payload <= axle_2_capacity:
 return True
 else:
 return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r7(pto_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if total_operation_time >= pto_time + idle_time + driving_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
Idle time must always be less than or equal to the total operation time.
Driving time cannot be greater than the total operation time.
Stops with PTO engaged cannot outnumber the total stops.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
The load on axle 1 must not surpass the load on axle 3.
";" # For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(journey_length: float, fuel_consumption_per_hour: float) -> bool:
 if journey_length >= 20 and fuel_consumption_per_hour <= 0.16666667: # 5 dm³/h to dm³/h
 return True
 else:
 return False

# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r2(journey_length: float, fuel_consumption_per_distance: float) -> bool:
 if journey_length >= 20 and fuel_consumption_per_distance >= 0.04: # 40 dm³/100 km
 return True
 else:
 return False

# Idle time must always be less than or equal to the total operation time.
def r3(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# Driving time cannot be greater than the total operation time.
def r4(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False

# Stops with PTO engaged cannot outnumber the total stops.
def r5(num_stops_pto_engaged: int, total_num_stops: int) -> bool:
 if num_stops_pto_engaged <= total_num_stops:
 return True
 else:
 return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def r6(load_axle_1: float, load_axle_2: float) -> bool:
 if load_axle_1 <= load_axle_2:
 return True
 else:
 return False

# The load on axle 1 must not surpass the load on axle 3.
def r7(load_axle_1: float, load_axle_3: float) -> bool:
 if load_axle_1 <= load_axle_3:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
The total operation duration must not be lower than the PTO operation time.
Idle time should be less than or equal to the total operation time.
The total operation durationmust not be lower than the driving time.
Stops with PTO engaged cannot outnumber the total stops.
The load on axle 1 must not surpass the load on axle 2.
Axle 1's load cannot exceed Axle 3's load.
";" # The vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r1(hourly_consumption: float, distance: float) -> bool:
 if distance / 20 >= 1 and hourly_consumption >= 0.05:
 return True
 else:
 return False

# The total operation duration must not be lower than the PTO operation time.
def r2(total_duration: float, pto_duration: float) -> bool:
 if total_duration >= pto_duration:
 return True
 else:
 return False

# Idle time should be less than or equal to the total operation time.
def r3(idle_time: float, total_duration: float) -> bool:
 if idle_time <= total_duration:
 return True
 else:
 return False

# The total operation duration must not be lower than the driving time.
def r4(total_duration: float, driving_time: float) -> bool:
 if total_duration >= driving_time:
 return True
 else:
 return False

# Stops with PTO engaged cannot outnumber the total stops.
def r5(pto_stops: int, total_stops: int) -> bool:
 if pto_stops <= total_stops:
 return True
 else:
 return False

# The load on axle 1 must not surpass the load on axle 2.
def r6(axle1_load: float, axle2_load: float) -> bool:
 if axle1_load <= axle2_load:
 return True
 else:
 return False

# Axle 1's load cannot exceed Axle 3's load.
def r7(axle1_load: float, axle3_load: float) -> bool:
 if axle1_load <= axle3_load:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
PTO operation time should be less than or equal to the total operation time.
Idle time cannot be greater than the total operation time.
Driving time should be less than or equal to the total operation time.
Stops with PTO engaged should never outnumber total stops.
Axle 1's load cannot exceed Axle 2's load.
Payload must remain below or equal to the load carried by axle 2.
";" # For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(journey_length: float, fuel_consumption_per_hour: float) -> bool:
 if journey_length >= 20 and fuel_consumption_per_hour <= 0.05:
 return True
 else:
 return False

# PTO operation time should be less than or equal to the total operation time.
def r2(pto_operation_time: float, total_operation_time: float) -> bool:
 if pto_operation_time <= total_operation_time:
 return True
 else:
 return False

# Idle time cannot be greater than the total operation time.
def r3(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# Driving time should be less than or equal to the total operation time.
def r4(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False

# Stops with PTO engaged should never outnumber total stops.
def r5(num_stops_pto_engaged: int, total_num_stops: int) -> bool:
 if num_stops_pto_engaged <= total_num_stops:
 return True
 else:
 return False

# Axle 1's load cannot exceed Axle 2's load.
def r6(axle_1_load: float, axle_2_load: float) -> bool:
 if axle_1_load <= axle_2_load:
 return True
 else:
 return False

# Payload must remain below or equal to the load carried by axle 2.
def r7(payload: float, axle_2_load: float) -> bool:
 if payload <= axle_2_load:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
PTO operation time must be less than or equal to the total operation time.
Idle time cannot be greater than the total operation time.
Driving time must always be less than or equal to the total operation time.
Stops with PTO engaged should never outnumber total stops.
The payload must not exceed the load carried by axle 2.
The payload cannot exceed the capacity of axle 3.
";" # The vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r1(hourly_fuel_consumption: float, traveled_distance: float) -> bool:
 if traveled_distance / hourly_fuel_consumption >= 20 and hourly_fuel_consumption >= 5:
 return True
 else:
 return False

# PTO operation time must be less than or equal to the total operation time.
def r2(pto_operation_time: float, total_operation_time: float) -> bool:
 if pto_operation_time <= total_operation_time:
 return True
 else:
 return False

# Idle time cannot be greater than the total operation time.
def r3(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# Driving time must always be less than or equal to the total operation time.
def r4(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False

# Stops with PTO engaged should never outnumber total stops.
def r5(pto_engaged_stops: int, total_stops: int) -> bool:
 if pto_engaged_stops <= total_stops:
 return True
 else:
 return False

# The payload must not exceed the load carried by axle 2.
def r6(payload: float, axle_2_load: float) -> bool:
 if payload <= axle_2_load:
 return True
 else:
 return False

# The payload cannot exceed the capacity of axle 3.
def r7(payload: float, axle_3_capacity: float) -> bool:
 if payload <= axle_3_capacity:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: Total operation time shouldn’t be lower than idle time.
Driving time must always be less than or equal to the total operation time.
PTO-engaged stops cannot exceed the total number of stops.
The weight on axle 1 cannot surpass the weight on axle 2.
The weight on axle 1 cannot surpass the weight on axle 3.
The payload cannot exceed the capacity of axle 3.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";" # Total operation time shouldn't be lower than idle time.
def r1(operation_time: float, idle_time: float) -> bool:
 if operation_time >= idle_time:
 return True
 else:
 return False

# Driving time must always be less than or equal to the total operation time.
def r2(driving_time: float, operation_time: float) -> bool:
 if driving_time <= operation_time:
 return True
 else:
 return False

# PTO-engaged stops cannot exceed the total number of stops.
def r3(pto_stops: int, total_stops: int) -> bool:
 if pto_stops <= total_stops:
 return True
 else:
 return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r4(axle_1_weight: float, axle_2_weight: float) -> bool:
 if axle_1_weight <= axle_2_weight:
 return True
 else:
 return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r5(axle_1_weight: float, axle_3_weight: float) -> bool:
 if axle_1_weight <= axle_3_weight:
 return True
 else:
 return False

# The payload cannot exceed the capacity of axle 3.
def r6(payload: float, axle_3_capacity: float) -> bool:
 if payload <= axle_3_capacity:
 return True
 else:
 return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r7(pto_time: float, idle_time: float, driving_time: float, operation_time: float) -> bool:
 if pto_time + idle_time + driving_time <= operation_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
PTO operation time cannot be greater than the total operation time.
The total operation duration must not be lower than the idle time.
Stops with PTO engaged should never outnumber total stops.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
Axle 3's load must always be equal to or greater than the payload.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";" # If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance >= 20:
 if fuel_consumption <= 5:
 return False
 else:
 return True

# PTO operation time cannot be greater than the total operation time.
def r2(pto_time: float, total_time: float) -> bool:
 if pto_time <= total_time:
 return True
 else:
 return False

# The total operation duration must not be lower than the idle time.
def r3(total_time: float, idle_time: float) -> bool:
 if total_time >= idle_time:
 return True
 else:
 return False

# Stops with PTO engaged should never outnumber total stops.
def r4(pto_stops: int, total_stops: int) -> bool:
 if pto_stops <= total_stops:
 return True
 else:
 return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def r5(axle1_load: float, axle2_load: float) -> bool:
 if axle1_load <= axle2_load:
 return True
 else:
 return False

# Axle 3's load must always be equal to or greater than the payload.
def r6(axle3_load: float, payload: float) -> bool:
 if axle3_load >= payload:
 return True
 else:
 return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r7(pto_time: float, idle_time: float, driving_time: float, total_time: float) -> bool:
 if total_time >= pto_time + idle_time + driving_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
The total operation duration must not be lower than the PTO operation time.
Total operation time should shouldn’t be lower than driving time.
Axle 1's load cannot exceed Axle 2's load.
Axle 1's load cannot exceed Axle 3's load.
Axle 3's load must always be equal to or greater than the payload.
Total operation time should be at least the sum of PTO, idle, and driving times.
";" # If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance >= 20 and fuel_consumption / distance <= 0.25:
 return False
 else:
 return True

# The total operation duration must not be lower than the PTO operation time.
def r2(total_operation_time: float, pto_time: float) -> bool:
 if total_operation_time >= pto_time:
 return True
 else:
 return False

# Total operation time should not be lower than driving time.
def r3(total_operation_time: float, driving_time: float) -> bool:
 if total_operation_time >= driving_time:
 return True
 else:
 return False

# Axle 1's load cannot exceed Axle 2's load.
def r4(axle_1_load: float, axle_2_load: float) -> bool:
 if axle_1_load <= axle_2_load:
 return True
 else:
 return False

# Axle 1's load cannot exceed Axle 3's load.
def r5(axle_1_load: float, axle_3_load: float) -> bool:
 if axle_1_load <= axle_3_load:
 return True
 else:
 return False

# Axle 3's load must always be equal to or greater than the payload.
def r6(axle_3_load: float, payload: float) -> bool:
 if axle_3_load >= payload:
 return True
 else:
 return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r7(total_operation_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
 if total_operation_time >= (pto_time + idle_time + driving_time):
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: Total operation time shouldn’t be lower than PTO operation time.
Idle time cannot be greater than the total operation time.
Total operation time should shouldn’t be lower than driving time.
The load supported by axle 1 cannot exceed that of axle 3.
The payload must not exceed the load carried by axle 2.
Axle 3's load must always be equal to or greater than the payload.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";" # Total operation time shouldn’t be lower than PTO operation time.
def r1(pto_time: float, total_time: float) -> bool:
 if pto_time / total_time >= 1:
 return True
 else:
 return False

# Idle time cannot be greater than the total operation time.
def r2(idle_time: float, total_time: float) -> bool:
 if idle_time / total_time <= 1:
 return True
 else:
 return False

# Total operation time should shouldn’t be lower than driving time.
def r3(driving_time: float, total_time: float) -> bool:
 if driving_time / total_time >= 1:
 return True
 else:
 return False

# The load supported by axle 1 cannot exceed that of axle 3.
def r4(axle_1_load: float, axle_3_load: float) -> bool:
 if axle_1_load <= axle_3_load:
 return True
 else:
 return False

# The payload must not exceed the load carried by axle 2.
def r5(payload: float, axle_2_load: float) -> bool:
 if payload <= axle_2_load:
 return True
 else:
 return False

# Axle 3's load must always be equal to or greater than the payload.
def r6(axle_3_load: float, payload: float) -> bool:
 if axle_3_load >= payload:
 return True
 else:
 return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r7(pto_time: float, idle_time: float, driving_time: float, total_time: float) -> bool:
 if (pto_time + idle_time + driving_time) / total_time <= 1:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
Total operation time should shouldn’t be lower than driving time.
The number of stops where PTO is engaged must not exceed the overall stop count.
The load supported by axle 1 cannot exceed that of axle 2.
The weight on axle 1 cannot surpass the weight on axle 3.
Payload must remain below or equal to the load carried by axle 2.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";" # When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(total_distance: float, fuel_consumption: float) -> bool:
 if total_distance / 100 >= 20 and fuel_consumption / (total_distance / 100) <= 0.05:
 return True
 else:
 return False

# Total operation time should not be lower than driving time.
def r2(total_operation_time: float, driving_time: float) -> bool:
 if total_operation_time >= driving_time:
 return True
 else:
 return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r3(num_stops_pto: int, overall_stops: int) -> bool:
 if num_stops_pto <= overall_stops:
 return True
 else:
 return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r4(load_axle1: float, load_axle2: float) -> bool:
 if load_axle1 <= load_axle2:
 return True
 else:
 return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r5(weight_axle1: float, weight_axle3: float) -> bool:
 if weight_axle1 <= weight_axle3:
 return True
 else:
 return False

# Payload must remain below or equal to the load carried by axle 2.
def r6(payload: float, load_axle2: float) -> bool:
 if payload <= load_axle2:
 return True
 else:
 return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r7(pto_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if pto_time + idle_time + driving_time <= total_operation_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: Total operation time shouldn’t be lower than PTO operation time.
The total operation duration must not be lower than the idle time.
Total operation time should shouldn’t be lower than driving time.
Stops with PTO engaged should never outnumber total stops.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
Axle 3's load must always be equal to or greater than the payload.
Total operation time should be at least the sum of PTO, idle, and driving times.
";" # Total operation time shouldn't be lower than PTO operation time.
def r1(pto_time: float, total_time: float) -> bool:
 if total_time / pto_time >= 1:
 return True
 else:
 return False

# The total operation duration must not be lower than the idle time.
def r2(idle_time: float, total_time: float) -> bool:
 if total_time / idle_time >= 1:
 return True
 else:
 return False

# Total operation time should not be lower than driving time.
def r3(driving_time: float, total_time: float) -> bool:
 if total_time / driving_time >= 1:
 return True
 else:
 return False

# Stops with PTO engaged should never outnumber total stops.
def r4(pto_stops: int, total_stops: int) -> bool:
 if pto_stops <= total_stops:
 return True
 else:
 return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def r5(axle1_load: float, axle2_load: float) -> bool:
 if axle1_load <= axle2_load:
 return True
 else:
 return False

# Axle 3's load must always be equal to or greater than the payload.
def r6(axle3_load: float, payload: float) -> bool:
 if axle3_load >= payload:
 return True
 else:
 return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r7(pto_time: float, idle_time: float, driving_time: float, total_time: float) -> bool:
 if total_time >= (pto_time + idle_time + driving_time):
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
PTO operation time should be less than or equal to the total operation time.
Idle time should be less than or equal to the total operation time.
Driving time cannot be greater than the total operation time.
Axle 1's load cannot exceed Axle 3's load.
The payload must not exceed the load carried by axle 3.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";" # The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r1(total_distance: float, fuel_consumption: float) -> bool:
 if total_distance >= 20 and fuel_consumption <= 0.04:
 return True
 else:
 return False

# PTO operation time should be less than or equal to the total operation time.
def r2(pto_time: float, total_time: float) -> bool:
 if pto_time <= total_time:
 return True
 else:
 return False

# Idle time should be less than or equal to the total operation time.
def r3(idle_time: float, total_time: float) -> bool:
 if idle_time <= total_time:
 return True
 else:
 return False

# Driving time cannot be greater than the total operation time.
def r4(driving_time: float, total_time: float) -> bool:
 if driving_time <= total_time:
 return True
 else:
 return False

# Axle 1's load cannot exceed Axle 3's load.
def r5(axle_1_load: float, axle_3_load: float) -> bool:
 if axle_1_load <= axle_3_load:
 return True
 else:
 return False

# The payload must not exceed the load carried by axle 3.
def r6(payload: float, axle_3_load: float) -> bool:
 if payload <= axle_3_load:
 return True
 else:
 return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r7(pto_time: float, idle_time: float, driving_time: float, total_time: float) -> bool:
 if total_time >= pto_time + idle_time + driving_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
The total operation duration must not be lower than the PTO operation time.
The total operation duration must not be lower than the idle time.
Axle 1's load cannot exceed Axle 3's load.
Payload must remain below or equal to the load carried by axle 2.
Total operation time should be at least the sum of PTO, idle, and driving times.
";" # If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
def r1(distance: float, fuel_consumption_rate: float) -> bool:
 if distance / 100 >= 2 and fuel_consumption_rate / 5 <= 1:
 return True
 else:
 return False

# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r2(distance: float, fuel_consumption_per_distance: float) -> bool:
 if distance / 100 >= 2 and fuel_consumption_per_distance >= 40:
 return True
 else:
 return False

# The total operation duration must not be lower than the PTO operation time.
def r3(total_operation_duration: float, pto_operation_time: float) -> bool:
 if total_operation_duration >= pto_operation_time:
 return True
 else:
 return False

# The total operation duration must not be lower than the idle time.
def r4(total_operation_duration: float, idle_time: float) -> bool:
 if total_operation_duration >= idle_time:
 return True
 else:
 return False

# Axle 1's load cannot exceed Axle 3's load.
def r5(axle_1_load: float, axle_3_load: float) -> bool:
 if axle_1_load <= axle_3_load:
 return True
 else:
 return False

# Payload must remain below or equal to the load carried by axle 2.
def r6(payload: float, axle_2_load: float) -> bool:
 if payload <= axle_2_load:
 return True
 else:
 return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r7(total_operation_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
 if total_operation_time >= pto_time + idle_time + driving_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
Total operation time shouldn’t be lower than idle time.
Total operation time should shouldn’t be lower than driving time.
The number of stops where PTO is engaged must not exceed the overall stop count.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
The payload must always be smaller than or equal to the load on axle 2.
";" # If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
def r1(distance: float, fuel_consumption_rate: float) -> bool:
 if distance >= 20 and fuel_consumption_rate <= (40 * 0.01):
 return True
 else:
 return False

# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r2(distance: float, fuel_consumption_per_100km: float) -> bool:
 if distance >= 20 and fuel_consumption_per_100km >= 40:
 return True
 else:
 return False

# Total operation time shouldn’t be lower than idle time.
def r3(operation_time: float, idle_time: float) -> bool:
 if operation_time >= idle_time:
 return True
 else:
 return False

# Total operation time should shouldn’t be lower than driving time.
def r4(operation_time: float, driving_time: float) -> bool:
 if operation_time >= driving_time:
 return True
 else:
 return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r5(num_stops_pto_engaged: int, num_stops_total: int) -> bool:
 if num_stops_pto_engaged <= num_stops_total:
 return True
 else:
 return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def r6(load_axle1: float, load_axle2: float) -> bool:
 if load_axle1 <= load_axle2:
 return True
 else:
 return False

# The payload must always be smaller than or equal to the load on axle 2.
def r7(payload: float, load_axle2: float) -> bool:
 if payload <= load_axle2:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: PTO operation time should be less than or equal to the total operation time.
Idle time cannot be greater than the total operation time.
The total operation durationmust not be lower than the driving time.
The load on axle 1 must not surpass the load on axle 2.
The weight on axle 1 cannot surpass the weight on axle 3.
Payload must remain below or equal to the load carried by axle 2.
Total operation time should be at least the sum of PTO, idle, and driving times.
";" # PTO operation time should be less than or equal to the total operation time.
def r1(pto: float, total: float) -> bool:
 if pto <= total:
 return True
 else:
 return False

# Idle time cannot be greater than the total operation time.
def r2(idle: float, total: float) -> bool:
 if idle <= total:
 return True
 else:
 return False

# The total operation duration must not be lower than the driving time.
def r3(total: float, driving: float) -> bool:
 if total >= driving:
 return True
 else:
 return False

# The load on axle 1 must not surpass the load on axle 2.
def r4(axle1: float, axle2: float) -> bool:
 if axle1 <= axle2:
 return True
 else:
 return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r5(axle1: float, axle3: float) -> bool:
 if axle1 <= axle3:
 return True
 else:
 return False

# Payload must remain below or equal to the load carried by axle 2.
def r6(payload: float, axle2: float) -> bool:
 if payload <= axle2:
 return True
 else:
 return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r7(pto: float, idle: float, driving: float, total: float) -> bool:
 if total >= pto + idle + driving:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
Idle time should be less than or equal to the total operation time.
Axle 1's load cannot exceed Axle 2's load.
The load supported by axle 1 cannot exceed that of axle 3.
The payload cannot exceed the capacity of axle 2.
The payload must always be smaller than or equal to the load on axle 3.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";" # The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r1(total_distance: float, fuel_consumption: float) -> bool:
 if total_distance / 100 >= 20 and fuel_consumption / total_distance <= 0.004:
 return True
 else:
 return False

# Idle time should be less than or equal to the total operation time.
def r2(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# Axle 1's load cannot exceed Axle 2's load.
def r3(axle1_load: float, axle2_load: float) -> bool:
 if axle1_load <= axle2_load:
 return True
 else:
 return False

# The load supported by axle 1 cannot exceed that of axle 3.
def r4(axle1_load: float, axle3_load: float) -> bool:
 if axle1_load <= axle3_load:
 return True
 else:
 return False

# The payload cannot exceed the capacity of axle 2.
def r5(payload: float, axle2_capacity: float) -> bool:
 if payload <= axle2_capacity:
 return True
 else:
 return False

# The payload must always be smaller than or equal to the load on axle 3.
def r6(payload: float, axle3_load: float) -> bool:
 if payload <= axle3_load:
 return True
 else:
 return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r7(pto_operation_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if pto_operation_time + idle_time + driving_time <= total_operation_time:
 return False
 else:
 return True"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
PTO operation time should be less than or equal to the total operation time.
Driving time cannot be greater than the total operation time.
Stops with PTO engaged should never outnumber total stops.
Axle 1's load cannot exceed Axle 3's load.
Axle 3's load must always be equal to or greater than the payload.
Total operation time should be at least the sum of PTO, idle, and driving times.
";" # The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r1(total_distance: float, fuel_consumption: float) -> bool:
 if total_distance / 100 >= 20 and fuel_consumption / total_distance <= 0.004:
 return True
 else:
 return False

# PTO operation time should be less than or equal to the total operation time.
def r2(pto_time: float, total_operation_time: float) -> bool:
 if pto_time <= total_operation_time:
 return True
 else:
 return False

# Driving time cannot be greater than the total operation time.
def r3(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False

# Stops with PTO engaged should never outnumber total stops.
def r4(pto_stops: int, total_stops: int) -> bool:
 if pto_stops <= total_stops:
 return True
 else:
 return False

# Axle 1's load cannot exceed Axle 3's load.
def r5(axle_1_load: float, axle_3_load: float) -> bool:
 if axle_1_load <= axle_3_load:
 return True
 else:
 return False

# Axle 3's load must always be equal to or greater than the payload.
def r6(axle_3_load: float, payload: float) -> bool:
 if axle_3_load >= payload:
 return True
 else:
 return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r7(pto_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if total_operation_time >= pto_time + idle_time + driving_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
PTO operation time cannot be greater than the total operation time.
Idle time should be less than or equal to the total operation time.
Driving time cannot be greater than the total operation time.
Stops with PTO engaged cannot outnumber the total stops.
The load supported by axle 1 cannot exceed that of axle 3.
";" # If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance >= 20:
 if fuel_consumption / distance <= 0.2:
 return False
 else:
 return True

# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def r2(distance: float, average_fuel_consumption: float) -> bool:
 if distance >= 20:
 if average_fuel_consumption >= 0.4:
 return True
 else:
 return False

# PTO operation time cannot be greater than the total operation time.
def r3(pto_time: float, total_operation_time: float) -> bool:
 if pto_time <= total_operation_time:
 return True
 else:
 return False

# Idle time should be less than or equal to the total operation time.
def r4(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# Driving time cannot be greater than the total operation time.
def r5(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False

# Stops with PTO engaged cannot outnumber the total stops.
def r6(pto_stops: int, total_stops: int) -> bool:
 if pto_stops <= total_stops:
 return True
 else:
 return False

# The load supported by axle 1 cannot exceed that of axle 3.
def r7(load_axle1: float, load_axle3: float) -> bool:
 if load_axle1 <= load_axle3:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
The total operation duration must not be lower than the PTO operation time.
Driving time cannot be greater than the total operation time.
Axle 1's load cannot exceed Axle 2's load.
The weight on axle 1 cannot surpass the weight on axle 3.
The payload must always be smaller than or equal to the load on axle 2.
";" # If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance >= 20:
 if fuel_consumption / distance <= 0.2:
 return False
 else:
 return True

# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r2(distance: float, avg_fuel_consumption: float) -> bool:
 if distance >= 20:
 if avg_fuel_consumption < 40:
 return False
 else:
 return True

# The total operation duration must not be lower than the PTO operation time.
def r3(total_operation_duration: float, pto_operation_time: float) -> bool:
 if total_operation_duration >= pto_operation_time:
 return True
 else:
 return False

# Driving time cannot be greater than the total operation time.
def r4(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False

# Axle 1's load cannot exceed Axle 2's load.
def r5(axle1_load: float, axle2_load: float) -> bool:
 if axle1_load <= axle2_load:
 return True
 else:
 return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r6(axle1_weight: float, axle3_weight: float) -> bool:
 if axle1_weight <= axle3_weight:
 return True
 else:
 return False

# The payload must always be smaller than or equal to the load on axle 2.
def r7(payload: float, axle2_load: float) -> bool:
 if payload <= axle2_load:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
Idle time cannot be greater than the total operation time.
Driving time should be less than or equal to the total operation time.
The number of stops where PTO is engaged must not exceed the overall stop count.
Axle 1's load cannot exceed Axle 3's load.
The payload must not exceed the load carried by axle 3.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";" # If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
def r1(distance: float, fuel_consumption_rate: float) -> bool:
 if distance / 20 >= 1 and fuel_consumption_rate / 5 <= 1:
 return True
 else:
 return False

# Idle time cannot be greater than the total operation time.
def r2(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# Driving time should be less than or equal to the total operation time.
def r3(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r4(pto_stops: int, overall_stops: int) -> bool:
 if pto_stops <= overall_stops:
 return True
 else:
 return False

# Axle 1's load cannot exceed Axle 3's load.
def r5(axle_1_load: float, axle_3_load: float) -> bool:
 if axle_1_load <= axle_3_load:
 return True
 else:
 return False

# The payload must not exceed the load carried by axle 3.
def r6(payload: float, axle_3_load: float) -> bool:
 if payload <= axle_3_load:
 return True
 else:
 return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r7(pto_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if pto_time + idle_time + driving_time <= total_operation_time:
 return False
 else:
 return True"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
PTO operation time cannot be greater than the total operation time.
The total stop count must not be lower than the count of stops where PTO is engaged.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
The load supported by axle 1 cannot exceed that of axle 3.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";" # When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(total_distance: float, hourly_fuel_consumption: float) -> bool:
 if total_distance / 60 >= 20 and hourly_fuel_consumption >= 0.083:
 return True
 else:
 return False

# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r2(total_distance: float, avg_fuel_consumption: float) -> bool:
 if total_distance / 100 >= 20 and avg_fuel_consumption >= 0.04:
 return True
 else:
 return False

# PTO operation time cannot be greater than the total operation time.
def r3(pto_operation_time: float, total_operation_time: float) -> bool:
 if pto_operation_time <= total_operation_time:
 return True
 else:
 return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r4(total_stop_count: int, pto_engaged_stop_count: int) -> bool:
 if total_stop_count >= pto_engaged_stop_count:
 return True
 else:
 return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def r5(load_axle1: float, load_axle2: float) -> bool:
 if load_axle1 <= load_axle2:
 return True
 else:
 return False

# The load supported by axle 1 cannot exceed that of axle 3.
def r6(load_axle1: float, load_axle3: float) -> bool:
 if load_axle1 <= load_axle3:
 return True
 else:
 return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r7(pto_operation_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if pto_operation_time + idle_time + driving_time <= total_operation_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
The total operation duration must not be lower than the PTO operation time.
The total stop count must not be lower than the count of stops where PTO is engaged.
Axle 1's load cannot exceed Axle 3's load.
The payload must not exceed the load carried by axle 2.
The payload must not exceed the load carried by axle 3.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";" # The vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r1(vehicle_fuel_consumption: float, traveled_distance: float) -> bool:
 if traveled_distance >= 20 and vehicle_fuel_consumption <= 0.005:
 return False
 else:
 return True

# The total operation duration must not be lower than the PTO operation time.
def r2(total_operation_duration: float, pto_operation_time: float) -> bool:
 if total_operation_duration < pto_operation_time:
 return False
 else:
 return True

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r3(total_stop_count: int, pto_engaged_stop_count: int) -> bool:
 if total_stop_count < pto_engaged_stop_count:
 return False
 else:
 return True

# Axle 1's load cannot exceed Axle 3's load.
def r4(axle_1_load: float, axle_3_load: float) -> bool:
 if axle_1_load > axle_3_load:
 return False
 else:
 return True

# The payload must not exceed the load carried by axle 2.
def r5(payload: float, axle_2_load: float) -> bool:
 if payload > axle_2_load:
 return False
 else:
 return True

# The payload must not exceed the load carried by axle 3.
def r6(payload: float, axle_3_load: float) -> bool:
 if payload > axle_3_load:
 return False
 else:
 return True

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r7(total_operation_time: float, pto_operation_time: float, idle_time: float, driving_time: float) -> bool:
 if total_operation_time < (pto_operation_time + idle_time + driving_time):
 return False
 else:
 return True"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
Idle time must always be less than or equal to the total operation time.
Stops with PTO engaged cannot outnumber the total stops.
The load on axle 1 must not surpass the load on axle 2.
The weight on axle 1 cannot surpass the weight on axle 3.
Total operation time should be at least the sum of PTO, idle, and driving times.
";" # For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(total_distance: float, avg_fuel_consumption_per_hour: float) -> bool:
 if total_distance / (avg_fuel_consumption_per_hour * 60) >= 20 and avg_fuel_consumption_per_hour <= 0.05:
 return True
 else:
 return False

# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r2(total_distance: float, avg_fuel_consumption_per_distance: float) -> bool:
 if total_distance > 20 and avg_fuel_consumption_per_distance >= 0.04:
 return True
 else:
 return False

# Idle time must always be less than or equal to the total operation time.
def r3(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# Stops with PTO engaged cannot outnumber the total stops.
def r4(num_stops_with_pto: int, total_num_stops: int) -> bool:
 if num_stops_with_pto <= total_num_stops:
 return True
 else:
 return False

# The load on axle 1 must not surpass the load on axle 2.
def r5(load_on_axle_1: float, load_on_axle_2: float) -> bool:
 if load_on_axle_1 <= load_on_axle_2:
 return True
 else:
 return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r6(weight_on_axle_1: float, weight_on_axle_3: float) -> bool:
 if weight_on_axle_1 <= weight_on_axle_3:
 return True
 else:
 return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r7(pto_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if total_operation_time >= pto_time + idle_time + driving_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
Total operation time shouldn’t be lower than idle time.
Stops with PTO engaged cannot outnumber the total stops.
The load on axle 1 must not surpass the load on axle 2.
Axle 1's load cannot exceed Axle 3's load.
The payload cannot exceed the capacity of axle 3.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";" # When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(km: float, fuel_consumption: float) -> bool:
 if km >= 20 and fuel_consumption <= (5/3.6): # 5 dm³/h to km/h
 return True
 else:
 return False

# Total operation time shouldn’t be lower than idle time.
def r2(operation_time: float, idle_time: float) -> bool:
 if operation_time >= idle_time:
 return True
 else:
 return False

# Stops with PTO engaged cannot outnumber the total stops.
def r3(num_stops_pto_engaged: int, total_stops: int) -> bool:
 if num_stops_pto_engaged <= total_stops:
 return True
 else:
 return False

# The load on axle 1 must not surpass the load on axle 2.
def r4(axle_1_load: float, axle_2_load: float) -> bool:
 if axle_1_load <= axle_2_load:
 return True
 else:
 return False

# Axle 1's load cannot exceed Axle 3's load.
def r5(axle_1_load: float, axle_3_load: float) -> bool:
 if axle_1_load <= axle_3_load:
 return True
 else:
 return False

# The payload cannot exceed the capacity of axle 3.
def r6(payload: float, axle_3_capacity: float) -> bool:
 if payload <= axle_3_capacity:
 return True
 else:
 return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r7(pto_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if pto_time + idle_time + driving_time <= total_operation_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
Total operation time shouldn’t be lower than PTO operation time.
Idle time should be less than or equal to the total operation time.
The total stop count must not be lower than the count of stops where PTO is engaged.
The load supported by axle 1 cannot exceed that of axle 2.
The payload must always be smaller than or equal to the load on axle 2.
Axle 3's load must always be equal to or greater than the payload.
";" # When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(km: float, fuel_consumption: float) -> bool:
 if km >= 20 and fuel_consumption <= (5 / 60.0):
 return True
 else:
 return False

# Total operation time shouldn’t be lower than PTO operation time.
def r2(total_operation_time: float, pto_operation_time: float) -> bool:
 if total_operation_time >= pto_operation_time:
 return True
 else:
 return False

# Idle time should be less than or equal to the total operation time.
def r3(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r4(total_stop_count: int, pto_engaged_count: int) -> bool:
 if total_stop_count >= pto_engaged_count:
 return True
 else:
 return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r5(axle1_load: float, axle2_load: float) -> bool:
 if axle1_load <= axle2_load:
 return True
 else:
 return False

# The payload must always be smaller than or equal to the load on axle 2.
def r6(payload: float, axle2_load: float) -> bool:
 if payload <= axle2_load:
 return True
 else:
 return False

# Axle 3's load must always be equal to or greater than the payload.
def r7(axle3_load: float, payload: float) -> bool:
 if axle3_load >= payload:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
PTO operation time should be less than or equal to the total operation time.
Total operation time shouldn’t be lower than idle time.
The load on axle 1 must not surpass the load on axle 2.
Axle 2's load must always be equal to or greater than the payload.
Payload must remain below or equal to the load carried by axle 3.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";" # When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance >= 20 and fuel_consumption <= (40 * 0.01):
 return False
 else:
 return True

# PTO operation time should be less than or equal to the total operation time.
def r2(pto_time: float, total_time: float) -> bool:
 if pto_time <= total_time:
 return True
 else:
 return False

# Total operation time shouldn’t be lower than idle time.
def r3(total_time: float, idle_time: float) -> bool:
 if total_time >= idle_time:
 return True
 else:
 return False

# The load on axle 1 must not surpass the load on axle 2.
def r4(axle1_load: float, axle2_load: float) -> bool:
 if axle1_load <= axle2_load:
 return True
 else:
 return False

# Axle 2's load must always be equal to or greater than the payload.
def r5(axle2_load: float, payload: float) -> bool:
 if axle2_load >= payload:
 return True
 else:
 return False

# Payload must remain below or equal to the load carried by axle 3.
def r6(axle3_load: float, payload: float) -> bool:
 if payload <= axle3_load:
 return True
 else:
 return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r7(pto_time: float, idle_time: float, driving_time: float, total_time: float) -> bool:
 if total_time >= (pto_time + idle_time + driving_time):
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
The total operation duration must not be lower than the PTO operation time.
Total operation time should shouldn’t be lower than driving time.
The total stop count must not be lower than the count of stops where PTO is engaged.
The payload must not exceed the load carried by axle 3.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";" # When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(total_distance: float, hourly_consumption: float) -> bool:
 if total_distance / 100 >= 20 and hourly_consumption <= 0.05:
 return True
 else:
 return False

# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r2(total_distance: float, avg_consumption: float) -> bool:
 if total_distance / 100 >= 20 and avg_consumption >= 0.04:
 return True
 else:
 return False

# The total operation duration must not be lower than the PTO operation time.
def r3(pto_time: float, total_time: float) -> bool:
 if pto_time <= total_time:
 return True
 else:
 return False

# Total operation time should not be lower than driving time.
def r4(driving_time: float, total_time: float) -> bool:
 if driving_time <= total_time:
 return True
 else:
 return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r5(stop_count: int, pto_stops: int) -> bool:
 if stop_count >= pto_stops:
 return True
 else:
 return False

# The payload must not exceed the load carried by axle 3.
def r6(payload: float, axle_3_load: float) -> bool:
 if payload <= axle_3_load:
 return True
 else:
 return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r7(pto_time: float, idle_time: float, driving_time: float, total_time: float) -> bool:
 if pto_time + idle_time + driving_time <= total_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
The total operation durationmust not be lower than the driving time.
Stops with PTO engaged should never outnumber total stops.
The load on axle 1 must not surpass the load on axle 3.
The payload cannot exceed the capacity of axle 2.
The payload must not exceed the load carried by axle 3.
";" # When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance >= 20 and fuel_consumption / distance <= 0.25:
 return True
 else:
 return False

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r2(distance: float, fuel_consumption: float) -> bool:
 if distance >= 20 and fuel_consumption >= 40 * distance / 100:
 return True
 else:
 return False

# The total operation duration must not be lower than the driving time.
def r3(operation_duration: float, driving_time: float) -> bool:
 if operation_duration >= driving_time:
 return True
 else:
 return False

# Stops with PTO engaged should never outnumber total stops.
def r4(num_stops_pto_engaged: int, total_num_stops: int) -> bool:
 if num_stops_pto_engaged <= total_num_stops:
 return True
 else:
 return False

# The load on axle 1 must not surpass the load on axle 3.
def r5(load_axle1: float, load_axle3: float) -> bool:
 if load_axle1 <= load_axle3:
 return True
 else:
 return False

# The payload cannot exceed the capacity of axle 2.
def r6(payload: float, axle2_capacity: float) -> bool:
 if payload <= axle2_capacity:
 return True
 else:
 return False

# The payload must not exceed the load carried by axle 3.
def r7(payload: float, load_axle3: float) -> bool:
 if payload <= load_axle3:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
PTO operation time must be less than or equal to the total operation time.
The total operation durationmust not be lower than the driving time.
The number of stops where PTO is engaged must not exceed the overall stop count.
The load supported by axle 1 cannot exceed that of axle 2.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
Axle 2's load must always be equal to or greater than the payload.
";" # When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(km: float, fuel_consumption: float) -> bool:
 if km >= 20 and fuel_consumption <= 0.2:
 return True
 else:
 return False

# PTO operation time must be less than or equal to the total operation time.
def r2(pto_time: float, total_operation_time: float) -> bool:
 if pto_time <= total_operation_time:
 return True
 else:
 return False

# The total operation duration must not be lower than the driving time.
def r3(total_operation_duration: float, driving_time: float) -> bool:
 if total_operation_duration >= driving_time:
 return True
 else:
 return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r4(pto_stops: int, overall_stops: int) -> bool:
 if pto_stops <= overall_stops:
 return True
 else:
 return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r5(axle1_load: float, axle2_load: float) -> bool:
 if axle1_load <= axle2_load:
 return True
 else:
 return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r6(axle1_load: float, axle3_load: float) -> bool:
 if axle1_load <= axle3_load:
 return True
 else:
 return False

# Axle 2's load must always be equal to or greater than the payload.
def r7(axle2_load: float, payload: float) -> bool:
 if axle2_load >= payload:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
The total operation duration must not be lower than the idle time.
Stops with PTO engaged should never outnumber total stops.
The load supported by axle 1 cannot exceed that of axle 2.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
The payload cannot exceed the capacity of axle 2.
The payload cannot exceed the capacity of axle 3.
";" # For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r1(trip_length: float, fuel_consumption: float) -> bool:
 if trip_length >= 20 and fuel_consumption / trip_length * 100 >= 40:
 return True
 else:
 return False

# The total operation duration must not be lower than the idle time.
def r2(operation_duration: float, idle_time: float) -> bool:
 if operation_duration >= idle_time:
 return True
 else:
 return False

# Stops with PTO engaged should never outnumber total stops.
def r3(num_stops_pto_engaged: int, total_num_stops: int) -> bool:
 if num_stops_pto_engaged <= total_num_stops:
 return True
 else:
 return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r4(load_axle1: float, load_axle2: float) -> bool:
 if load_axle1 <= load_axle2:
 return True
 else:
 return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r5(load_axle1: float, load_axle3: float) -> bool:
 if load_axle1 <= load_axle3:
 return True
 else:
 return False

# The payload cannot exceed the capacity of axle 2.
def r6(payload: float, capacity_axle2: float) -> bool:
 if payload <= capacity_axle2:
 return True
 else:
 return False

# The payload cannot exceed the capacity of axle 3.
def r7(payload: float, capacity_axle3: float) -> bool:
 if payload <= capacity_axle3:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
The total operation duration must not be lower than the idle time.
Stops with PTO engaged cannot outnumber the total stops.
Axle 1's load cannot exceed Axle 3's load.
The payload must always be smaller than or equal to the load on axle 2.
The payload must not exceed the load carried by axle 3.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";" # When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(km: float, fuel_consumption: float) -> bool:
 if km >= 20 and fuel_consumption <= 0.16666667: # 5 dm³/h = 5000 cm³/h = 500 L/h = 166.67 kg/h = 0.16666667 kg/km.h
 return True
 else:
 return False

# The total operation duration must not be lower than the idle time.
def r2(operation_duration: float, idle_time: float) -> bool:
 if operation_duration >= idle_time:
 return True
 else:
 return False

# Stops with PTO engaged cannot outnumber the total stops.
def r3(num_stops_pto_engaged: int, total_stops: int) -> bool:
 if num_stops_pto_engaged <= total_stops:
 return True
 else:
 return False

# Axle 1's load cannot exceed Axle 3's load.
def r4(axle_1_load: float, axle_3_load: float) -> bool:
 if axle_1_load <= axle_3_load:
 return True
 else:
 return False

# The payload must always be smaller than or equal to the load on axle 2.
def r5(payload: float, axle_2_load: float) -> bool:
 if payload <= axle_2_load:
 return True
 else:
 return False

# The payload must not exceed the load carried by axle 3.
def r6(payload: float, axle_3_load: float) -> bool:
 if payload <= axle_3_load:
 return True
 else:
 return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r7(pto_time: float, idle_time: float, driving_time: float, operation_duration: float) -> bool:
 if pto_time + idle_time + driving_time <= operation_duration:
 return False
 else:
 return True"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
PTO operation time should be less than or equal to the total operation time.
Driving time should be less than or equal to the total operation time.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
The payload cannot exceed the capacity of axle 2.
The payload cannot exceed the capacity of axle 3.
Total operation time should be at least the sum of PTO, idle, and driving times.
";" # If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance / 20 >= 1 and fuel_consumption / 60 < 0.083:
 return False
 else:
 return True

# PTO operation time should be less than or equal to the total operation time.
def r2(pto_time: float, total_time: float) -> bool:
 if pto_time <= total_time:
 return True
 else:
 return False

# Driving time should be less than or equal to the total operation time.
def r3(driving_time: float, total_time: float) -> bool:
 if driving_time <= total_time:
 return True
 else:
 return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def r4(load_axle1: float, load_axle2: float) -> bool:
 if load_axle1 <= load_axle2:
 return True
 else:
 return False

# The payload cannot exceed the capacity of axle 2.
def r5(payload: float, capacity_axle2: float) -> bool:
 if payload <= capacity_axle2:
 return True
 else:
 return False

# The payload cannot exceed the capacity of axle 3.
def r6(payload: float, capacity_axle3: float) -> bool:
 if payload <= capacity_axle3:
 return True
 else:
 return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r7(pto_time: float, idle_time: float, driving_time: float, total_time: float) -> bool:
 if total_time >= pto_time + idle_time + driving_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
Total operation time shouldn’t be lower than idle time.
Stops with PTO engaged cannot outnumber the total stops.
The weight on axle 1 cannot surpass the weight on axle 2.
The weight on axle 1 cannot surpass the weight on axle 3.
Axle 2's load must always be equal to or greater than the payload.
Total operation time should be at least the sum of PTO, idle, and driving times.
";" # The vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r1(fuel_consumption: float, distance: float) -> bool:
 if distance / fuel_consumption <= 20 or fuel_consumption < 5:
 return False
 else:
 return True

# Total operation time shouldn't be lower than idle time.
def r2(operation_time: float, idle_time: float) -> bool:
 if operation_time < idle_time:
 return False
 else:
 return True

# Stops with PTO engaged cannot outnumber the total stops.
def r3(num_stops_pto_engaged: int, total_stops: int) -> bool:
 if num_stops_pto_engaged > total_stops:
 return False
 else:
 return True

# The weight on axle 1 cannot surpass the weight on axle 2.
def r4(weight_axle1: float, weight_axle2: float) -> bool:
 if weight_axle1 > weight_axle2:
 return False
 else:
 return True

# The weight on axle 1 cannot surpass the weight on axle 3.
def r5(weight_axle1: float, weight_axle3: float) -> bool:
 if weight_axle1 > weight_axle3:
 return False
 else:
 return True

# Axle 2's load must always be equal to or greater than the payload.
def r6(axle2_load: float, payload: float) -> bool:
 if axle2_load < payload:
 return False
 else:
 return True

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r7(operation_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
 if operation_time < pto_time + idle_time + driving_time:
 return False
 else:
 return True"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
PTO operation time cannot be greater than the total operation time.
Idle time cannot be greater than the total operation time.
The number of stops where PTO is engaged must not exceed the overall stop count.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
Payload must remain below or equal to the load carried by axle 3.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";" # For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(journey_length_km: float, fuel_consumption_per_hour: float) -> bool:
 if journey_length_km >= 20 and fuel_consumption_per_hour <= 0.2:
 return True
 else:
 return False

# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r2(journey_length_km: float, fuel_consumption_per_100_km: float) -> bool:
 if journey_length_km >= 20 and fuel_consumption_per_100_km >= 0.4:
 return True
 else:
 return False

# PTO operation time cannot be greater than the total operation time.
def r3(pto_operation_time: float, total_operation_time: float) -> bool:
 if pto_operation_time <= total_operation_time:
 return True
 else:
 return False

# Idle time cannot be greater than the total operation time.
def r4(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r5(pto_engaged_count: int, total_stop_count: int) -> bool:
 if pto_engaged_count <= total_stop_count:
 return True
 else:
 return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def r6(load_axle_1: float, load_axle_2: float) -> bool:
 if load_axle_1 <= load_axle_2:
 return True
 else:
 return False

# Payload must remain below or equal to the load carried by axle 3.
def r7(payload: float, load_axle_3: float) -> bool:
 if payload <= load_axle_3:
 return True
 else:
 return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r8(pto_operation_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if pto_operation_time + idle_time + driving_time <= total_operation_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
PTO operation time must be less than or equal to the total operation time.
Idle time should be less than or equal to the total operation time.
Driving time must always be less than or equal to the total operation time.
The total stop count must not be lower than the count of stops where PTO is engaged.
The load supported by axle 1 cannot exceed that of axle 2.
The payload must not exceed the load carried by axle 2.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";" # The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r1(total_distance: float, average_fuel_consumption: float) -> bool:
 if total_distance >= 20 and average_fuel_consumption * 100 >= 40:
 return True
 else:
 return False

# PTO operation time must be less than or equal to the total operation time.
def r2(pto_time: float, total_operation_time: float) -> bool:
 if pto_time <= total_operation_time:
 return True
 else:
 return False

# Idle time should be less than or equal to the total operation time.
def r3(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# Driving time must always be less than or equal to the total operation time.
def r4(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r5(total_stop_count: int, pto_stop_count: int) -> bool:
 if total_stop_count >= pto_stop_count:
 return True
 else:
 return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r6(axle1_load: float, axle2_load: float) -> bool:
 if axle1_load <= axle2_load:
 return True
 else:
 return False

# The payload must not exceed the load carried by axle 2.
def r7(payload: float, axle2_load: float) -> bool:
 if payload <= axle2_load:
 return True
 else:
 return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r8(pto_time: float, idle_time: float, driving_time: float, total_operation_duration: float) -> bool:
 if total_operation_duration >= pto_time + idle_time + driving_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
PTO operation time cannot be greater than the total operation time.
Total operation time shouldn’t be lower than idle time.
PTO-engaged stops cannot exceed the total number of stops.
The load supported by axle 1 cannot exceed that of axle 2.
The load on axle 1 must not surpass the load on axle 3.
The payload cannot exceed the capacity of axle 3.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";" # If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
def r1(distance: float, fuel_consumption_rate: float) -> bool:
 if distance / 10.0 >= 20 and fuel_consumption_rate <= 5:
 return True
 else:
 return False

# PTO operation time cannot be greater than the total operation time.
def r2(pto_operation_time: float, total_operation_time: float) -> bool:
 if pto_operation_time <= total_operation_time:
 return True
 else:
 return False

# Total operation time shouldn’t be lower than idle time.
def r3(total_operation_time: float, idle_time: float) -> bool:
 if total_operation_time >= idle_time:
 return True
 else:
 return False

# PTO-engaged stops cannot exceed the total number of stops.
def r4(pto_engaged_stops: int, total_stops: int) -> bool:
 if pto_engaged_stops <= total_stops:
 return True
 else:
 return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r5(axle1_load: float, axle2_load: float) -> bool:
 if axle1_load <= axle2_load:
 return True
 else:
 return False

# The load on axle 1 must not surpass the load on axle 3.
def r6(axle1_load: float, axle3_load: float) -> bool:
 if axle1_load <= axle3_load:
 return True
 else:
 return False

# The payload cannot exceed the capacity of axle 3.
def r7(payload: float, axle3_capacity: float) -> bool:
 if payload <= axle3_capacity:
 return True
 else:
 return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r8(pto_operation_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if total_operation_time >= pto_operation_time + idle_time + driving_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
The total operation duration must not be lower than the idle time.
Driving time must always be less than or equal to the total operation time.
The total stop count must not be lower than the count of stops where PTO is engaged.
The load on axle 1 must not surpass the load on axle 2.
The weight on axle 1 cannot surpass the weight on axle 3.
Axle 2's load must always be equal to or greater than the payload.
";" # If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance >= 20:
 if fuel_consumption / distance <= 0.2:
 return False
 else:
 return True

# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def r2(distance: float, average_fuel_consumption: float) -> bool:
 if distance >= 20:
 if average_fuel_consumption >= 0.4:
 return True
 else:
 return False

# The total operation duration must not be lower than the idle time.
def r3(operation_duration: float, idle_time: float) -> bool:
 if operation_duration >= idle_time:
 return True
 else:
 return False

# Driving time must always be less than or equal to the total operation time.
def r4(driving_time: float, operation_time: float) -> bool:
 if driving_time <= operation_time:
 return True
 else:
 return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r5(total_stops: int, pto_stops: int) -> bool:
 if total_stops >= pto_stops:
 return True
 else:
 return False

# The load on axle 1 must not surpass the load on axle 2.
def r6(axle1_load: float, axle2_load: float) -> bool:
 if axle1_load <= axle2_load:
 return True
 else:
 return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r7(axle1_weight: float, axle3_weight: float) -> bool:
 if axle1_weight <= axle3_weight:
 return True
 else:
 return False

# Axle 2's load must always be equal to or greater than the payload.
def r8(axle2_load: float, payload: float) -> bool:
 if axle2_load >= payload:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
Total operation time shouldn’t be lower than PTO operation time.
Idle time must always be less than or equal to the total operation time.
The total operation durationmust not be lower than the driving time.
The payload must not exceed the load carried by axle 2.
The payload must always be smaller than or equal to the load on axle 3.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";" # For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(journey_length: float, fuel_consumption_per_hour: float) -> bool:
 if journey_length >= 20 and fuel_consumption_per_hour <= 0.05:
 return True
 else:
 return False

# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r2(journey_length: float, fuel_consumption_per_distance: float) -> bool:
 if journey_length >= 20 and fuel_consumption_per_distance >= 0.04:
 return True
 else:
 return False

# Total operation time shouldn’t be lower than PTO operation time.
def r3(pto_time: float, total_operation_time: float) -> bool:
 if pto_time <= total_operation_time:
 return True
 else:
 return False

# Idle time must always be less than or equal to the total operation time.
def r4(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# The total operation duration must not be lower than the driving time.
def r5(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False

# The payload must not exceed the load carried by axle 2.
def r6(payload: float, load_axle_2: float) -> bool:
 if payload <= load_axle_2:
 return True
 else:
 return False

# The payload must always be smaller than or equal to the load on axle 3.
def r7(payload: float, load_axle_3: float) -> bool:
 if payload <= load_axle_3:
 return True
 else:
 return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r8(pto_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if pto_time + idle_time + driving_time <= total_operation_time:
 return False
 else:
 return True"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
PTO operation time cannot be greater than the total operation time.
The total operation duration must not be lower than the idle time.
Stops with PTO engaged cannot outnumber the total stops.
The weight on axle 1 cannot surpass the weight on axle 3.
Axle 2's load must always be equal to or greater than the payload.
Payload must remain below or equal to the load carried by axle 3.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";" # If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance >= 20:
 if fuel_consumption <= 5:
 return False
 else:
 return True

# PTO operation time cannot be greater than the total operation time.
def r2(pto_time: float, total_operation_time: float) -> bool:
 if pto_time <= total_operation_time:
 return True
 else:
 return False

# The total operation duration must not be lower than the idle time.
def r3(total_operation_time: float, idle_time: float) -> bool:
 if total_operation_time >= idle_time:
 return True
 else:
 return False

# Stops with PTO engaged cannot outnumber the total stops.
def r4(num_stops_pto_engaged: int, total_stops: int) -> bool:
 if num_stops_pto_engaged <= total_stops:
 return True
 else:
 return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r5(weight_axle_1: float, weight_axle_3: float) -> bool:
 if weight_axle_1 <= weight_axle_3:
 return True
 else:
 return False

# Axle 2's load must always be equal to or greater than the payload.
def r6(axle_2_load: float, payload: float) -> bool:
 if axle_2_load >= payload:
 return True
 else:
 return False

# Payload must remain below or equal to the load carried by axle 3.
def r7(payload: float, axle_3_load: float) -> bool:
 if payload <= axle_3_load:
 return True
 else:
 return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r8(pto_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if pto_time + idle_time + driving_time <= total_operation_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
PTO operation time should be less than or equal to the total operation time.
Idle time should be less than or equal to the total operation time.
The total operation durationmust not be lower than the driving time.
The number of stops where PTO is engaged must not exceed the overall stop count.
The load supported by axle 1 cannot exceed that of axle 3.
The payload must not exceed the load carried by axle 3.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";" # If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r1(vehicle_distance: float, fuel_consumption: float) -> bool:
 if fuel_consumption * 100 / vehicle_distance <= 40:
 return False
 else:
 return True

# PTO operation time should be less than or equal to the total operation time.
def r2(pto_time: float, total_time: float) -> bool:
 if pto_time <= total_time:
 return True
 else:
 return False

# Idle time should be less than or equal to the total operation time.
def r3(idle_time: float, total_time: float) -> bool:
 if idle_time <= total_time:
 return True
 else:
 return False

# The total operation duration must not be lower than the driving time.
def r4(total_time: float, driving_time: float) -> bool:
 if total_time >= driving_time:
 return True
 else:
 return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r5(pto_stops: int, total_stops: int) -> bool:
 if pto_stops <= total_stops:
 return True
 else:
 return False

# The load supported by axle 1 cannot exceed that of axle 3.
def r6(axle1_load: float, axle3_load: float) -> bool:
 if axle1_load <= axle3_load:
 return True
 else:
 return False

# The payload must not exceed the load carried by axle 3.
def r7(payload: float, axle3_load: float) -> bool:
 if payload <= axle3_load:
 return True
 else:
 return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r8(pto_time: float, idle_time: float, driving_time: float, total_time: float) -> bool:
 if total_time >= pto_time + idle_time + driving_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
PTO operation time should be less than or equal to the total operation time.
Total operation time should shouldn’t be lower than driving time.
The total stop count must not be lower than the count of stops where PTO is engaged.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
Payload must remain below or equal to the load carried by axle 2.
The payload cannot exceed the capacity of axle 3.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";" # When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(total_distance: float, avg_fuel_consumption: float) -> bool:
 if total_distance / 60 >= 20 and avg_fuel_consumption <= 0.083:
 return True
 else:
 return False

# PTO operation time should be less than or equal to the total operation time.
def r2(pto_time: float, total_operation_time: float) -> bool:
 if pto_time <= total_operation_time:
 return True
 else:
 return False

# Total operation time should not be lower than driving time.
def r3(total_operation_time: float, driving_time: float) -> bool:
 if total_operation_time >= driving_time:
 return True
 else:
 return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r4(total_stops: int, pto_stops: int) -> bool:
 if total_stops >= pto_stops:
 return True
 else:
 return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r5(load_axle1: float, load_axle3: float) -> bool:
 if load_axle1 <= load_axle3:
 return True
 else:
 return False

# Payload must remain below or equal to the load carried by axle 2.
def r6(payload: float, load_axle2: float) -> bool:
 if payload <= load_axle2:
 return True
 else:
 return False

# The payload cannot exceed the capacity of axle 3.
def r7(payload: float, axle3_capacity: float) -> bool:
 if payload <= axle3_capacity:
 return True
 else:
 return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r8(total_operation_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
 if total_operation_time >= (pto_time + idle_time + driving_time):
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
PTO operation time must be less than or equal to the total operation time.
Idle time should be less than or equal to the total operation time.
Driving time should be less than or equal to the total operation time.
Stops with PTO engaged cannot outnumber the total stops.
The load supported by axle 1 cannot exceed that of axle 2.
Payload must remain below or equal to the load carried by axle 3.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";" # If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r1(vehicle_distance: float, fuel_consumption: float) -> bool:
 if fuel_consumption * 100 / vehicle_distance <= 40:
 return False
 else:
 return True

# PTO operation time must be less than or equal to the total operation time.
def r2(pto_time: float, total_time: float) -> bool:
 if pto_time <= total_time:
 return True
 else:
 return False

# Idle time should be less than or equal to the total operation time.
def r3(idle_time: float, total_time: float) -> bool:
 if idle_time <= total_time:
 return True
 else:
 return False

# Driving time should be less than or equal to the total operation time.
def r4(driving_time: float, total_time: float) -> bool:
 if driving_time <= total_time:
 return True
 else:
 return False

# Stops with PTO engaged cannot outnumber the total stops.
def r5(pto_stops: int, total_stops: int) -> bool:
 if pto_stops <= total_stops:
 return True
 else:
 return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r6(axle1_load: float, axle2_load: float) -> bool:
 if axle1_load <= axle2_load:
 return True
 else:
 return False

# Payload must remain below or equal to the load carried by axle 3.
def r7(payload: float, axle3_load: float) -> bool:
 if payload <= axle3_load:
 return True
 else:
 return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r8(pto_time: float, idle_time: float, driving_time: float, total_time: float) -> bool:
 if total_time >= pto_time + idle_time + driving_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
Idle time should be less than or equal to the total operation time.
Driving time should be less than or equal to the total operation time.
The number of stops where PTO is engaged must not exceed the overall stop count.
The load on axle 1 must not surpass the load on axle 2.
Payload must remain below or equal to the load carried by axle 2.
Payload must remain below or equal to the load carried by axle 3.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";" # If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance / 20 >= 1 and fuel_consumption / 5 <= 1:
 return True
 else:
 return False

# Idle time should be less than or equal to the total operation time.
def r2(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# Driving time should be less than or equal to the total operation time.
def r3(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r4(pto_stops: int, total_stops: int) -> bool:
 if pto_stops <= total_stops:
 return True
 else:
 return False

# The load on axle 1 must not surpass the load on axle 2.
def r5(axle1_load: float, axle2_load: float) -> bool:
 if axle1_load <= axle2_load:
 return True
 else:
 return False

# Payload must remain below or equal to the load carried by axle 2.
def r6(payload: float, axle2_load: float) -> bool:
 if payload <= axle2_load:
 return True
 else:
 return False

# Payload must remain below or equal to the load carried by axle 3.
def r7(payload: float, axle3_load: float) -> bool:
 if payload <= axle3_load:
 return True
 else:
 return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r8(pto_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if pto_time + idle_time + driving_time <= total_operation_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
Stops with PTO engaged should never outnumber total stops.
The load supported by axle 1 cannot exceed that of axle 2.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
The payload must not exceed the load carried by axle 2.
Payload must remain below or equal to the load carried by axle 3.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";" # If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
def r1(distance: float, fuel_consumption_rate: float) -> bool:
 if distance >= 20 and fuel_consumption_rate <= (5 / 100):
 return True
 else:
 return False

# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r2(distance: float, fuel_consumption_per_distance: float) -> bool:
 if distance >= 20 and fuel_consumption_per_distance >= 40:
 return True
 else:
 return False

# Stops with PTO engaged should never outnumber total stops.
def r3(num_stops_pto_engaged: int, total_num_stops: int) -> bool:
 if num_stops_pto_engaged <= total_num_stops:
 return True
 else:
 return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r4(load_axle_1: float, load_axle_2: float) -> bool:
 if load_axle_1 <= load_axle_2:
 return True
 else:
 return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r5(load_axle_1: float, load_axle_3: float) -> bool:
 if load_axle_1 <= load_axle_3:
 return True
 else:
 return False

# The payload must not exceed the load carried by axle 2.
def r6(payload: float, load_axle_2: float) -> bool:
 if payload <= load_axle_2:
 return True
 else:
 return False

# Payload must remain below or equal to the load carried by axle 3.
def r7(payload: float, load_axle_3: float) -> bool:
 if payload <= load_axle_3:
 return True
 else:
 return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r8(operation_duration: float, pto_duration: float, idle_duration: float, driving_duration: float) -> bool:
 if operation_duration >= (pto_duration + idle_duration + driving_duration):
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
PTO operation time must be less than or equal to the total operation time.
The total stop count must not be lower than the count of stops where PTO is engaged.
The load supported by axle 1 cannot exceed that of axle 2.
Axle 1's load cannot exceed Axle 3's load.
The payload must always be smaller than or equal to the load on axle 2.
Axle 3's load must always be equal to or greater than the payload.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";" # When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(km: float, fuel_consumption: float) -> bool:
 if km >= 20 and fuel_consumption <= 0.2:
 return True
 else:
 return False

# PTO operation time must be less than or equal to the total operation time.
def r2(pto_time: float, total_time: float) -> bool:
 if pto_time <= total_time:
 return True
 else:
 return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r3(total_stops: int, pto_stops: int) -> bool:
 if total_stops >= pto_stops:
 return True
 else:
 return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r4(axle1_load: float, axle2_load: float) -> bool:
 if axle1_load <= axle2_load:
 return True
 else:
 return False

# Axle 1's load cannot exceed Axle 3's load.
def r5(axle1_load: float, axle3_load: float) -> bool:
 if axle1_load <= axle3_load:
 return True
 else:
 return False

# The payload must always be smaller than or equal to the load on axle 2.
def r6(payload: float, axle2_load: float) -> bool:
 if payload <= axle2_load:
 return True
 else:
 return False

# Axle 3's load must always be equal to or greater than the payload.
def r7(payload: float, axle3_load: float) -> bool:
 if axle3_load >= payload:
 return True
 else:
 return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r8(pto_time: float, idle_time: float, driving_time: float, total_time: float) -> bool:
 if pto_time + idle_time + driving_time <= total_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
PTO operation time should be less than or equal to the total operation time.
Idle time cannot be greater than the total operation time.
The total operation durationmust not be lower than the driving time.
The total stop count must not be lower than the count of stops where PTO is engaged.
The load supported by axle 1 cannot exceed that of axle 3.
Payload must remain below or equal to the load carried by axle 3.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";" # If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance >= 20 and fuel_consumption / distance <= 0.25:
 return False
 else:
 return True

# PTO operation time should be less than or equal to the total operation time.
def r2(pto_time: float, total_time: float) -> bool:
 if pto_time <= total_time:
 return True
 else:
 return False

# Idle time cannot be greater than the total operation time.
def r3(idle_time: float, total_time: float) -> bool:
 if idle_time <= total_time:
 return True
 else:
 return False

# The total operation duration must not be lower than the driving time.
def r4(total_duration: float, driving_time: float) -> bool:
 if total_duration >= driving_time:
 return True
 else:
 return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r5(stop_count: int, pto_stops: int) -> bool:
 if stop_count >= pto_stops:
 return True
 else:
 return False

# The load supported by axle 1 cannot exceed that of axle 3.
def r6(axle1_load: float, axle3_load: float) -> bool:
 if axle1_load <= axle3_load:
 return True
 else:
 return False

# Payload must remain below or equal to the load carried by axle 3.
def r7(payload: float, axle3_load: float) -> bool:
 if payload <= axle3_load:
 return True
 else:
 return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r8(pto_time: float, idle_time: float, driving_time: float, total_duration: float) -> bool:
 if total_duration >= pto_time + idle_time + driving_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
PTO operation time must be less than or equal to the total operation time.
The total operation duration must not be lower than the idle time.
PTO-engaged stops cannot exceed the total number of stops.
The load on axle 1 must not surpass the load on axle 2.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
The payload must not exceed the load carried by axle 3.
";" # If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance >= 20:
 if fuel_consumption / distance <= 0.2:
 return False
 else:
 return True

# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r2(distance: float, avg_fuel_consumption: float) -> bool:
 if distance >= 20:
 if avg_fuel_consumption >= 0.4:
 return True
 else:
 return False

# PTO operation time must be less than or equal to the total operation time.
def r3(pto_time: float, total_time: float) -> bool:
 if pto_time <= total_time:
 return True
 else:
 return False

# The total operation duration must not be lower than the idle time.
def r4(total_time: float, idle_time: float) -> bool:
 if total_time >= idle_time:
 return True
 else:
 return False

# PTO-engaged stops cannot exceed the total number of stops.
def r5(pto_stops: int, total_stops: int) -> bool:
 if pto_stops <= total_stops:
 return True
 else:
 return False

# The load on axle 1 must not surpass the load on axle 2.
def r6(axle1_load: float, axle2_load: float) -> bool:
 if axle1_load <= axle2_load:
 return True
 else:
 return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r7(axle1_load: float, axle3_load: float) -> bool:
 if axle1_load <= axle3_load:
 return True
 else:
 return False

# The payload must not exceed the load carried by axle 3.
def r8(payload: float, axle3_load: float) -> bool:
 if payload <= axle3_load:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
Total operation time should shouldn’t be lower than driving time.
Stops with PTO engaged cannot outnumber the total stops.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
The payload must not exceed the load carried by axle 2.
Payload must remain below or equal to the load carried by axle 3.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";" # If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance >= 20 and fuel_consumption / distance <= 0.25:
 return False
 else:
 return True

# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r2(total_distance: float, total_fuel_consumed: float) -> bool:
 if total_distance >= 20 and total_fuel_consumed / total_distance >= 0.4:
 return False
 else:
 return True

# Total operation time should not be lower than driving time.
def r3(total_operation_time: float, driving_time: float) -> bool:
 if total_operation_time >= driving_time:
 return True
 else:
 return False

# Stops with PTO engaged cannot outnumber the total stops.
def r4(num_stops_pto_engaged: int, num_total_stops: int) -> bool:
 if num_stops_pto_engaged <= num_total_stops:
 return True
 else:
 return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def r5(load_axle_1: float, load_axle_2: float) -> bool:
 if load_axle_1 <= load_axle_2:
 return True
 else:
 return False

# The payload must not exceed the load carried by axle 2.
def r6(payload: float, load_axle_2: float) -> bool:
 if payload <= load_axle_2:
 return True
 else:
 return False

# Payload must remain below or equal to the load carried by axle 3.
def r7(payload: float, load_axle_3: float) -> bool:
 if payload <= load_axle_3:
 return True
 else:
 return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r8(total_operation_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
 if total_operation_time >= pto_time + idle_time + driving_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
Total operation time shouldn’t be lower than PTO operation time.
Idle time cannot be greater than the total operation time.
The total operation durationmust not be lower than the driving time.
PTO-engaged stops cannot exceed the total number of stops.
Axle 2's load must always be equal to or greater than the payload.
Axle 3's load must always be equal to or greater than the payload.
";" # The vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance >= 20 and fuel_consumption / 3.6 <= 5:
 return False
 else:
 return True

# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def r2(distance: float, fuel_consumption: float) -> bool:
 if distance >= 20 and fuel_consumption / (distance * 3.6) >= 0.04:
 return False
 else:
 return True

# Total operation time shouldn’t be lower than PTO operation time.
def r3(pto_time: float, operation_time: float) -> bool:
 if pto_time <= operation_time:
 return False
 else:
 return True

# Idle time cannot be greater than the total operation time.
def r4(idle_time: float, operation_time: float) -> bool:
 if idle_time <= operation_time:
 return True
 else:
 return False

# The total operation duration must not be lower than the driving time.
def r5(driving_time: float, operation_time: float) -> bool:
 if driving_time <= operation_time:
 return False
 else:
 return True

# PTO-engaged stops cannot exceed the total number of stops.
def r6(pto_stops: int, total_stops: int) -> bool:
 if pto_stops <= total_stops:
 return True
 else:
 return False

# Axle 2's load must always be equal to or greater than the payload.
def r7(axle_2_load: float, payload: float) -> bool:
 if axle_2_load >= payload:
 return True
 else:
 return False

# Axle 3's load must always be equal to or greater than the payload.
def r8(axle_3_load: float, payload: float) -> bool:
 if axle_3_load >= payload:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
PTO operation time must be less than or equal to the total operation time.
Idle time must always be less than or equal to the total operation time.
Total operation time should shouldn’t be lower than driving time.
The total stop count must not be lower than the count of stops where PTO is engaged.
The load supported by axle 1 cannot exceed that of axle 2.
The weight on axle 1 cannot surpass the weight on axle 3.
The payload must not exceed the load carried by axle 3.
";" # The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r1(total_distance: float, average_fuel_consumption: float) -> bool:
 if total_distance >= 20 and average_fuel_consumption * 100 >= 40:
 return True
 else:
 return False

# PTO operation time must be less than or equal to the total operation time.
def r2(pto_operation_time: float, total_operation_time: float) -> bool:
 if pto_operation_time <= total_operation_time:
 return True
 else:
 return False

# Idle time must always be less than or equal to the total operation time.
def r3(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# Total operation time should not be lower than driving time.
def r4(total_operation_time: float, driving_time: float) -> bool:
 if total_operation_time >= driving_time:
 return True
 else:
 return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r5(total_stop_count: int, pto_engaged_stop_count: int) -> bool:
 if total_stop_count >= pto_engaged_stop_count:
 return True
 else:
 return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r6(axle1_load: float, axle2_load: float) -> bool:
 if axle1_load <= axle2_load:
 return True
 else:
 return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r7(axle1_weight: float, axle3_weight: float) -> bool:
 if axle1_weight <= axle3_weight:
 return True
 else:
 return False

# The payload must not exceed the load carried by axle 3.
def r8(payload: float, axle3_load: float) -> bool:
 if payload <= axle3_load:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
PTO operation time cannot be greater than the total operation time.
Total operation time should shouldn’t be lower than driving time.
The total stop count must not be lower than the count of stops where PTO is engaged.
The load supported by axle 1 cannot exceed that of axle 2.
The payload must always be smaller than or equal to the load on axle 2.
The payload must always be smaller than or equal to the load on axle 3.
";" # The vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r1(hourly_consumption: float, traveled_distance: float) -> bool:
 if traveled_distance >= 20 and hourly_consumption < 5:
 return False
 else:
 return True

# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r2(hourly_consumption: float, traveled_distance: float) -> float:
 if traveled_distance >= 20:
 return hourly_consumption * 100 / 40
 else:
 return 0

# PTO operation time cannot be greater than the total operation time.
def r3(pto_time: float, total_operation_time: float) -> bool:
 if pto_time <= total_operation_time:
 return True
 else:
 return False

# Total operation time should not be lower than driving time.
def r4(total_operation_time: float, driving_time: float) -> bool:
 if total_operation_time >= driving_time:
 return True
 else:
 return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r5(total_stops: int, pto_stops: int) -> bool:
 if total_stops >= pto_stops:
 return True
 else:
 return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r6(axle1_load: float, axle2_load: float) -> bool:
 if axle1_load <= axle2_load:
 return True
 else:
 return False

# The payload must always be smaller than or equal to the load on axle 2.
def r7(payload: float, axle2_load: float) -> bool:
 if payload <= axle2_load:
 return True
 else:
 return False

# The payload must always be smaller than or equal to the load on axle 3.
def r8(payload: float, axle3_load: float) -> bool:
 if payload <= axle3_load:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
Total operation time shouldn’t be lower than PTO operation time.
Idle time must always be less than or equal to the total operation time.
Driving time should be less than or equal to the total operation time.
The weight on axle 1 cannot surpass the weight on axle 2.
Axle 2's load must always be equal to or greater than the payload.
Total operation time should be at least the sum of PTO, idle, and driving times.
";" # For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(total_distance: float, avg_fuel_consumption_per_hour: float) -> bool:
 if total_distance >= 20 and avg_fuel_consumption_per_hour <= 0.16666667: # 5 dm³/h to dm³/h
 return False
 else:
 return True

# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r2(total_distance: float, avg_fuel_consumption_per_distance: float) -> bool:
 if total_distance >= 20 and avg_fuel_consumption_per_distance >= 0.04: # 40 dm³/100 km to dm³/100 km
 return True
 else:
 return False

# Total operation time shouldn’t be lower than PTO operation time.
def r3(pto_time: float, total_operation_time: float) -> bool:
 if pto_time <= total_operation_time:
 return True
 else:
 return False

# Idle time must always be less than or equal to the total operation time.
def r4(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# Driving time should be less than or equal to the total operation time.
def r5(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r6(weight_axle_1: float, weight_axle_2: float) -> bool:
 if weight_axle_1 <= weight_axle_2:
 return True
 else:
 return False

# Axle 2's load must always be equal to or greater than the payload.
def r7(axle_2_load: float, payload: float) -> bool:
 if axle_2_load >= payload:
 return True
 else:
 return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r8(pto_time: float, idle_time: float, driving_time: float) -> bool:
 if pto_time + idle_time + driving_time <= total_operation_time:
 return False
 else:
 return True"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
Total operation time shouldn’t be lower than PTO operation time.
Idle time must always be less than or equal to the total operation time.
Stops with PTO engaged should never outnumber total stops.
The weight on axle 1 cannot surpass the weight on axle 2.
Axle 1's load cannot exceed Axle 3's load.
Axle 2's load must always be equal to or greater than the payload.
The payload cannot exceed the capacity of axle 3.
";" # When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance >= 20 and fuel_consumption <= (40 * distance / 100):
 return False
 else:
 return True

# Total operation time shouldn’t be lower than PTO operation time.
def r2(total_operation_time: float, pto_operation_time: float) -> bool:
 if total_operation_time >= pto_operation_time:
 return True
 else:
 return False

# Idle time must always be less than or equal to the total operation time.
def r3(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# Stops with PTO engaged should never outnumber total stops.
def r4(stops_with_pto: int, total_stops: int) -> bool:
 if stops_with_pto <= total_stops:
 return True
 else:
 return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r5(weight_axle1: float, weight_axle2: float) -> bool:
 if weight_axle1 <= weight_axle2:
 return True
 else:
 return False

# Axle 1's load cannot exceed Axle 3's load.
def r6(axle1_load: float, axle3_load: float) -> bool:
 if axle1_load <= axle3_load:
 return True
 else:
 return False

# Axle 2's load must always be equal to or greater than the payload.
def r7(axle2_load: float, payload: float) -> bool:
 if axle2_load >= payload:
 return True
 else:
 return False

# The payload cannot exceed the capacity of axle 3.
def r8(payload: float, axle3_capacity: float) -> bool:
 if payload <= axle3_capacity:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
The total operation duration must not be lower than the idle time.
Driving time should be less than or equal to the total operation time.
The total stop count must not be lower than the count of stops where PTO is engaged.
Axle 2's load must always be equal to or greater than the payload.
The payload cannot exceed the capacity of axle 3.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";" # If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
def r1(distance: float, fuel_consumption_rate_per_hour: float) -> bool:
 if distance >= 20 and fuel_consumption_rate_per_hour <= (5 / 1000):
 return True
 else:
 return False

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r2(distance: float, fuel_consumption_rate_per_100_km: float) -> bool:
 if distance >= 20 and fuel_consumption_rate_per_100_km >= 40:
 return True
 else:
 return False

# The total operation duration must not be lower than the idle time.
def r3(operation_duration: float, idle_time: float) -> bool:
 if operation_duration >= idle_time:
 return True
 else:
 return False

# Driving time should be less than or equal to the total operation time.
def r4(driving_time: float, operation_time: float) -> bool:
 if driving_time <= operation_time:
 return True
 else:
 return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r5(stop_count: int, pto_stop_count: int) -> bool:
 if stop_count >= pto_stop_count:
 return True
 else:
 return False

# Axle 2's load must always be equal to or greater than the payload.
def r6(axle_2_load: float, payload: float) -> bool:
 if axle_2_load >= payload:
 return True
 else:
 return False

# The payload cannot exceed the capacity of axle 3.
def r7(payload: float, axle_3_capacity: float) -> bool:
 if payload <= axle_3_capacity:
 return True
 else:
 return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r8(pto_time: float, idle_time: float, driving_time: float, operation_duration: float) -> bool:
 if operation_duration >= (pto_time + idle_time + driving_time):
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
PTO operation time cannot be greater than the total operation time.
The total operation duration must not be lower than the idle time.
Stops with PTO engaged should never outnumber total stops.
The load on axle 1 must not surpass the load on axle 3.
The payload cannot exceed the capacity of axle 2.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";" # When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(total_distance: float, avg_fuel_consumption: float) -> bool:
 if total_distance >= 20 and avg_fuel_consumption <= 0.05:
 return True
 else:
 return False

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r2(total_distance: float, min_fuel_consumption_per_100km: float) -> bool:
 if total_distance >= 20 and min_fuel_consumption_per_100km >= 0.04:
 return True
 else:
 return False

# PTO operation time cannot be greater than the total operation time.
def r3(pto_time: float, total_operation_time: float) -> bool:
 if pto_time <= total_operation_time:
 return True
 else:
 return False

# The total operation duration must not be lower than the idle time.
def r4(total_operation_time: float, idle_time: float) -> bool:
 if total_operation_time >= idle_time:
 return True
 else:
 return False

# Stops with PTO engaged should never outnumber total stops.
def r5(num_stops_with_pto: int, total_num_stops: int) -> bool:
 if num_stops_with_pto <= total_num_stops:
 return True
 else:
 return False

# The load on axle 1 must not surpass the load on axle 3.
def r6(load_axle_1: float, load_axle_3: float) -> bool:
 if load_axle_1 <= load_axle_3:
 return True
 else:
 return False

# The payload cannot exceed the capacity of axle 2.
def r7(payload: float, axle_2_capacity: float) -> bool:
 if payload <= axle_2_capacity:
 return True
 else:
 return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r8(pto_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if total_operation_time >= pto_time + idle_time + driving_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
PTO operation time cannot be greater than the total operation time.
Total operation time should shouldn’t be lower than driving time.
PTO-engaged stops cannot exceed the total number of stops.
The weight on axle 1 cannot surpass the weight on axle 2.
The load supported by axle 1 cannot exceed that of axle 3.
The payload must always be smaller than or equal to the load on axle 3.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";" # The vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r1(hourly_fuel_consumption: float, traveled_distance: float) -> bool:
 if traveled_distance >= 20 and hourly_fuel_consumption <= 5:
 return False
 else:
 return True

# PTO operation time cannot be greater than the total operation time.
def r2(pto_operation_time: float, total_operation_time: float) -> bool:
 if pto_operation_time > total_operation_time:
 return False
 else:
 return True

# Total operation time should not be lower than driving time.
def r3(total_operation_time: float, driving_time: float) -> bool:
 if total_operation_time < driving_time:
 return False
 else:
 return True

# PTO-engaged stops cannot exceed the total number of stops.
def r4(pto_engaged_stops: int, total_stops: int) -> bool:
 if pto_engaged_stops > total_stops:
 return False
 else:
 return True

# The weight on axle 1 cannot surpass the weight on axle 2.
def r5(weight_axle_1: float, weight_axle_2: float) -> bool:
 if weight_axle_1 > weight_axle_2:
 return False
 else:
 return True

# The load supported by axle 1 cannot exceed that of axle 3.
def r6(load_axle_1: float, load_axle_3: float) -> bool:
 if load_axle_1 > load_axle_3:
 return False
 else:
 return True

# The payload must always be smaller than or equal to the load on axle 3.
def r7(payload: float, load_axle_3: float) -> bool:
 if payload > load_axle_3:
 return False
 else:
 return True

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r8(total_operation_time: float, pto_operation_time: float, idle_time: float, driving_time: float) -> bool:
 if total_operation_time < (pto_operation_time + idle_time + driving_time):
 return False
 else:
 return True"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
PTO operation time should be less than or equal to the total operation time.
Total operation time shouldn’t be lower than idle time.
Driving time must always be less than or equal to the total operation time.
Stops with PTO engaged cannot outnumber the total stops.
The payload must always be smaller than or equal to the load on axle 2.
The payload must not exceed the load carried by axle 3.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";" # The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance >= 20:
 if fuel_consumption <= 0.04:
 return True
 else:
 return False

# PTO operation time should be less than or equal to the total operation time.
def r2(pto_time: float, total_operation_time: float) -> bool:
 if pto_time <= total_operation_time:
 return True
 else:
 return False

# Total operation time shouldn’t be lower than idle time.
def r3(total_operation_time: float, idle_time: float) -> bool:
 if total_operation_time >= idle_time:
 return True
 else:
 return False

# Driving time must always be less than or equal to the total operation time.
def r4(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False

# Stops with PTO engaged cannot outnumber the total stops.
def r5(pto_stops: int, total_stops: int) -> bool:
 if pto_stops <= total_stops:
 return True
 else:
 return False

# The payload must always be smaller than or equal to the load on axle 2.
def r6(payload: float, load_axle_2: float) -> bool:
 if payload <= load_axle_2:
 return True
 else:
 return False

# The payload must not exceed the load carried by axle 3.
def r7(payload: float, load_axle_3: float) -> bool:
 if payload <= load_axle_3:
 return True
 else:
 return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r8(pto_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if pto_time + idle_time + driving_time <= total_operation_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
PTO operation time should be less than or equal to the total operation time.
Idle time must always be less than or equal to the total operation time.
Driving time should be less than or equal to the total operation time.
PTO-engaged stops cannot exceed the total number of stops.
The weight on axle 1 cannot surpass the weight on axle 2.
Payload must remain below or equal to the load carried by axle 2.
The payload cannot exceed the capacity of axle 3.
";" # The vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r1(hourly_fuel_consumption: float, traveled_distance: float) -> bool:
 if traveled_distance >= 20 and hourly_fuel_consumption <= 5:
 return False
 else:
 return True

# PTO operation time should be less than or equal to the total operation time.
def r2(pto_operation_time: float, total_operation_time: float) -> bool:
 if pto_operation_time <= total_operation_time:
 return True
 else:
 return False

# Idle time must always be less than or equal to the total operation time.
def r3(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# Driving time should be less than or equal to the total operation time.
def r4(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False

# PTO-engaged stops cannot exceed the total number of stops.
def r5(pto_engaged_stops: int, total_stops: int) -> bool:
 if pto_engaged_stops <= total_stops:
 return True
 else:
 return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r6(weight_axle_1: float, weight_axle_2: float) -> bool:
 if weight_axle_1 <= weight_axle_2:
 return True
 else:
 return False

# Payload must remain below or equal to the load carried by axle 2.
def r7(payload: float, load_axle_2: float) -> bool:
 if payload <= load_axle_2:
 return True
 else:
 return False

# The payload cannot exceed the capacity of axle 3.
def r8(payload: float, capacity_axle_3: float) -> bool:
 if payload <= capacity_axle_3:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
Total operation time shouldn’t be lower than PTO operation time.
Driving time cannot be greater than the total operation time.
The total stop count must not be lower than the count of stops where PTO is engaged.
Axle 1's load cannot exceed Axle 2's load.
Payload must remain below or equal to the load carried by axle 2.
The payload must always be smaller than or equal to the load on axle 3.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";" # If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
def r1(distance: float, fuel_consumption_rate: float) -> bool:
 if distance / 100 >= 20 and fuel_consumption_rate / 3600 >= 0.005:
 return True
 else:
 return False

# Total operation time shouldn’t be lower than PTO operation time.
def r2(total_operation_time: float, pto_operation_time: float) -> bool:
 if total_operation_time >= pto_operation_time:
 return True
 else:
 return False

# Driving time cannot be greater than the total operation time.
def r3(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r4(total_stop_count: int, pto_stop_count: int) -> bool:
 if total_stop_count >= pto_stop_count:
 return True
 else:
 return False

# Axle 1's load cannot exceed Axle 2's load.
def r5(axle1_load: float, axle2_load: float) -> bool:
 if axle1_load <= axle2_load:
 return True
 else:
 return False

# Payload must remain below or equal to the load carried by axle 2.
def r6(payload: float, axle2_load: float) -> bool:
 if payload <= axle2_load:
 return True
 else:
 return False

# The payload must always be smaller than or equal to the load on axle 3.
def r7(payload: float, axle3_load: float) -> bool:
 if payload <= axle3_load:
 return True
 else:
 return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r8(pto_time: float, idle_time: float, driving_time: float, total_operation_duration: float) -> bool:
 if pto_time + idle_time + driving_time <= total_operation_duration:
 return False
 else:
 return True"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: Total operation time shouldn’t be lower than idle time.
Driving time must always be less than or equal to the total operation time.
Stops with PTO engaged cannot outnumber the total stops.
The weight on axle 1 cannot surpass the weight on axle 2.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
Axle 2's load must always be equal to or greater than the payload.
The payload must not exceed the load carried by axle 3.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";" # Total operation time shouldn't be lower than idle time.
def r1(operation_time: float, idle_time: float) -> bool:
 if operation_time >= idle_time:
 return True
 else:
 return False

# Driving time must always be less than or equal to the total operation time.
def r2(driving_time: float, operation_time: float) -> bool:
 if driving_time <= operation_time:
 return True
 else:
 return False

# Stops with PTO engaged cannot outnumber the total stops.
def r3(pto_stops: int, total_stops: int) -> bool:
 if pto_stops <= total_stops:
 return True
 else:
 return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r4(axle_1_weight: float, axle_2_weight: float) -> bool:
 if axle_1_weight <= axle_2_weight:
 return True
 else:
 return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r5(axle_1_load: float, axle_3_load: float) -> bool:
 if axle_1_load <= axle_3_load:
 return True
 else:
 return False

# Axle 2's load must always be equal to or greater than the payload.
def r6(axle_2_load: float, payload: float) -> bool:
 if axle_2_load >= payload:
 return True
 else:
 return False

# The payload must not exceed the load carried by axle 3.
def r7(payload: float, axle_3_load: float) -> bool:
 if payload <= axle_3_load:
 return True
 else:
 return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r8(pto_time: float, idle_time: float, driving_time: float, operation_time: float) -> bool:
 if operation_time >= (pto_time + idle_time + driving_time):
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
Total operation time shouldn’t be lower than PTO operation time.
The weight on axle 1 cannot surpass the weight on axle 2.
The weight on axle 1 cannot surpass the weight on axle 3.
Axle 2's load must always be equal to or greater than the payload.
The payload must always be smaller than or equal to the load on axle 3.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";" # When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(total_distance: float, avg_fuel_consumption: float) -> bool:
 if total_distance >= 20 and avg_fuel_consumption <= 0.05:
 return True
 else:
 return False

# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def r2(total_distance: float, avg_fuel_consumption_per_distance: float) -> bool:
 if total_distance >= 20 and avg_fuel_consumption_per_distance >= 0.04:
 return True
 else:
 return False

# Total operation time shouldn’t be lower than PTO operation time.
def r3(total_operation_time: float, pto_operation_time: float) -> bool:
 if total_operation_time >= pto_operation_time:
 return True
 else:
 return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r4(weight_axle_1: float, weight_axle_2: float) -> bool:
 if weight_axle_1 <= weight_axle_2:
 return True
 else:
 return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r5(weight_axle_1: float, weight_axle_3: float) -> bool:
 if weight_axle_1 <= weight_axle_3:
 return True
 else:
 return False

# Axle 2's load must always be equal to or greater than the payload.
def r6(axle_2_load: float, payload: float) -> bool:
 if axle_2_load >= payload:
 return True
 else:
 return False

# The payload must always be smaller than or equal to the load on axle 3.
def r7(payload: float, axle_3_load: float) -> bool:
 if payload <= axle_3_load:
 return True
 else:
 return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r8(total_operation_time: float, pto_operation_time: float, idle_time: float, driving_time: float) -> bool:
 if total_operation_time >= (pto_operation_time + idle_time + driving_time):
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
PTO operation time should be less than or equal to the total operation time.
Idle time should be less than or equal to the total operation time.
Driving time must always be less than or equal to the total operation time.
The total stop count must not be lower than the count of stops where PTO is engaged.
Axle 1's load cannot exceed Axle 2's load.
Payload must remain below or equal to the load carried by axle 2.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";" # If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance >= 20:
 if fuel_consumption <= 5:
 return False
 else:
 return True

# PTO operation time should be less than or equal to the total operation time.
def r2(pto_time: float, total_operation_time: float) -> bool:
 if pto_time <= total_operation_time:
 return True
 else:
 return False

# Idle time should be less than or equal to the total operation time.
def r3(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# Driving time must always be less than or equal to the total operation time.
def r4(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r5(stop_count: int, pto_stop_count: int) -> bool:
 if stop_count >= pto_stop_count:
 return True
 else:
 return False

# Axle 1's load cannot exceed Axle 2's load.
def r6(axle1_load: float, axle2_load: float) -> bool:
 if axle1_load <= axle2_load:
 return True
 else:
 return False

# Payload must remain below or equal to the load carried by axle 2.
def r7(payload: float, axle2_load: float) -> bool:
 if payload <= axle2_load:
 return True
 else:
 return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r8(pto_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if pto_time + idle_time + driving_time <= total_operation_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
Driving time must always be less than or equal to the total operation time.
The total stop count must not be lower than the count of stops where PTO is engaged.
The weight on axle 1 cannot surpass the weight on axle 3.
The payload cannot exceed the capacity of axle 2.
The payload must not exceed the load carried by axle 3.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";" # If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance >= 20 and fuel_consumption / distance < 0.05:
 return False
 else:
 return True

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r2(distance: float, fuel_consumption: float, total_fuel_consumption: float) -> bool:
 if distance >= 20 and total_fuel_consumption / (distance / 100) < 40:
 return False
 else:
 return True

# Driving time must always be less than or equal to the total operation time.
def r3(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r4(total_stops: int, pto_stops: int) -> bool:
 if total_stops >= pto_stops:
 return True
 else:
 return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r5(weight_axle1: float, weight_axle3: float) -> bool:
 if weight_axle1 <= weight_axle3:
 return True
 else:
 return False

# The payload cannot exceed the capacity of axle 2.
def r6(payload: float, axle2_capacity: float) -> bool:
 if payload <= axle2_capacity:
 return True
 else:
 return False

# The payload must not exceed the load carried by axle 3.
def r7(payload: float, load_axle3: float) -> bool:
 if payload <= load_axle3:
 return True
 else:
 return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r8(pto_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if pto_time + idle_time + driving_time >= total_operation_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
The total operation duration must not be lower than the PTO operation time.
PTO-engaged stops cannot exceed the total number of stops.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
Axle 1's load cannot exceed Axle 3's load.
The payload cannot exceed the capacity of axle 3.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";" # When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(km: float, fuel_consumption: float) -> bool:
 if km >= 20 and fuel_consumption / (km / 100) <= 0.05:
 return True
 else:
 return False

# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def r2(km: float, fuel_consumption: float) -> bool:
 if km >= 20 and fuel_consumption / km >= 0.4:
 return True
 else:
 return False

# The total operation duration must not be lower than the PTO operation time.
def r3(operation_duration: float, pto_operation_time: float) -> bool:
 if operation_duration >= pto_operation_time:
 return True
 else:
 return False

# PTO-engaged stops cannot exceed the total number of stops.
def r4(pto_stops: int, total_stops: int) -> bool:
 if pto_stops <= total_stops:
 return True
 else:
 return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def r5(axle1_load: float, axle2_load: float) -> bool:
 if axle1_load <= axle2_load:
 return True
 else:
 return False

# Axle 1's load cannot exceed Axle 3's load.
def r6(axle1_load: float, axle3_load: float) -> bool:
 if axle1_load <= axle3_load:
 return True
 else:
 return False

# The payload cannot exceed the capacity of axle 3.
def r7(payload: float, axle3_capacity: float) -> bool:
 if payload <= axle3_capacity:
 return True
 else:
 return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r8(pto_time: float, idle_time: float, driving_time: float, operation_duration: float) -> bool:
 if operation_duration >= (pto_time + idle_time + driving_time):
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
The total operation duration must not be lower than the PTO operation time.
The total operation duration must not be lower than the idle time.
The total stop count must not be lower than the count of stops where PTO is engaged.
Payload must remain below or equal to the load carried by axle 2.
The payload cannot exceed the capacity of axle 3.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";" # The vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r1(vehicle_fuel_consumption: float, distance: float) -> bool:
 if distance >= 20 and vehicle_fuel_consumption <= 0.2:
 return False
 else:
 return True

# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r2(vehicle_fuel_consumption: float, distance: float) -> bool:
 if distance >= 20 and vehicle_fuel_consumption < (40 / 100 * distance):
 return False
 else:
 return True

# The total operation duration must not be lower than the PTO operation time.
def r3(total_operation_duration: float, pto_operation_time: float) -> bool:
 if total_operation_duration < pto_operation_time:
 return False
 else:
 return True

# The total operation duration must not be lower than the idle time.
def r4(total_operation_duration: float, idle_time: float) -> bool:
 if total_operation_duration < idle_time:
 return False
 else:
 return True

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r5(total_stops: int, pto_stops: int) -> bool:
 if total_stops < pto_stops:
 return False
 else:
 return True

# Payload must remain below or equal to the load carried by axle 2.
def r6(payload: float, axle_2_load: float) -> bool:
 if payload > axle_2_load:
 return False
 else:
 return True

# The payload cannot exceed the capacity of axle 3.
def r7(payload: float, axle_3_capacity: float) -> bool:
 if payload > axle_3_capacity:
 return False
 else:
 return True

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r8(total_operation_duration: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
 if total_operation_duration < (pto_time + idle_time + driving_time):
 return False
 else:
 return True"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: PTO operation time should be less than or equal to the total operation time.
Idle time must always be less than or equal to the total operation time.
PTO-engaged stops cannot exceed the total number of stops.
Axle 1's load cannot exceed Axle 2's load.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
The payload must not exceed the load carried by axle 2.
Axle 3's load must always be equal to or greater than the payload.
Total operation time should be at least the sum of PTO, idle, and driving times.
";" # PTO operation time should be less than or equal to the total operation time.
def r1(pto: float, total: float) -> bool:
 if pto <= total:
 return True
 else:
 return False

# Idle time must always be less than or equal to the total operation time.
def r2(idle: float, total: float) -> bool:
 if idle <= total:
 return True
 else:
 return False

# PTO-engaged stops cannot exceed the total number of stops.
def r3(pto_stops: int, total_stops: int) -> bool:
 if pto_stops <= total_stops:
 return True
 else:
 return False

# Axle 1's load cannot exceed Axle 2's load.
def r4(axle1: float, axle2: float) -> bool:
 if axle1 <= axle2:
 return True
 else:
 return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r5(axle1: float, axle3: float) -> bool:
 if axle1 <= axle3:
 return True
 else:
 return False

# The payload must not exceed the load carried by axle 2.
def r6(payload: float, axle2: float) -> bool:
 if payload <= axle2:
 return True
 else:
 return False

# Axle 3's load must always be equal to or greater than the payload.
def r7(axle3: float, payload: float) -> bool:
 if axle3 >= payload:
 return True
 else:
 return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r8(pto: float, idle: float, driving: float, total: float) -> bool:
 if total >= pto + idle + driving:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
The total operation duration must not be lower than the PTO operation time.
Total operation time shouldn’t be lower than idle time.
The number of stops where PTO is engaged must not exceed the overall stop count.
The weight on axle 1 cannot surpass the weight on axle 2.
The load supported by axle 1 cannot exceed that of axle 3.
The payload cannot exceed the capacity of axle 2.
The payload cannot exceed the capacity of axle 3.
";" # The vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r1(hourly_fuel_consumption: float, distance: float) -> bool:
 if distance >= 20 and hourly_fuel_consumption <= 0.005:
 return False
 else:
 return True

# The total operation duration must not be lower than the PTO operation time.
def r2(total_operation_time: float, pto_operation_time: float) -> bool:
 if total_operation_time < pto_operation_time:
 return False
 else:
 return True

# Total operation time shouldn’t be lower than idle time.
def r3(total_operation_time: float, idle_time: float) -> bool:
 if total_operation_time < idle_time:
 return False
 else:
 return True

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r4(stop_count: int, pto_stop_count: int) -> bool:
 if pto_stop_count > stop_count:
 return False
 else:
 return True

# The weight on axle 1 cannot surpass the weight on axle 2.
def r5(weight_axle1: float, weight_axle2: float) -> bool:
 if weight_axle1 > weight_axle2:
 return False
 else:
 return True

# The load supported by axle 1 cannot exceed that of axle 3.
def r6(load_axle1: float, load_axle3: float) -> bool:
 if load_axle1 > load_axle3:
 return False
 else:
 return True

# The payload cannot exceed the capacity of axle 2.
def r7(payload: float, capacity_axle2: float) -> bool:
 if payload > capacity_axle2:
 return False
 else:
 return True

# The payload cannot exceed the capacity of axle 3.
def r8(payload: float, capacity_axle3: float) -> bool:
 if payload > capacity_axle3:
 return False
 else:
 return True"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
Total operation time shouldn’t be lower than idle time.
Driving time should be less than or equal to the total operation time.
The load supported by axle 1 cannot exceed that of axle 3.
The payload must not exceed the load carried by axle 2.
The payload must not exceed the load carried by axle 3.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";" # For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(journey_length: float, fuel_consumption_per_hour: float) -> bool:
 if journey_length >= 20 and fuel_consumption_per_hour <= 0.2:
 return True
 else:
 return False

# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def r2(journey_length: float, fuel_consumption_per_distance: float) -> bool:
 if journey_length >= 20 and fuel_consumption_per_distance >= 0.4:
 return True
 else:
 return False

# Total operation time shouldn’t be lower than idle time.
def r3(operation_time: float, idle_time: float) -> bool:
 if operation_time >= idle_time:
 return True
 else:
 return False

# Driving time should be less than or equal to the total operation time.
def r4(operation_time: float, driving_time: float) -> bool:
 if operation_time >= driving_time:
 return True
 else:
 return False

# The load supported by axle 1 cannot exceed that of axle 3.
def r5(axle_1_load: float, axle_3_load: float) -> bool:
 if axle_1_load <= axle_3_load:
 return True
 else:
 return False

# The payload must not exceed the load carried by axle 2.
def r6(payload: float, axle_2_load: float) -> bool:
 if payload <= axle_2_load:
 return True
 else:
 return False

# The payload must not exceed the load carried by axle 3.
def r7(payload: float, axle_3_load: float) -> bool:
 if payload <= axle_3_load:
 return True
 else:
 return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r8(pto_time: float, idle_time: float, driving_time: float, operation_time: float) -> bool:
 if operation_time >= pto_time + idle_time + driving_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
Total operation time shouldn’t be lower than PTO operation time.
Idle time cannot be greater than the total operation time.
Driving time should be less than or equal to the total operation time.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
Payload must remain below or equal to the load carried by axle 2.
Total operation time should be at least the sum of PTO, idle, and driving times.
";" # For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(journey_length: float, fuel_consumption_per_hour: float) -> bool:
 if journey_length >= 20 and fuel_consumption_per_hour <= 0.2:
 return True
 else:
 return False

# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def r2(journey_length: float, fuel_consumption_per_distance: float) -> bool:
 if journey_length >= 20 and fuel_consumption_per_distance >= 0.4:
 return True
 else:
 return False

# Total operation time shouldn’t be lower than PTO operation time.
def r3(pto_time: float, total_operation_time: float) -> bool:
 if pto_time <= total_operation_time:
 return True
 else:
 return False

# Idle time cannot be greater than the total operation time.
def r4(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# Driving time should be less than or equal to the total operation time.
def r5(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r6(load_axle_1: float, load_axle_3: float) -> bool:
 if load_axle_1 <= load_axle_3:
 return True
 else:
 return False

# Payload must remain below or equal to the load carried by axle 2.
def r7(payload: float, load_axle_2: float) -> bool:
 if payload <= load_axle_2:
 return True
 else:
 return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r8(pto_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if pto_time + idle_time + driving_time <= total_operation_time:
 return False
 else:
 return True"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
PTO operation time must be less than or equal to the total operation time.
Idle time should be less than or equal to the total operation time.
The total stop count must not be lower than the count of stops where PTO is engaged.
The weight on axle 1 cannot surpass the weight on axle 2.
Axle 2's load must always be equal to or greater than the payload.
Payload must remain below or equal to the load carried by axle 3.
Total operation time should be at least the sum of PTO, idle, and driving times.
";" # If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance >= 20 and fuel_consumption / distance <= 0.25:
 return False
 else:
 return True

# PTO operation time must be less than or equal to the total operation time.
def r2(pto_time: float, total_time: float) -> bool:
 if pto_time <= total_time:
 return True
 else:
 return False

# Idle time should be less than or equal to the total operation time.
def r3(idle_time: float, total_time: float) -> bool:
 if idle_time <= total_time:
 return True
 else:
 return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r4(stop_count: int, pto_count: int) -> bool:
 if stop_count >= pto_count:
 return True
 else:
 return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r5(axle1_weight: float, axle2_weight: float) -> bool:
 if axle1_weight <= axle2_weight:
 return True
 else:
 return False

# Axle 2's load must always be equal to or greater than the payload.
def r6(axle2_load: float, payload: float) -> bool:
 if axle2_load >= payload:
 return True
 else:
 return False

# Payload must remain below or equal to the load carried by axle 3.
def r7(payload: float, axle3_load: float) -> bool:
 if payload <= axle3_load:
 return True
 else:
 return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r8(pto_time: float, idle_time: float, driving_time: float, total_time: float) -> bool:
 if total_time >= pto_time + idle_time + driving_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
Idle time should be less than or equal to the total operation time.
Driving time must always be less than or equal to the total operation time.
The total stop count must not be lower than the count of stops where PTO is engaged.
The weight on axle 1 cannot surpass the weight on axle 3.
The payload must not exceed the load carried by axle 2.
The payload must always be smaller than or equal to the load on axle 3.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";" # When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance >= 20 and fuel_consumption <= (40 * 0.01):
 return True
 else:
 return False

# Idle time should be less than or equal to the total operation time.
def r2(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# Driving time must always be less than or equal to the total operation time.
def r3(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r4(stop_count: int, pto_stop_count: int) -> bool:
 if stop_count >= pto_stop_count:
 return True
 else:
 return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r5(weight_axle1: float, weight_axle3: float) -> bool:
 if weight_axle1 <= weight_axle3:
 return True
 else:
 return False

# The payload must not exceed the load carried by axle 2.
def r6(payload: float, load_axle2: float) -> bool:
 if payload <= load_axle2:
 return True
 else:
 return False

# The payload must always be smaller than or equal to the load on axle 3.
def r7(payload: float, load_axle3: float) -> bool:
 if payload <= load_axle3:
 return True
 else:
 return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r8(pto_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if pto_time + idle_time + driving_time <= total_operation_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
PTO operation time should be less than or equal to the total operation time.
Total operation time shouldn’t be lower than idle time.
Total operation time should shouldn’t be lower than driving time.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
The load supported by axle 1 cannot exceed that of axle 3.
Axle 3's load must always be equal to or greater than the payload.
";" # If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
def r1(distance: float, fuel_consumption_rate_per_hour: float) -> bool:
 if distance >= 20 and fuel_consumption_rate_per_hour <= (5 / 10):
 return True
 else:
 return False

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r2(distance: float, fuel_consumption_rate_per_100_km: float) -> bool:
 if distance >= 20 and fuel_consumption_rate_per_100_km >= 40:
 return True
 else:
 return False

# PTO operation time should be less than or equal to the total operation time.
def r3(pto_operation_time: float, total_operation_time: float) -> bool:
 if pto_operation_time <= total_operation_time:
 return True
 else:
 return False

# Total operation time shouldn’t be lower than idle time.
def r4(total_operation_time: float, idle_time: float) -> bool:
 if total_operation_time >= idle_time:
 return True
 else:
 return False

# Total operation time should shouldn’t be lower than driving time.
def r5(total_operation_time: float, driving_time: float) -> bool:
 if total_operation_time >= driving_time:
 return True
 else:
 return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def r6(load_axle_1: float, load_axle_2: float) -> bool:
 if load_axle_1 <= load_axle_2:
 return True
 else:
 return False

# The load supported by axle 1 cannot exceed that of axle 3.
def r7(load_axle_1: float, load_axle_3: float) -> bool:
 if load_axle_1 <= load_axle_3:
 return True
 else:
 return False

# Axle 3's load must always be equal to or greater than the payload.
def r8(load_axle_3: float, payload: float) -> bool:
 if load_axle_3 >= payload:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
Total operation time shouldn’t be lower than PTO operation time.
Idle time cannot be greater than the total operation time.
Total operation time should shouldn’t be lower than driving time.
PTO-engaged stops cannot exceed the total number of stops.
The payload must always be smaller than or equal to the load on axle 3.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";" # For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(journey_length_km: float, fuel_consumption_per_hour: float) -> bool:
 if journey_length_km >= 20 and fuel_consumption_per_hour <= 0.2:
 return True
 else:
 return False

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r2(journey_length_km: float, fuel_consumption_per_100_km: float) -> bool:
 if journey_length_km >= 20 and fuel_consumption_per_100_km >= 0.04:
 return True
 else:
 return False

# Total operation time shouldn’t be lower than PTO operation time.
def r3(pto_operation_time: float, total_operation_time: float) -> bool:
 if pto_operation_time <= total_operation_time:
 return True
 else:
 return False

# Idle time cannot be greater than the total operation time.
def r4(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# Total operation time should shouldn’t be lower than driving time.
def r5(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False

# PTO-engaged stops cannot exceed the total number of stops.
def r6(pto_engaged_stops: int, total_stops: int) -> bool:
 if pto_engaged_stops <= total_stops:
 return True
 else:
 return False

# The payload must always be smaller than or equal to the load on axle 3.
def r7(payload: float, load_on_axle_3: float) -> bool:
 if payload <= load_on_axle_3:
 return True
 else:
 return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r8(pto_operation_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if pto_operation_time + idle_time + driving_time <= total_operation_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
PTO operation time must be less than or equal to the total operation time.
Idle time must always be less than or equal to the total operation time.
Driving time should be less than or equal to the total operation time.
Stops with PTO engaged should never outnumber total stops.
Axle 2's load must always be equal to or greater than the payload.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";" # For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(journey_length_km: float, fuel_consumption_per_hour: float) -> bool:
 if journey_length_km >= 20 and fuel_consumption_per_hour <= 0.2:
 return True
 else:
 return False

# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r2(journey_length_km: float, fuel_consumption_per_100_km: float) -> bool:
 if journey_length_km >= 20 and fuel_consumption_per_100_km >= 0.4:
 return True
 else:
 return False

# PTO operation time must be less than or equal to the total operation time.
def r3(pto_time: float, total_operation_time: float) -> bool:
 if pto_time <= total_operation_time:
 return True
 else:
 return False

# Idle time must always be less than or equal to the total operation time.
def r4(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# Driving time should be less than or equal to the total operation time.
def r5(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False

# Stops with PTO engaged should never outnumber total stops.
def r6(num_stops_pto_engaged: int, total_num_stops: int) -> bool:
 if num_stops_pto_engaged <= total_num_stops:
 return True
 else:
 return False

# Axle 2's load must always be equal to or greater than the payload.
def r7(axle_2_load: float, payload: float) -> bool:
 if axle_2_load >= payload:
 return True
 else:
 return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r8(pto_time: float, idle_time: float, driving_time: float, total_operation_duration: float) -> bool:
 if pto_time + idle_time + driving_time <= total_operation_duration:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: PTO operation time cannot be greater than the total operation time.
Idle time should be less than or equal to the total operation time.
Driving time cannot be greater than the total operation time.
PTO-engaged stops cannot exceed the total number of stops.
The weight on axle 1 cannot surpass the weight on axle 2.
The load on axle 1 must not surpass the load on axle 3.
The payload cannot exceed the capacity of axle 3.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";" # PTO operation time cannot be greater than the total operation time.
def r1(pto_operation_time: float, total_operation_time: float) -> bool:
 if pto_operation_time <= total_operation_time:
 return True
 else:
 return False

# Idle time should be less than or equal to the total operation time.
def r2(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# Driving time cannot be greater than the total operation time.
def r3(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False

# PTO-engaged stops cannot exceed the total number of stops.
def r4(pto_engaged_stops: int, total_stops: int) -> bool:
 if pto_engaged_stops <= total_stops:
 return True
 else:
 return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r5(axle_1_weight: float, axle_2_weight: float) -> bool:
 if axle_1_weight <= axle_2_weight:
 return True
 else:
 return False

# The load on axle 1 must not surpass the load on axle 3.
def r6(axle_1_load: float, axle_3_load: float) -> bool:
 if axle_1_load <= axle_3_load:
 return True
 else:
 return False

# The payload cannot exceed the capacity of axle 3.
def r7(payload: float, axle_3_capacity: float) -> bool:
 if payload <= axle_3_capacity:
 return True
 else:
 return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r8(pto_operation_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if (pto_operation_time + idle_time + driving_time) <= total_operation_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
Idle time cannot be greater than the total operation time.
Driving time must always be less than or equal to the total operation time.
The load supported by axle 1 cannot exceed that of axle 2.
The load supported by axle 1 cannot exceed that of axle 3.
The payload must not exceed the load carried by axle 2.
The payload must not exceed the load carried by axle 3.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";" # The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r1(total_distance: float, average_fuel_consumption: float) -> bool:
 if total_distance >= 20 and average_fuel_consumption * 100 >= 40:
 return True
 else:
 return False

# Idle time cannot be greater than the total operation time.
def r2(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# Driving time must always be less than or equal to the total operation time.
def r3(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r4(load_axle1: float, load_axle2: float) -> bool:
 if load_axle1 <= load_axle2:
 return True
 else:
 return False

# The load supported by axle 1 cannot exceed that of axle 3.
def r5(load_axle1: float, load_axle3: float) -> bool:
 if load_axle1 <= load_axle3:
 return True
 else:
 return False

# The payload must not exceed the load carried by axle 2.
def r6(payload: float, load_axle2: float) -> bool:
 if payload <= load_axle2:
 return True
 else:
 return False

# The payload must not exceed the load carried by axle 3.
def r7(payload: float, load_axle3: float) -> bool:
 if payload <= load_axle3:
 return True
 else:
 return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r8(pto_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if pto_time + idle_time + driving_time <= total_operation_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
Driving time must always be less than or equal to the total operation time.
Stops with PTO engaged cannot outnumber the total stops.
The weight on axle 1 cannot surpass the weight on axle 2.
The load on axle 1 must not surpass the load on axle 3.
Axle 2's load must always be equal to or greater than the payload.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";" # For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(journey_length: float, fuel_consumption_per_hour: float) -> bool:
 if journey_length >= 20 and fuel_consumption_per_hour <= 0.2:
 return True
 else:
 return False

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r2(journey_length: float, fuel_consumption_per_100km: float) -> bool:
 if journey_length >= 20 and fuel_consumption_per_100km >= 0.04:
 return True
 else:
 return False

# Driving time must always be less than or equal to the total operation time.
def r3(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False

# Stops with PTO engaged cannot outnumber the total stops.
def r4(num_stops_pto_engaged: int, total_num_stops: int) -> bool:
 if num_stops_pto_engaged <= total_num_stops:
 return True
 else:
 return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r5(weight_axle1: float, weight_axle2: float) -> bool:
 if weight_axle1 <= weight_axle2:
 return True
 else:
 return False

# The load on axle 1 must not surpass the load on axle 3.
def r6(load_axle1: float, load_axle3: float) -> bool:
 if load_axle1 <= load_axle3:
 return True
 else:
 return False

# Axle 2's load must always be equal to or greater than the payload.
def r7(axle2_load: float, payload: float) -> bool:
 if axle2_load >= payload:
 return True
 else:
 return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r8(pto_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if pto_time + idle_time + driving_time <= total_operation_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
The total operation duration must not be lower than the PTO operation time.
Idle time must always be less than or equal to the total operation time.
PTO-engaged stops cannot exceed the total number of stops.
The load supported by axle 1 cannot exceed that of axle 3.
The payload must always be smaller than or equal to the load on axle 2.
Axle 3's load must always be equal to or greater than the payload.
";" # When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(km: float, hourly_consumption: float) -> bool:
 if km >= 20 and hourly_consumption <= (5 / 100):
 return True
 else:
 return False

# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r2(km: float, fuel_consumption_per_distance: float) -> bool:
 if km >= 20 and fuel_consumption_per_distance >= 40:
 return True
 else:
 return False

# The total operation duration must not be lower than the PTO operation time.
def r3(operation_duration: float, pto_operation_time: float) -> bool:
 if operation_duration >= pto_operation_time:
 return True
 else:
 return False

# Idle time must always be less than or equal to the total operation time.
def r4(idle_time: float, operation_time: float) -> bool:
 if idle_time <= operation_time:
 return True
 else:
 return False

# PTO-engaged stops cannot exceed the total number of stops.
def r5(pto_stops: int, total_stops: int) -> bool:
 if pto_stops <= total_stops:
 return True
 else:
 return False

# The load supported by axle 1 cannot exceed that of axle 3.
def r6(axle_1_load: float, axle_3_load: float) -> bool:
 if axle_1_load <= axle_3_load:
 return True
 else:
 return False

# The payload must always be smaller than or equal to the load on axle 2.
def r7(payload: float, axle_2_load: float) -> bool:
 if payload <= axle_2_load:
 return True
 else:
 return False

# Axle 3's load must always be equal to or greater than the payload.
def r8(payload: float, axle_3_load: float) -> bool:
 if axle_3_load >= payload:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
PTO operation time must be less than or equal to the total operation time.
Idle time should be less than or equal to the total operation time.
Driving time should be less than or equal to the total operation time.
PTO-engaged stops cannot exceed the total number of stops.
The weight on axle 1 cannot surpass the weight on axle 2.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
The payload must not exceed the load carried by axle 2.
";" # If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
def r1(distance: float, fuel_consumption_rate: float) -> bool:
 if distance / 60 >= 20 and fuel_consumption_rate <= 5:
 return True
 else:
 return False

# PTO operation time must be less than or equal to the total operation time.
def r2(pto_operation_time: float, total_operation_time: float) -> bool:
 if pto_operation_time <= total_operation_time:
 return True
 else:
 return False

# Idle time should be less than or equal to the total operation time.
def r3(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# Driving time should be less than or equal to the total operation time.
def r4(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False

# PTO-engaged stops cannot exceed the total number of stops.
def r5(pto_engaged_stops: int, total_stops: int) -> bool:
 if pto_engaged_stops <= total_stops:
 return True
 else:
 return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r6(weight_axle1: float, weight_axle2: float) -> bool:
 if weight_axle1 <= weight_axle2:
 return True
 else:
 return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r7(load_axle1: float, load_axle3: float) -> bool:
 if load_axle1 <= load_axle3:
 return True
 else:
 return False

# The payload must not exceed the load carried by axle 2.
def r8(payload: float, load_axle2: float) -> bool:
 if payload <= load_axle2:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
PTO operation time must be less than or equal to the total operation time.
Idle time cannot be greater than the total operation time.
The total operation durationmust not be lower than the driving time.
The load on axle 1 must not surpass the load on axle 2.
The load on axle 1 must not surpass the load on axle 3.
Payload must remain below or equal to the load carried by axle 2.
";" # If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance: float, fuel_consumption: float) -> bool:
 if distance >= 20:
 if fuel_consumption / distance <= 0.2:
 return False
 else:
 return True

# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def r2(distance: float, average_fuel_consumption: float) -> bool:
 if distance >= 20:
 if average_fuel_consumption >= 0.4:
 return True
 else:
 return False

# PTO operation time must be less than or equal to the total operation time.
def r3(pto_operation_time: float, total_operation_time: float) -> bool:
 if pto_operation_time <= total_operation_time:
 return True
 else:
 return False

# Idle time cannot be greater than the total operation time.
def r4(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# The total operation duration must not be lower than the driving time.
def r5(total_operation_duration: float, driving_time: float) -> bool:
 if total_operation_duration >= driving_time:
 return True
 else:
 return False

# The load on axle 1 must not surpass the load on axle 2.
def r6(load_axle1: float, load_axle2: float) -> bool:
 if load_axle1 <= load_axle2:
 return True
 else:
 return False

# The load on axle 1 must not surpass the load on axle 3.
def r7(load_axle1: float, load_axle3: float) -> bool:
 if load_axle1 <= load_axle3:
 return True
 else:
 return False

# Payload must remain below or equal to the load carried by axle 2.
def r8(payload: float, load_axle2: float) -> bool:
 if payload <= load_axle2:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
PTO operation time cannot be greater than the total operation time.
Total operation time shouldn’t be lower than idle time.
Total operation time should shouldn’t be lower than driving time.
Stops with PTO engaged should never outnumber total stops.
Axle 1's load cannot exceed Axle 2's load.
The payload must always be smaller than or equal to the load on axle 2.
The payload must always be smaller than or equal to the load on axle 3.
";" # If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r1(distance: float, fuel_consumption: float) -> bool:
 if fuel_consumption * 100 / distance <= 40:
 return False
 else:
 return True

# PTO operation time cannot be greater than the total operation time.
def r2(pto_time: float, total_time: float) -> bool:
 if pto_time > total_time:
 return False
 else:
 return True

# Total operation time shouldn’t be lower than idle time.
def r3(total_time: float, idle_time: float) -> bool:
 if total_time < idle_time:
 return False
 else:
 return True

# Total operation time should shouldn’t be lower than driving time.
def r4(total_time: float, driving_time: float) -> bool:
 if total_time < driving_time:
 return False
 else:
 return True

# Stops with PTO engaged should never outnumber total stops.
def r5(pto_stops: int, total_stops: int) -> bool:
 if pto_stops > total_stops:
 return False
 else:
 return True

# Axle 1's load cannot exceed Axle 2's load.
def r6(axle1_load: float, axle2_load: float) -> bool:
 if axle1_load > axle2_load:
 return False
 else:
 return True

# The payload must always be smaller than or equal to the load on axle 2.
def r7(payload: float, axle2_load: float) -> bool:
 if payload > axle2_load:
 return False
 else:
 return True

# The payload must always be smaller than or equal to the load on axle 3.
def r8(payload: float, axle3_load: float) -> bool:
 if payload > axle3_load:
 return False
 else:
 return True"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
The total operation duration must not be lower than the idle time.
Driving time must always be less than or equal to the total operation time.
PTO-engaged stops cannot exceed the total number of stops.
Axle 1's load cannot exceed Axle 3's load.
Payload must remain below or equal to the load carried by axle 2.
Payload must remain below or equal to the load carried by axle 3.
Total operation time should be at least the sum of PTO, idle, and driving times.
";" # For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(journey_length: float, fuel_consumption_per_hour: float) -> bool:
 if journey_length >= 20 and fuel_consumption_per_hour <= 0.005:
 return True
 else:
 return False

# The total operation duration must not be lower than the idle time.
def r2(total_operation_duration: float, idle_time: float) -> bool:
 if total_operation_duration >= idle_time:
 return True
 else:
 return False

# Driving time must always be less than or equal to the total operation time.
def r3(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False

# PTO-engaged stops cannot exceed the total number of stops.
def r4(pto_engaged_stops: int, total_stops: int) -> bool:
 if pto_engaged_stops <= total_stops:
 return True
 else:
 return False

# Axle 1's load cannot exceed Axle 3's load.
def r5(axle_1_load: float, axle_3_load: float) -> bool:
 if axle_1_load <= axle_3_load:
 return True
 else:
 return False

# Payload must remain below or equal to the load carried by axle 2.
def r6(payload: float, axle_2_load: float) -> bool:
 if payload <= axle_2_load:
 return True
 else:
 return False

# Payload must remain below or equal to the load carried by axle 3.
def r7(payload: float, axle_3_load: float) -> bool:
 if payload <= axle_3_load:
 return True
 else:
 return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r8(pto_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if total_operation_time >= pto_time + idle_time + driving_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
Idle time cannot be greater than the total operation time.
Total operation time should shouldn’t be lower than driving time.
Stops with PTO engaged cannot outnumber the total stops.
The weight on axle 1 cannot surpass the weight on axle 2.
Axle 1's load cannot exceed Axle 3's load.
Axle 3's load must always be equal to or greater than the payload.
Total operation time should be at least the sum of PTO, idle, and driving times.
";" # The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r1(travel_distance: float, fuel_consumption: float) -> bool:
 if travel_distance >= 20 and fuel_consumption <= 0.4:
 return True
 else:
 return False

# Idle time cannot be greater than the total operation time.
def r2(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# Total operation time should not be lower than driving time.
def r3(total_operation_time: float, driving_time: float) -> bool:
 if total_operation_time >= driving_time:
 return True
 else:
 return False

# Stops with PTO engaged cannot outnumber the total stops.
def r4(num_stops_pto_engaged: int, total_num_stops: int) -> bool:
 if num_stops_pto_engaged <= total_num_stops:
 return True
 else:
 return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r5(weight_axle_1: float, weight_axle_2: float) -> bool:
 if weight_axle_1 <= weight_axle_2:
 return True
 else:
 return False

# Axle 1's load cannot exceed Axle 3's load.
def r6(load_axle_1: float, load_axle_3: float) -> bool:
 if load_axle_1 <= load_axle_3:
 return True
 else:
 return False

# Axle 3's load must always be equal to or greater than the payload.
def r7(load_axle_3: float, payload: float) -> bool:
 if load_axle_3 >= payload:
 return True
 else:
 return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r8(pto_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if total_operation_time >= pto_time + idle_time + driving_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
Total operation time shouldn’t be lower than PTO operation time.
The total operation duration must not be lower than the idle time.
Driving time must always be less than or equal to the total operation time.
The load on axle 1 must not surpass the load on axle 3.
The payload must not exceed the load carried by axle 2.
The payload must always be smaller than or equal to the load on axle 3.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";" # For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r10(journey_length: float, fuel_consumption_per_hour: float) -> bool:
 if journey_length >= 20 and fuel_consumption_per_hour <= 0.05:
 return True
 else:
 return False

# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def r11(journey_length: float, fuel_consumption_per_distance: float) -> bool:
 if journey_length >= 20 and fuel_consumption_per_distance >= 0.04:
 return True
 else:
 return False

# Total operation time shouldn’t be lower than PTO operation time.
def r12(total_operation_time: float, pto_operation_time: float) -> bool:
 if total_operation_time >= pto_operation_time:
 return True
 else:
 return False

# The total operation duration must not be lower than the idle time.
def r13(total_operation_duration: float, idle_time: float) -> bool:
 if total_operation_duration >= idle_time:
 return True
 else:
 return False

# Driving time must always be less than or equal to the total operation time.
def r14(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False

# The load on axle 1 must not surpass the load on axle 3.
def r15(load_on_axle_1: float, load_on_axle_3: float) -> bool:
 if load_on_axle_1 <= load_on_axle_3:
 return True
 else:
 return False

# The payload must not exceed the load carried by axle 2.
def r16(payload: float, load_on_axle_2: float) -> bool:
 if payload <= load_on_axle_2:
 return True
 else:
 return False

# The payload must always be smaller than or equal to the load on axle 3.
def r17(payload: float, load_on_axle_3: float) -> bool:
 if payload <= load_on_axle_3:
 return True
 else:
 return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r18(total_operation_time: float, pto_operation_time: float, idle_time: float, driving_time: float) -> bool:
 if total_operation_time >= (pto_operation_time + idle_time + driving_time):
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
PTO operation time cannot be greater than the total operation time.
The total operation duration must not be lower than the idle time.
Driving time cannot be greater than the total operation time.
The load supported by axle 1 cannot exceed that of axle 2.
The load on axle 1 must not surpass the load on axle 3.
Axle 2's load must always be equal to or greater than the payload.
Payload must remain below or equal to the load carried by axle 3.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";" # When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r10(km: float, fuel_consumption: float) -> bool:
 if km >= 20 and fuel_consumption / km <= 0.25:
 return True
 else:
 return False

# PTO operation time cannot be greater than the total operation time.
def r11(pto_time: float, total_operation_time: float) -> bool:
 if pto_time <= total_operation_time:
 return True
 else:
 return False

# The total operation duration must not be lower than the idle time.
def r12(total_operation_time: float, idle_time: float) -> bool:
 if total_operation_time >= idle_time:
 return True
 else:
 return False

# Driving time cannot be greater than the total operation time.
def r13(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r14(axle1_load: float, axle2_load: float) -> bool:
 if axle1_load <= axle2_load:
 return True
 else:
 return False

# The load on axle 1 must not surpass the load on axle 3.
def r15(axle1_load: float, axle3_load: float) -> bool:
 if axle1_load <= axle3_load:
 return True
 else:
 return False

# Axle 2's load must always be equal to or greater than the payload.
def r16(axle2_load: float, payload: float) -> bool:
 if axle2_load >= payload:
 return True
 else:
 return False

# Payload must remain below or equal to the load carried by axle 3.
def r17(payload: float, axle3_load: float) -> bool:
 if payload <= axle3_load:
 return True
 else:
 return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r18(pto_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if total_operation_time >= pto_time + idle_time + driving_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
The total operation duration must not be lower than the PTO operation time.
Idle time should be less than or equal to the total operation time.
The number of stops where PTO is engaged must not exceed the overall stop count.
The weight on axle 1 cannot surpass the weight on axle 2.
Axle 1's load cannot exceed Axle 3's load.
Payload must remain below or equal to the load carried by axle 3.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";" # The vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r10(hourly_consumption: float, traveled_distance: float) -> bool:
 if traveled_distance >= 20 and hourly_consumption < 5:
 return False
 else:
 return True

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r11(total_fuel_consumption: float, traveled_distance: float) -> bool:
 if traveled_distance < 20 or total_fuel_consumption / traveled_distance < 0.04:
 return False
 else:
 return True

# The total operation duration must not be lower than the PTO operation time.
def r12(total_operation_duration: float, pto_operation_time: float) -> bool:
 if total_operation_duration < pto_operation_time:
 return False
 else:
 return True

# Idle time should be less than or equal to the total operation time.
def r13(idle_time: float, total_operation_time: float) -> bool:
 if idle_time > total_operation_time:
 return False
 else:
 return True

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r14(pto_stops_count: int, overall_stops_count: int) -> bool:
 if pto_stops_count > overall_stops_count:
 return False
 else:
 return True

# The weight on axle 1 cannot surpass the weight on axle 2.
def r15(weight_axle1: float, weight_axle2: float) -> bool:
 if weight_axle1 > weight_axle2:
 return False
 else:
 return True

# Axle 1's load cannot exceed Axle 3's load.
def r16(axle1_load: float, axle3_load: float) -> bool:
 if axle1_load > axle3_load:
 return False
 else:
 return True

# Payload must remain below or equal to the load carried by axle 3.
def r17(payload: float, axle3_load: float) -> bool:
 if payload > axle3_load:
 return False
 else:
 return True

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r18(total_operation_duration: float, pto_duration: float, idle_duration: float, driving_duration: float) -> bool:
 if total_operation_duration < (pto_duration + idle_duration + driving_duration):
 return False
 else:
 return True"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
PTO operation time must be less than or equal to the total operation time.
Idle time should be less than or equal to the total operation time.
Driving time cannot be greater than the total operation time.
The number of stops where PTO is engaged must not exceed the overall stop count.
The load on axle 1 must not surpass the load on axle 2.
The payload must always be smaller than or equal to the load on axle 2.
The payload cannot exceed the capacity of axle 3.
";" # When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r10(total_distance: float, avg_fuel_consumption: float) -> bool:
 if total_distance >= 20 and avg_fuel_consumption <= 0.2:
 return True
 else:
 return False

# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r11(total_distance: float, avg_fuel_consumption_per_distance: float) -> bool:
 if total_distance >= 20 and avg_fuel_consumption_per_distance >= 0.4:
 return True
 else:
 return False

# PTO operation time must be less than or equal to the total operation time.
def r12(pto_operation_time: float, total_operation_time: float) -> bool:
 if pto_operation_time <= total_operation_time:
 return True
 else:
 return False

# Idle time should be less than or equal to the total operation time.
def r13(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# Driving time cannot be greater than the total operation time.
def r14(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r15(num_stops_pto_engaged: int, total_stops: int) -> bool:
 if num_stops_pto_engaged <= total_stops:
 return True
 else:
 return False

# The load on axle 1 must not surpass the load on axle 2.
def r16(load_axle_1: float, load_axle_2: float) -> bool:
 if load_axle_1 <= load_axle_2:
 return True
 else:
 return False

# The payload must always be smaller than or equal to the load on axle 2.
def r17(payload: float, load_axle_2: float) -> bool:
 if payload <= load_axle_2:
 return True
 else:
 return False

# The payload cannot exceed the capacity of axle 3.
def r18(payload: float, axle_3_capacity: float) -> bool:
 if payload <= axle_3_capacity:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
PTO operation time should be less than or equal to the total operation time.
Idle time must always be less than or equal to the total operation time.
Driving time must always be less than or equal to the total operation time.
PTO-engaged stops cannot exceed the total number of stops.
Axle 1's load cannot exceed Axle 2's load.
The weight on axle 1 cannot surpass the weight on axle 3.
Payload must remain below or equal to the load carried by axle 2.
Total operation time should be at least the sum of PTO, idle, and driving times.
";" # If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r10(vehicle_distance: float, fuel_consumption: float) -> bool:
 if fuel_consumption * 100 / vehicle_distance <= 40:
 return False
 else:
 return True

# PTO operation time should be less than or equal to the total operation time.
def r11(pto_time: float, total_operation_time: float) -> bool:
 if pto_time <= total_operation_time:
 return True
 else:
 return False

# Idle time must always be less than or equal to the total operation time.
def r12(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# Driving time must always be less than or equal to the total operation time.
def r13(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False

# PTO-engaged stops cannot exceed the total number of stops.
def r14(pto_stops: int, total_stops: int) -> bool:
 if pto_stops <= total_stops:
 return True
 else:
 return False

# Axle 1's load cannot exceed Axle 2's load.
def r15(axle1_load: float, axle2_load: float) -> bool:
 if axle1_load <= axle2_load:
 return True
 else:
 return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r16(axle1_weight: float, axle3_weight: float) -> bool:
 if axle1_weight <= axle3_weight:
 return True
 else:
 return False

# Payload must remain below or equal to the load carried by axle 2.
def r17(payload: float, axle2_load: float) -> bool:
 if payload <= axle2_load:
 return True
 else:
 return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r18(pto_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if pto_time + idle_time + driving_time <= total_operation_time:
 return False
 else:
 return True"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
PTO operation time should be less than or equal to the total operation time.
Driving time cannot be greater than the total operation time.
Stops with PTO engaged cannot outnumber the total stops.
The load supported by axle 1 cannot exceed that of axle 2.
The weight on axle 1 cannot surpass the weight on axle 3.
The payload must not exceed the load carried by axle 2.
Axle 3's load must always be equal to or greater than the payload.
";" # When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r10(total_distance: float, avg_fuel_consumption: float) -> bool:
 if total_distance / 100 >= 20 and avg_fuel_consumption / 5 >= 0.2:
 return True
 else:
 return False

# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r11(total_distance: float, avg_fuel_consumption_per_distance: float) -> bool:
 if total_distance / 100 >= 20 and avg_fuel_consumption_per_distance >= 40:
 return True
 else:
 return False

# PTO operation time should be less than or equal to the total operation time.
def r12(pto_operation_time: float, total_operation_time: float) -> bool:
 if pto_operation_time <= total_operation_time:
 return True
 else:
 return False

# Driving time cannot be greater than the total operation time.
def r13(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False

# Stops with PTO engaged cannot outnumber the total stops.
def r14(num_stops_with_pto: int, total_stops: int) -> bool:
 if num_stops_with_pto <= total_stops:
 return True
 else:
 return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r15(load_axle_1: float, load_axle_2: float) -> bool:
 if load_axle_1 <= load_axle_2:
 return True
 else:
 return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r16(weight_axle_1: float, weight_axle_3: float) -> bool:
 if weight_axle_1 <= weight_axle_3:
 return True
 else:
 return False

# The payload must not exceed the load carried by axle 2.
def r17(payload: float, load_axle_2: float) -> bool:
 if payload <= load_axle_2:
 return True
 else:
 return False

# Axle 3's load must always be equal to or greater than the payload.
def r18(payload: float, load_axle_3: float) -> bool:
 if load_axle_3 >= payload:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
Idle time cannot be greater than the total operation time.
Driving time should be less than or equal to the total operation time.
The total stop count must not be lower than the count of stops where PTO is engaged.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
The load supported by axle 1 cannot exceed that of axle 3.
The payload must not exceed the load carried by axle 2.
The payload must not exceed the load carried by axle 3.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";" # When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def r10(distance: float, fuel_consumption: float) -> bool:
 if distance >= 20 and fuel_consumption >= 0.04:
 return True
 else:
 return False

# Idle time cannot be greater than the total operation time.
def r11(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# Driving time should be less than or equal to the total operation time.
def r12(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r13(total_stop_count: int, pto_engaged_count: int) -> bool:
 if total_stop_count >= pto_engaged_count:
 return True
 else:
 return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def r14(load_axle1: float, load_axle2: float) -> bool:
 if load_axle1 <= load_axle2:
 return True
 else:
 return False

# The load supported by axle 1 cannot exceed that of axle 3.
def r15(load_axle1: float, load_axle3: float) -> bool:
 if load_axle1 <= load_axle3:
 return True
 else:
 return False

# The payload must not exceed the load carried by axle 2.
def r16(payload: float, load_axle2: float) -> bool:
 if payload <= load_axle2:
 return True
 else:
 return False

# The payload must not exceed the load carried by axle 3.
def r17(payload: float, load_axle3: float) -> bool:
 if payload <= load_axle3:
 return True
 else:
 return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r18(pto_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if pto_time + idle_time + driving_time <= total_operation_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
PTO operation time should be less than or equal to the total operation time.
Idle time should be less than or equal to the total operation time.
Driving time cannot be greater than the total operation time.
The total stop count must not be lower than the count of stops where PTO is engaged.
Axle 1's load cannot exceed Axle 2's load.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
The payload cannot exceed the capacity of axle 3.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";" # For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r10(journey_length: float, fuel_consumption_per_hour: float) -> bool:
 if journey_length >= 20 and fuel_consumption_per_hour <= 0.005:
 return True
 else:
 return False

# PTO operation time should be less than or equal to the total operation time.
def r11(pto_operation_time: float, total_operation_time: float) -> bool:
 if pto_operation_time <= total_operation_time:
 return True
 else:
 return False

# Idle time should be less than or equal to the total operation time.
def r12(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# Driving time cannot be greater than the total operation time.
def r13(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r14(total_stop_count: int, pto_engaged_stop_count: int) -> bool:
 if total_stop_count >= pto_engaged_stop_count:
 return True
 else:
 return False

# Axle 1's load cannot exceed Axle 2's load.
def r15(axle1_load: float, axle2_load: float) -> bool:
 if axle1_load <= axle2_load:
 return True
 else:
 return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r16(axle1_load: float, axle3_load: float) -> bool:
 if axle1_load <= axle3_load:
 return True
 else:
 return False

# The payload cannot exceed the capacity of axle 3.
def r17(payload: float, axle3_capacity: float) -> bool:
 if payload <= axle3_capacity:
 return True
 else:
 return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r18(pto_operation_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if pto_operation_time + idle_time + driving_time <= total_operation_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
PTO operation time should be less than or equal to the total operation time.
The total operation duration must not be lower than the idle time.
The total operation durationmust not be lower than the driving time.
Stops with PTO engaged cannot outnumber the total stops.
The load on axle 1 must not surpass the load on axle 2.
Axle 2's load must always be equal to or greater than the payload.
Axle 3's load must always be equal to or greater than the payload.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";" # If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r10(vehicle_distance: float, fuel_consumption: float) -> bool:
 if fuel_consumption * vehicle_distance / 100 >= 0.4:
 return True
 else:
 return False

# PTO operation time should be less than or equal to the total operation time.
def r11(pto_time: float, total_operation_time: float) -> bool:
 if pto_time <= total_operation_time:
 return True
 else:
 return False

# The total operation duration must not be lower than the idle time.
def r12(total_operation_time: float, idle_time: float) -> bool:
 if total_operation_time >= idle_time:
 return True
 else:
 return False

# The total operation duration must not be lower than the driving time.
def r13(total_operation_time: float, driving_time: float) -> bool:
 if total_operation_time >= driving_time:
 return True
 else:
 return False

# Stops with PTO engaged cannot outnumber the total stops.
def r14(pto_stops_count: int, total_stops_count: int) -> bool:
 if pto_stops_count <= total_stops_count:
 return True
 else:
 return False

# The load on axle 1 must not surpass the load on axle 2.
def r15(axle1_load: float, axle2_load: float) -> bool:
 if axle1_load <= axle2_load:
 return True
 else:
 return False

# Axle 2's load must always be equal to or greater than the payload.
def r16(axle2_load: float, payload: float) -> bool:
 if axle2_load >= payload:
 return True
 else:
 return False

# Axle 3's load must always be equal to or greater than the payload.
def r17(axle3_load: float, payload: float) -> bool:
 if axle3_load >= payload:
 return True
 else:
 return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r18(total_operation_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
 if total_operation_time >= pto_time + idle_time + driving_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
PTO operation time must be less than or equal to the total operation time.
Idle time cannot be greater than the total operation time.
Driving time should be less than or equal to the total operation time.
PTO-engaged stops cannot exceed the total number of stops.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
The load on axle 1 must not surpass the load on axle 3.
Axle 2's load must always be equal to or greater than the payload.
";" # When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r10(total_distance: float, avg_fuel_consumption: float) -> bool:
 if total_distance >= 20 and avg_fuel_consumption / 3.6 >= 5:
 return True
 else:
 return False

# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r11(total_distance: float, avg_fuel_consumption: float) -> bool:
 if total_distance >= 20 and avg_fuel_consumption >= 40:
 return True
 else:
 return False

# PTO operation time must be less than or equal to the total operation time.
def r12(pto_operation_time: float, total_operation_time: float) -> bool:
 if pto_operation_time <= total_operation_time:
 return True
 else:
 return False

# Idle time cannot be greater than the total operation time.
def r13(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# Driving time should be less than or equal to the total operation time.
def r14(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False

# PTO-engaged stops cannot exceed the total number of stops.
def r15(pto_engaged_stops: int, total_stops: int) -> bool:
 if pto_engaged_stops <= total_stops:
 return True
 else:
 return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def r16(load_axle1: float, load_axle2: float) -> bool:
 if load_axle1 <= load_axle2:
 return True
 else:
 return False

# The load on axle 1 must not surpass the load on axle 3.
def r17(load_axle1: float, load_axle3: float) -> bool:
 if load_axle1 <= load_axle3:
 return True
 else:
 return False

# Axle 2's load must always be equal to or greater than the payload.
def r18(load_axle2: float, payload: float) -> bool:
 if load_axle2 >= payload:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
The total operation duration must not be lower than the idle time.
The total operation durationmust not be lower than the driving time.
Stops with PTO engaged cannot outnumber the total stops.
The load supported by axle 1 cannot exceed that of axle 2.
The load on axle 1 must not surpass the load on axle 3.
Axle 3's load must always be equal to or greater than the payload.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";" # When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r10(km: float, fuel_consumption: float) -> bool:
 if km >= 20 and fuel_consumption / km <= 0.25:
 return True
 else:
 return False

# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r11(km: float, fuel_consumption: float) -> bool:
 if km >= 20 and fuel_consumption / km >= 0.4:
 return True
 else:
 return False

# The total operation duration must not be lower than the idle time.
def r12(operation_duration: float, idle_time: float) -> bool:
 if operation_duration >= idle_time:
 return True
 else:
 return False

# The total operation duration must not be lower than the driving time.
def r13(operation_duration: float, driving_time: float) -> bool:
 if operation_duration >= driving_time:
 return True
 else:
 return False

# Stops with PTO engaged cannot outnumber the total stops.
def r14(pto_stops: int, total_stops: int) -> bool:
 if pto_stops <= total_stops:
 return True
 else:
 return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r15(axle1_load: float, axle2_load: float) -> bool:
 if axle1_load <= axle2_load:
 return True
 else:
 return False

# The load on axle 1 must not surpass the load on axle 3.
def r16(axle1_load: float, axle3_load: float) -> bool:
 if axle1_load <= axle3_load:
 return True
 else:
 return False

# Axle 3's load must always be equal to or greater than the payload.
def r17(axle3_load: float, payload: float) -> bool:
 if axle3_load >= payload:
 return True
 else:
 return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r18(pto_time: float, idle_time: float, driving_time: float, operation_duration: float) -> bool:
 if operation_duration >= pto_time + idle_time + driving_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
The total operation duration must not be lower than the PTO operation time.
Idle time must always be less than or equal to the total operation time.
Stops with PTO engaged should never outnumber total stops.
The load supported by axle 1 cannot exceed that of axle 2.
Axle 1's load cannot exceed Axle 3's load.
Axle 2's load must always be equal to or greater than the payload.
The payload must not exceed the load carried by axle 3.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";" # The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r10(average_fuel_consumption: float, distance: float) -> bool:
 if distance >= 20 and average_fuel_consumption * 100 / distance <= 40:
 return True
 else:
 return False

# The total operation duration must not be lower than the PTO operation time.
def r11(total_operation_duration: float, pto_operation_time: float) -> bool:
 if total_operation_duration >= pto_operation_time:
 return True
 else:
 return False

# Idle time must always be less than or equal to the total operation time.
def r12(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# Stops with PTO engaged should never outnumber total stops.
def r13(pto_engaged_stops: int, total_stops: int) -> bool:
 if pto_engaged_stops <= total_stops:
 return True
 else:
 return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r14(axle_1_load: float, axle_2_load: float) -> bool:
 if axle_1_load <= axle_2_load:
 return True
 else:
 return False

# Axle 1's load cannot exceed Axle 3's load.
def r15(axle_1_load: float, axle_3_load: float) -> bool:
 if axle_1_load <= axle_3_load:
 return True
 else:
 return False

# Axle 2's load must always be equal to or greater than the payload.
def r16(axle_2_load: float, payload: float) -> bool:
 if axle_2_load >= payload:
 return True
 else:
 return False

# The payload must not exceed the load carried by axle 3.
def r17(payload: float, axle_3_load: float) -> bool:
 if payload <= axle_3_load:
 return True
 else:
 return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r18(total_operation_time: float, pto_operation_time: float, idle_time: float, driving_time: float) -> bool:
 if total_operation_time >= pto_operation_time + idle_time + driving_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
PTO operation time should be less than or equal to the total operation time.
Idle time must always be less than or equal to the total operation time.
Driving time should be less than or equal to the total operation time.
PTO-engaged stops cannot exceed the total number of stops.
The load supported by axle 1 cannot exceed that of axle 2.
The payload must always be smaller than or equal to the load on axle 2.
Payload must remain below or equal to the load carried by axle 3.
Total operation time should be at least the sum of PTO, idle, and driving times.
";" # When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r10(total_distance: float, avg_fuel_consumption: float) -> bool:
 if total_distance / (60 * 3.6) >= 20 and avg_fuel_consumption <= 5:
 return True
 else:
 return False

# PTO operation time should be less than or equal to the total operation time.
def r11(pto_time: float, total_operation_time: float) -> bool:
 if pto_time <= total_operation_time:
 return True
 else:
 return False

# Idle time must always be less than or equal to the total operation time.
def r12(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# Driving time should be less than or equal to the total operation time.
def r13(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False

# PTO-engaged stops cannot exceed the total number of stops.
def r14(pto_stops: int, total_stops: int) -> bool:
 if pto_stops <= total_stops:
 return True
 else:
 return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r15(axle1_load: float, axle2_load: float) -> bool:
 if axle1_load <= axle2_load:
 return True
 else:
 return False

# The payload must always be smaller than or equal to the load on axle 2.
def r16(payload: float, axle2_load: float) -> bool:
 if payload <= axle2_load:
 return True
 else:
 return False

# Payload must remain below or equal to the load carried by axle 3.
def r17(payload: float, axle3_load: float) -> bool:
 if payload <= axle3_load:
 return True
 else:
 return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r18(pto_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if total_operation_time >= (pto_time + idle_time + driving_time):
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
PTO operation time must be less than or equal to the total operation time.
The total operation durationmust not be lower than the driving time.
The load supported by axle 1 cannot exceed that of axle 2.
The load supported by axle 1 cannot exceed that of axle 3.
The payload cannot exceed the capacity of axle 2.
The payload must not exceed the load carried by axle 3.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";" # The vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r10(hourly_consumption: float, traveled_distance: float) -> bool:
 if traveled_distance >= 20 and hourly_consumption < 5:
 return False
 else:
 return True

# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r11(average_consumption_per_100km: float, traveled_distance: float) -> bool:
 if traveled_distance < 20 or average_consumption_per_100km > 40:
 return False
 else:
 return True

# PTO operation time must be less than or equal to the total operation time.
def r12(pto_operation_time: float, total_operation_time: float) -> bool:
 if pto_operation_time > total_operation_time:
 return False
 else:
 return True

# The total operation duration must not be lower than the driving time.
def r13(total_operation_duration: float, driving_time: float) -> bool:
 if total_operation_duration < driving_time:
 return False
 else:
 return True

# The load supported by axle 1 cannot exceed that of axle 2.
def r14(load_axle1: float, load_axle2: float) -> bool:
 if load_axle1 > load_axle2:
 return False
 else:
 return True

# The load supported by axle 1 cannot exceed that of axle 3.
def r15(load_axle1: float, load_axle3: float) -> bool:
 if load_axle1 > load_axle3:
 return False
 else:
 return True

# The payload cannot exceed the capacity of axle 2.
def r16(payload: float, axle_capacity2: float) -> bool:
 if payload > axle_capacity2:
 return False
 else:
 return True

# The payload must not exceed the load carried by axle 3.
def r17(payload: float, load_axle3: float) -> bool:
 if payload > load_axle3:
 return False
 else:
 return True

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r18(total_operation_time: float, pto_operation_time: float, idle_time: float, driving_time: float) -> bool:
 if total_operation_time < (pto_operation_time + idle_time + driving_time):
 return False
 else:
 return True"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
Idle time must always be less than or equal to the total operation time.
Driving time cannot be greater than the total operation time.
PTO-engaged stops cannot exceed the total number of stops.
The load supported by axle 1 cannot exceed that of axle 2.
Axle 1's load cannot exceed Axle 3's load.
The payload cannot exceed the capacity of axle 2.
Axle 3's load must always be equal to or greater than the payload.
";" # The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r10(hourly_consumption: float, distance: float) -> bool:
 if distance >= 20 and hourly_consumption < 5:
 return False
 else:
 return True

# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r11(hourly_consumption: float, distance: float) -> float:
 if distance >= 20:
 return hourly_consumption * 100 / 4
 else:
 return hourly_consumption

# Idle time must always be less than or equal to the total operation time.
def r12(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# Driving time cannot be greater than the total operation time.
def r13(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False

# PTO-engaged stops cannot exceed the total number of stops.
def r14(pto_stops: int, total_stops: int) -> bool:
 if pto_stops <= total_stops:
 return True
 else:
 return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r15(axle_1_load: float, axle_2_load: float) -> bool:
 if axle_1_load <= axle_2_load:
 return True
 else:
 return False

# Axle 1's load cannot exceed Axle 3's load.
def r16(axle_1_load: float, axle_3_load: float) -> bool:
 if axle_1_load <= axle_3_load:
 return True
 else:
 return False

# The payload cannot exceed the capacity of axle 2.
def r17(payload: float, axle_2_capacity: float) -> bool:
 if payload <= axle_2_capacity:
 return True
 else:
 return False

# Axle 3's load must always be equal to or greater than the payload.
def r18(axle_3_load: float, payload: float) -> bool:
 if axle_3_load >= payload:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
PTO operation time cannot be greater than the total operation time.
PTO-engaged stops cannot exceed the total number of stops.
The weight on axle 1 cannot surpass the weight on axle 2.
The weight on axle 1 cannot surpass the weight on axle 3.
The payload cannot exceed the capacity of axle 2.
Payload must remain below or equal to the load carried by axle 3.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";" # If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r10(distance: float, fuel_consumption: float) -> bool:
 if distance <= 20 or fuel_consumption < 5:
 return False
 else:
 return True

# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r11(distance: float, avg_fuel_consumption: float) -> bool:
 if distance <= 20 or avg_fuel_consumption < 40:
 return False
 else:
 return True

# PTO operation time cannot be greater than the total operation time.
def r12(pto_time: float, total_operation_time: float) -> bool:
 if pto_time > total_operation_time:
 return False
 else:
 return True

# PTO-engaged stops cannot exceed the total number of stops.
def r13(pto_stops: int, total_stops: int) -> bool:
 if pto_stops > total_stops:
 return False
 else:
 return True

# The weight on axle 1 cannot surpass the weight on axle 2.
def r14(axle1_weight: float, axle2_weight: float) -> bool:
 if axle1_weight > axle2_weight:
 return False
 else:
 return True

# The weight on axle 1 cannot surpass the weight on axle 3.
def r15(axle1_weight: float, axle3_weight: float) -> bool:
 if axle1_weight > axle3_weight:
 return False
 else:
 return True

# The payload cannot exceed the capacity of axle 2.
def r16(payload: float, axle2_capacity: float) -> bool:
 if payload > axle2_capacity:
 return False
 else:
 return True

# Payload must remain below or equal to the load carried by axle 3.
def r17(payload: float, axle3_load: float) -> bool:
 if payload > axle3_load:
 return False
 else:
 return True

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r18(pto_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if total_operation_time < (pto_time + idle_time + driving_time):
 return False
 else:
 return True"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
The total operation duration must not be lower than the PTO operation time.
Total operation time should shouldn’t be lower than driving time.
Stops with PTO engaged cannot outnumber the total stops.
Axle 1's load cannot exceed Axle 2's load.
The load on axle 1 must not surpass the load on axle 3.
The payload cannot exceed the capacity of axle 2.
The payload cannot exceed the capacity of axle 3.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";" # For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r10(journey_length: float, fuel_consumption_per_hour: float) -> bool:
 if journey_length >= 20 and fuel_consumption_per_hour <= 0.005:
 return True
 else:
 return False

# The total operation duration must not be lower than the PTO operation time.
def r11(total_operation_time: float, pto_operation_time: float) -> bool:
 if total_operation_time >= pto_operation_time:
 return True
 else:
 return False

# Total operation time should not be lower than driving time.
def r12(total_operation_time: float, driving_time: float) -> bool:
 if total_operation_time >= driving_time:
 return True
 else:
 return False

# Stops with PTO engaged cannot outnumber the total stops.
def r13(num_stops_pto_engaged: int, total_num_stops: int) -> bool:
 if num_stops_pto_engaged <= total_num_stops:
 return True
 else:
 return False

# Axle 1's load cannot exceed Axle 2's load.
def r14(axle_1_load: float, axle_2_load: float) -> bool:
 if axle_1_load <= axle_2_load:
 return True
 else:
 return False

# The load on axle 1 must not surpass the load on axle 3.
def r15(axle_1_load: float, axle_3_load: float) -> bool:
 if axle_1_load <= axle_3_load:
 return True
 else:
 return False

# The payload cannot exceed the capacity of axle 2.
def r16(payload: float, axle_2_capacity: float) -> bool:
 if payload <= axle_2_capacity:
 return True
 else:
 return False

# The payload cannot exceed the capacity of axle 3.
def r17(payload: float, axle_3_capacity: float) -> bool:
 if payload <= axle_3_capacity:
 return True
 else:
 return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r18(total_operation_time: float, pto_operation_time: float, idle_time: float, driving_time: float) -> bool:
 if total_operation_time >= (pto_operation_time + idle_time + driving_time):
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
Idle time must always be less than or equal to the total operation time.
The total operation durationmust not be lower than the driving time.
Stops with PTO engaged cannot outnumber the total stops.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
Axle 1's load cannot exceed Axle 3's load.
The payload cannot exceed the capacity of axle 2.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";" # The vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r10(hourly_consumption: float, traveled_distance: float) -> bool:
 if traveled_distance >= 20 and hourly_consumption < 5:
 return False
 else:
 return True

# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def r11(hourly_consumption: float, traveled_distance: float) -> bool:
 if traveled_distance < 20 or (traveled_distance >= 20 and hourly_consumption < 40):
 return False
 else:
 return True

# Idle time must always be less than or equal to the total operation time.
def r12(idle_time: float, total_operation_time: float) -> bool:
 if idle_time > total_operation_time:
 return False
 else:
 return True

# The total operation duration must not be lower than the driving time.
def r13(total_operation_time: float, driving_time: float) -> bool:
 if total_operation_time < driving_time:
 return False
 else:
 return True

# Stops with PTO engaged cannot outnumber the total stops.
def r14(pto_stops: int, total_stops: int) -> bool:
 if pto_stops > total_stops:
 return False
 else:
 return True

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def r15(axle_1_load: float, axle_2_load: float) -> bool:
 if axle_1_load > axle_2_load:
 return False
 else:
 return True

# Axle 1's load cannot exceed Axle 3's load.
def r16(axle_1_load: float, axle_3_load: float) -> bool:
 if axle_1_load > axle_3_load:
 return False
 else:
 return True

# The payload cannot exceed the capacity of axle 2.
def r17(payload: float, axle_2_capacity: float) -> bool:
 if payload > axle_2_capacity:
 return False
 else:
 return True

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r18(pto_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if pto_time + idle_time + driving_time > total_operation_time:
 return False
 else:
 return True"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
PTO operation time cannot be greater than the total operation time.
The total operation duration must not be lower than the idle time.
Driving time cannot be greater than the total operation time.
Stops with PTO engaged should never outnumber total stops.
The weight on axle 1 cannot surpass the weight on axle 2.
The weight on axle 1 cannot surpass the weight on axle 3.
Axle 2's load must always be equal to or greater than the payload.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";" # For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r10(journey_length: float, fuel_consumption_per_hour: float) -> bool:
 if journey_length >= 20 and fuel_consumption_per_hour <= 0.005:
 return True
 else:
 return False

# PTO operation time cannot be greater than the total operation time.
def r11(pto_time: float, total_operation_time: float) -> bool:
 if pto_time <= total_operation_time:
 return True
 else:
 return False

# The total operation duration must not be lower than the idle time.
def r12(total_operation_time: float, idle_time: float) -> bool:
 if total_operation_time >= idle_time:
 return True
 else:
 return False

# Driving time cannot be greater than the total operation time.
def r13(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False

# Stops with PTO engaged should never outnumber total stops.
def r14(pto_stops_count: int, total_stops_count: int) -> bool:
 if pto_stops_count <= total_stops_count:
 return True
 else:
 return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r15(weight_axle1: float, weight_axle2: float) -> bool:
 if weight_axle1 <= weight_axle2:
 return True
 else:
 return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r16(weight_axle1: float, weight_axle3: float) -> bool:
 if weight_axle1 <= weight_axle3:
 return True
 else:
 return False

# Axle 2's load must always be equal to or greater than the payload.
def r17(axle2_load: float, payload: float) -> bool:
 if axle2_load >= payload:
 return True
 else:
 return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r18(pto_time: float, idle_time: float, driving_time: float) -> bool:
 if total_operation_time >= (pto_time + idle_time + driving_time):
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
PTO operation time cannot be greater than the total operation time.
Idle time must always be less than or equal to the total operation time.
The total operation durationmust not be lower than the driving time.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
The weight on axle 1 cannot surpass the weight on axle 3.
The payload cannot exceed the capacity of axle 2.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";" # If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r10(distance: float, fuel_consumption: float) -> bool:
 if distance >= 20 and fuel_consumption / distance <= 0.25:
 return False
 else:
 return True

# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r11(distance: float, avg_fuel_consumption: float) -> bool:
 if distance >= 20 and avg_fuel_consumption >= 40:
 return True
 else:
 return False

# PTO operation time cannot be greater than the total operation time.
def r12(pto_time: float, total_operation_time: float) -> bool:
 if pto_time <= total_operation_time:
 return True
 else:
 return False

# Idle time must always be less than or equal to the total operation time.
def r13(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# The total operation duration must not be lower than the driving time.
def r14(total_operation_time: float, driving_time: float) -> bool:
 if total_operation_time >= driving_time:
 return True
 else:
 return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def r15(load_axle1: float, load_axle2: float) -> bool:
 if load_axle1 <= load_axle2:
 return True
 else:
 return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r16(weight_axle1: float, weight_axle3: float) -> bool:
 if weight_axle1 <= weight_axle3:
 return True
 else:
 return False

# The payload cannot exceed the capacity of axle 2.
def r17(payload: float, axle_capacity: float) -> bool:
 if payload <= axle_capacity:
 return True
 else:
 return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r18(pto_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if pto_time + idle_time + driving_time <= total_operation_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
PTO operation time should be less than or equal to the total operation time.
Driving time must always be less than or equal to the total operation time.
Stops with PTO engaged should never outnumber total stops.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
Axle 1's load cannot exceed Axle 3's load.
Axle 2's load must always be equal to or greater than the payload.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";" # For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r10(journey_length: float, avg_fuel_consumption_per_hour: float) -> bool:
 if journey_length >= 20 and avg_fuel_consumption_per_hour <= 0.05:
 return False
 else:
 return True

# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r11(journey_length: float, avg_fuel_consumption_per_distance: float) -> bool:
 if journey_length >= 20 and avg_fuel_consumption_per_distance > 0.04:
 return False
 else:
 return True

# PTO operation time should be less than or equal to the total operation time.
def r12(pto_operation_time: float, total_operation_time: float) -> bool:
 if pto_operation_time <= total_operation_time:
 return True
 else:
 return False

# Driving time must always be less than or equal to the total operation time.
def r13(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False

# Stops with PTO engaged should never outnumber total stops.
def r14(num_stops_with_pto: int, total_stops: int) -> bool:
 if num_stops_with_pto <= total_stops:
 return True
 else:
 return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def r15(axle_1_load: float, axle_2_load: float) -> bool:
 if axle_1_load <= axle_2_load:
 return True
 else:
 return False

# Axle 1's load cannot exceed Axle 3's load.
def r16(axle_1_load: float, axle_3_load: float) -> bool:
 if axle_1_load <= axle_3_load:
 return True
 else:
 return False

# Axle 2's load must always be equal to or greater than the payload.
def r17(axle_2_load: float, payload: float) -> bool:
 if axle_2_load >= payload:
 return True
 else:
 return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r18(pto_operation_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if pto_operation_time + idle_time + driving_time <= total_operation_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
The total operation duration must not be lower than the PTO operation time.
The total operation durationmust not be lower than the driving time.
Stops with PTO engaged cannot outnumber the total stops.
Axle 1's load cannot exceed Axle 2's load.
The payload must not exceed the load carried by axle 2.
The payload must not exceed the load carried by axle 3.
Total operation time should be at least the sum of PTO, idle, and driving times.
";" # For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r10(journey_length: float, fuel_consumption_per_hour: float) -> bool:
 if journey_length >= 20 and fuel_consumption_per_hour <= 0.2:
 return True
 else:
 return False

# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r11(journey_length: float, fuel_consumption_per_distance: float) -> bool:
 if journey_length >= 20 and fuel_consumption_per_distance >= 0.04:
 return True
 else:
 return False

# The total operation duration must not be lower than the PTO operation time.
def r12(pto_time: float, total_operation_time: float) -> bool:
 if total_operation_time >= pto_time:
 return True
 else:
 return False

# The total operation duration must not be lower than the driving time.
def r13(driving_time: float, total_operation_time: float) -> bool:
 if total_operation_time >= driving_time:
 return True
 else:
 return False

# Stops with PTO engaged cannot outnumber the total stops.
def r14(pto_stops_count: int, total_stops_count: int) -> bool:
 if pto_stops_count <= total_stops_count:
 return True
 else:
 return False

# Axle 1's load cannot exceed Axle 2's load.
def r15(axle1_load: float, axle2_load: float) -> bool:
 if axle1_load <= axle2_load:
 return True
 else:
 return False

# The payload must not exceed the load carried by axle 2.
def r16(payload: float, axle2_load: float) -> bool:
 if payload <= axle2_load:
 return True
 else:
 return False

# The payload must not exceed the load carried by axle 3.
def r17(payload: float, axle3_load: float) -> bool:
 if payload <= axle3_load:
 return True
 else:
 return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r18(pto_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if total_operation_time >= pto_time + idle_time + driving_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
PTO operation time must be less than or equal to the total operation time.
Idle time must always be less than or equal to the total operation time.
Total operation time should shouldn’t be lower than driving time.
The weight on axle 1 cannot surpass the weight on axle 2.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
Axle 3's load must always be equal to or greater than the payload.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";" # The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r10(hourly_consumption: float, traveled_distance: float) -> bool:
 if traveled_distance >= 20 and hourly_consumption < 5:
 return False
 else:
 return True

# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r11(hourly_consumption: float, traveled_distance: float) -> float:
 if traveled_distance >= 20:
 return hourly_consumption * 100 * 40 / traveled_distance
 else:
 return 0

# PTO operation time must be less than or equal to the total operation time.
def r12(pto_time: float, total_operation_time: float) -> bool:
 if pto_time <= total_operation_time:
 return True
 else:
 return False

# Idle time must always be less than or equal to the total operation time.
def r13(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# Total operation time should not be lower than driving time.
def r14(total_operation_time: float, driving_time: float) -> bool:
 if total_operation_time >= driving_time:
 return True
 else:
 return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r15(weight_axle1: float, weight_axle2: float) -> bool:
 if weight_axle1 <= weight_axle2:
 return True
 else:
 return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r16(load_axle1: float, load_axle3: float) -> bool:
 if load_axle1 <= load_axle3:
 return True
 else:
 return False

# Axle 3's load must always be equal to or greater than the payload.
def r17(load_axle3: float, payload: float) -> bool:
 if load_axle3 >= payload:
 return True
 else:
 return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r18(pto_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if pto_time + idle_time + driving_time <= total_operation_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
PTO operation time should be less than or equal to the total operation time.
Total operation time should shouldn’t be lower than driving time.
PTO-engaged stops cannot exceed the total number of stops.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
The load supported by axle 1 cannot exceed that of axle 3.
Payload must remain below or equal to the load carried by axle 2.
Axle 3's load must always be equal to or greater than the payload.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";" # When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def r10(distance: float, fuel_consumption: float) -> bool:
 if distance >= 20 and fuel_consumption >= 0.04:
 return True
 else:
 return False

# PTO operation time should be less than or equal to the total operation time.
def r11(pto_time: float, total_time: float) -> bool:
 if pto_time <= total_time:
 return True
 else:
 return False

# Total operation time should not be lower than driving time.
def r12(total_time: float, driving_time: float) -> bool:
 if total_time >= driving_time:
 return True
 else:
 return False

# PTO-engaged stops cannot exceed the total number of stops.
def r13(pto_stops: int, total_stops: int) -> bool:
 if pto_stops <= total_stops:
 return True
 else:
 return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def r14(load_axle1: float, load_axle2: float) -> bool:
 if load_axle1 <= load_axle2:
 return True
 else:
 return False

# The load supported by axle 1 cannot exceed that of axle 3.
def r15(load_axle1: float, load_axle3: float) -> bool:
 if load_axle1 <= load_axle3:
 return True
 else:
 return False

# Payload must remain below or equal to the load carried by axle 2.
def r16(payload: float, load_axle2: float) -> bool:
 if payload <= load_axle2:
 return True
 else:
 return False

# Axle 3's load must always be equal to or greater than the payload.
def r17(axle3_load: float, payload: float) -> bool:
 if axle3_load >= payload:
 return True
 else:
 return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r18(total_duration: float, pto_duration: float, idle_duration: float, driving_duration: float) -> bool:
 if total_duration >= (pto_duration + idle_duration + driving_duration):
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
Idle time should be less than or equal to the total operation time.
The total operation durationmust not be lower than the driving time.
PTO-engaged stops cannot exceed the total number of stops.
The load on axle 1 must not surpass the load on axle 2.
Axle 2's load must always be equal to or greater than the payload.
The payload must always be smaller than or equal to the load on axle 3.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";" # The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r10(vehicle_fuel_consumption: float, traveled_distance: float) -> bool:
 if traveled_distance >= 20 and vehicle_fuel_consumption < 5:
 return False
 else:
 return True

# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r11(vehicle_fuel_consumption: float, traveled_distance: float) -> bool:
 if traveled_distance >= 20 and vehicle_fuel_consumption < (40 / 100 * traveled_distance):
 return False
 else:
 return True

# Idle time should be less than or equal to the total operation time.
def r12(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# The total operation duration must not be lower than the driving time.
def r13(total_operation_duration: float, driving_time: float) -> bool:
 if total_operation_duration >= driving_time:
 return True
 else:
 return False

# PTO-engaged stops cannot exceed the total number of stops.
def r14(pto_stops: int, total_stops: int) -> bool:
 if pto_stops <= total_stops:
 return True
 else:
 return False

# The load on axle 1 must not surpass the load on axle 2.
def r15(axle_1_load: float, axle_2_load: float) -> bool:
 if axle_1_load <= axle_2_load:
 return True
 else:
 return False

# Axle 2's load must always be equal to or greater than the payload.
def r16(axle_2_load: float, payload: float) -> bool:
 if axle_2_load >= payload:
 return True
 else:
 return False

# The payload must always be smaller than or equal to the load on axle 3.
def r17(payload: float, axle_3_load: float) -> bool:
 if payload <= axle_3_load:
 return True
 else:
 return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r18(pto_time: float, idle_time: float, driving_time: float, total_operation_duration: float) -> bool:
 if total_operation_duration >= (pto_time + idle_time + driving_time):
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
PTO operation time should be less than or equal to the total operation time.
Idle time must always be less than or equal to the total operation time.
The load on axle 1 must not surpass the load on axle 2.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
Payload must remain below or equal to the load carried by axle 2.
The payload must not exceed the load carried by axle 3.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";" # If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
def r10(distance: float, fuel_consumption_rate_per_hour: float) -> bool:
 if distance / 100 >= 2 and fuel_consumption_rate_per_hour / 5 <= 1:
 return True
 else:
 return False

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r11(distance: float, fuel_consumption_rate_per_100_km: float) -> bool:
 if distance / 100 >= 2 and fuel_consumption_rate_per_100_km >= 40:
 return True
 else:
 return False

# PTO operation time should be less than or equal to the total operation time.
def r12(pto_operation_time: float, total_operation_time: float) -> bool:
 if pto_operation_time <= total_operation_time:
 return True
 else:
 return False

# Idle time must always be less than or equal to the total operation time.
def r13(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# The load on axle 1 must not surpass the load on axle 2.
def r14(load_on_axle_1: float, load_on_axle_2: float) -> bool:
 if load_on_axle_1 <= load_on_axle_2:
 return True
 else:
 return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r15(load_on_axle_1: float, load_on_axle_3: float) -> bool:
 if load_on_axle_1 <= load_on_axle_3:
 return True
 else:
 return False

# Payload must remain below or equal to the load carried by axle 2.
def r16(payload: float, load_on_axle_2: float) -> bool:
 if payload <= load_on_axle_2:
 return True
 else:
 return False

# The payload must not exceed the load carried by axle 3.
def r17(payload: float, load_on_axle_3: float) -> bool:
 if payload <= load_on_axle_3:
 return True
 else:
 return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r18(pto_operation_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if pto_operation_time + idle_time + driving_time >= total_operation_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
The total operation duration must not be lower than the PTO operation time.
Idle time cannot be greater than the total operation time.
Total operation time should shouldn’t be lower than driving time.
The weight on axle 1 cannot surpass the weight on axle 2.
The payload must not exceed the load carried by axle 2.
The payload cannot exceed the capacity of axle 3.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";" # For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r10(journey_length: float, fuel_consumption_per_hour: float) -> bool:
 if journey_length >= 20 and fuel_consumption_per_hour <= 0.16666667: # 5 dm³/h to float
 return True
 else:
 return False

# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r11(journey_length: float, fuel_consumption_per_100_km: float) -> bool:
 if journey_length >= 20 and fuel_consumption_per_100_km >= 0.04:
 return True
 else:
 return False

# The total operation duration must not be lower than the PTO operation time.
def r12(pto_operation_time: float, total_operation_duration: float) -> bool:
 if pto_operation_time <= total_operation_duration:
 return True
 else:
 return False

# Idle time cannot be greater than the total operation time.
def r13(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# Total operation time should not be lower than driving time.
def r14(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r15(weight_on_axle_1: float, weight_on_axle_2: float) -> bool:
 if weight_on_axle_1 <= weight_on_axle_2:
 return True
 else:
 return False

# The payload must not exceed the load carried by axle 2.
def r16(payload: float, load_on_axle_2: float) -> bool:
 if payload <= load_on_axle_2:
 return True
 else:
 return False

# The payload cannot exceed the capacity of axle 3.
def r17(payload: float, capacity_of_axle_3: float) -> bool:
 if payload <= capacity_of_axle_3:
 return True
 else:
 return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r18(pto_operation_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if pto_operation_time + idle_time + driving_time <= total_operation_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
PTO operation time should be less than or equal to the total operation time.
Total operation time shouldn’t be lower than idle time.
Driving time must always be less than or equal to the total operation time.
The load supported by axle 1 cannot exceed that of axle 2.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
Axle 2's load must always be equal to or greater than the payload.
The payload must always be smaller than or equal to the load on axle 3.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";" # The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r10(vehicle_fuel_consumption: float, traveled_distance: float) -> bool:
 if traveled_distance >= 20 and vehicle_fuel_consumption / traveled_distance <= 0.4:
 return True
 else:
 return False

# PTO operation time should be less than or equal to the total operation time.
def r11(pto_operation_time: float, total_operation_time: float) -> bool:
 if pto_operation_time <= total_operation_time:
 return True
 else:
 return False

# Total operation time shouldn’t be lower than idle time.
def r12(total_operation_time: float, idle_time: float) -> bool:
 if total_operation_time >= idle_time:
 return True
 else:
 return False

# Driving time must always be less than or equal to the total operation time.
def r13(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r14(axle1_load: float, axle2_load: float) -> bool:
 if axle1_load <= axle2_load:
 return True
 else:
 return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r15(axle1_load: float, axle3_load: float) -> bool:
 if axle1_load <= axle3_load:
 return True
 else:
 return False

# Axle 2's load must always be equal to or greater than the payload.
def r16(axle2_load: float, payload: float) -> bool:
 if axle2_load >= payload:
 return True
 else:
 return False

# The payload must always be smaller than or equal to the load on axle 3.
def r17(payload: float, axle3_load: float) -> bool:
 if payload <= axle3_load:
 return True
 else:
 return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r18(pto_operation_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if pto_operation_time + idle_time + driving_time <= total_operation_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
Total operation time shouldn’t be lower than PTO operation time.
Total operation time shouldn’t be lower than idle time.
The total operation durationmust not be lower than the driving time.
The number of stops where PTO is engaged must not exceed the overall stop count.
Axle 1's load cannot exceed Axle 2's load.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";" # For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r10(journey_length: float, avg_fuel_consumption: float) -> bool:
 if journey_length >= 20 and avg_fuel_consumption <= 0.05:
 return True
 else:
 return False

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r11(journey_length: float, min_fuel_consumption_per_100km: float) -> bool:
 if journey_length >= 20 and min_fuel_consumption_per_100km >= 0.04:
 return True
 else:
 return False

# Total operation time shouldn’t be lower than PTO operation time.
def r12(total_operation_time: float, pto_operation_time: float) -> bool:
 if total_operation_time >= pto_operation_time:
 return True
 else:
 return False

# Total operation time shouldn’t be lower than idle time.
def r13(total_operation_time: float, idle_time: float) -> bool:
 if total_operation_time >= idle_time:
 return True
 else:
 return False

# The total operation duration must not be lower than the driving time.
def r14(total_operation_duration: float, driving_time: float) -> bool:
 if total_operation_duration >= driving_time:
 return True
 else:
 return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r15(num_stops_pto_engaged: int, overall_stop_count: int) -> bool:
 if num_stops_pto_engaged <= overall_stop_count:
 return True
 else:
 return False

# Axle 1's load cannot exceed Axle 2's load.
def r16(axle_1_load: float, axle_2_load: float) -> bool:
 if axle_1_load <= axle_2_load:
 return True
 else:
 return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r17(axle_1_load: float, axle_3_load: float) -> bool:
 if axle_1_load <= axle_3_load:
 return True
 else:
 return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r18(total_operation_time: float, pto_operation_time: float, idle_time: float, driving_time: float) -> bool:
 if total_operation_time >= (pto_operation_time + idle_time + driving_time):
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
Idle time must always be less than or equal to the total operation time.
The total operation durationmust not be lower than the driving time.
Axle 1's load cannot exceed Axle 2's load.
The load on axle 1 must not surpass the load on axle 3.
The payload must not exceed the load carried by axle 2.
The payload must always be smaller than or equal to the load on axle 3.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";" # When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r10(total_distance: float, avg_fuel_consumption: float) -> bool:
 if total_distance >= 20 and avg_fuel_consumption / 3.6 <= 5:
 return True
 else:
 return False

# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r11(total_distance: float, avg_fuel_consumption_per_100km: float) -> bool:
 if total_distance >= 20 and avg_fuel_consumption_per_100km >= 40:
 return True
 else:
 return False

# Idle time must always be less than or equal to the total operation time.
def r12(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# The total operation duration must not be lower than the driving time.
def r13(total_operation_time: float, driving_time: float) -> bool:
 if total_operation_time >= driving_time:
 return True
 else:
 return False

# Axle 1's load cannot exceed Axle 2's load.
def r14(axle_1_load: float, axle_2_load: float) -> bool:
 if axle_1_load <= axle_2_load:
 return True
 else:
 return False

# The load on axle 1 must not surpass the load on axle 3.
def r15(axle_1_load: float, axle_3_load: float) -> bool:
 if axle_1_load <= axle_3_load:
 return True
 else:
 return False

# The payload must not exceed the load carried by axle 2.
def r16(payload: float, axle_2_load: float) -> bool:
 if payload <= axle_2_load:
 return True
 else:
 return False

# The payload must always be smaller than or equal to the load on axle 3.
def r17(payload: float, axle_3_load: float) -> bool:
 if payload <= axle_3_load:
 return True
 else:
 return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r18(pto_operation_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if total_operation_time >= pto_operation_time + idle_time + driving_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
PTO operation time cannot be greater than the total operation time.
The total operation duration must not be lower than the idle time.
Driving time should be less than or equal to the total operation time.
The number of stops where PTO is engaged must not exceed the overall stop count.
The load on axle 1 must not surpass the load on axle 2.
Payload must remain below or equal to the load carried by axle 3.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";" # The vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r10(hourly_consumption: float, traveled_distance: float) -> bool:
 if traveled_distance >= 20 and hourly_consumption < 5:
 return False
 else:
 return True

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r11(total_distance: float, fuel_consumption_per_100km: float) -> bool:
 if total_distance >= 20 and fuel_consumption_per_100km < 40:
 return False
 else:
 return True

# PTO operation time cannot be greater than the total operation time.
def r12(pto_operation_time: float, total_operation_time: float) -> bool:
 if pto_operation_time > total_operation_time:
 return False
 else:
 return True

# The total operation duration must not be lower than the idle time.
def r13(total_operation_duration: float, idle_time: float) -> bool:
 if total_operation_duration < idle_time:
 return False
 else:
 return True

# Driving time should be less than or equal to the total operation time.
def r14(driving_time: float, total_operation_time: float) -> bool:
 if driving_time > total_operation_time:
 return False
 else:
 return True

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r15(pto_engaged_count: int, total_stop_count: int) -> bool:
 if pto_engaged_count > total_stop_count:
 return False
 else:
 return True

# The load on axle 1 must not surpass the load on axle 2.
def r16(load_axle1: float, load_axle2: float) -> bool:
 if load_axle1 > load_axle2:
 return False
 else:
 return True

# Payload must remain below or equal to the load carried by axle 3.
def r17(payload: float, load_axle3: float) -> bool:
 if payload > load_axle3:
 return False
 else:
 return True

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r18(pto_operation_time: float, idle_time: float, driving_time: float) -> bool:
 total_operation_time = pto_operation_time + idle_time + driving_time
 if total_operation_time < (pto_operation_time + idle_time + driving_time):
 return False
 else:
 return True"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
PTO operation time cannot be greater than the total operation time.
Idle time cannot be greater than the total operation time.
The number of stops where PTO is engaged must not exceed the overall stop count.
The weight on axle 1 cannot surpass the weight on axle 3.
Payload must remain below or equal to the load carried by axle 2.
The payload must not exceed the load carried by axle 3.
Total operation time should be at least the sum of PTO, idle, and driving times.
";" # The vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r10(hourly_consumption: float, traveled_distance: float) -> bool:
 if traveled_distance >= 20 and hourly_consumption < 5:
 return False
 else:
 return True

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r11(total_fuel_consumption: float, traveled_distance: float) -> bool:
 if traveled_distance < 20 or total_fuel_consumption / traveled_distance < 0.04:
 return False
 else:
 return True

# PTO operation time cannot be greater than the total operation time.
def r12(pto_time: float, total_operation_time: float) -> bool:
 if pto_time > total_operation_time:
 return False
 else:
 return True

# Idle time cannot be greater than the total operation time.
def r13(idle_time: float, total_operation_time: float) -> bool:
 if idle_time > total_operation_time:
 return False
 else:
 return True

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r14(pto_stops: int, total_stops: int) -> bool:
 if pto_stops > total_stops:
 return False
 else:
 return True

# The weight on axle 1 cannot surpass the weight on axle 3.
def r15(weight_axle1: float, weight_axle3: float) -> bool:
 if weight_axle1 > weight_axle3:
 return False
 else:
 return True

# Payload must remain below or equal to the load carried by axle 2.
def r16(payload: float, load_axle2: float) -> bool:
 if payload > load_axle2:
 return False
 else:
 return True

# The payload must not exceed the load carried by axle 3.
def r17(payload: float, load_axle3: float) -> bool:
 if payload > load_axle3:
 return False
 else:
 return True

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r18(pto_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if total_operation_time < pto_time + idle_time + driving_time:
 return False
 else:
 return True"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
PTO operation time must be less than or equal to the total operation time.
Idle time must always be less than or equal to the total operation time.
Total operation time should shouldn’t be lower than driving time.
PTO-engaged stops cannot exceed the total number of stops.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
Axle 2's load must always be equal to or greater than the payload.
Payload must remain below or equal to the load carried by axle 3.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";" # If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r10(distance: float, fuel_consumption: float) -> bool:
 if distance / 20 >= 1 and fuel_consumption / 20 < 0.25:
 return False
 else:
 return True

# PTO operation time must be less than or equal to the total operation time.
def r11(pto_time: float, total_time: float) -> bool:
 if pto_time <= total_time:
 return True
 else:
 return False

# Idle time must always be less than or equal to the total operation time.
def r12(idle_time: float, total_time: float) -> bool:
 if idle_time <= total_time:
 return True
 else:
 return False

# Total operation time should not be lower than driving time.
def r13(total_time: float, driving_time: float) -> bool:
 if total_time >= driving_time:
 return True
 else:
 return False

# PTO-engaged stops cannot exceed the total number of stops.
def r14(pto_stops: int, total_stops: int) -> bool:
 if pto_stops <= total_stops:
 return True
 else:
 return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r15(axle1_load: float, axle3_load: float) -> bool:
 if axle1_load <= axle3_load:
 return True
 else:
 return False

# Axle 2's load must always be equal to or greater than the payload.
def r16(axle2_load: float, payload: float) -> bool:
 if axle2_load >= payload:
 return True
 else:
 return False

# Payload must remain below or equal to the load carried by axle 3.
def r17(payload: float, axle3_load: float) -> bool:
 if payload <= axle3_load:
 return True
 else:
 return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r18(total_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
 if total_time >= pto_time + idle_time + driving_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
Driving time should be less than or equal to the total operation time.
PTO-engaged stops cannot exceed the total number of stops.
The weight on axle 1 cannot surpass the weight on axle 2.
The load on axle 1 must not surpass the load on axle 3.
The payload must always be smaller than or equal to the load on axle 2.
The payload must always be smaller than or equal to the load on axle 3.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";" # The vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r10(hourly_consumption: float, distance: float) -> bool:
 if distance >= 20 and hourly_consumption < 5:
 return False
 else:
 return True

# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r11(average_consumption_per_100km: float, distance: float) -> bool:
 if distance < 20 or average_consumption_per_100km > 40:
 return False
 else:
 return True

# Driving time should be less than or equal to the total operation time.
def r12(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False

# PTO-engaged stops cannot exceed the total number of stops.
def r13(pto_stops: int, total_stops: int) -> bool:
 if pto_stops <= total_stops:
 return True
 else:
 return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r14(weight_axle1: float, weight_axle2: float) -> bool:
 if weight_axle1 <= weight_axle2:
 return True
 else:
 return False

# The load on axle 1 must not surpass the load on axle 3.
def r15(load_axle1: float, load_axle3: float) -> bool:
 if load_axle1 <= load_axle3:
 return True
 else:
 return False

# The payload must always be smaller than or equal to the load on axle 2.
def r16(payload: float, load_axle2: float) -> bool:
 if payload <= load_axle2:
 return True
 else:
 return False

# The payload must always be smaller than or equal to the load on axle 3.
def r17(payload: float, load_axle3: float) -> bool:
 if payload <= load_axle3:
 return True
 else:
 return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r18(pto_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if pto_time + idle_time + driving_time >= total_operation_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
PTO operation time cannot be greater than the total operation time.
Idle time should be less than or equal to the total operation time.
The total operation durationmust not be lower than the driving time.
Stops with PTO engaged cannot outnumber the total stops.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
The payload cannot exceed the capacity of axle 2.
Axle 3's load must always be equal to or greater than the payload.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";" # The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r10(total_distance: float, average_fuel_consumption: float) -> bool:
 if total_distance / 100 >= 20 and average_fuel_consumption >= 0.04:
 return True
 else:
 return False

# PTO operation time cannot be greater than the total operation time.
def r11(pto_operation_time: float, total_operation_time: float) -> bool:
 if pto_operation_time <= total_operation_time:
 return True
 else:
 return False

# Idle time should be less than or equal to the total operation time.
def r12(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# The total operation duration must not be lower than the driving time.
def r13(total_operation_time: float, driving_time: float) -> bool:
 if total_operation_time >= driving_time:
 return True
 else:
 return False

# Stops with PTO engaged cannot outnumber the total stops.
def r14(num_stops_with_pto: int, total_stops: int) -> bool:
 if num_stops_with_pto <= total_stops:
 return True
 else:
 return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r15(load_axle_1: float, load_axle_3: float) -> bool:
 if load_axle_1 <= load_axle_3:
 return True
 else:
 return False

# The payload cannot exceed the capacity of axle 2.
def r16(payload: float, capacity_axle_2: float) -> bool:
 if payload <= capacity_axle_2:
 return True
 else:
 return False

# Axle 3's load must always be equal to or greater than the payload.
def r17(payload: float, load_axle_3: float) -> bool:
 if load_axle_3 >= payload:
 return True
 else:
 return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r18(pto_operation_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if total_operation_time >= pto_operation_time + idle_time + driving_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
PTO operation time should be less than or equal to the total operation time.
Idle time must always be less than or equal to the total operation time.
The total operation durationmust not be lower than the driving time.
The number of stops where PTO is engaged must not exceed the overall stop count.
Axle 1's load cannot exceed Axle 3's load.
Payload must remain below or equal to the load carried by axle 2.
Payload must remain below or equal to the load carried by axle 3.
";" # If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
def r10(distance: float, fuel_consumption_rate: float) -> bool:
 if distance / 100 >= 2 and fuel_consumption_rate / 5 >= 0.2:
 return True
 else:
 return False

# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r11(distance: float, fuel_consumption_per_distance: float) -> bool:
 if distance / 100 * fuel_consumption_per_distance >= 40:
 return True
 else:
 return False

# PTO operation time should be less than or equal to the total operation time.
def r12(pto_time: float, total_operation_time: float) -> bool:
 if pto_time <= total_operation_time:
 return True
 else:
 return False

# Idle time must always be less than or equal to the total operation time.
def r13(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# The total operation duration must not be lower than the driving time.
def r14(total_operation_duration: float, driving_time: float) -> bool:
 if total_operation_duration >= driving_time:
 return True
 else:
 return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r15(pto_engaged_count: int, total_stop_count: int) -> bool:
 if pto_engaged_count <= total_stop_count:
 return True
 else:
 return False

# Axle 1's load cannot exceed Axle 3's load.
def r16(axle_1_load: float, axle_3_load: float) -> bool:
 if axle_1_load <= axle_3_load:
 return True
 else:
 return False

# Payload must remain below or equal to the load carried by axle 2.
def r17(payload: float, axle_2_load: float) -> bool:
 if payload <= axle_2_load:
 return True
 else:
 return False

# Payload must remain below or equal to the load carried by axle 3.
def r18(payload: float, axle_3_load: float) -> bool:
 if payload <= axle_3_load:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
The total operation duration must not be lower than the PTO operation time.
Idle time should be less than or equal to the total operation time.
The total operation durationmust not be lower than the driving time.
The number of stops where PTO is engaged must not exceed the overall stop count.
The load supported by axle 1 cannot exceed that of axle 2.
The payload must not exceed the load carried by axle 2.
Total operation time should be at least the sum of PTO, idle, and driving times.
";" # When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r10(total_distance: float, avg_fuel_consumption: float) -> bool:
 if total_distance >= 20 and avg_fuel_consumption <= 0.05:
 return True
 else:
 return False

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r11(total_distance: float, min_fuel_consumption_per_100km: float) -> bool:
 if total_distance >= 20 and min_fuel_consumption_per_100km >= 0.04:
 return True
 else:
 return False

# The total operation duration must not be lower than the PTO operation time.
def r12(total_operation_time: float, pto_operation_time: float) -> bool:
 if total_operation_time >= pto_operation_time:
 return True
 else:
 return False

# Idle time should be less than or equal to the total operation time.
def r13(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# The total operation duration must not be lower than the driving time.
def r14(total_operation_time: float, driving_time: float) -> bool:
 if total_operation_time >= driving_time:
 return True
 else:
 return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r15(num_stops_pto_engaged: int, total_stops: int) -> bool:
 if num_stops_pto_engaged <= total_stops:
 return True
 else:
 return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r16(load_axle1: float, load_axle2: float) -> bool:
 if load_axle1 <= load_axle2:
 return True
 else:
 return False

# The payload must not exceed the load carried by axle 2.
def r17(payload: float, load_axle2: float) -> bool:
 if payload <= load_axle2:
 return True
 else:
 return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r18(pto_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if total_operation_time >= pto_time + idle_time + driving_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
Total operation time shouldn’t be lower than PTO operation time.
Idle time should be less than or equal to the total operation time.
Driving time must always be less than or equal to the total operation time.
Stops with PTO engaged cannot outnumber the total stops.
The load on axle 1 must not surpass the load on axle 3.
Payload must remain below or equal to the load carried by axle 2.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";" # The vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r10(hourly_consumption: float, distance: float) -> bool:
 if distance >= 20 and hourly_consumption < 5:
 return False
 else:
 return True

# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r11(average_consumption_per_distance: float, distance: float) -> bool:
 if distance >= 20 and average_consumption_per_distance < 40:
 return False
 else:
 return True

# Total operation time shouldn’t be lower than PTO operation time.
def r12(total_operation_time: float, pto_operation_time: float) -> bool:
 if total_operation_time < pto_operation_time:
 return False
 else:
 return True

# Idle time should be less than or equal to the total operation time.
def r13(idle_time: float, total_operation_time: float) -> bool:
 if idle_time > total_operation_time:
 return False
 else:
 return True

# Driving time must always be less than or equal to the total operation time.
def r14(driving_time: float, total_operation_time: float) -> bool:
 if driving_time > total_operation_time:
 return False
 else:
 return True

# Stops with PTO engaged cannot outnumber the total stops.
def r15(num_stops_with_pto: int, total_stops: int) -> bool:
 if num_stops_with_pto > total_stops:
 return False
 else:
 return True

# The load on axle 1 must not surpass the load on axle 3.
def r16(load_axle_1: float, load_axle_3: float) -> bool:
 if load_axle_1 > load_axle_3:
 return False
 else:
 return True

# Payload must remain below or equal to the load carried by axle 2.
def r17(payload: float, load_axle_2: float) -> bool:
 if payload > load_axle_2:
 return False
 else:
 return True

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r18(total_operation_time: float, pto_operation_time: float, idle_time: float, driving_time: float) -> bool:
 if total_operation_time < (pto_operation_time + idle_time + driving_time):
 return False
 else:
 return True"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
PTO operation time should be less than or equal to the total operation time.
Total operation time shouldn’t be lower than idle time.
Driving time should be less than or equal to the total operation time.
The number of stops where PTO is engaged must not exceed the overall stop count.
The weight on axle 1 cannot surpass the weight on axle 2.
The load supported by axle 1 cannot exceed that of axle 3.
The payload must always be smaller than or equal to the load on axle 3.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";" # The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r10(vehicle_fuel_consumption: float, traveled_distance: float) -> bool:
 if traveled_distance >= 20 and vehicle_fuel_consumption / traveled_distance <= 0.4:
 return True
 else:
 return False

# PTO operation time should be less than or equal to the total operation time.
def r11(pto_operation_time: float, total_operation_time: float) -> bool:
 if pto_operation_time <= total_operation_time:
 return True
 else:
 return False

# Total operation time shouldn’t be lower than idle time.
def r12(total_operation_time: float, idle_time: float) -> bool:
 if total_operation_time >= idle_time:
 return True
 else:
 return False

# Driving time should be less than or equal to the total operation time.
def r13(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r14(pto_engaged_stops: int, overall_stops: int) -> bool:
 if pto_engaged_stops <= overall_stops:
 return True
 else:
 return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r15(axle1_weight: float, axle2_weight: float) -> bool:
 if axle1_weight <= axle2_weight:
 return True
 else:
 return False

# The load supported by axle 1 cannot exceed that of axle 3.
def r16(axle1_load: float, axle3_load: float) -> bool:
 if axle1_load <= axle3_load:
 return True
 else:
 return False

# The payload must always be smaller than or equal to the load on axle 3.
def r17(payload: float, axle3_load: float) -> bool:
 if payload <= axle3_load:
 return True
 else:
 return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r18(pto_operation_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if total_operation_time >= pto_operation_time + idle_time + driving_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
The total operation duration must not be lower than the idle time.
Total operation time should shouldn’t be lower than driving time.
The total stop count must not be lower than the count of stops where PTO is engaged.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
Payload must remain below or equal to the load carried by axle 2.
The payload must not exceed the load carried by axle 3.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";" # If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r10(distance: float, fuel_consumption: float) -> bool:
 if distance >= 20 and fuel_consumption / distance < 0.05:
 return False
 else:
 return True

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r11(distance: float, fuel_consumption: float) -> bool:
 if distance >= 20 and fuel_consumption / (distance / 100) < 0.04:
 return False
 else:
 return True

# The total operation duration must not be lower than the idle time.
def r12(operation_duration: float, idle_time: float) -> bool:
 if operation_duration < idle_time:
 return False
 else:
 return True

# Total operation time should not be lower than driving time.
def r13(operation_duration: float, driving_time: float) -> bool:
 if operation_duration < driving_time:
 return False
 else:
 return True

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r14(stop_count: int, pto_stops: int) -> bool:
 if stop_count < pto_stops:
 return False
 else:
 return True

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r15(load_axle1: float, load_axle3: float) -> bool:
 if load_axle1 > load_axle3:
 return False
 else:
 return True

# Payload must remain below or equal to the load carried by axle 2.
def r16(payload: float, load_axle2: float) -> bool:
 if payload > load_axle2:
 return False
 else:
 return True

# The payload must not exceed the load carried by axle 3.
def r17(payload: float, load_axle3: float) -> bool:
 if payload > load_axle3:
 return False
 else:
 return True

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r18(operation_duration: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
 if operation_duration < (pto_time + idle_time + driving_time):
 return False
 else:
 return True"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
PTO operation time cannot be greater than the total operation time.
Idle time should be less than or equal to the total operation time.
The number of stops where PTO is engaged must not exceed the overall stop count.
Axle 1's load cannot exceed Axle 2's load.
The load on axle 1 must not surpass the load on axle 3.
Axle 2's load must always be equal to or greater than the payload.
The payload must not exceed the load carried by axle 3.
Total operation time should be at least the sum of PTO, idle, and driving times.
";" # If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r10(distance: float, fuel_consumption: float) -> bool:
 if distance / 20 >= 1 and fuel_consumption / 60 >= 0.083:
 return True
 else:
 return False

# PTO operation time cannot be greater than the total operation time.
def r11(pto_time: float, total_time: float) -> bool:
 if pto_time <= total_time:
 return True
 else:
 return False

# Idle time should be less than or equal to the total operation time.
def r12(idle_time: float, total_time: float) -> bool:
 if idle_time <= total_time:
 return True
 else:
 return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r13(stop_count: int, pto_stops: int) -> bool:
 if pto_stops <= stop_count:
 return True
 else:
 return False

# Axle 1's load cannot exceed Axle 2's load.
def r14(axle1_load: float, axle2_load: float) -> bool:
 if axle1_load <= axle2_load:
 return True
 else:
 return False

# The load on axle 1 must not surpass the load on axle 3.
def r15(axle1_load: float, axle3_load: float) -> bool:
 if axle1_load <= axle3_load:
 return True
 else:
 return False

# Axle 2's load must always be equal to or greater than the payload.
def r16(axle2_load: float, payload: float) -> bool:
 if axle2_load >= payload:
 return True
 else:
 return False

# The payload must not exceed the load carried by axle 3.
def r17(payload: float, axle3_load: float) -> bool:
 if payload <= axle3_load:
 return True
 else:
 return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r18(pto_time: float, idle_time: float, driving_time: float, total_time: float) -> bool:
 if total_time >= pto_time + idle_time + driving_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
PTO operation time cannot be greater than the total operation time.
Idle time cannot be greater than the total operation time.
Driving time cannot be greater than the total operation time.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
Axle 1's load cannot exceed Axle 3's load.
The payload must always be smaller than or equal to the load on axle 2.
The payload must not exceed the load carried by axle 3.
";" # If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r10(distance: float, fuel_consumption: float) -> bool:
 if distance / 100 >= 0.2 and fuel_consumption / distance <= 0.05:
 return True
 else:
 return False

# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r11(distance: float, avg_fuel_consumption: float) -> bool:
 if distance / 100 >= 0.2 and avg_fuel_consumption >= 40:
 return True
 else:
 return False

# PTO operation time cannot be greater than the total operation time.
def r12(pto_time: float, total_time: float) -> bool:
 if pto_time <= total_time:
 return True
 else:
 return False

# Idle time cannot be greater than the total operation time.
def r13(idle_time: float, total_time: float) -> bool:
 if idle_time <= total_time:
 return True
 else:
 return False

# Driving time cannot be greater than the total operation time.
def r14(driving_time: float, total_time: float) -> bool:
 if driving_time <= total_time:
 return True
 else:
 return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def r15(axle1_load: float, axle2_load: float) -> bool:
 if axle1_load <= axle2_load:
 return True
 else:
 return False

# Axle 1's load cannot exceed Axle 3's load.
def r16(axle1_load: float, axle3_load: float) -> bool:
 if axle1_load <= axle3_load:
 return True
 else:
 return False

# The payload must always be smaller than or equal to the load on axle 2.
def r17(payload: float, axle2_load: float) -> bool:
 if payload <= axle2_load:
 return True
 else:
 return False

# The payload must not exceed the load carried by axle 3.
def r18(payload: float, axle3_load: float) -> bool:
 if payload <= axle3_load:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
PTO operation time should be less than or equal to the total operation time.
Idle time cannot be greater than the total operation time.
Driving time should be less than or equal to the total operation time.
PTO-engaged stops cannot exceed the total number of stops.
Axle 2's load must always be equal to or greater than the payload.
Axle 3's load must always be equal to or greater than the payload.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";" # For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r10(journey_length: float, fuel_consumption_per_hour: float) -> bool:
 if journey_length >= 20 and fuel_consumption_per_hour <= 0.2:
 return True
 else:
 return False

# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r11(journey_length: float, fuel_consumption_per_distance: float) -> bool:
 if journey_length >= 20 and fuel_consumption_per_distance >= 0.04:
 return True
 else:
 return False

# PTO operation time should be less than or equal to the total operation time.
def r12(pto_operation_time: float, total_operation_time: float) -> bool:
 if pto_operation_time <= total_operation_time:
 return True
 else:
 return False

# Idle time cannot be greater than the total operation time.
def r13(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# Driving time should be less than or equal to the total operation time.
def r14(driving_time: float, total_operation_time: float) -> bool:
 if driving_time <= total_operation_time:
 return True
 else:
 return False

# PTO-engaged stops cannot exceed the total number of stops.
def r15(pto_engaged_stops: int, total_stops: int) -> bool:
 if pto_engaged_stops <= total_stops:
 return True
 else:
 return False

# Axle 2's load must always be equal to or greater than the payload.
def r16(axle_2_load: float, payload: float) -> bool:
 if axle_2_load >= payload:
 return True
 else:
 return False

# Axle 3's load must always be equal to or greater than the payload.
def r17(axle_3_load: float, payload: float) -> bool:
 if axle_3_load >= payload:
 return True
 else:
 return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r18(pto_operation_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if pto_operation_time + idle_time + driving_time <= total_operation_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
PTO operation time should be less than or equal to the total operation time.
Idle time cannot be greater than the total operation time.
The total stop count must not be lower than the count of stops where PTO is engaged.
The load on axle 1 must not surpass the load on axle 2.
The weight on axle 1 cannot surpass the weight on axle 3.
The payload must not exceed the load carried by axle 2.
Total operation time should be at least the sum of PTO, idle, and driving times.
";" # The vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r10(hourly_fuel_consumption: float, distance: float) -> bool:
 if distance >= 20 and hourly_fuel_consumption < 5:
 return False
 else:
 return True

# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r11(average_fuel_consumption_per_distance: float, distance: float) -> bool:
 if distance >= 20 and average_fuel_consumption_per_distance < 40:
 return False
 else:
 return True

# PTO operation time should be less than or equal to the total operation time.
def r12(pto_time: float, total_operation_time: float) -> bool:
 if pto_time <= total_operation_time:
 return True
 else:
 return False

# Idle time cannot be greater than the total operation time.
def r13(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r14(total_stop_count: int, pto_stop_count: int) -> bool:
 if total_stop_count >= pto_stop_count:
 return True
 else:
 return False

# The load on axle 1 must not surpass the load on axle 2.
def r15(load_on_axle_1: float, load_on_axle_2: float) -> bool:
 if load_on_axle_1 <= load_on_axle_2:
 return True
 else:
 return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r16(weight_on_axle_1: float, weight_on_axle_3: float) -> bool:
 if weight_on_axle_1 <= weight_on_axle_3:
 return True
 else:
 return False

# The payload must not exceed the load carried by axle 2.
def r17(payload: float, load_on_axle_2: float) -> bool:
 if payload <= load_on_axle_2:
 return True
 else:
 return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r18(pto_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if total_operation_time >= pto_time + idle_time + driving_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
Total operation time shouldn’t be lower than PTO operation time.
Idle time cannot be greater than the total operation time.
Stops with PTO engaged cannot outnumber the total stops.
The load supported by axle 1 cannot exceed that of axle 2.
The payload cannot exceed the capacity of axle 2.
Payload must remain below or equal to the load carried by axle 3.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";" # For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r10(journey_length: float, fuel_consumption_per_hour: float) -> bool:
 if journey_length >= 20 and fuel_consumption_per_hour <= 0.2:
 return True
 else:
 return False

# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def r11(journey_length: float, fuel_consumption_per_distance: float) -> bool:
 if journey_length >= 20 and fuel_consumption_per_distance >= 0.04:
 return True
 else:
 return False

# Total operation time shouldn’t be lower than PTO operation time.
def r12(operation_time: float, pto_operation_time: float) -> bool:
 if operation_time >= pto_operation_time:
 return True
 else:
 return False

# Idle time cannot be greater than the total operation time.
def r13(idle_time: float, operation_time: float) -> bool:
 if idle_time <= operation_time:
 return True
 else:
 return False

# Stops with PTO engaged cannot outnumber the total stops.
def r14(num_stops_with_pto: int, total_stops: int) -> bool:
 if num_stops_with_pto <= total_stops:
 return True
 else:
 return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r15(load_axle_1: float, load_axle_2: float) -> bool:
 if load_axle_1 <= load_axle_2:
 return True
 else:
 return False

# The payload cannot exceed the capacity of axle 2.
def r16(payload: float, axle_2_capacity: float) -> bool:
 if payload <= axle_2_capacity:
 return True
 else:
 return False

# Payload must remain below or equal to the load carried by axle 3.
def r17(payload: float, load_axle_3: float) -> bool:
 if payload <= load_axle_3:
 return True
 else:
 return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r18(pto_time: float, idle_time: float, journey_time: float, total_operation_duration: float) -> bool:
 if total_operation_duration >= pto_time + idle_time + journey_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: PTO operation time must be less than or equal to the total operation time.
Idle time must always be less than or equal to the total operation time.
The total operation durationmust not be lower than the driving time.
The total stop count must not be lower than the count of stops where PTO is engaged.
The weight on axle 1 cannot surpass the weight on axle 2.
The weight on axle 1 cannot surpass the weight on axle 3.
Payload must remain below or equal to the load carried by axle 2.
The payload must not exceed the load carried by axle 3.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";" # PTO operation time must be less than or equal to the total operation time.
def r10(pto_operation_time: float, total_operation_time: float) -> bool:
 if pto_operation_time <= total_operation_time:
 return True
 else:
 return False

# Idle time must always be less than or equal to the total operation time.
def r11(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# The total operation duration must not be lower than the driving time.
def r12(total_operation_duration: float, driving_time: float) -> bool:
 if total_operation_duration >= driving_time:
 return True
 else:
 return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r13(total_stop_count: int, pto_engaged_stop_count: int) -> bool:
 if total_stop_count >= pto_engaged_stop_count:
 return True
 else:
 return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r14(axle_1_weight: float, axle_2_weight: float) -> bool:
 if axle_1_weight <= axle_2_weight:
 return True
 else:
 return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r15(axle_1_weight: float, axle_3_weight: float) -> bool:
 if axle_1_weight <= axle_3_weight:
 return True
 else:
 return False

# Payload must remain below or equal to the load carried by axle 2.
def r16(payload: float, axle_2_load: float) -> bool:
 if payload <= axle_2_load:
 return True
 else:
 return False

# The payload must not exceed the load carried by axle 3.
def r17(payload: float, axle_3_load: float) -> bool:
 if payload <= axle_3_load:
 return True
 else:
 return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r18(total_operation_time: float, pto_operation_time: float, idle_time: float, driving_time: float) -> bool:
 if total_operation_time >= (pto_operation_time + idle_time + driving_time):
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
PTO operation time cannot be greater than the total operation time.
Idle time must always be less than or equal to the total operation time.
The total stop count must not be lower than the count of stops where PTO is engaged.
Axle 1's load cannot exceed Axle 2's load.
The weight on axle 1 cannot surpass the weight on axle 3.
Axle 2's load must always be equal to or greater than the payload.
The payload must always be smaller than or equal to the load on axle 3.
";" # If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
def r10(distance: float, fuel_consumption_rate: float) -> bool:
 if distance >= 20 and fuel_consumption_rate <= (40 / 100 * distance) and fuel_consumption_rate >= 5:
 return True
 else:
 return False

# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def r11(distance: float, fuel_consumption_per_distance: float) -> bool:
 if distance >= 20 and fuel_consumption_per_distance >= 40:
 return True
 else:
 return False

# PTO operation time cannot be greater than the total operation time.
def r12(pto_operation_time: float, total_operation_time: float) -> bool:
 if pto_operation_time <= total_operation_time:
 return True
 else:
 return False

# Idle time must always be less than or equal to the total operation time.
def r13(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r14(total_stop_count: int, pto_engaged_count: int) -> bool:
 if total_stop_count >= pto_engaged_count:
 return True
 else:
 return False

# Axle 1's load cannot exceed Axle 2's load.
def r15(axle1_load: float, axle2_load: float) -> bool:
 if axle1_load <= axle2_load:
 return True
 else:
 return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r16(axle1_weight: float, axle3_weight: float) -> bool:
 if axle1_weight <= axle3_weight:
 return True
 else:
 return False

# Axle 2's load must always be equal to or greater than the payload.
def r17(axle2_load: float, payload: float) -> bool:
 if axle2_load >= payload:
 return True
 else:
 return False

# The payload must always be smaller than or equal to the load on axle 3.
def r18(payload: float, axle3_load: float) -> bool:
 if payload <= axle3_load:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
PTO operation time cannot be greater than the total operation time.
Total operation time should shouldn’t be lower than driving time.
The total stop count must not be lower than the count of stops where PTO is engaged.
Axle 1's load cannot exceed Axle 2's load.
The load on axle 1 must not surpass the load on axle 3.
The payload must always be smaller than or equal to the load on axle 3.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";" # If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r10(distance: float, fuel_consumption_hourly: float) -> bool:
 if distance / 20 >= 1 and fuel_consumption_hourly / 5 <= 1:
 return True
 else:
 return False

# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r11(distance: float, fuel_consumption_average: float) -> bool:
 if distance / 20 >= 1 and fuel_consumption_average / 40 <= 1:
 return True
 else:
 return False

# PTO operation time cannot be greater than the total operation time.
def r12(pto_operation_time: float, total_operation_time: float) -> bool:
 if pto_operation_time <= total_operation_time:
 return True
 else:
 return False

# Total operation time should not be lower than driving time.
def r13(total_operation_time: float, driving_time: float) -> bool:
 if total_operation_time >= driving_time:
 return True
 else:
 return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r14(total_stops: int, pto_stops: int) -> bool:
 if total_stops >= pto_stops:
 return True
 else:
 return False

# Axle 1's load cannot exceed Axle 2's load.
def r15(axle1_load: float, axle2_load: float) -> bool:
 if axle1_load <= axle2_load:
 return True
 else:
 return False

# The load on axle 1 must not surpass the load on axle 3.
def r16(axle1_load: float, axle3_load: float) -> bool:
 if axle1_load <= axle3_load:
 return True
 else:
 return False

# The payload must always be smaller than or equal to the load on axle 3.
def r17(payload: float, axle3_load: float) -> bool:
 if payload <= axle3_load:
 return True
 else:
 return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r18(pto_operation_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
 if pto_operation_time + idle_time + driving_time <= total_operation_time:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
PTO operation time should be less than or equal to the total operation time.
Idle time cannot be greater than the total operation time.
The total operation durationmust not be lower than the driving time.
The total stop count must not be lower than the count of stops where PTO is engaged.
The weight on axle 1 cannot surpass the weight on axle 2.
The weight on axle 1 cannot surpass the weight on axle 3.
Axle 3's load must always be equal to or greater than the payload.
";" # For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r10(journey_length: float, fuel_consumption_per_hour: float) -> bool:
 if journey_length >= 20 and fuel_consumption_per_hour <= 0.05:
 return True
 else:
 return False

# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r11(journey_length: float, fuel_consumption_per_distance: float) -> bool:
 if journey_length >= 20 and fuel_consumption_per_distance >= 0.04:
 return True
 else:
 return False

# PTO operation time should be less than or equal to the total operation time.
def r12(pto_operation_time: float, total_operation_time: float) -> bool:
 if pto_operation_time <= total_operation_time:
 return True
 else:
 return False

# Idle time cannot be greater than the total operation time.
def r13(idle_time: float, total_operation_time: float) -> bool:
 if idle_time <= total_operation_time:
 return True
 else:
 return False

# The total operation duration must not be lower than the driving time.
def r14(total_operation_duration: float, driving_time: float) -> bool:
 if total_operation_duration >= driving_time:
 return True
 else:
 return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r15(total_stop_count: int, pto_engaged_stop_count: int) -> bool:
 if total_stop_count >= pto_engaged_stop_count:
 return True
 else:
 return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r16(weight_on_axle_1: float, weight_on_axle_2: float) -> bool:
 if weight_on_axle_1 <= weight_on_axle_2:
 return True
 else:
 return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r17(weight_on_axle_1: float, weight_on_axle_3: float) -> bool:
 if weight_on_axle_1 <= weight_on_axle_3:
 return True
 else:
 return False

# Axle 3's load must always be equal to or greater than the payload.
def r18(axle_3_load: float, payload: float) -> bool:
 if axle_3_load >= payload:
 return True
 else:
 return False"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
The total operation duration must not be lower than the PTO operation time.
Idle time must always be less than or equal to the total operation time.
Driving time cannot be greater than the total operation time.
The total stop count must not be lower than the count of stops where PTO is engaged.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
Axle 1's load cannot exceed Axle 3's load.
Axle 2's load must always be equal to or greater than the payload.
Axle 3's load must always be equal to or greater than the payload.
";" # The vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r10(fuel_consumption: float, distance: float) -> bool:
 if distance / fuel_consumption < 20.0 or fuel_consumption < 5.0:
 return False
 else:
 return True

# The total operation duration must not be lower than the PTO operation time.
def r11(total_duration: float, pto_duration: float) -> bool:
 if total_duration < pto_duration:
 return False
 else:
 return True

# Idle time must always be less than or equal to the total operation time.
def r12(idle_time: float, total_duration: float) -> bool:
 if idle_time > total_duration:
 return False
 else:
 return True

# Driving time cannot be greater than the total operation time.
def r13(driving_time: float, total_duration: float) -> bool:
 if driving_time > total_duration:
 return False
 else:
 return True

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r14(total_stop_count: int, pto_stop_count: int) -> bool:
 if total_stop_count < pto_stop_count:
 return False
 else:
 return True

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def r15(axle1_load: float, axle2_load: float) -> bool:
 if axle1_load > axle2_load:
 return False
 else:
 return True

# Axle 1's load cannot exceed Axle 3's load.
def r16(axle1_load: float, axle3_load: float) -> bool:
 if axle1_load > axle3_load:
 return False
 else:
 return True

# Axle 2's load must always be equal to or greater than the payload.
def r17(axle2_load: float, payload: float) -> bool:
 if axle2_load < payload:
 return False
 else:
 return True

# Axle 3's load must always be equal to or greater than the payload.
def r18(axle3_load: float, payload: float) -> bool:
 if axle3_load < payload:
 return False
 else:
 return True"
