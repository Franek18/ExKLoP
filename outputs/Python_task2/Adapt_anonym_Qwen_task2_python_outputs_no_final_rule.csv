Prompt;Qwen
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: The number of stops where PTO is engaged must not exceed the overall stop count.
The payload cannot exceed the capacity of axle 3.
";"
```python
def check_pto_stops(stops: int, pto_stops: int) -> bool:
    if pto_stops > stops:
        return False
    else:
        return True

def check_payload_capacity(payload: int, axle_capacity: dict) -> bool:
    if payload > axle_capacity[3]:
        return False
    else:
        return True
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
Stops with PTO engaged cannot outnumber the total stops.
";"
```python
# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def min_fuel_consumption_rate(trip_km: int, fuel_consumption_dm3_100km: float) -> bool:
    if trip_km >= 20 and fuel_consumption_dm3_100km == 40:
        return True
    else:
        return False

# Stops with PTO engaged cannot outnumber the total stops.
def pto_stops_rule(total_stops: int, pto_engaged_stops: int) -> bool:
    if pto_engaged_stops <= total_stops:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: The load carried by axle 1 must be smaller than or equal to the load on axle 3.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"
```python
# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def load_condition(axle_1_load: float, axle_3_load: float) -> bool:
    return axle_1_load <= axle_3_load

# Total operation time should be at least the sum of PTO, idle, and driving times.
def operation_time_condition(pto_time: float, idle_time: float, driving_time: float) -> bool:
    total_time = pto_time + idle_time + driving_time
    return total_time >= 0
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: PTO operation time must be less than or equal to the total operation time.
Axle 1's load cannot exceed Axle 3's load.
";"
```python
# PTO operation time must be less than or equal to the total operation time.
def pto_operation_time(pto_time: float, total_operation_time: float) -> bool:
    if pto_time <= total_operation_time:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 3's load.
def axle_load(axle_1_load: float, axle_3_load: float) -> bool:
    if axle_1_load <= axle_3_load:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
The payload cannot exceed the capacity of axle 3.
";"
```python
def min_fuel_consumption(km: int, fuel_consumption: float) -> bool:
    if km >= 20:
        if fuel_consumption == 40:
            return True
        else:
            return False
    else:
        return False

def payload_capacity(axle: int, payload: int) -> bool:
    if axle == 3:
        if payload <= 0:
            return True
        else:
            return False
    else:
        return True
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
Driving time should be less than or equal to the total operation time.
";"
```python
# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def min_fuel_consumption(trip_km: int) -> bool:
    if trip_km >= 20:
        if trip_km / 100 * 40 <= trip_km:
            return True
        else:
            return False
    else:
        return False

# Driving time should be less than or equal to the total operation time.
def driving_time_within_operation_time(driving_time: int, total_operation_time: int) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: The payload must always be smaller than or equal to the load on axle 2.
The payload must always be smaller than or equal to the load on axle 3.
";"
```python
def payload_rule(payload: float, load_axle_2: float, load_axle_3: float) -> bool:
    if payload <= load_axle_2 and payload <= load_axle_3:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: PTO-engaged stops cannot exceed the total number of stops.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
";"
```python
# PTO-engaged stops cannot exceed the total number of stops.
def pto_engaged_stops(max_stops):
    return lambda pto_engaged_stops: pto_engaged_stops <= max_stops

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def load_on_axles(load_1, load_3):
    return load_1 <= load_3
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
Axle 2's load must always be equal to or greater than the payload.
";"
```python
# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def fuel_consumption_check(distance: float, fuel_consumption: float) -> bool:
    if distance >= 20 and fuel_consumption < (40 / 100):
        return False
    else:
        return True

# Axle 2's load must always be equal to or greater than the payload.
def axle_load_check(axle_2_load: float, payload: float) -> bool:
    if axle_2_load < payload:
        return False
    else:
        return True
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: The load on axle 1 must not surpass the load on axle 2.
The weight on axle 1 cannot surpass the weight on axle 3.
";"
```python
def check_load(axle_1: float, axle_2: float) -> bool:
    if axle_1 > axle_2:
        return False
    else:
        return True

def check_weight(axle_1: float, axle_3: float) -> bool:
    if axle_1 > axle_3:
        return False
    else:
        return True
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: Idle time cannot be greater than the total operation time.
Driving time should be less than or equal to the total operation time.
";"
```python
# Idle time cannot be greater than the total operation time.
def idle_time_rule(operation_time: float, idle_time: float) -> bool:
    if idle_time > operation_time:
        return False
    else:
        return True

# Driving time should be less than or equal to the total operation time.
def driving_time_rule(operation_time: float, driving_time: float) -> bool:
    if driving_time <= operation_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: Axle 1's load cannot exceed Axle 2's load.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";"
```python
# Axle 1's load cannot exceed Axle 2's load.
def axle_load_rule(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load > axle2_load:
        return False
    else:
        return True

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def operation_duration_rule(total_operation_duration: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    if total_operation_duration < (pto_time + idle_time + driving_time):
        return False
    else:
        return True
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
Total operation time shouldn’t be lower than idle time.
";"
```python
# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def min_fuel_consumption(km_traveled: int, fuel_consumption_dm3_per_100km: float) -> bool:
    if km_traveled >= 20:
        if fuel_consumption_dm3_per_100km == 40:
            return True
        else:
            return False
    else:
        return False

# Total operation time shouldn’t be lower than idle time.
def total_operation_time(idle_time: int, total_operation_time: int) -> bool:
    if total_operation_time >= idle_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: The total operation durationmust not be lower than the driving time.
Axle 1's load cannot exceed Axle 3's load.
";"
```python
# The total operation duration must not be lower than the driving time.
def total_operation_duration(min_driving_time: float) -> bool:
    if total_operation_duration >= min_driving_time:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 3's load.
def axle_load(axle_1_load: float, axle_3_load: float) -> bool:
    if axle_1_load <= axle_3_load:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: PTO operation time should be less than or equal to the total operation time.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";"
```python
def pto_operation_time(pto_time: float, total_operation_time: float, idle_time: float, driving_time: float) -> bool:
    # PTO operation time should be less than or equal to the total operation time.
    if pto_time > total_operation_time:
        return False
    
    # Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
    if total_operation_time < pto_time + idle_time + driving_time:
        return False
    
    return True
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
PTO operation time cannot be greater than the total operation time.
";"
```python
# The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def fuel_consumption(min_fuel_consumption: float, distance_km: float, hours: float) -> bool:
    if distance_km / hours < min_fuel_consumption:
        return False
    else:
        return True

# PTO operation time cannot be greater than the total operation time.
def pto_operation_time(total_operation_time: float, pto_operation_time: float) -> bool:
    if pto_operation_time > total_operation_time:
        return False
    else:
        return True
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: Idle time should be less than or equal to the total operation time.
The load supported by axle 1 cannot exceed that of axle 3.
";"
```python
# Idle time should be less than or equal to the total operation time.
def idle_time_rule(operation_time: float, idle_time: float) -> bool:
    if idle_time <= operation_time:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 3.
def axle_load_rule(axle_1_load: float, axle_3_load: float) -> bool:
    if axle_1_load <= axle_3_load:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: PTO operation time cannot be greater than the total operation time.
The payload must not exceed the load carried by axle 3.
";"
```python
# PTO operation time cannot be greater than the total operation time.
def pto_rule(operation_time: float, pto_time: float) -> bool:
    if pto_time > operation_time:
        return False
    else:
        return True

# The payload must not exceed the load carried by axle 3.
def payload_rule(payload: float, axle_3_load: float) -> bool:
    if payload > axle_3_load:
        return False
    else:
        return True
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
";"
```python
# Function to check if the vehicle's average hourly fuel consumption is not less than 5 dm³/h for at least 20 km travel
def avg_fuel_consumption_1(hourly_fuel_consumption: float, distance_km: float) -> bool:
    if distance_km >= 20 and hourly_fuel_consumption >= 5:
        return True
    else:
        return False

# Function to calculate the minimum average fuel consumption per 100 km if the vehicle travels 20 km or more
def min_avg_fuel_consumption_2(distance_km: float) -> float:
    if distance_km >= 20:
        return 40
    else:
        return None
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: The total operation durationmust not be lower than the driving time.
PTO-engaged stops cannot exceed the total number of stops.
";"
```python
def check_total_operation_duration(driving_time: float, total_operation_duration: float) -> bool:
    if total_operation_duration < driving_time:
        return False
    else:
        return True

def check_stop_conditions(total_stops: int, pto_engaged_stops: int) -> bool:
    if pto_engaged_stops > total_stops:
        return False
    else:
        return True
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: The load supported by axle 1 cannot exceed that of axle 2.
The payload cannot exceed the capacity of axle 3.
";"
```python
def load_support(axle_1: int, axle_2: int) -> bool:
    if axle_1 > axle_2:
        return False
    else:
        return True

def payload_capacity(axle_3: int) -> bool:
    if payload > axle_3:
        return False
    else:
        return True
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
The weight on axle 1 cannot surpass the weight on axle 3.
";"
```python
# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def fuel_consumption(journey_km: int, fuel_consumption_dm3h: float) -> bool:
    if journey_km >= 20 and fuel_consumption_dm3h >= 5:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def weight_on_axles(weight_axle1: float, weight_axle3: float) -> bool:
    if weight_axle1 <= weight_axle3:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"
```python
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def fuel_consumption(distance_km: float, fuel_consumption_dm3h: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3h < 5:
        return False
    else:
        return True

# Total operation time should be at least the sum of PTO, idle, and driving times.
def total_operation_time(pto_time: float, idle_time: float, driving_time: float) -> bool:
    if pto_time + idle_time + driving_time <= 0:
        return False
    else:
        return True
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: Stops with PTO engaged cannot outnumber the total stops.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";"
```python
def check_stops(pto_engaged_stops, total_stops):
    """"""
    Check if the number of stops with PTO engaged cannot outnumber the total stops.
    
    :param pto_engaged_stops: Number of stops with PTO engaged
    :param total_stops: Total number of stops
    :return: True if the condition is met, False otherwise
    """"""
    return pto_engaged_stops <= total_stops

def check_operation_time(pto_time, idle_time, driving_time):
    """"""
    Check if total operation time is greater than or equal to the sum of PTO operation, idle, and driving times.
    
    :param pto_time: Time spent with PTO engaged
    :param idle_time: Idle time
    :param driving_time: Driving time
    :return: True if the condition is met, False otherwise
    """"""
    total_time = pto_time + idle_time + driving_time
    return total_time >= pto_time

# Example usage
print(check_stops(5, 10))  # Expected output: True
print(check_operation_time(100, 50, 75))  # Expected output: True
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: The load supported by axle 1 cannot exceed that of axle 3.
Payload must remain below or equal to the load carried by axle 3.
";"
```python
def check_load(axle_1: float, axle_3: float) -> bool:
    if axle_1 > axle_3:
        return False
    else:
        return True
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: Idle time must always be less than or equal to the total operation time.
Payload must remain below or equal to the load carried by axle 3.
";"
```python
# Idle time must always be less than or equal to the total operation time.
def idle_time_rule(operation_time: float, idle_time: float) -> bool:
    if idle_time <= operation_time:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 3.
def payload_rule(axle_3_load: float, payload: float) -> bool:
    if payload <= axle_3_load:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
The load on axle 1 must not surpass the load on axle 2.
";"
```python
# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def min_fuel_consumption(trip_km: int, fuel_rate_dm3_per_100km: float) -> bool:
    if trip_km >= 20 and fuel_rate_dm3_per_100km >= 40:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 2.
def load_on_axles(load_axle1: float, load_axle2: float) -> bool:
    if load_axle1 <= load_axle2:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: Driving time must always be less than or equal to the total operation time.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";"
```python
def validate_operation_times(driving_time: float, total_operation_time: float, pto_operation_time: float, idle_time: float) -> bool:
    # Driving time must always be less than or equal to the total operation time.
    if driving_time > total_operation_time:
        return False
    
    # Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
    if total_operation_time < pto_operation_time + idle_time + driving_time:
        return False
    
    return True
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: The total operation duration must not be lower than the PTO operation time.
The number of stops where PTO is engaged must not exceed the overall stop count.
";"
```python
# The total operation duration must not be lower than the PTO operation time.
def check_total_operation_duration(total_duration: float, pto_duration: float) -> bool:
    if total_duration < pto_duration:
        return False
    else:
        return True

# The number of stops where PTO is engaged must not exceed the overall stop count.
def check_stop_count(stops_with_pto: int, overall_stops: int) -> bool:
    if stops_with_pto > overall_stops:
        return False
    else:
        return True
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: Total operation time shouldn’t be lower than idle time.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";"
```python
def check_operation_time(operation_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    """"""
    Check if the operation time is greater than or equal to the sum of PTO time, idle time, and driving time.

    :param operation_time: Total operation time.
    :param pto_time: Time spent on Paid Time Off (PTO).
    :param idle_time: Idle time.
    :param driving_time: Driving time.
    :return: True if operation_time >= pto_time + idle_time + driving_time, False otherwise.
    """"""
    return operation_time >= pto_time + idle_time + driving_time

def check_total_time_greater_than_idle_time(total_time: float, idle_time: float) -> bool:
    """"""
    Check if the total time is greater than or equal to the idle time.

    :param total_time: Total time including operation, PTO, and driving.
    :param idle_time: Idle time.
    :return: True if total_time >= idle_time, False otherwise.
    """"""
    return total_time >= idle_time
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
The total operation duration must not be lower than the idle time.
";"
```python
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_hour < 5:
        return False
    else:
        return True

# The total operation duration must not be lower than the idle time.
def r2(operation_duration_hours: float, idle_time_hours: float) -> bool:
    if operation_duration_hours < idle_time_hours:
        return False
    else:
        return True
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
";"
```python
# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def min_fuel_consumption(distance_km: int, fuel_liters: float) -> bool:
    if fuel_liters / distance_km >= 40 / 100:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def load_on_axles(load_axle1: float, load_axle3: float) -> bool:
    if load_axle1 <= load_axle3:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: Driving time should be less than or equal to the total operation time.
The payload must not exceed the load carried by axle 3.
";"
```python
# Driving time should be less than or equal to the total operation time.
def driving_time_rule(driving_time: float, total_operation_time: float) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def payload_rule(payload: float, load_carried_by_axle_3: float) -> bool:
    if payload <= load_carried_by_axle_3:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: The total operation duration must not be lower than the PTO operation time.
Axle 2's load must always be equal to or greater than the payload.
";"
```python
# The total operation duration must not be lower than the PTO operation time.
def check_operation_duration(total_duration: float, pto_duration: float) -> bool:
    if total_duration < pto_duration:
        return False
    else:
        return True

# Axle 2's load must always be equal to or greater than the payload.
def check_axle_load(axle_2_load: float, payload: float) -> bool:
    if axle_2_load < payload:
        return False
    else:
        return True
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: The payload cannot exceed the capacity of axle 3.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";"
```python
# The payload cannot exceed the capacity of axle 3.
def payload_limit(payload: float, axle_capacity: float) -> bool:
    if payload > axle_capacity:
        return False
    else:
        return True

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def operation_time_rule(operation_time: float, pto_duration: float, idle_time: float, driving_time: float) -> bool:
    if operation_time < (pto_duration + idle_time + driving_time):
        return False
    else:
        return True
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: Idle time should be less than or equal to the total operation time.
The load on axle 1 must not surpass the load on axle 2.
";"
```python
# Idle time should be less than or equal to the total operation time.
def idle_time_rule(operation_time: float, idle_time: float) -> bool:
    if idle_time <= operation_time:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 2.
def axle_load_rule(axle_1_load: float, axle_2_load: float) -> bool:
    if axle_1_load <= axle_2_load:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: The total stop count must not be lower than the count of stops where PTO is engaged.
The weight on axle 1 cannot surpass the weight on axle 2.
";"
```python
def validate_stop_counts(pto_stops: int, total_stops: int) -> bool:
    if total_stops < pto_stops:
        return False
    else:
        return True

def validate_axle_weights(axle1_weight: float, axle2_weight: float) -> bool:
    if axle1_weight > axle2_weight:
        return False
    else:
        return True
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: Driving time should be less than or equal to the total operation time.
The weight on axle 1 cannot surpass the weight on axle 2.
";"
```python
# Driving time should be less than or equal to the total operation time.
def driving_time_rule(driving_time: float, total_operation_time: float) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def axle_weight_rule(axle_1_weight: float, axle_2_weight: float) -> bool:
    if axle_1_weight <= axle_2_weight:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
Stops with PTO engaged cannot outnumber the total stops.
";"
```python
# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def fuel_consumption(journey_km: float, fuel_consumption_dm3h: float) -> bool:
    if journey_km >= 20 and fuel_consumption_dm3h >= 5:
        return True
    else:
        return False

# Stops with PTO engaged cannot outnumber the total stops.
def pto_stops(total_stops: int, pto_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
The payload must always be smaller than or equal to the load on axle 2.
";"
```python
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if fuel_consumption_dm3_per_hour < 5:
        return False
    else:
        return True

# The payload must always be smaller than or equal to the load on axle 2.
def r2(payload_kg: float, load_on_axle_2_kg: float) -> bool:
    if payload_kg > load_on_axle_2_kg:
        return False
    else:
        return True
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: PTO operation time must be less than or equal to the total operation time.
Idle time should be less than or equal to the total operation time.
";"
```python
def pto_operation_time(pto_time: float, total_operation_time: float) -> bool:
    if pto_time <= total_operation_time:
        return True
    else:
        return False

def idle_time(idle_time: float, total_operation_time: float) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
PTO operation time must be less than or equal to the total operation time.
";"
```python
# Function to check if minimum average fuel consumption is met
def min_avg_fuel_consumption(min_km: int, avg_fuel_consumption: float) -> bool:
    if avg_fuel_consumption * 100 <= min_km:
        return True
    else:
        return False

# Function to check if PTO operation time is less than or equal to total operation time
def pto_operation_time(total_operation_time: float, pto_operation_time: float) -> bool:
    if pto_operation_time <= total_operation_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: Total operation time shouldn’t be lower than PTO operation time.
Driving time should be less than or equal to the total operation time.
";"
```python
def check_total_operation_time(pto_time: float, total_operation_time: float) -> bool:
    if total_operation_time >= pto_time:
        return True
    else:
        return False

def check_driving_time(total_operation_time: float, driving_time: float) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: Driving time should be less than or equal to the total operation time.
The payload must always be smaller than or equal to the load on axle 2.
";"
```python
# Driving time should be less than or equal to the total operation time.
def driving_time_rule(driving_time: float, total_operation_time: float) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 2.
def payload_axle2_rule(payload: float, load_axle2: float) -> bool:
    if payload <= load_axle2:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
Driving time must always be less than or equal to the total operation time.
";"
```python
# If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
def min_fuel_consumption(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if fuel_consumption_dm3_per_hour >= 5 and distance_km >= 20:
        return True
    else:
        return False

# Driving time must always be less than or equal to the total operation time.
def driving_time_within_total_operation_time(driving_time_hours: float, total_operation_time_hours: float) -> bool:
    if driving_time_hours <= total_operation_time_hours:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
Axle 3's load must always be equal to or greater than the payload.
";"
```python
# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def fuel_consumption(journey_km: float, fuel_consumption_dm3h: float) -> bool:
    if journey_km >= 20 and fuel_consumption_dm3h >= 5:
        return True
    else:
        return False

# Axle 3's load must always be equal to or greater than the payload.
def axle_load(axle_3_load: float, payload: float) -> bool:
    if axle_3_load >= payload:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: Total operation time shouldn’t be lower than idle time.
Stops with PTO engaged cannot outnumber the total stops.
";"
```python
def check_operation_time(total_operation_time: float, idle_time: float) -> bool:
    if total_operation_time < idle_time:
        return False
    return True

def check_stops_with_PTO(total_stops: int, stops_with_PTO_engaged: int) -> bool:
    if stops_with_PTO_engaged > total_stops:
        return False
    return True
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: PTO-engaged stops cannot exceed the total number of stops.
Payload must remain below or equal to the load carried by axle 2.
";"
```python
def pto_engaged_stops(total_stops: int) -> bool:
    if 'PTO-engaged stops' > total_stops:
        return False
    else:
        return True

def payload_below_or_equal_axle2_load(payload: float, axle2_load: float) -> bool:
    if payload <= axle2_load:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: Idle time must always be less than or equal to the total operation time.
Payload must remain below or equal to the load carried by axle 2.
";"
```python
# Idle time must always be less than or equal to the total operation time.
def idle_time_rule(operation_time: float, idle_time: float) -> bool:
    if idle_time <= operation_time:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def payload_rule(axle_2_load: float, payload: float) -> bool:
    if payload <= axle_2_load:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False


        
Input text:
Textual context: The load carried by axle 1 must be smaller than or equal to the load on axle 2.
The payload cannot exceed the capacity of axle 2.
";"
```python
def check_loads(axle1_load: float, axle2_load: float, axle2_capacity: float) -> bool:
    """"""
    Check if the load carried by axle 1 is smaller than or equal to the load on axle 2,
    and the payload does not exceed the capacity of axle 2.
    
    :param axle1_load: Load carried by axle 1
    :param axle2_load: Load on axle 2
    :param axle2_capacity: Capacity of axle 2
    :return: True if conditions are met, False otherwise
    """"""
    return (axle1_load <= axle2_load) and (axle2_load <= axle2_capacity)
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
Idle time should be less than or equal to the total operation time.
The weight on axle 1 cannot surpass the weight on axle 3.
";"
```python
# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def min_fuel_consumption(distance_km: int, fuel_consumption_dm3: int) -> bool:
    if fuel_consumption_dm3 / distance_km >= 4:
        return True
    else:
        return False

# Idle time should be less than or equal to the total operation time.
def idle_time_operation_time(idle_time_hours: float, operation_time_hours: float) -> bool:
    if idle_time_hours <= operation_time_hours:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def weight_on_axles(weight_axle1: float, weight_axle3: float) -> bool:
    if weight_axle1 <= weight_axle3:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
Total operation time should shouldn’t be lower than driving time.
";"
```python
# If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if fuel_consumption_dm3_per_hour >= 5 and distance_km >= 20:
        return True
    else:
        return False

# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r2(distance_km: float, fuel_consumption_dm3_per_100km: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_100km == 40:
        return True
    else:
        return False

# Total operation time should shouldn’t be lower than driving time.
def r3(driving_time_hours: float, total_operation_time_hours: float) -> bool:
    if total_operation_time_hours >= driving_time_hours:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: Idle time should be less than or equal to the total operation time.
Total operation time should shouldn’t be lower than driving time.
The load on axle 1 must not surpass the load on axle 2.
";"
```python
# Idle time should be less than or equal to the total operation time.
def idle_time_rule(idle_time: float, total_operation_time: float) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# Total operation time should not be lower than driving time.
def total_operation_time_rule(total_operation_time: float, driving_time: float) -> bool:
    if total_operation_time >= driving_time:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 2.
def load_on_axles_rule(load_axle_1: float, load_axle_2: float) -> bool:
    if load_axle_1 <= load_axle_2:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: The load supported by axle 1 cannot exceed that of axle 2.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
The payload cannot exceed the capacity of axle 3.
";"
```python
def check_loads(axle1: float, axle2: float, axle3: float) -> bool:
    if axle1 > axle2:
        return False
    if axle1 > axle3:
        return False
    if axle3 > capacity:
        return False
    return True
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
The total operation durationmust not be lower than the driving time.
Axle 2's load must always be equal to or greater than the payload.
";"
```python
# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(journey_km: float, fuel_consumption_dm3h: float) -> bool:
    if journey_km >= 20 and fuel_consumption_dm3h >= 5:
        return True
    else:
        return False

# The total operation duration must not be lower than the driving time.
def r2(operation_duration_hours: float, driving_time_hours: float) -> bool:
    if operation_duration_hours >= driving_time_hours:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def r3(axle_2_load_kg: float, payload_kg: float) -> bool:
    if axle_2_load_kg >= payload_kg:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
Driving time should be less than or equal to the total operation time.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
";"
```python
# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def fuel_consumption_rate(min_trip_km: int, min_fuel_consumption_dm3_per_100km: float) -> bool:
    if min_trip_km >= 20 and min_fuel_consumption_dm3_per_100km == 40:
        return True
    else:
        return False

# Driving time should be less than or equal to the total operation time.
def driving_time(total_operation_time: float, driving_time: float) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def load_on_axles(load_axle1: float, load_axle3: float) -> bool:
    if load_axle1 <= load_axle3:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
Total operation time shouldn’t be lower than PTO operation time.
";"
```python
# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_hour >= 5:
        return True
    else:
        return False

# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r2(distance_km: float, fuel_consumption_dm3_per_100km: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_100km == 40:
        return True
    else:
        return False

# Total operation time shouldn’t be lower than PTO operation time.
def r3(total_operation_time_hours: float, pto_operation_time_hours: float) -> bool:
    if total_operation_time_hours >= pto_operation_time_hours:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: PTO operation time should be less than or equal to the total operation time.
Driving time must always be less than or equal to the total operation time.
Stops with PTO engaged should never outnumber total stops.
";"
```python
# PTO operation time should be less than or equal to the total operation time.
def pto_rule(pto_time: float, total_time: float) -> bool:
    if pto_time <= total_time:
        return True
    else:
        return False

# Driving time must always be less than or equal to the total operation time.
def driving_rule(driving_time: float, total_time: float) -> bool:
    if driving_time <= total_time:
        return True
    else:
        return False

# Stops with PTO engaged should never outnumber total stops.
def stops_rule(total_stops: int, pto_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: The total operation duration must not be lower than the idle time.
The number of stops where PTO is engaged must not exceed the overall stop count.
Payload must remain below or equal to the load carried by axle 3.
";"
```python
# The total operation duration must not be lower than the idle time.
def rule1(operation_duration: float, idle_time: float) -> bool:
    if operation_duration < idle_time:
        return False
    else:
        return True

# The number of stops where PTO is engaged must not exceed the overall stop count.
def rule2(number_of_engaged_stops: int, overall_stop_count: int) -> bool:
    if number_of_engaged_stops > overall_stop_count:
        return False
    else:
        return True

# Payload must remain below or equal to the load carried by axle 3.
def rule3(payload: float, load_carried_by_axle_3: float) -> bool:
    if payload > load_carried_by_axle_3:
        return False
    else:
        return True
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: Idle time must always be less than or equal to the total operation time.
The load on axle 1 must not surpass the load on axle 3.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"
```python
# Idle time must always be less than or equal to the total operation time.
def idle_time_rule(operation_time: float, idle_time: float) -> bool:
    if idle_time <= operation_time:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 3.
def axle_load_rule(axle_1_load: float, axle_3_load: float) -> bool:
    if axle_1_load <= axle_3_load:
        return True
    else:
        return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def total_operation_time_rule(pto_time: float, idle_time: float, driving_time: float) -> bool:
    if pto_time + idle_time + driving_time <= total_operation_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
The load supported by axle 1 cannot exceed that of axle 2.
Axle 2's load must always be equal to or greater than the payload.
";"
```python
# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def rule1(distance_km: float, fuel_consumption_dm3_per_100km: float) -> bool:
    if fuel_consumption_dm3_per_100km < 40:
        return False
    else:
        return True

# The load supported by axle 1 cannot exceed that of axle 2.
def rule2(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load > axle2_load:
        return False
    else:
        return True

# Axle 2's load must always be equal to or greater than the payload.
def rule3(axle2_load: float, payload: float) -> bool:
    if axle2_load < payload:
        return False
    else:
        return True
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
PTO operation time cannot be greater than the total operation time.
The weight on axle 1 cannot surpass the weight on axle 3.
";"
```python
# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r1(trip_km: int, fuel_consumption_rate_dm3_per_100km: float) -> bool:
    if trip_km >= 20 and fuel_consumption_rate_dm3_per_100km == 40:
        return True
    else:
        return False

# PTO operation time cannot be greater than the total operation time.
def r2(pto_operation_time: int, total_operation_time: int) -> bool:
    if pto_operation_time <= total_operation_time:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r3(axle_1_weight: int, axle_3_weight: int) -> bool:
    if axle_1_weight <= axle_3_weight:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: Total operation time shouldn’t be lower than idle time.
Driving time should be less than or equal to the total operation time.
Axle 2's load must always be equal to or greater than the payload.
";"
```python
# Total operation time shouldn't be lower than idle time.
def rule1(total_operation_time: float, idle_time: float) -> bool:
    if total_operation_time >= idle_time:
        return True
    else:
        return False

# Driving time should be less than or equal to the total operation time.
def rule2(driving_time: float, total_operation_time: float) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def rule3(axle_2_load: float, payload: float) -> bool:
    if axle_2_load >= payload:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
Idle time cannot be greater than the total operation time.
Payload must remain below or equal to the load carried by axle 3.
";"
```python
# If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if fuel_consumption_dm3_per_hour >= 5 and distance_km >= 20:
        return True
    else:
        return False

# Idle time cannot be greater than the total operation time.
def r2(idle_time_hours: float, operation_time_hours: float) -> bool:
    if idle_time_hours <= operation_time_hours:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 3.
def r3(payload_kg: float, load_axle_3_kg: float) -> bool:
    if payload_kg <= load_axle_3_kg:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: The total operation durationmust not be lower than the driving time.
Stops with PTO engaged should never outnumber total stops.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";"
```python
def validate_operation_duration(driving_time: float, total_operation_time: float, pto_stops: int, total_stops: int) -> bool:
    """"""
    Check if the total operation duration meets the conditions:
    1. The total operation duration must not be lower than the driving time.
    2. Stops with PTO engaged should never outnumber total stops.
    3. The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
    """"""
    # Condition 1: Total operation duration must not be lower than driving time
    if total_operation_time < driving_time:
        return False
    
    # Condition 2: PTO stops should never outnumber total stops
    if pto_stops > total_stops:
        return False
    
    # Condition 3: Total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time
    # Assuming idle_time is a variable that represents the idle time duration
    idle_time = total_operation_time - (driving_time + pto_stops)
    if total_operation_time < driving_time + idle_time:
        return False
    
    return True
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: The weight on axle 1 cannot surpass the weight on axle 2.
Axle 1's load cannot exceed Axle 3's load.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";"
```python
# The weight on axle 1 cannot surpass the weight on axle 2.
def rule1(weight_axle1: float, weight_axle2: float) -> bool:
    if weight_axle1 > weight_axle2:
        return False
    else:
        return True

# Axle 1's load cannot exceed Axle 3's load.
def rule2(load_axle1: float, load_axle3: float) -> bool:
    if load_axle1 > load_axle3:
        return False
    else:
        return True

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def rule3(total_operation_time: float, pto_duration: float, idle_time: float, driving_time: float) -> bool:
    if total_operation_time < (pto_duration + idle_time + driving_time):
        return False
    else:
        return True
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
";"
```python
# If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if fuel_consumption_dm3_per_hour / distance_km >= 0.25:
        return True
    else:
        return False

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r2(distance_km: float, fuel_consumption_dm3_per_100km: float) -> bool:
    if fuel_consumption_dm3_per_100km / distance_km >= 0.4:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r3(axle1_load: float, axle3_load: float) -> bool:
    if axle1_load <= axle3_load:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: Idle time must always be less than or equal to the total operation time.
The load supported by axle 1 cannot exceed that of axle 2.
The weight on axle 1 cannot surpass the weight on axle 3.
";"
```python
# Idle time must always be less than or equal to the total operation time.
def idle_time_rule(operation_time: float, idle_time: float) -> bool:
    if idle_time <= operation_time:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 2.
def axle_load_rule(axle_1_load: float, axle_2_load: float) -> bool:
    if axle_1_load <= axle_2_load:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def axle_weight_rule(axle_1_weight: float, axle_3_weight: float) -> bool:
    if axle_1_weight <= axle_3_weight:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
The payload cannot exceed the capacity of axle 3.
";"
```python
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_hour >= 5:
        return True
    else:
        return False

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r2(distance_km: float, fuel_consumption_dm3_per_100km: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_100km == 40:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 3.
def r3(payload_kg: float, axle_capacity_kg: float) -> bool:
    if payload_kg <= axle_capacity_kg:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: PTO-engaged stops cannot exceed the total number of stops.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
The payload must always be smaller than or equal to the load on axle 2.
";"
```python
def pto_engaged_stops(total_stops):
    if 'PTO-engaged stops' > total_stops:
        return False
    return True

def load_axle_1(axle_1_load, axle_2_load):
    if axle_1_load > axle_2_load:
        return False
    return True

def payload_on_axle_2(payload, axle_2_load):
    if payload > axle_2_load:
        return False
    return True
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
Stops with PTO engaged cannot outnumber the total stops.
Axle 2's load must always be equal to or greater than the payload.
";"
```python
# The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def fuel_consumption_rule(fuel_consumption: float, distance_km: float) -> bool:
    if distance_km >= 20 and fuel_consumption >= 5:
        return True
    else:
        return False

# Stops with PTO engaged cannot outnumber the total stops.
def pto_stops_rule(total_stops: int, pto_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def axle_load_rule(axle_2_load: float, payload: float) -> bool:
    if axle_2_load >= payload:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
Total operation time shouldn’t be lower than idle time.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";"
```python
# If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if fuel_consumption_dm3_per_hour >= 5 and distance_km >= 20:
        return True
    else:
        return False

# Total operation time shouldn't be lower than idle time.
def r2(total_operation_time_hours: float, idle_time_hours: float) -> bool:
    if total_operation_time_hours >= idle_time_hours:
        return True
    else:
        return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r3(total_operation_time_hours: float, pto_operation_time_hours: float, idle_time_hours: float, driving_time_hours: float) -> bool:
    if total_operation_time_hours >= pto_operation_time_hours + idle_time_hours + driving_time_hours:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
Stops with PTO engaged should never outnumber total stops.
The load on axle 1 must not surpass the load on axle 2.
";"
```python
# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def fuel_consumption(min_km: int, min_dm3_per_100km: float) -> bool:
    if min_km >= 20:
        return min_dm3_per_100km == 40
    else:
        return False

# Stops with PTO engaged should never outnumber total stops.
def pto_stops(total_stops: int, pto_stops: int) -> bool:
    return pto_stops <= total_stops

# The load on axle 1 must not surpass the load on axle 2.
def axle_load(axle1_load: float, axle2_load: float) -> bool:
    return axle1_load <= axle2_load
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
The total operation durationmust not be lower than the driving time.
The weight on axle 1 cannot surpass the weight on axle 2.
";"
```python
# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def r1(distance_km: int, fuel_consumption_dm3_100km: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_100km >= 40:
        return True
    else:
        return False

# The total operation duration must not be lower than the driving time.
def r2(total_operation_duration: float, driving_time: float) -> bool:
    if total_operation_duration >= driving_time:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r3(axle1_weight: float, axle2_weight: float) -> bool:
    if axle1_weight <= axle2_weight:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
Idle time cannot be greater than the total operation time.
The payload must always be smaller than or equal to the load on axle 3.
";"
```python
# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def r1(distance_km: int, fuel_consumption_dm3_100km: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_100km >= 40:
        return True
    else:
        return False

# Idle time cannot be greater than the total operation time.
def r2(idle_time_hours: float, operation_time_hours: float) -> bool:
    if idle_time_hours <= operation_time_hours:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 3.
def r3(payload_kg: float, load_axle3_kg: float) -> bool:
    if payload_kg <= load_axle3_kg:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: PTO operation time should be less than or equal to the total operation time.
The number of stops where PTO is engaged must not exceed the overall stop count.
Axle 1's load cannot exceed Axle 2's load.
";"
```python
# PTO operation time should be less than or equal to the total operation time.
def pto_operation_time(pto_time: float, total_time: float) -> bool:
    if pto_time <= total_time:
        return True
    else:
        return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def stops_engagement(stops_engaged: int, overall_stops: int) -> bool:
    if stops_engaged <= overall_stops:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 2's load.
def axle_load(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load <= axle2_load:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
Idle time cannot be greater than the total operation time.
PTO-engaged stops cannot exceed the total number of stops.
";"
```python
# If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if fuel_consumption_dm3_per_hour >= 5 and distance_km >= 20:
        return True
    else:
        return False

# Idle time cannot be greater than the total operation time.
def r2(idle_time_hours: float, total_operation_time_hours: float) -> bool:
    if idle_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# PTO-engaged stops cannot exceed the total number of stops.
def r3(pto_engaged_stops: int, total_stops: int) -> bool:
    if pto_engaged_stops <= total_stops:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: The total operation duration must not be lower than the PTO operation time.
Idle time should be less than or equal to the total operation time.
The total stop count must not be lower than the count of stops where PTO is engaged.
";"
```python
# The total operation duration must not be lower than the PTO operation time.
def rule1(total_operation_time: float, pto_operation_time: float) -> bool:
    if total_operation_time < pto_operation_time:
        return False
    else:
        return True

# Idle time should be less than or equal to the total operation time.
def rule2(idle_time: float, total_operation_time: float) -> bool:
    if idle_time > total_operation_time:
        return False
    else:
        return True

# The total stop count must not be lower than the count of stops where PTO is engaged.
def rule3(total_stop_count: int, pto_engaged_stops_count: int) -> bool:
    if total_stop_count < pto_engaged_stops_count:
        return False
    else:
        return True
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: Idle time cannot be greater than the total operation time.
PTO-engaged stops cannot exceed the total number of stops.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";"
```python
# Idle time cannot be greater than the total operation time.
def rule1(total_operation_time: float, idle_time: float) -> bool:
    if idle_time > total_operation_time:
        return False
    else:
        return True

# PTO-engaged stops cannot exceed the total number of stops.
def rule2(total_stops: int, pto_engaged_stops: int) -> bool:
    if pto_engaged_stops > total_stops:
        return False
    else:
        return True

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def rule3(total_operation_time: float, pto_operation_time: float, idle_time: float, driving_time: float) -> bool:
    if total_operation_time < (pto_operation_time + idle_time + driving_time):
        return False
    else:
        return True
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: The total operation duration must not be lower than the PTO operation time.
The total operation duration must not be lower than the idle time.
Driving time should be less than or equal to the total operation time.
";"
```python
# The total operation duration must not be lower than the PTO operation time.
def rule1(total_operation_duration: float, pto_operation_time: float) -> bool:
    if total_operation_duration < pto_operation_time:
        return False
    else:
        return True

# The total operation duration must not be lower than the idle time.
def rule2(total_operation_duration: float, idle_time: float) -> bool:
    if total_operation_duration < idle_time:
        return False
    else:
        return True

# Driving time should be less than or equal to the total operation time.
def rule3(driving_time: float, total_operation_time: float) -> bool:
    if driving_time > total_operation_time:
        return False
    else:
        return True
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
The weight on axle 1 cannot surpass the weight on axle 3.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"
```python
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def rule1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_hour < 5:
        return False
    else:
        return True

# The weight on axle 1 cannot surpass the weight on axle 3.
def rule2(weight_axle_1: float, weight_axle_3: float) -> bool:
    if weight_axle_1 > weight_axle_3:
        return False
    else:
        return True

# Total operation time should be at least the sum of PTO, idle, and driving times.
def rule3(operation_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    total_time = pto_time + idle_time + driving_time
    if operation_time < total_time:
        return False
    else:
        return True
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: Idle time must always be less than or equal to the total operation time.
The load supported by axle 1 cannot exceed that of axle 3.
Payload must remain below or equal to the load carried by axle 3.
";"
```python
# Idle time must always be less than or equal to the total operation time.
def idle_time_rule(operation_time: float, idle_time: float) -> bool:
    if idle_time <= operation_time:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 3.
def axle_load_rule(axle_1_load: float, axle_3_load: float) -> bool:
    if axle_1_load <= axle_3_load:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 3.
def payload_rule(payload: float, axle_3_load: float) -> bool:
    if payload <= axle_3_load:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
Total operation time shouldn’t be lower than PTO operation time.
The weight on axle 1 cannot surpass the weight on axle 2.
";"
```python
# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def fuel_consumption(min_km: int, min_dm3_per_100km: float) -> bool:
    if min_km >= 20:
        return min_dm3_per_100km == 40
    else:
        return False

# Total operation time shouldn't be lower than PTO operation time.
def total_operation_time(total_time: float, pto_time: float) -> bool:
    return total_time >= pto_time

# The weight on axle 1 cannot surpass the weight on axle 2.
def weight_on_axles(weight_axle1: float, weight_axle2: float) -> bool:
    return weight_axle1 <= weight_axle2
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
The payload must always be smaller than or equal to the load on axle 2.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";"
```python
# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r1(distance_km: float, fuel_consumption_dm3_per_100km: float) -> bool:
    if fuel_consumption_dm3_per_100km < 40:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 2.
def r2(payload_tonnes: float, load_on_axle_2_tonnes: float) -> bool:
    if payload_tonnes <= load_on_axle_2_tonnes:
        return True
    else:
        return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r3(total_operation_duration_hours: float, pto_time_hours: float, idle_time_hours: float, driving_time_hours: float) -> bool:
    if total_operation_duration_hours >= (pto_time_hours + idle_time_hours + driving_time_hours):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
PTO operation time must be less than or equal to the total operation time.
The payload must not exceed the load carried by axle 3.
";"
```python
# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def fuel_consumption(min_km: int, avg_fuel_consumption_dm3_per_100km: float) -> bool:
    if min_km >= 20:
        return avg_fuel_consumption_dm3_per_100km == 40
    else:
        return False

# PTO operation time must be less than or equal to the total operation time.
def pto_operation_time(total_operation_time: float, pto_operation_time: float) -> bool:
    return pto_operation_time <= total_operation_time

# The payload must not exceed the load carried by axle 3.
def payload(axle_3_load: float, payload: float) -> bool:
    return payload <= axle_3_load
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
PTO operation time cannot be greater than the total operation time.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";"
```python
# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def min_fuel_consumption(distance_km: float, fuel_consumption_dm3: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3 / distance_km == 4:
        return True
    else:
        return False

# PTO operation time cannot be greater than the total operation time.
def pto_time_limit(total_operation_time: float, pto_operation_time: float) -> bool:
    if pto_operation_time <= total_operation_time:
        return True
    else:
        return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def total_operation_time_constraint(pto_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
    if total_operation_time >= pto_time + idle_time + driving_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
The load supported by axle 1 cannot exceed that of axle 2.
";"
```python
# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_hour >= 5:
        return True
    else:
        return False

# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r2(distance_km: float, fuel_consumption_dm3_per_100km: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_100km >= 40:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r3(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load <= axle2_load:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: The total operation duration must not be lower than the idle time.
Stops with PTO engaged should never outnumber total stops.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
";"
```python
# The total operation duration must not be lower than the idle time.
def rule1(operation_duration: float, idle_time: float) -> bool:
    if operation_duration < idle_time:
        return False
    else:
        return True

# Stops with PTO engaged should never outnumber total stops.
def rule2(total_stops: int, pto_engaged_stops: int) -> bool:
    if pto_engaged_stops > total_stops:
        return False
    else:
        return True

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def rule3(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load > axle2_load:
        return False
    else:
        return True
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: Total operation time should shouldn’t be lower than driving time.
The number of stops where PTO is engaged must not exceed the overall stop count.
Axle 1's load cannot exceed Axle 2's load.
";"
```python
# Total operation time should not be lower than driving time.
def total_operation_time(min_driving_time):
    return lambda total_time: total_time >= min_driving_time

# The number of stops where PTO is engaged must not exceed the overall stop count.
def pto_stops(max_overall_stops):
    return lambda num_engaged_stops: num_engaged_stops <= max_overall_stops

# Axle 1's load cannot exceed Axle 2's load.
def axle_load(axle_1_load, axle_2_load):
    return lambda load: load <= axle_2_load
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: The total operation duration must not be lower than the PTO operation time.
The load supported by axle 1 cannot exceed that of axle 2.
Axle 3's load must always be equal to or greater than the payload.
";"
```python
# The total operation duration must not be lower than the PTO operation time.
def rule1(total_duration: float, pto_operation_time: float) -> bool:
    if total_duration >= pto_operation_time:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 2.
def rule2(axle_1_load: float, axle_2_load: float) -> bool:
    if axle_1_load <= axle_2_load:
        return True
    else:
        return False

# Axle 3's load must always be equal to or greater than the payload.
def rule3(axle_3_load: float, payload: float) -> bool:
    if axle_3_load >= payload:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
The total operation durationmust not be lower than the driving time.
Payload must remain below or equal to the load carried by axle 2.
";"
```python
# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def min_fuel_consumption(distance_km: float, fuel_consumption_dm3: float) -> bool:
    if fuel_consumption_dm3 / distance_km >= 40 / 100:
        return True
    else:
        return False

# The total operation duration must not be lower than the driving time.
def total_operation_duration(driving_time_hours: float, total_operation_time_hours: float) -> bool:
    if total_operation_time_hours >= driving_time_hours:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def payload_and_axle_2_load(payload_kg: float, axle_2_load_kg: float) -> bool:
    if payload_kg <= axle_2_load_kg:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
PTO operation time should be less than or equal to the total operation time.
Axle 3's load must always be equal to or greater than the payload.
";"
```python
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def rule1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_hour < 5:
        return False
    else:
        return True

# PTO operation time should be less than or equal to the total operation time.
def rule2(pto_operation_time_hours: float, total_operation_time_hours: float) -> bool:
    if pto_operation_time_hours > total_operation_time_hours:
        return False
    else:
        return True

# Axle 3's load must always be equal to or greater than the payload.
def rule3(axle_3_load_kg: float, payload_kg: float) -> bool:
    if axle_3_load_kg < payload_kg:
        return False
    else:
        return True
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: Total operation time shouldn’t be lower than PTO operation time.
PTO-engaged stops cannot exceed the total number of stops.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";"
```python
def validate_operation_times(pto_time: float, total_stops: int, idle_time: float, driving_time: float) -> bool:
    """"""
    Validate the operation times based on the given conditions.

    :param pto_time: The PTO operation time.
    :param total_stops: The total number of stops.
    :param idle_time: The idle time.
    :param driving_time: The driving time.
    :return: True if all conditions are met, False otherwise.
    """"""

    # Total operation time shouldn't be lower than PTO operation time.
    if total_time < pto_time:
        return False

    # PTO-engaged stops cannot exceed the total number of stops.
    if pto_stops > total_stops:
        return False

    # Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
    if total_time < pto_time + idle_time + driving_time:
        return False

    return True
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: Driving time must always be less than or equal to the total operation time.
The number of stops where PTO is engaged must not exceed the overall stop count.
The load on axle 1 must not surpass the load on axle 3.
";"
```python
# Driving time must always be less than or equal to the total operation time.
def driving_time_rule(driving_time: float, total_operation_time: float) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def pto_stops_rule(pto_stops: int, overall_stops: int) -> bool:
    if pto_stops <= overall_stops:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 3.
def axle_load_rule(axle_1_load: float, axle_3_load: float) -> bool:
    if axle_1_load <= axle_3_load:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: The total operation duration must not be lower than the idle time.
Payload must remain below or equal to the load carried by axle 2.
The payload must not exceed the load carried by axle 3.
";"
```python
# The total operation duration must not be lower than the idle time.
def r1(operation_duration: float, idle_time: float) -> bool:
    if operation_duration >= idle_time:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def r2(payload: float, load_axle_2: float) -> bool:
    if payload <= load_axle_2:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def r3(payload: float, load_axle_3: float) -> bool:
    if payload <= load_axle_3:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: Idle time must always be less than or equal to the total operation time.
PTO-engaged stops cannot exceed the total number of stops.
The payload cannot exceed the capacity of axle 2.
";"
```python
# Idle time must always be less than or equal to the total operation time.
def idle_time_rule(operation_time: float, idle_time: float) -> bool:
    if idle_time <= operation_time:
        return True
    else:
        return False

# PTO-engaged stops cannot exceed the total number of stops.
def pto_stops_rule(total_stops: int, pto_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 2.
def payload_capacity_rule(axle_2_capacity: float, payload: float) -> bool:
    if payload <= axle_2_capacity:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
The load on axle 1 must not surpass the load on axle 2.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";"
```python
# The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def fuel_consumption_rule(fuel_consumption: float, distance_km: float) -> bool:
    if distance_km >= 20 and fuel_consumption >= 5:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 2.
def load_on_axle_rule(axle_1_load: float, axle_2_load: float) -> bool:
    if axle_1_load <= axle_2_load:
        return True
    else:
        return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def total_operation_time_rule(operation_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    if operation_time >= (pto_time + idle_time + driving_time):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: The number of stops where PTO is engaged must not exceed the overall stop count.
Payload must remain below or equal to the load carried by axle 2.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";"
```python
def rule1(pto_stops, total_stops):
    if pto_stops > total_stops:
        return False
    else:
        return True

def rule2(payload, axle_2_load):
    if payload > axle_2_load:
        return False
    else:
        return True

def rule3(total_operation_time, pto_duration, idle_time, driving_time):
    if total_operation_time < pto_duration + idle_time + driving_time:
        return False
    else:
        return True
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: PTO operation time cannot be greater than the total operation time.
Idle time should be less than or equal to the total operation time.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"
```python
def pto_operation_time(total_operation_time: float, pto_time: float) -> bool:
    return pto_time <= total_operation_time

def idle_time(total_operation_time: float, idle_time: float) -> bool:
    return idle_time <= total_operation_time

def combined_time(total_operation_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    return pto_time + idle_time + driving_time <= total_operation_time
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False


        
Input text:
Textual context: Axle 1's load cannot exceed Axle 2's load.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
Payload must remain below or equal to the load carried by axle 2.
";"
```python
def rule_axle1_load(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load > axle2_load:
        return False
    else:
        return True

def rule_axle1_and_axle3(axle1_load: float, axle3_load: float) -> bool:
    if axle1_load > axle3_load:
        return False
    else:
        return True

def rule_payload_and_axle2(payload: float, axle2_load: float) -> bool:
    if payload > axle2_load:
        return False
    else:
        return True
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: Total operation time shouldn’t be lower than PTO operation time.
Total operation time should shouldn’t be lower than driving time.
The total stop count must not be lower than the count of stops where PTO is engaged.
The payload must always be smaller than or equal to the load on axle 2.
";"
```python
# Total operation time shouldn't be lower than PTO operation time.
def r1(total_operation_time: float, pto_operation_time: float) -> bool:
    if total_operation_time >= pto_operation_time:
        return True
    else:
        return False

# Total operation time should shouldn’t be lower than driving time.
def r2(total_operation_time: float, driving_time: float) -> bool:
    if total_operation_time >= driving_time:
        return True
    else:
        return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r3(total_stop_count: int, pto_engaged_stops_count: int) -> bool:
    if total_stop_count >= pto_engaged_stops_count:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 2.
def r4(payload: float, load_on_axle_2: float) -> bool:
    if payload <= load_on_axle_2:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
Idle time must always be less than or equal to the total operation time.
The load supported by axle 1 cannot exceed that of axle 2.
";"
```python
# The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def avg_fuel_consumption(min_fuel_consumption: float, traveled_km: float) -> bool:
    if traveled_km >= 20 and min_fuel_consumption >= 5:
        return True
    else:
        return False

# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def fuel_consumption_per_distance(min_consumption_per_100km: float, traveled_km: float) -> bool:
    if traveled_km >= 20 and (min_consumption_per_100km * 100) / traveled_km >= 40:
        return True
    else:
        return False

# Idle time must always be less than or equal to the total operation time.
def idle_time(total_operation_time: float, idle_time: float) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 2.
def load_on_axles(load_axle1: float, load_axle2: float) -> bool:
    if load_axle1 <= load_axle2:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
PTO operation time cannot be greater than the total operation time.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";"
```python
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_hour < 5:
        return False
    else:
        return True

# PTO operation time cannot be greater than the total operation time.
def r2(pto_operation_time_hours: float, total_operation_time_hours: float) -> bool:
    if pto_operation_time_hours > total_operation_time_hours:
        return False
    else:
        return True

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def r3(axle_1_load_kg: float, axle_2_load_kg: float) -> bool:
    if axle_1_load_kg > axle_2_load_kg:
        return False
    else:
        return True

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r4(total_operation_time_hours: float, pto_operation_time_hours: float, idle_time_hours: float, driving_time_hours: float) -> bool:
    if total_operation_time_hours < (pto_operation_time_hours + idle_time_hours + driving_time_hours):
        return False
    else:
        return True
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: PTO operation time should be less than or equal to the total operation time.
Stops with PTO engaged cannot outnumber the total stops.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
Payload must remain below or equal to the load carried by axle 2.
";"
```python
# PTO operation time should be less than or equal to the total operation time.
def pto_rule(operation_time: float, pto_time: float) -> bool:
    return pto_time <= operation_time

# Stops with PTO engaged cannot outnumber the total stops.
def stops_rule(total_stops: int, pto_stops: int) -> bool:
    return pto_stops <= total_stops

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def axle_load_rule(axle_1_load: float, axle_3_load: float) -> bool:
    return axle_1_load <= axle_3_load

# Payload must remain below or equal to the load carried by axle 2.
def payload_rule(payload: float, axle_2_load: float) -> bool:
    return payload <= axle_2_load
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: The total operation duration must not be lower than the PTO operation time.
Total operation time shouldn’t be lower than idle time.
Axle 1's load cannot exceed Axle 3's load.
The payload must always be smaller than or equal to the load on axle 2.
";"
```python
# The total operation duration must not be lower than the PTO operation time.
def r1(total_operation_time: float, pto_operation_time: float) -> bool:
    if total_operation_time >= pto_operation_time:
        return True
    else:
        return False

# Total operation time shouldn’t be lower than idle time.
def r2(total_operation_time: float, idle_time: float) -> bool:
    if total_operation_time >= idle_time:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 3's load.
def r3(axle_1_load: float, axle_3_load: float) -> bool:
    if axle_1_load <= axle_3_load:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 2.
def r4(payload: float, axle_2_load: float) -> bool:
    if payload <= axle_2_load:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
The payload cannot exceed the capacity of axle 3.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";"
```python
# The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def fuel_consumption_rule(hourly_fuel_consumption: float, distance_km: float) -> bool:
    if distance_km >= 20 and hourly_fuel_consumption >= 5:
        return True
    else:
        return False

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def min_fuel_rate_per_100km(distance_km: float, fuel_consumption_dm3: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3 / (distance_km / 100) >= 40:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 3.
def payload_capacity_rule(payload_kg: float, axle_capacity_kg: float) -> bool:
    if payload_kg <= axle_capacity_kg:
        return True
    else:
        return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def total_operation_time_rule(operation_time_hours: float, pto_time_hours: float, idle_time_hours: float, driving_time_hours: float) -> bool:
    if operation_time_hours >= pto_time_hours + idle_time_hours + driving_time_hours:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: Total operation time shouldn’t be lower than PTO operation time.
The total operation durationmust not be lower than the driving time.
Payload must remain below or equal to the load carried by axle 2.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"
```python
# Total operation time shouldn't be lower than PTO operation time.
def rule1(total_operation_time: float, pto_operation_time: float) -> bool:
    if total_operation_time >= pto_operation_time:
        return True
    else:
        return False

# The total operation duration must not be lower than the driving time.
def rule2(total_operation_duration: float, driving_time: float) -> bool:
    if total_operation_duration >= driving_time:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def rule3(payload: float, load_carried_by_axle_2: float) -> bool:
    if payload <= load_carried_by_axle_2:
        return True
    else:
        return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def rule4(total_operation_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    if total_operation_time >= (pto_time + idle_time + driving_time):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: Idle time must always be less than or equal to the total operation time.
Driving time must always be less than or equal to the total operation time.
Stops with PTO engaged should never outnumber total stops.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";"
```python
# Idle time must always be less than or equal to the total operation time.
def idle_time_rule(operation_time: float, idle_time: float) -> bool:
    if idle_time <= operation_time:
        return True
    else:
        return False

# Driving time must always be less than or equal to the total operation time.
def driving_time_rule(operation_time: float, driving_time: float) -> bool:
    if driving_time <= operation_time:
        return True
    else:
        return False

# Stops with PTO engaged should never outnumber total stops.
def pto_stops_rule(total_stops: int, pto_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def total_operation_time_rule(operation_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    if operation_time >= (pto_time + idle_time + driving_time):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: PTO-engaged stops cannot exceed the total number of stops.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
The payload must not exceed the load carried by axle 3.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"
```python
# PTO-engaged stops cannot exceed the total number of stops.
def pto_rule(total_stops: int, pto_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def axle_load_rule(axle_1_load: float, axle_3_load: float) -> bool:
    if axle_1_load <= axle_3_load:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def payload_rule(payload: float, axle_3_load: float) -> bool:
    if payload <= axle_3_load:
        return True
    else:
        return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def operation_time_rule(pto_time: float, idle_time: float, driving_time: float) -> bool:
    if pto_time + idle_time + driving_time <= total_operation_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
Payload must remain below or equal to the load carried by axle 2.
Payload must remain below or equal to the load carried by axle 3.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"
```python
# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def fuel_consumption_check(distance_km: float, fuel_consumption_dm3_100km: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_100km >= 40:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def payload_axle2_check(payload_tonnes: float, axle2_load_tonnes: float) -> bool:
    if payload_tonnes <= axle2_load_tonnes:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 3.
def payload_axle3_check(payload_tonnes: float, axle3_load_tonnes: float) -> bool:
    if payload_tonnes <= axle3_load_tonnes:
        return True
    else:
        return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def total_operation_time_check(operation_time_hours: float, pto_time_hours: float, idle_time_hours: float, driving_time_hours: float) -> bool:
    if operation_time_hours >= (pto_time_hours + idle_time_hours + driving_time_hours):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
Axle 1's load cannot exceed Axle 2's load.
Payload must remain below or equal to the load carried by axle 3.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";"
```python
# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3h: float) -> bool:
    if fuel_consumption_dm3h >= 5 and distance_km >= 20:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 2's load.
def r2(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load <= axle2_load:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 3.
def r3(payload: float, axle3_load: float) -> bool:
    if payload <= axle3_load:
        return True
    else:
        return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r4(operation_duration: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    if operation_duration >= (pto_time + idle_time + driving_time):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: The total operation duration must not be lower than the idle time.
Total operation time should shouldn’t be lower than driving time.
Stops with PTO engaged cannot outnumber the total stops.
Axle 2's load must always be equal to or greater than the payload.
";"
```python
# The total operation duration must not be lower than the idle time.
def r1(total_operation_time: float, idle_time: float) -> bool:
    if total_operation_time >= idle_time:
        return True
    else:
        return False

# Total operation time should shouldn’t be lower than driving time.
def r2(total_operation_time: float, driving_time: float) -> bool:
    if total_operation_time >= driving_time:
        return True
    else:
        return False

# Stops with PTO engaged cannot outnumber the total stops.
def r3(total_stops: int, pto_engaged_stops: int) -> bool:
    if pto_engaged_stops <= total_stops:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def r4(axle_2_load: float, payload: float) -> bool:
    if axle_2_load >= payload:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
Driving time should be less than or equal to the total operation time.
Stops with PTO engaged cannot outnumber the total stops.
The payload must always be smaller than or equal to the load on axle 3.
";"
```python
# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def fuel_consumption_rate(min_trip_km: int, min_fuel_consumption_dm3_per_100km: float) -> bool:
    if min_trip_km >= 20 and min_fuel_consumption_dm3_per_100km == 40:
        return True
    else:
        return False

# Driving time should be less than or equal to the total operation time.
def driving_time(total_operation_time: float, driving_time: float) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False

# Stops with PTO engaged cannot outnumber the total stops.
def stops_with_PTO(total_stops: int, stops_with_PTO: int) -> bool:
    if stops_with_PTO <= total_stops:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 3.
def payload_and_axle_3(payload: float, load_on_axle_3: float) -> bool:
    if payload <= load_on_axle_3:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: Idle time cannot be greater than the total operation time.
The total stop count must not be lower than the count of stops where PTO is engaged.
Payload must remain below or equal to the load carried by axle 3.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";"
```python
# Idle time cannot be greater than the total operation time.
def idle_time_rule(operation_time: float, idle_time: float) -> bool:
    if idle_time <= operation_time:
        return True
    else:
        return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def stop_count_rule(total_stops: int, pto_engaged_stops: int) -> bool:
    if total_stops >= pto_engaged_stops:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 3.
def payload_rule(payload: float, axle_3_load: float) -> bool:
    if payload <= axle_3_load:
        return True
    else:
        return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def operation_duration_rule(operation_duration: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    if operation_duration >= (pto_time + idle_time + driving_time):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: PTO operation time cannot be greater than the total operation time.
Axle 2's load must always be equal to or greater than the payload.
The payload must not exceed the load carried by axle 3.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";"
```python
# PTO operation time cannot be greater than the total operation time.
def pto_rule(operation_time: float, pto_time: float) -> bool:
    return pto_time <= operation_time

# Axle 2's load must always be equal to or greater than the payload.
def axle2_load_rule(load_axle2: float, payload: float) -> bool:
    return load_axle2 >= payload

# The payload must not exceed the load carried by axle 3.
def payload_axle3_rule(payload: float, load_axle3: float) -> bool:
    return payload <= load_axle3

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def total_operation_time_rule(operation_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    return operation_time >= pto_time + idle_time + driving_time
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
Total operation time shouldn’t be lower than idle time.
The total operation durationmust not be lower than the driving time.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";"
```python
# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if fuel_consumption_dm3_per_hour >= 5 and distance_km >= 20:
        return True
    else:
        return False

# Total operation time shouldn't be lower than idle time.
def r2(total_operation_time_hours: float, idle_time_hours: float) -> bool:
    if total_operation_time_hours >= idle_time_hours:
        return True
    else:
        return False

# The total operation duration must not be lower than the driving time.
def r3(total_operation_time_hours: float, driving_time_hours: float) -> bool:
    if total_operation_time_hours >= driving_time_hours:
        return True
    else:
        return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r4(total_operation_time_hours: float, pto_operation_time_hours: float, idle_time_hours: float, driving_time_hours: float) -> bool:
    if total_operation_time_hours >= (pto_operation_time_hours + idle_time_hours + driving_time_hours):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
The total stop count must not be lower than the count of stops where PTO is engaged.
The load on axle 1 must not surpass the load on axle 2.
";"
```python
# The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def r1(fuel_consumption: float, distance_km: float) -> bool:
    if distance_km >= 20 and fuel_consumption >= 5:
        return True
    else:
        return False

# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r2(min_fuel_consumption_100km: float, distance_km: float) -> bool:
    if distance_km >= 20 and min_fuel_consumption_100km == 40:
        return True
    else:
        return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r3(total_stops: int, pto_engaged_stops: int) -> bool:
    if total_stops >= pto_engaged_stops:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 2.
def r4(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load <= axle2_load:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
The total operation duration must not be lower than the PTO operation time.
Stops with PTO engaged cannot outnumber the total stops.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
";"
```python
# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def min_fuel_consumption(distance_km: float, fuel_consumption_dm3: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3 <= (40 * 100 / distance_km):
        return True
    else:
        return False

# The total operation duration must not be lower than the PTO operation time.
def total_operation_duration(minimum_time: float, operation_time: float) -> bool:
    if operation_time >= minimum_time:
        return True
    else:
        return False

# Stops with PTO engaged cannot outnumber the total stops.
def stops_with_pto(total_stops: int, stops_with_pto: int) -> bool:
    if stops_with_pto <= total_stops:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def load_on_axles(load_axle1: float, load_axle3: float) -> bool:
    if load_axle1 <= load_axle3:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: Total operation time shouldn’t be lower than PTO operation time.
Idle time cannot be greater than the total operation time.
Stops with PTO engaged cannot outnumber the total stops.
The load on axle 1 must not surpass the load on axle 3.
";"
```python
# Total operation time shouldn't be lower than PTO operation time.
def r1(total_operation_time: float, pto_operation_time: float) -> bool:
    if total_operation_time >= pto_operation_time:
        return True
    else:
        return False

# Idle time cannot be greater than the total operation time.
def r2(idle_time: float, total_operation_time: float) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# Stops with PTO engaged cannot outnumber the total stops.
def r3(stops_with_pto_engaged: int, total_stops: int) -> bool:
    if stops_with_pto_engaged <= total_stops:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 3.
def r4(load_on_axle_1: float, load_on_axle_3: float) -> bool:
    if load_on_axle_1 <= load_on_axle_3:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
Stops with PTO engaged should never outnumber total stops.
The weight on axle 1 cannot surpass the weight on axle 2.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"
```python
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_hour >= 5:
        return True
    else:
        return False

# Stops with PTO engaged should never outnumber total stops.
def r2(total_stops: int, pto_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r3(axle_1_weight: float, axle_2_weight: float) -> bool:
    if axle_1_weight <= axle_2_weight:
        return True
    else:
        return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r4(pto_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
    if (pto_time + idle_time + driving_time) <= total_operation_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: PTO operation time cannot be greater than the total operation time.
PTO-engaged stops cannot exceed the total number of stops.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
The payload must always be smaller than or equal to the load on axle 3.
";"
```python
# PTO operation time cannot be greater than the total operation time.
def pto_rule(operation_time: float, pto_operation_time: float) -> bool:
    return pto_operation_time <= operation_time

# PTO-engaged stops cannot exceed the total number of stops.
def pto_stops_rule(total_stops: int, pto_engaged_stops: int) -> bool:
    return pto_engaged_stops <= total_stops

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def axle_load_rule(axle_1_load: float, axle_3_load: float) -> bool:
    return axle_1_load <= axle_3_load

# The payload must always be smaller than or equal to the load on axle 3.
def payload_rule(payload: float, axle_3_load: float) -> bool:
    return payload <= axle_3_load
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
Total operation time shouldn’t be lower than PTO operation time.
The load supported by axle 1 cannot exceed that of axle 3.
The payload cannot exceed the capacity of axle 2.
";"
```python
# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def min_fuel_consumption(distance_km: int, fuel_consumption_dm3: int) -> bool:
    if fuel_consumption_dm3 / distance_km >= 4:
        return True
    else:
        return False

# Total operation time shouldn't be lower than PTO operation time.
def total_operation_time(minimum_pto_time: int, total_time: int) -> bool:
    if total_time >= minimum_pto_time:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 3.
def load_on_axle_1(axle_1_load: int, axle_3_load: int) -> bool:
    if axle_1_load <= axle_3_load:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 2.
def payload_on_axle_2(payload: int, axle_2_capacity: int) -> bool:
    if payload <= axle_2_capacity:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
Idle time must always be less than or equal to the total operation time.
The payload must always be smaller than or equal to the load on axle 2.
";"
```python
# If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if fuel_consumption_dm3_per_hour / distance_km >= 0.25:
        return True
    else:
        return False

# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r2(distance_km: float, fuel_consumption_dm3_per_100km: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_100km == 40:
        return True
    else:
        return False

# Idle time must always be less than or equal to the total operation time.
def r3(operation_time_hours: float, idle_time_hours: float) -> bool:
    if idle_time_hours <= operation_time_hours:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 2.
def r4(payload_kg: float, load_on_axle2_kg: float) -> bool:
    if payload_kg <= load_on_axle2_kg:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: PTO operation time should be less than or equal to the total operation time.
The total operation durationmust not be lower than the driving time.
The load on axle 1 must not surpass the load on axle 3.
The payload must not exceed the load carried by axle 3.
";"
```python
# PTO operation time should be less than or equal to the total operation time.
def pto_operation_time(pto_time: float, total_operation_time: float) -> bool:
    if pto_time <= total_operation_time:
        return True
    else:
        return False

# The total operation duration must not be lower than the driving time.
def total_operation_duration(total_operation_time: float, driving_time: float) -> bool:
    if total_operation_time >= driving_time:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 3.
def load_on_axle(load_on_axle_1: float, load_on_axle_3: float) -> bool:
    if load_on_axle_1 <= load_on_axle_3:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def payload_and_load(payload: float, load_carried_by_axle_3: float) -> bool:
    if payload <= load_carried_by_axle_3:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
The total stop count must not be lower than the count of stops where PTO is engaged.
Payload must remain below or equal to the load carried by axle 2.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";"
```python
# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_hour >= 5:
        return True
    else:
        return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r2(total_stops: int, pto_engaged_stops: int) -> bool:
    if total_stops >= pto_engaged_stops:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def r3(payload_kg: float, load_axle_2_kg: float) -> bool:
    if payload_kg <= load_axle_2_kg:
        return True
    else:
        return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r4(operation_duration_hours: float, pto_time_hours: float, idle_time_hours: float, driving_time_hours: float) -> bool:
    if operation_duration_hours >= (pto_time_hours + idle_time_hours + driving_time_hours):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
PTO operation time should be less than or equal to the total operation time.
Axle 1's load cannot exceed Axle 3's load.
The payload must not exceed the load carried by axle 3.
";"
```python
# The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def fuel_consumption_rule(fuel_consumption: float, distance_km: float) -> bool:
    if distance_km >= 20 and fuel_consumption >= 5:
        return True
    else:
        return False

# PTO operation time should be less than or equal to the total operation time.
def pto_operation_time_rule(pto_time: float, total_time: float) -> bool:
    if pto_time <= total_time:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 3's load.
def axle_load_rule(axle_1_load: float, axle_3_load: float) -> bool:
    if axle_1_load <= axle_3_load:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def payload_rule(payload: float, axle_3_load: float) -> bool:
    if payload <= axle_3_load:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
The weight on axle 1 cannot surpass the weight on axle 3.
The payload must always be smaller than or equal to the load on axle 3.
";"
```python
# The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def fuel_consumption(min_fuel_consumption: float, traveled_distance_km: float) -> bool:
    if traveled_distance_km >= 20 and min_fuel_consumption >= 5:
        return True
    else:
        return False

# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def fuel_consumption_per_distance(min_fuel_consumption_per_100km: float, traveled_distance_km: float) -> bool:
    if traveled_distance_km >= 20 and min_fuel_consumption_per_100km == 40:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def weight_on_axle(weight_axle1: float, weight_axle3: float) -> bool:
    if weight_axle1 <= weight_axle3:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 3.
def payload_and_load(payload: float, load_axle3: float) -> bool:
    if payload <= load_axle3:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: The total operation duration must not be lower than the idle time.
Driving time should be less than or equal to the total operation time.
The load on axle 1 must not surpass the load on axle 2.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";"
```python
# The total operation duration must not be lower than the idle time.
def r1(total_operation_time: float, idle_time: float) -> bool:
    if total_operation_time >= idle_time:
        return True
    else:
        return False

# Driving time should be less than or equal to the total operation time.
def r2(driving_time: float, total_operation_time: float) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 2.
def r3(axle_1_load: float, axle_2_load: float) -> bool:
    if axle_1_load <= axle_2_load:
        return True
    else:
        return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r4(total_operation_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    if total_operation_time >= (pto_time + idle_time + driving_time):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
PTO operation time should be less than or equal to the total operation time.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
The payload must always be smaller than or equal to the load on axle 2.
";"
```python
# If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if fuel_consumption_dm3_per_hour >= 5 and distance_km >= 20:
        return True
    else:
        return False

# PTO operation time should be less than or equal to the total operation time.
def r2(pto_operation_time: float, total_operation_time: float) -> bool:
    if pto_operation_time <= total_operation_time:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def r3(axle_1_load: float, axle_2_load: float) -> bool:
    if axle_1_load <= axle_2_load:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 2.
def r4(payload: float, axle_2_load: float) -> bool:
    if payload <= axle_2_load:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: PTO operation time must be less than or equal to the total operation time.
Total operation time shouldn’t be lower than idle time.
The number of stops where PTO is engaged must not exceed the overall stop count.
Axle 1's load cannot exceed Axle 2's load.
";"
```python
# PTO operation time must be less than or equal to the total operation time.
def pto_operation_time(pto_time: float, total_time: float) -> bool:
    if pto_time <= total_time:
        return True
    else:
        return False

# Total operation time shouldn't be lower than idle time.
def total_operation_time(total_time: float, idle_time: float) -> bool:
    if total_time >= idle_time:
        return True
    else:
        return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def stops_engagement(stops_engaged: int, overall_stops: int) -> bool:
    if stops_engaged <= overall_stops:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 2's load.
def axle_load(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load <= axle2_load:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
Driving time cannot be greater than the total operation time.
The load supported by axle 1 cannot exceed that of axle 2.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";"
```python
# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_hour >= 5:
        return True
    else:
        return False

# Driving time cannot be greater than the total operation time.
def r2(driving_time_hours: float, total_operation_time_hours: float) -> bool:
    if driving_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r3(axle_1_load_kg: float, axle_2_load_kg: float) -> bool:
    if axle_1_load_kg <= axle_2_load_kg:
        return True
    else:
        return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r4(total_operation_time_hours: float, pto_operation_time_hours: float, idle_time_hours: float, driving_time_hours: float) -> bool:
    if total_operation_time_hours >= (pto_operation_time_hours + idle_time_hours + driving_time_hours):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
The total operation duration must not be lower than the PTO operation time.
Driving time must always be less than or equal to the total operation time.
The payload must not exceed the load carried by axle 2.
";"
```python
# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def r1(distance_km: float, fuel_consumption_dm3_100km: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_100km >= 40:
        return True
    else:
        return False

# The total operation duration must not be lower than the PTO operation time.
def r2(total_operation_time: float, pto_operation_time: float) -> bool:
    if total_operation_time >= pto_operation_time:
        return True
    else:
        return False

# Driving time must always be less than or equal to the total operation time.
def r3(driving_time: float, total_operation_time: float) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 2.
def r4(payload: float, load_axle2: float) -> bool:
    if payload <= load_axle2:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
Stops with PTO engaged should never outnumber total stops.
The payload cannot exceed the capacity of axle 2.
Axle 3's load must always be equal to or greater than the payload.
";"
```python
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_hour >= 5:
        return True
    else:
        return False

# Stops with PTO engaged should never outnumber total stops.
def r2(total_stops: int, pto_engaged_stops: int) -> bool:
    if pto_engaged_stops <= total_stops:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 2.
def r3(payload_kg: float, axle_2_capacity_kg: float) -> bool:
    if payload_kg <= axle_2_capacity_kg:
        return True
    else:
        return False

# Axle 3's load must always be equal to or greater than the payload.
def r4(axle_3_load_kg: float, payload_kg: float) -> bool:
    if axle_3_load_kg >= payload_kg:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
PTO operation time should be less than or equal to the total operation time.
The payload must not exceed the load carried by axle 2.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"
```python
# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def fuel_consumption(min_km: int, min_dm3_per_100km: float) -> bool:
    if min_km >= 20:
        return min_dm3_per_100km == 40
    else:
        return False

# PTO operation time should be less than or equal to the total operation time.
def pto_time(total_time: float, pto_time: float) -> bool:
    return pto_time <= total_time

# The payload must not exceed the load carried by axle 2.
def payload(axle_2_load: float, payload: float) -> bool:
    return payload <= axle_2_load

# Total operation time should be at least the sum of PTO, idle, and driving times.
def total_operation_time(idle_time: float, driving_time: float, pto_time: float, total_time: float) -> bool:
    return total_time >= (idle_time + driving_time + pto_time)
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: The weight on axle 1 cannot surpass the weight on axle 2.
The load supported by axle 1 cannot exceed that of axle 3.
Payload must remain below or equal to the load carried by axle 2.
The payload cannot exceed the capacity of axle 3.
";"
```python
def rule1(weight_axle1: float, weight_axle2: float) -> bool:
    if weight_axle1 > weight_axle2:
        return False
    else:
        return True

def rule2(load_axle1: float, load_axle3: float) -> bool:
    if load_axle1 > load_axle3:
        return False
    else:
        return True

def rule3(payload: float, load_axle2: float) -> bool:
    if payload > load_axle2:
        return False
    else:
        return True

def rule4(payload: float, load_axle3: float) -> bool:
    if payload > load_axle3:
        return False
    else:
        return True
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
The total operation duration must not be lower than the PTO operation time.
Axle 2's load must always be equal to or greater than the payload.
";"
```python
# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_h: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_h >= 5:
        return True
    else:
        return False

# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r2(distance_km: float, fuel_consumption_dm3_100km: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_100km >= 40:
        return True
    else:
        return False

# The total operation duration must not be lower than the PTO operation time.
def r3(operation_time: float, total_operation_duration: float) -> bool:
    if total_operation_duration >= operation_time:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def r4(axle_2_load: float, payload: float) -> bool:
    if axle_2_load >= payload:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
The payload must always be smaller than or equal to the load on axle 2.
Axle 3's load must always be equal to or greater than the payload.
";"
```python
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_hour >= 5:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r2(axle_1_load: float, axle_3_load: float) -> bool:
    if axle_1_load <= axle_3_load:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 2.
def r3(payload: float, axle_2_load: float) -> bool:
    if payload <= axle_2_load:
        return True
    else:
        return False

# Axle 3's load must always be equal to or greater than the payload.
def r4(axle_3_load: float, payload: float) -> bool:
    if axle_3_load >= payload:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
Stops with PTO engaged should never outnumber total stops.
The weight on axle 1 cannot surpass the weight on axle 2.
Axle 1's load cannot exceed Axle 3's load.
";"
```python
# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def fuel_consumption(min_km: int, min_dm3_per_100km: float) -> bool:
    if min_km >= 20:
        return min_dm3_per_100km == 40
    else:
        return False

# Stops with PTO engaged should never outnumber total stops.
def pto_stops(stops_with_pto: int, total_stops: int) -> bool:
    return stops_with_pto <= total_stops

# The weight on axle 1 cannot surpass the weight on axle 2.
def axle_weights(axle1_weight: float, axle2_weight: float) -> bool:
    return axle1_weight <= axle2_weight

# Axle 1's load cannot exceed Axle 3's load.
def axle_loads(axle1_load: float, axle3_load: float) -> bool:
    return axle1_load <= axle3_load
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
Idle time cannot be greater than the total operation time.
The number of stops where PTO is engaged must not exceed the overall stop count.
Axle 1's load cannot exceed Axle 3's load.
";"
```python
# The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def fuel_consumption_rule(fuel_consumption: float, distance_km: float) -> bool:
    if distance_km >= 20 and fuel_consumption >= 5:
        return True
    else:
        return False

# Idle time cannot be greater than the total operation time.
def idle_time_rule(idle_time: float, total_operation_time: float) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def pto_stops_rule(pto_stops: int, overall_stop_count: int) -> bool:
    if pto_stops <= overall_stop_count:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 3's load.
def axle_load_rule(axle_1_load: float, axle_3_load: float) -> bool:
    if axle_1_load <= axle_3_load:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
The total operation duration must not be lower than the idle time.
The load supported by axle 1 cannot exceed that of axle 3.
Axle 3's load must always be equal to or greater than the payload.
";"
```python
# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_hour >= 5:
        return True
    else:
        return False

# The total operation duration must not be lower than the idle time.
def r2(total_operation_duration_hours: float, idle_time_hours: float) -> bool:
    if total_operation_duration_hours >= idle_time_hours:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 3.
def r3(axle_1_load_tons: float, axle_3_load_tons: float) -> bool:
    if axle_1_load_tons <= axle_3_load_tons:
        return True
    else:
        return False

# Axle 3's load must always be equal to or greater than the payload.
def r4(axle_3_load_tons: float, payload_tons: float) -> bool:
    if axle_3_load_tons >= payload_tons:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
PTO operation time cannot be greater than the total operation time.
Driving time should be less than or equal to the total operation time.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";"
```python
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_hour >= 5:
        return True
    else:
        return False

# PTO operation time cannot be greater than the total operation time.
def r2(pto_time_hours: float, total_operation_time_hours: float) -> bool:
    if pto_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# Driving time should be less than or equal to the total operation time.
def r3(driving_time_hours: float, total_operation_time_hours: float) -> bool:
    if driving_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r4(total_operation_time_hours: float, pto_time_hours: float, driving_time_hours: float, idle_time_hours: float) -> bool:
    if total_operation_time_hours >= pto_time_hours + driving_time_hours + idle_time_hours:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
The total operation duration must not be lower than the idle time.
The load on axle 1 must not surpass the load on axle 3.
Axle 2's load must always be equal to or greater than the payload.
";"
```python
# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def fuel_consumption(min_km: int, min_fuel: float) -> bool:
    if min_km >= 20:
        return min_fuel == 40
    else:
        return False

# The total operation duration must not be lower than the idle time.
def operation_duration(total_time: int, idle_time: int) -> bool:
    return total_time >= idle_time

# The load on axle 1 must not surpass the load on axle 3.
def axle_load(axle_1: int, axle_3: int) -> bool:
    return axle_1 <= axle_3

# Axle 2's load must always be equal to or greater than the payload.
def payload(axle_2: int, payload: int) -> bool:
    return axle_2 >= payload
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
The number of stops where PTO is engaged must not exceed the overall stop count.
The load supported by axle 1 cannot exceed that of axle 3.
Payload must remain below or equal to the load carried by axle 3.
";"
```python
# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(journey_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if journey_km >= 20 and fuel_consumption_dm3_per_hour >= 5:
        return True
    else:
        return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r2(stops_with_PTO: int, total_stops: int) -> bool:
    if stops_with_PTO <= total_stops:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 3.
def r3(axle_1_load: float, axle_3_load: float) -> bool:
    if axle_1_load <= axle_3_load:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 3.
def r4(payload: float, axle_3_load: float) -> bool:
    if payload <= axle_3_load:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: PTO operation time must be less than or equal to the total operation time.
Idle time should be less than or equal to the total operation time.
The payload must not exceed the load carried by axle 3.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";"
```python
# PTO operation time must be less than or equal to the total operation time.
def pto_rule(operation_time: float, pto_time: float) -> bool:
    return pto_time <= operation_time

# Idle time should be less than or equal to the total operation time.
def idle_rule(operation_time: float, idle_time: float) -> bool:
    return idle_time <= operation_time

# The payload must not exceed the load carried by axle 3.
def payload_rule(payload: float, axle_3_load: float) -> bool:
    return payload <= axle_3_load

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def total_operation_rule(operation_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    return operation_time >= pto_time + idle_time + driving_time
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: The load on axle 1 must not surpass the load on axle 3.
Payload must remain below or equal to the load carried by axle 2.
The payload must not exceed the load carried by axle 3.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"
```python
# The load on axle 1 must not surpass the load on axle 3.
def load_on_axle_1_not_surpass_axle_3(load_1: float, load_3: float) -> bool:
    if load_1 <= load_3:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def payload_below_or_equal_to_axle_2(payload: float, load_2: float) -> bool:
    if payload <= load_2:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def payload_not_exceed_axle_3(payload: float, load_3: float) -> bool:
    if payload <= load_3:
        return True
    else:
        return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def combined_time_not_surpass_total_operation_time(ptime: float, idletime: float, drivetime: float, total_operation_time: float) -> bool:
    if ptime + idletime + drivetime <= total_operation_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
Idle time must always be less than or equal to the total operation time.
Driving time must always be less than or equal to the total operation time.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";"
```python
# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def min_fuel_consumption(distance_km: float, fuel_consumption_dm3: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3 / distance_km >= 4:
        return True
    else:
        return False

# Idle time must always be less than or equal to the total operation time.
def idle_time_operation_time(idle_time_hours: float, operation_time_hours: float) -> bool:
    if idle_time_hours <= operation_time_hours:
        return True
    else:
        return False

# Driving time must always be less than or equal to the total operation time.
def driving_time_operation_time(driving_time_hours: float, operation_time_hours: float) -> bool:
    if driving_time_hours <= operation_time_hours:
        return True
    else:
        return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def total_operation_time(pto_time_hours: float, idle_time_hours: float, driving_time_hours: float, operation_time_hours: float) -> bool:
    if pto_time_hours + idle_time_hours + driving_time_hours <= operation_time_hours:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
Driving time should be less than or equal to the total operation time.
PTO-engaged stops cannot exceed the total number of stops.
The load on axle 1 must not surpass the load on axle 2.
";"
```python
# The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def fuel_consumption_rule(fuel_consumption: float, distance_km: float) -> bool:
    if distance_km >= 20 and fuel_consumption >= 5:
        return True
    else:
        return False

# Driving time should be less than or equal to the total operation time.
def driving_time_rule(driving_time: float, total_operation_time: float) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False

# PTO-engaged stops cannot exceed the total number of stops.
def pto_stops_rule(pto_engaged_stops: int, total_stops: int) -> bool:
    if pto_engaged_stops <= total_stops:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 2.
def axle_load_rule(load_axle1: float, load_axle2: float) -> bool:
    if load_axle1 <= load_axle2:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
The total operation duration must not be lower than the idle time.
Driving time must always be less than or equal to the total operation time.
The payload cannot exceed the capacity of axle 3.
";"
```python
# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if fuel_consumption_dm3_per_hour >= 5 and distance_km >= 20:
        return True
    else:
        return False

# The total operation duration must not be lower than the idle time.
def r2(total_operation_time_hours: float, idle_time_hours: float) -> bool:
    if total_operation_time_hours >= idle_time_hours:
        return True
    else:
        return False

# Driving time must always be less than or equal to the total operation time.
def r3(driving_time_hours: float, total_operation_time_hours: float) -> bool:
    if driving_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 3.
def r4(payload_kg: float, axle_3_capacity_kg: float) -> bool:
    if payload_kg <= axle_3_capacity_kg:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: Stops with PTO engaged cannot outnumber the total stops.
The weight on axle 1 cannot surpass the weight on axle 3.
Axle 2's load must always be equal to or greater than the payload.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"
```python
# Stops with PTO engaged cannot outnumber the total stops.
def rule1(total_stops: int, pto_stops: int) -> bool:
    if pto_stops > total_stops:
        return False
    else:
        return True

# The weight on axle 1 cannot surpass the weight on axle 3.
def rule2(axle_1_weight: float, axle_3_weight: float) -> bool:
    if axle_1_weight > axle_3_weight:
        return False
    else:
        return True

# Axle 2's load must always be equal to or greater than the payload.
def rule3(axle_2_load: float, payload: float) -> bool:
    if axle_2_load < payload:
        return False
    else:
        return True

# Total operation time should be at least the sum of PTO, idle, and driving times.
def rule4(operation_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    if operation_time < (pto_time + idle_time + driving_time):
        return False
    else:
        return True
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False


        
Input text:
Textual context: PTO operation time must be less than or equal to the total operation time.
The total operation duration must not be lower than the idle time.
The weight on axle 1 cannot surpass the weight on axle 3.
The payload cannot exceed the capacity of axle 3.
";"
```python
# PTO operation time must be less than or equal to the total operation time.
def pto_operation_time(pto_time: float, total_operation_time: float) -> bool:
    if pto_time <= total_operation_time:
        return True
    else:
        return False

# The total operation duration must not be lower than the idle time.
def total_operation_duration(total_operation_time: float, idle_time: float) -> bool:
    if total_operation_time >= idle_time:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def weight_on_axle_1(weight_axle_1: float, weight_axle_3: float) -> bool:
    if weight_axle_1 <= weight_axle_3:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 3.
def payload_capacity(payload: float, capacity_axle_3: float) -> bool:
    if payload <= capacity_axle_3:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
Idle time must always be less than or equal to the total operation time.
PTO-engaged stops cannot exceed the total number of stops.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
The payload must always be smaller than or equal to the load on axle 2.
";"
```python
# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r1(trip_km: int, fuel_consumption_dm3_100km: float) -> bool:
    if trip_km >= 20 and fuel_consumption_dm3_100km == 40:
        return True
    else:
        return False

# Idle time must always be less than or equal to the total operation time.
def r2(idle_time_hours: float, total_operation_time_hours: float) -> bool:
    if idle_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# PTO-engaged stops cannot exceed the total number of stops.
def r3(pto_engaged_stops: int, total_stops: int) -> bool:
    if pto_engaged_stops <= total_stops:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r4(axle1_load_kg: int, axle3_load_kg: int) -> bool:
    if axle1_load_kg <= axle3_load_kg:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 2.
def r5(payload_kg: int, axle2_load_kg: int) -> bool:
    if payload_kg <= axle2_load_kg:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
PTO operation time cannot be greater than the total operation time.
Total operation time should shouldn’t be lower than driving time.
The payload must always be smaller than or equal to the load on axle 3.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";"
```python
# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def min_fuel_consumption(distance_km: float, fuel_consumption_dm3: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3 == 40:
        return True
    else:
        return False

# PTO operation time cannot be greater than the total operation time.
def pto_time_limit(total_operation_time: float, pto_operation_time: float) -> bool:
    if pto_operation_time <= total_operation_time:
        return True
    else:
        return False

# Total operation time should shouldn’t be lower than driving time.
def total_operation_time(driving_time: float, total_operation_time: float) -> bool:
    if total_operation_time >= driving_time:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 3.
def payload_and_axle_3_load(payload: float, load_on_axle_3: float) -> bool:
    if payload <= load_on_axle_3:
        return True
    else:
        return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def total_operation_time_constraint(pto_operation_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
    if total_operation_time >= pto_operation_time + idle_time + driving_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: The total operation duration must not be lower than the PTO operation time.
Total operation time shouldn’t be lower than idle time.
Stops with PTO engaged should never outnumber total stops.
Axle 1's load cannot exceed Axle 2's load.
The payload cannot exceed the capacity of axle 2.
";"
```python
# The total operation duration must not be lower than the PTO operation time.
def r1(total_operation_time: float, pto_operation_time: float) -> bool:
    if total_operation_time >= pto_operation_time:
        return True
    else:
        return False

# Total operation time shouldn’t be lower than idle time.
def r2(total_operation_time: float, idle_time: float) -> bool:
    if total_operation_time >= idle_time:
        return True
    else:
        return False

# Stops with PTO engaged should never outnumber total stops.
def r3(total_stops: int, pto_engaged_stops: int) -> bool:
    if pto_engaged_stops <= total_stops:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 2's load.
def r4(axle_1_load: float, axle_2_load: float) -> bool:
    if axle_1_load <= axle_2_load:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 2.
def r5(payload: float, axle_2_capacity: float) -> bool:
    if payload <= axle_2_capacity:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
The load on axle 1 must not surpass the load on axle 2.
Axle 1's load cannot exceed Axle 3's load.
The payload must not exceed the load carried by axle 2.
The payload must not exceed the load carried by axle 3.
";"
```python
# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def min_fuel_consumption(distance_km: int, fuel_dm3: int) -> bool:
    if fuel_dm3 / distance_km >= 40:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 2.
def load_on_axle_1(axle_1_load: int, axle_2_load: int) -> bool:
    if axle_1_load <= axle_2_load:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 3's load.
def load_on_axle_1_and_3(axle_1_load: int, axle_3_load: int) -> bool:
    if axle_1_load <= axle_3_load:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 2.
def payload_and_axle_2(payload: int, axle_2_load: int) -> bool:
    if payload <= axle_2_load:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def payload_and_axle_3(payload: int, axle_3_load: int) -> bool:
    if payload <= axle_3_load:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
The load supported by axle 1 cannot exceed that of axle 2.
Payload must remain below or equal to the load carried by axle 2.
The payload must always be smaller than or equal to the load on axle 3.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"
```python
# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_hour >= 5:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r2(axle_1_load: float, axle_2_load: float) -> bool:
    if axle_1_load <= axle_2_load:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def r3(payload: float, axle_2_load: float) -> bool:
    if payload <= axle_2_load:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 3.
def r4(payload: float, axle_3_load: float) -> bool:
    if payload <= axle_3_load:
        return True
    else:
        return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r5(operation_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    total_time = pto_time + idle_time + driving_time
    if operation_time >= total_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
The total stop count must not be lower than the count of stops where PTO is engaged.
The weight on axle 1 cannot surpass the weight on axle 2.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
The payload must always be smaller than or equal to the load on axle 3.
";"
```python
# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def fuel_consumption(min_km: int, avg_dm_per_100km: float) -> bool:
    if min_km >= 20 and avg_dm_per_100km == 40:
        return True
    else:
        return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def stops_count(total_stops: int, pto_engaged_stops: int) -> bool:
    if total_stops >= pto_engaged_stops:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def axle_weights(axle1_weight: float, axle2_weight: float) -> bool:
    if axle1_weight <= axle2_weight:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def load_on_axles(axle1_load: float, axle3_load: float) -> bool:
    if axle1_load <= axle3_load:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 3.
def payload_and_axle3(payload: float, axle3_load: float) -> bool:
    if payload <= axle3_load:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
Driving time must always be less than or equal to the total operation time.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
The payload cannot exceed the capacity of axle 2.
";"
```python
# The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def fuel_consumption(min_fuel_consumption: float, traveled_km: float) -> bool:
    if traveled_km >= 20 and min_fuel_consumption >= 5:
        return True
    else:
        return False

# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def fuel_consumption_per_distance(min_fuel_consumption_per_km: float, traveled_km: float) -> bool:
    if traveled_km >= 20 and min_fuel_consumption_per_km >= 40:
        return True
    else:
        return False

# Driving time must always be less than or equal to the total operation time.
def driving_time(driving_time: float, total_operation_time: float) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def load_on_axles(load_axle1: float, load_axle2: float) -> bool:
    if load_axle1 <= load_axle2:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 2.
def payload_capacity(payload: float, axle_capacity: float) -> bool:
    if payload <= axle_capacity:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
PTO operation time should be less than or equal to the total operation time.
Stops with PTO engaged cannot outnumber the total stops.
The payload must not exceed the load carried by axle 3.
";"
```python
# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_h: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_h >= 5:
        return True
    else:
        return False

# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r2(distance_km: float, fuel_consumption_dm3_100km: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_100km == 40:
        return True
    else:
        return False

# PTO operation time should be less than or equal to the total operation time.
def r3(pto_time_hours: float, total_operation_time_hours: float) -> bool:
    if pto_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# Stops with PTO engaged cannot outnumber the total stops.
def r4(stops_with_pto: int, total_stops: int) -> bool:
    if stops_with_pto <= total_stops:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def r5(payload_kg: float, load_axle3_kg: float) -> bool:
    if payload_kg <= load_axle3_kg:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
The total operation duration must not be lower than the PTO operation time.
Driving time cannot be greater than the total operation time.
Axle 2's load must always be equal to or greater than the payload.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";"
```python
# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def fuel_consumption_rate(min_km: int, min_dm_per_100km: int) -> bool:
    if min_km >= 20 and min_dm_per_100km == 40:
        return True
    else:
        return False

# The total operation duration must not be lower than the PTO operation time.
def total_operation_time(min_pto_time: float) -> bool:
    if total_operation_time >= min_pto_time:
        return True
    else:
        return False

# Driving time cannot be greater than the total operation time.
def driving_time(total_operation_time: float, max_driving_time: float) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def axle_load(load: float, payload: float) -> bool:
    if load >= payload:
        return True
    else:
        return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def total_time(pto_time: float, idle_time: float, driving_time: float) -> bool:
    if total_time >= pto_time + idle_time + driving_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: PTO operation time must be less than or equal to the total operation time.
Driving time must always be less than or equal to the total operation time.
The number of stops where PTO is engaged must not exceed the overall stop count.
Payload must remain below or equal to the load carried by axle 2.
Axle 3's load must always be equal to or greater than the payload.
";"
```python
# PTO operation time must be less than or equal to the total operation time.
def pto_rule(operation_time: float, pto_time: float) -> bool:
    return pto_time <= operation_time

# Driving time must always be less than or equal to the total operation time.
def driving_rule(operation_time: float, driving_time: float) -> bool:
    return driving_time <= operation_time

# The number of stops where PTO is engaged must not exceed the overall stop count.
def stops_rule(total_stops: int, pto_engaged_stops: int) -> bool:
    return pto_engaged_stops <= total_stops

# Payload must remain below or equal to the load carried by axle 2.
def payload_rule(axle_2_load: float, payload: float) -> bool:
    return payload <= axle_2_load

# Axle 3's load must always be equal to or greater than the payload.
def axle_3_rule(payload: float, axle_3_load: float) -> bool:
    return axle_3_load >= payload
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: The total operation duration must not be lower than the PTO operation time.
Idle time cannot be greater than the total operation time.
Driving time should be less than or equal to the total operation time.
Stops with PTO engaged should never outnumber total stops.
Axle 1's load cannot exceed Axle 3's load.
";"
```python
# The total operation duration must not be lower than the PTO operation time.
def total_operation_duration(minimum_pto_time):
    def check_total_operation(operation_time):
        return operation_time >= minimum_pto_time
    return check_total_operation

# Idle time cannot be greater than the total operation time.
def idle_time(total_operation_time):
    def check_idle_time(idle_time):
        return idle_time <= total_operation_time
    return check_idle_time

# Driving time should be less than or equal to the total operation time.
def driving_time(total_operation_time):
    def check_driving_time(driving_time):
        return driving_time <= total_operation_time
    return check_driving_time

# Stops with PTO engaged should never outnumber total stops.
def pto_stops(total_stops):
    def check_stops_with_pto(engaged_stops):
        return engaged_stops <= total_stops
    return check_stops_with_pto

# Axle 1's load cannot exceed Axle 3's load.
def axle_load(axle_1_load, axle_3_load):
    def check_axle_load():
        return axle_1_load <= axle_3_load
    return check_axle_load
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
Total operation time shouldn’t be lower than idle time.
Stops with PTO engaged should never outnumber total stops.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
";"
```python
# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_h: float) -> bool:
    if fuel_consumption_dm3_h / distance_km >= 0.05:
        return True
    else:
        return False

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r2(distance_km: float, fuel_consumption_dm3_100km: float) -> bool:
    if fuel_consumption_dm3_100km >= 40:
        return True
    else:
        return False

# Total operation time shouldn't be lower than idle time.
def r3(operation_time_hours: float, idle_time_hours: float) -> bool:
    if operation_time_hours >= idle_time_hours:
        return True
    else:
        return False

# Stops with PTO engaged should never outnumber total stops.
def r4(total_stops: int, pto_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r5(axle1_load_kg: float, axle3_load_kg: float) -> bool:
    if axle1_load_kg <= axle3_load_kg:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: PTO operation time must be less than or equal to the total operation time.
The weight on axle 1 cannot surpass the weight on axle 2.
The load supported by axle 1 cannot exceed that of axle 3.
Payload must remain below or equal to the load carried by axle 2.
Payload must remain below or equal to the load carried by axle 3.
";"
```python
# PTO operation time must be less than or equal to the total operation time.
def pto_operation_time(pto_time: float, total_operation_time: float) -> bool:
    if pto_time <= total_operation_time:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def weight_on_axle_1(axle1_weight: float, axle2_weight: float) -> bool:
    if axle1_weight <= axle2_weight:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 3.
def load_supported_by_axle_1(axle1_load: float, axle3_load: float) -> bool:
    if axle1_load <= axle3_load:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def payload_and_axle_2(payload: float, axle2_load: float) -> bool:
    if payload <= axle2_load:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 3.
def payload_and_axle_3(payload: float, axle3_load: float) -> bool:
    if payload <= axle3_load:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
Idle time must always be less than or equal to the total operation time.
Driving time must always be less than or equal to the total operation time.
Stops with PTO engaged should never outnumber total stops.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
";"
```python
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_hour >= 5:
        return True
    else:
        return False

# Idle time must always be less than or equal to the total operation time.
def r2(idle_time_hours: float, total_operation_time_hours: float) -> bool:
    if idle_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# Driving time must always be less than or equal to the total operation time.
def r3(driving_time_hours: float, total_operation_time_hours: float) -> bool:
    if driving_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# Stops with PTO engaged should never outnumber total stops.
def r4(stops_with_pto: int, total_stops: int) -> bool:
    if stops_with_pto <= total_stops:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def r5(load_axle_1: float, load_axle_2: float) -> bool:
    if load_axle_1 <= load_axle_2:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
Idle time cannot be greater than the total operation time.
The total operation durationmust not be lower than the driving time.
The weight on axle 1 cannot surpass the weight on axle 2.
The load on axle 1 must not surpass the load on axle 3.
";"
```python
# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if fuel_consumption_dm3_per_hour >= 5 and distance_km >= 20:
        return True
    else:
        return False

# Idle time cannot be greater than the total operation time.
def r2(idle_time_hours: float, total_operation_time_hours: float) -> bool:
    if idle_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# The total operation duration must not be lower than the driving time.
def r3(total_operation_time_hours: float, driving_time_hours: float) -> bool:
    if total_operation_time_hours >= driving_time_hours:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r4(weight_axle_1_kg: float, weight_axle_2_kg: float) -> bool:
    if weight_axle_1_kg <= weight_axle_2_kg:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 3.
def r5(load_axle_1_kg: float, load_axle_3_kg: float) -> bool:
    if load_axle_1_kg <= load_axle_3_kg:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: PTO operation time must be less than or equal to the total operation time.
The total operation duration must not be lower than the idle time.
The weight on axle 1 cannot surpass the weight on axle 3.
The payload must always be smaller than or equal to the load on axle 2.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"
```python
# PTO operation time must be less than or equal to the total operation time.
def pto_rule(operation_time: float, total_operation_time: float) -> bool:
    return operation_time <= total_operation_time

# The total operation duration must not be lower than the idle time.
def total_operation_idle_rule(total_operation_time: float, idle_time: float) -> bool:
    return total_operation_time >= idle_time

# The weight on axle 1 cannot surpass the weight on axle 3.
def axle_weight_rule(axle_1_weight: float, axle_3_weight: float) -> bool:
    return axle_1_weight <= axle_3_weight

# The payload must always be smaller than or equal to the load on axle 2.
def payload_axle_2_rule(payload: float, axle_2_load: float) -> bool:
    return payload <= axle_2_load

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def combined_time_rule(operation_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
    return operation_time + idle_time + driving_time <= total_operation_time
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: PTO operation time cannot be greater than the total operation time.
Idle time cannot be greater than the total operation time.
The number of stops where PTO is engaged must not exceed the overall stop count.
The payload cannot exceed the capacity of axle 2.
Axle 3's load must always be equal to or greater than the payload.
";"
```python
# PTO operation time cannot be greater than the total operation time.
def pto_rule(operation_time: float, pto_time: float) -> bool:
    return pto_time <= operation_time

# Idle time cannot be greater than the total operation time.
def idle_rule(operation_time: float, idle_time: float) -> bool:
    return idle_time <= operation_time

# The number of stops where PTO is engaged must not exceed the overall stop count.
def stops_rule(stop_count: int, pto_stops: int) -> bool:
    return pto_stops <= stop_count

# The payload cannot exceed the capacity of axle 2.
def payload_rule(axle_capacity_2: float, payload: float) -> bool:
    return payload <= axle_capacity_2

# Axle 3's load must always be equal to or greater than the payload.
def axle_load_rule(payload: float, axle_3_load: float) -> bool:
    return axle_3_load >= payload
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
Idle time should be less than or equal to the total operation time.
The total operation durationmust not be lower than the driving time.
Axle 2's load must always be equal to or greater than the payload.
The payload must always be smaller than or equal to the load on axle 3.
";"
```python
# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def min_fuel_consumption(distance_km: float, fuel_consumption_dm3: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3 <= (40 * 100 / distance_km):
        return True
    else:
        return False

# Idle time should be less than or equal to the total operation time.
def idle_time(total_operation_time: float, idle_time: float) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# The total operation duration must not be lower than the driving time.
def total_operation_time(driving_time: float, total_operation_time: float) -> bool:
    if total_operation_time >= driving_time:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def axle_2_load(payload: float, axle_2_load: float) -> bool:
    if axle_2_load >= payload:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 3.
def payload_axle_3_load(payload: float, axle_3_load: float) -> bool:
    if payload <= axle_3_load:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
Total operation time shouldn’t be lower than idle time.
Driving time must always be less than or equal to the total operation time.
Stops with PTO engaged should never outnumber total stops.
The payload must always be smaller than or equal to the load on axle 2.
";"
```python
# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def fuel_consumption_check(distance_km: float, fuel_consumption_dm3: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3 / distance_km >= 4:
        return True
    else:
        return False

# Total operation time shouldn't be lower than idle time.
def total_operation_time_check(total_time_hours: float, idle_time_hours: float) -> bool:
    if total_time_hours >= idle_time_hours:
        return True
    else:
        return False

# Driving time must always be less than or equal to the total operation time.
def driving_time_check(driving_time_hours: float, total_time_hours: float) -> bool:
    if driving_time_hours <= total_time_hours:
        return True
    else:
        return False

# Stops with PTO engaged should never outnumber total stops.
def stops_with_pto_check(stops_with_pto: int, total_stops: int) -> bool:
    if stops_with_pto <= total_stops:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 2.
def payload_check(payload_kg: float, load_on_axle_2_kg: float) -> bool:
    if payload_kg <= load_on_axle_2_kg:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
The total operation duration must not be lower than the PTO operation time.
The total operation duration must not be lower than the idle time.
Driving time must always be less than or equal to the total operation time.
The payload must not exceed the load carried by axle 3.
";"
```python
# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def min_fuel_consumption_rate(trip_distance: float, fuel_consumption_rate: float) -> bool:
    if trip_distance >= 20 and fuel_consumption_rate >= 40:
        return True
    else:
        return False

# The total operation duration must not be lower than the PTO operation time.
def total_operation_duration_min(pto_operation_time: float, total_operation_time: float) -> bool:
    if total_operation_time >= pto_operation_time:
        return True
    else:
        return False

# The total operation duration must not be lower than the idle time.
def total_operation_duration_min_idle(idle_time: float, total_operation_time: float) -> bool:
    if total_operation_time >= idle_time:
        return True
    else:
        return False

# Driving time must always be less than or equal to the total operation time.
def driving_time_max(total_operation_time: float, driving_time: float) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def payload_limit(payload: float, load_axle_3: float) -> bool:
    if payload <= load_axle_3:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
PTO operation time cannot be greater than the total operation time.
Driving time cannot be greater than the total operation time.
The payload must not exceed the load carried by axle 2.
";"
```python
# If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if fuel_consumption_dm3_per_hour >= 5 and distance_km >= 20:
        return True
    else:
        return False

# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r2(distance_km: float, fuel_consumption_dm3_per_100km: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_100km == 40:
        return True
    else:
        return False

# PTO operation time cannot be greater than the total operation time.
def r3(pto_operation_time_hours: float, total_operation_time_hours: float) -> bool:
    if pto_operation_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# Driving time cannot be greater than the total operation time.
def r4(driving_time_hours: float, total_operation_time_hours: float) -> bool:
    if driving_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 2.
def r5(payload_kg: float, load_axle2_kg: float) -> bool:
    if payload_kg <= load_axle2_kg:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
PTO operation time must be less than or equal to the total operation time.
Driving time should be less than or equal to the total operation time.
The weight on axle 1 cannot surpass the weight on axle 2.
The payload must not exceed the load carried by axle 3.
";"
```python
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_hour >= 5:
        return True
    else:
        return False

# PTO operation time must be less than or equal to the total operation time.
def r2(pto_operation_time_hours: float, total_operation_time_hours: float) -> bool:
    if pto_operation_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# Driving time should be less than or equal to the total operation time.
def r3(driving_time_hours: float, total_operation_time_hours: float) -> bool:
    if driving_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r4(weight_axle_1_kg: float, weight_axle_2_kg: float) -> bool:
    if weight_axle_1_kg <= weight_axle_2_kg:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def r5(payload_kg: float, load_axle_3_kg: float) -> bool:
    if payload_kg <= load_axle_3_kg:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
Total operation time shouldn’t be lower than PTO operation time.
Idle time should be less than or equal to the total operation time.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";"
```python
# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def fuel_consumption(min_km: int, min_dm3_per_100km: float) -> bool:
    if min_km >= 20 and min_dm3_per_100km == 40:
        return True
    else:
        return False

# Total operation time shouldn't be lower than PTO operation time.
def total_operation_time(min_pto_time: float, total_time: float) -> bool:
    if total_time >= min_pto_time:
        return True
    else:
        return False

# Idle time should be less than or equal to the total operation time.
def idle_time(max_idle_time: float, total_time: float) -> bool:
    if max_idle_time <= total_time:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def load(axle1_load: float, axle3_load: float) -> bool:
    if axle1_load <= axle3_load:
        return True
    else:
        return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def combined_duration(min_driving_time: float, min_idle_time: float, total_time: float) -> bool:
    if total_time >= (min_pto_time + min_idle_time + min_driving_time):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: Total operation time shouldn’t be lower than idle time.
Driving time should be less than or equal to the total operation time.
The number of stops where PTO is engaged must not exceed the overall stop count.
The load supported by axle 1 cannot exceed that of axle 2.
The weight on axle 1 cannot surpass the weight on axle 3.
";"
```python
# Total operation time shouldn't be lower than idle time.
def total_operation_time(minimum_idle_time):
    return lambda total_operation_time: total_operation_time >= minimum_idle_time

# Driving time should be less than or equal to the total operation time.
def driving_time(total_operation_time):
    return lambda driving_time: driving_time <= total_operation_time

# The number of stops where PTO is engaged must not exceed the overall stop count.
def pto_stops(overall_stop_count):
    return lambda pto_stops: pto_stops <= overall_stop_count

# The load supported by axle 1 cannot exceed that of axle 2.
def axle_load(axle_1, axle_2):
    return lambda load_on_axle_1: load_on_axle_1 <= axle_2

# The weight on axle 1 cannot surpass the weight on axle 3.
def axle_weight(axle_1, axle_3):
    return lambda weight_on_axle_1: weight_on_axle_1 <= axle_3
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
Idle time cannot be greater than the total operation time.
The total stop count must not be lower than the count of stops where PTO is engaged.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"
```python
# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def fuel_consumption_rate(min_trip_km: int, min_fuel_consumption_dm3_per_100km: float) -> bool:
    if min_trip_km >= 20 and min_fuel_consumption_dm3_per_100km == 40:
        return True
    else:
        return False

# Idle time cannot be greater than the total operation time.
def idle_time_total_operation_time(idle_time: int, total_operation_time: int) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def total_stops_engaged_p_to(total_stops: int, p_to_engaged_stops: int) -> bool:
    if total_stops >= p_to_engaged_stops:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def load_axle_1_vs_axle_3(load_axle_1: float, load_axle_3: float) -> bool:
    if load_axle_1 <= load_axle_3:
        return True
    else:
        return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def total_operation_time_min(pto_time: int, idle_time: int, driving_time: int) -> bool:
    if total_operation_time >= (pto_time + idle_time + driving_time):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: Total operation time shouldn’t be lower than idle time.
The load on axle 1 must not surpass the load on axle 2.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
The payload cannot exceed the capacity of axle 2.
The payload cannot exceed the capacity of axle 3.
";"
```python
# Total operation time shouldn't be lower than idle time.
def total_operation_time(min_idle_time):
    return lambda total_time: total_time >= min_idle_time

# The load on axle 1 must not surpass the load on axle 2.
def load_on_axle_1_not_surpass_axle_2(load_1, load_2):
    return load_1 <= load_2

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def load_carried_by_axle_1_not_exceed_axle_3(load_1, load_3):
    return load_1 <= load_3

# The payload cannot exceed the capacity of axle 2.
def payload_not_exceed_axle_2_capacity(payload, axle_2_capacity):
    return payload <= axle_2_capacity

# The payload cannot exceed the capacity of axle 3.
def payload_not_exceed_axle_3_capacity(payload, axle_3_capacity):
    return payload <= axle_3_capacity
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: Total operation time should shouldn’t be lower than driving time.
The load supported by axle 1 cannot exceed that of axle 2.
Axle 2's load must always be equal to or greater than the payload.
Axle 3's load must always be equal to or greater than the payload.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";"
```python
# Total operation time should not be lower than driving time.
def total_operation_time_not_lower_than_driving_time(total_operation_time: float, driving_time: float) -> bool:
    if total_operation_time >= driving_time:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 2.
def load_axle_1_not_exceed_axle_2(load_axle_1: float, load_axle_2: float) -> bool:
    if load_axle_1 <= load_axle_2:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def axle_2_load_not_less_than_payload(load_axle_2: float, payload: float) -> bool:
    if load_axle_2 >= payload:
        return True
    else:
        return False

# Axle 3's load must always be equal to or greater than the payload.
def axle_3_load_not_less_than_payload(load_axle_3: float, payload: float) -> bool:
    if load_axle_3 >= payload:
        return True
    else:
        return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def total_operation_time_not_lower_than_combined_duration(total_operation_time: float, pto_operation_time: float, idle_time: float, driving_time: float) -> bool:
    if total_operation_time >= (pto_operation_time + idle_time + driving_time):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
Total operation time shouldn’t be lower than PTO operation time.
Idle time should be less than or equal to the total operation time.
The payload must not exceed the load carried by axle 2.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"
```python
# The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def fuel_consumption(min_fuel_consumption: float, distance_km: float) -> bool:
    if distance_km >= 20 and min_fuel_consumption >= 5:
        return True
    else:
        return False

# Total operation time shouldn't be lower than PTO operation time.
def total_operation_time(min_total_time: float, pto_time: float) -> bool:
    if min_total_time >= pto_time:
        return True
    else:
        return False

# Idle time should be less than or equal to the total operation time.
def idle_time(max_idle_time: float, total_time: float) -> bool:
    if max_idle_time <= total_time:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 2.
def payload(payload: float, axle_2_load: float) -> bool:
    if payload <= axle_2_load:
        return True
    else:
        return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def total_time(min_total_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    if min_total_time >= pto_time + idle_time + driving_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: PTO operation time should be less than or equal to the total operation time.
The total operation duration must not be lower than the idle time.
PTO-engaged stops cannot exceed the total number of stops.
The payload must not exceed the load carried by axle 3.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";"
```python
# PTO operation time should be less than or equal to the total operation time.
def pto_operation_time(pto_time: float, total_operation_time: float) -> bool:
    return pto_time <= total_operation_time

# The total operation duration must not be lower than the idle time.
def total_operation_duration(total_operation_time: float, idle_time: float) -> bool:
    return total_operation_time >= idle_time

# PTO-engaged stops cannot exceed the total number of stops.
def pto_engaged_stops(pto_engaged_stops: int, total_stops: int) -> bool:
    return pto_engaged_stops <= total_stops

# The payload must not exceed the load carried by axle 3.
def payload_limit(payload: float, load_carried_by_axle_3: float) -> bool:
    return payload <= load_carried_by_axle_3

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def total_operation_time_requirements(total_operation_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    return total_operation_time >= pto_time + idle_time + driving_time
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
The total operation durationmust not be lower than the driving time.
The load on axle 1 must not surpass the load on axle 3.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";"
```python
# Vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def fuel_consumption_rule(distance_km: float, fuel_consumption_dm3_h: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_h >= 5:
        return True
    else:
        return False

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def fuel_rate_per_100km_rule(distance_km: float, fuel_consumption_dm3_100km: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_100km >= 40:
        return True
    else:
        return False

# The total operation duration must not be lower than the driving time.
def operation_duration_rule(driving_time_hours: float, total_operation_time_hours: float) -> bool:
    if total_operation_time_hours >= driving_time_hours:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 3.
def load_on_axle_rule(axle_1_load_tons: float, axle_3_load_tons: float) -> bool:
    if axle_1_load_tons <= axle_3_load_tons:
        return True
    else:
        return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def total_operation_time_rule(pto_operation_time_hours: float, idle_time_hours: float, driving_time_hours: float, total_operation_time_hours: float) -> bool:
    if total_operation_time_hours >= pto_operation_time_hours + idle_time_hours + driving_time_hours:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
The total operation duration must not be lower than the idle time.
Driving time should be less than or equal to the total operation time.
The payload must not exceed the load carried by axle 3.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"
```python
# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_hour >= 5:
        return True
    else:
        return False

# The total operation duration must not be lower than the idle time.
def r2(total_operation_time_hours: float, idle_time_hours: float) -> bool:
    if total_operation_time_hours >= idle_time_hours:
        return True
    else:
        return False

# Driving time should be less than or equal to the total operation time.
def r3(driving_time_hours: float, total_operation_time_hours: float) -> bool:
    if driving_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def r4(payload_kg: float, load_axle_3_kg: float) -> bool:
    if payload_kg <= load_axle_3_kg:
        return True
    else:
        return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r5(total_operation_time_hours: float, pto_time_hours: float, idle_time_hours: float, driving_time_hours: float) -> bool:
    if total_operation_time_hours >= pto_time_hours + idle_time_hours + driving_time_hours:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
The total operation duration must not be lower than the idle time.
Total operation time should shouldn’t be lower than driving time.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
Payload must remain below or equal to the load carried by axle 3.
";"
```python
# The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def fuel_consumption_rule(fuel_consumption: float, distance_km: float) -> bool:
    if distance_km >= 20 and fuel_consumption >= 5:
        return True
    else:
        return False

# The total operation duration must not be lower than the idle time.
def total_operation_duration_rule(total_duration: float, idle_time: float) -> bool:
    if total_duration >= idle_time:
        return True
    else:
        return False

# Total operation time should shouldn’t be lower than driving time.
def total_operation_time_rule(total_time: float, driving_time: float) -> bool:
    if total_time >= driving_time:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def load_on_axle_rule(axle_1_load: float, axle_2_load: float) -> bool:
    if axle_1_load <= axle_2_load:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 3.
def payload_rule(payload: float, axle_3_load: float) -> bool:
    if payload <= axle_3_load:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
Driving time should be less than or equal to the total operation time.
Stops with PTO engaged should never outnumber total stops.
The payload must not exceed the load carried by axle 3.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";"
```python
# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r1(distance_km: float, fuel_consumption_dm3_per_100km: float) -> bool:
    if fuel_consumption_dm3_per_100km < (20 * 40) / distance_km:
        return True
    else:
        return False

# Driving time should be less than or equal to the total operation time.
def r2(driving_time_hours: float, total_operation_time_hours: float) -> bool:
    if driving_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# Stops with PTO engaged should never outnumber total stops.
def r3(total_stops: int, pto_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def r4(payload_kg: float, load_axle3_kg: float) -> bool:
    if payload_kg <= load_axle3_kg:
        return True
    else:
        return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r5(total_operation_time_hours: float, pto_operation_time_hours: float, idle_time_hours: float, driving_time_hours: float) -> bool:
    if total_operation_time_hours >= pto_operation_time_hours + idle_time_hours + driving_time_hours:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
Driving time must always be less than or equal to the total operation time.
Stops with PTO engaged cannot outnumber the total stops.
The load on axle 1 must not surpass the load on axle 3.
";"
```python
# If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_hour >= 5:
        return True
    else:
        return False

# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def r2(distance_km: float, fuel_consumption_dm3_per_100km: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_100km >= 40:
        return True
    else:
        return False

# Driving time must always be less than or equal to the total operation time.
def r3(driving_time_hours: float, total_operation_time_hours: float) -> bool:
    if driving_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# Stops with PTO engaged cannot outnumber the total stops.
def r4(total_stops: int, pto_engaged_stops: int) -> bool:
    if pto_engaged_stops <= total_stops:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 3.
def r5(axle_1_load: float, axle_3_load: float) -> bool:
    if axle_1_load <= axle_3_load:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
The load on axle 1 must not surpass the load on axle 3.
Axle 2's load must always be equal to or greater than the payload.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"
```python
# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def fuel_consumption_1(distance_km: float, fuel_consumption_dm3_h: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_h >= 5:
        return True
    else:
        return False

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def fuel_consumption_2(distance_km: float, fuel_consumption_dm3_100km: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_100km >= 40:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 3.
def load_axle_1(axle_1_load: float, axle_3_load: float) -> bool:
    if axle_1_load <= axle_3_load:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def load_axle_2(axle_2_load: float, payload: float) -> bool:
    if axle_2_load >= payload:
        return True
    else:
        return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def operation_time(pto_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
    if pto_time + idle_time + driving_time <= total_operation_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
The total operation duration must not be lower than the idle time.
The weight on axle 1 cannot surpass the weight on axle 2.
Axle 2's load must always be equal to or greater than the payload.
";"
```python
# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_h: float) -> bool:
    if fuel_consumption_dm3_h >= 5 and distance_km >= 20:
        return True
    else:
        return False

# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def r2(distance_km: float, fuel_consumption_dm3_100km: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_100km >= 40:
        return True
    else:
        return False

# The total operation duration must not be lower than the idle time.
def r3(operation_duration_hours: float, idle_time_hours: float) -> bool:
    if operation_duration_hours >= idle_time_hours:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r4(axle1_weight_tons: float, axle2_weight_tons: float) -> bool:
    if axle1_weight_tons <= axle2_weight_tons:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def r5(axle2_load_tons: float, payload_tons: float) -> bool:
    if axle2_load_tons >= payload_tons:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
PTO operation time should be less than or equal to the total operation time.
Total operation time shouldn’t be lower than idle time.
The number of stops where PTO is engaged must not exceed the overall stop count.
The weight on axle 1 cannot surpass the weight on axle 2.
";"
```python
# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def min_fuel_consumption(distance_km: float, fuel_consumption_dm3: float) -> bool:
    if fuel_consumption_dm3 / distance_km >= 4:
        return True
    else:
        return False

# PTO operation time should be less than or equal to the total operation time.
def pto_operation_time(total_operation_time: float, pto_operation_time: float) -> bool:
    if pto_operation_time <= total_operation_time:
        return True
    else:
        return False

# Total operation time shouldn't be lower than idle time.
def total_operation_time(idle_time: float, total_operation_time: float) -> bool:
    if total_operation_time >= idle_time:
        return True
    else:
        return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def stops_engagement(stops_count: int, pto_stops_count: int) -> bool:
    if pto_stops_count <= stops_count:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def weight_on_axles(axle_1_weight: float, axle_2_weight: float) -> bool:
    if axle_1_weight <= axle_2_weight:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
Idle time must always be less than or equal to the total operation time.
Driving time must always be less than or equal to the total operation time.
The load supported by axle 1 cannot exceed that of axle 2.
The payload must not exceed the load carried by axle 2.
";"
```python
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_hour >= 5:
        return True
    else:
        return False

# Idle time must always be less than or equal to the total operation time.
def r2(idle_time_hours: float, total_operation_time_hours: float) -> bool:
    if idle_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# Driving time must always be less than or equal to the total operation time.
def r3(driving_time_hours: float, total_operation_time_hours: float) -> bool:
    if driving_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r4(axle_1_load_kg: float, axle_2_load_kg: float) -> bool:
    if axle_1_load_kg <= axle_2_load_kg:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 2.
def r5(payload_kg: float, axle_2_load_kg: float) -> bool:
    if payload_kg <= axle_2_load_kg:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
Driving time should be less than or equal to the total operation time.
The total stop count must not be lower than the count of stops where PTO is engaged.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
";"
```python
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_hour >= 5:
        return True
    else:
        return False

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r2(distance_km: float, fuel_consumption_dm3_per_100km: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_100km == 40:
        return True
    else:
        return False

# Driving time should be less than or equal to the total operation time.
def r3(driving_time_hours: float, total_operation_time_hours: float) -> bool:
    if driving_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r4(total_stops_count: int, pto_engaged_stops_count: int) -> bool:
    if total_stops_count >= pto_engaged_stops_count:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def r5(axle1_load_kg: float, axle2_load_kg: float) -> bool:
    if axle1_load_kg <= axle2_load_kg:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: Idle time cannot be greater than the total operation time.
Driving time must always be less than or equal to the total operation time.
Stops with PTO engaged cannot outnumber the total stops.
Axle 2's load must always be equal to or greater than the payload.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"
```python
# Idle time cannot be greater than the total operation time.
def idle_time_rule(operation_time: float, idle_time: float) -> bool:
    if idle_time > operation_time:
        return False
    else:
        return True

# Driving time must always be less than or equal to the total operation time.
def driving_time_rule(operation_time: float, driving_time: float) -> bool:
    if driving_time > operation_time:
        return False
    else:
        return True

# Stops with PTO engaged cannot outnumber the total stops.
def pto_stops_rule(total_stops: int, pto_stops: int) -> bool:
    if pto_stops > total_stops:
        return False
    else:
        return True

# Axle 2's load must always be equal to or greater than the payload.
def axle_load_rule(payload: float, axle_2_load: float) -> bool:
    if axle_2_load < payload:
        return False
    else:
        return True

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def combined_time_rule(operation_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    if (pto_time + idle_time + driving_time) > operation_time:
        return False
    else:
        return True
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
The total operation duration must not be lower than the PTO operation time.
Driving time must always be less than or equal to the total operation time.
The payload cannot exceed the capacity of axle 3.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";"
```python
# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_hour >= 5:
        return True
    else:
        return False

# The total operation duration must not be lower than the PTO operation time.
def r2(total_operation_time_seconds: float, pto_operation_time_seconds: float) -> bool:
    if total_operation_time_seconds >= pto_operation_time_seconds:
        return True
    else:
        return False

# Driving time must always be less than or equal to the total operation time.
def r3(driving_time_seconds: float, total_operation_time_seconds: float) -> bool:
    if driving_time_seconds <= total_operation_time_seconds:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 3.
def r4(payload_kg: float, axle_3_capacity_kg: float) -> bool:
    if payload_kg <= axle_3_capacity_kg:
        return True
    else:
        return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r5(total_operation_time_seconds: float, pto_operation_time_seconds: float, idle_time_seconds: float, driving_time_seconds: float) -> bool:
    if total_operation_time_seconds >= (pto_operation_time_seconds + idle_time_seconds + driving_time_seconds):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: Total operation time shouldn’t be lower than PTO operation time.
Stops with PTO engaged should never outnumber total stops.
The weight on axle 1 cannot surpass the weight on axle 3.
Axle 2's load must always be equal to or greater than the payload.
Payload must remain below or equal to the load carried by axle 3.
";"
```python
# Total operation time shouldn't be lower than PTO operation time.
def r1(total_time: float, pto_time: float) -> bool:
    if total_time >= pto_time:
        return True
    else:
        return False

# Stops with PTO engaged should never outnumber total stops.
def r2(total_stops: int, pto_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r3(axle1_weight: float, axle3_weight: float) -> bool:
    if axle1_weight <= axle3_weight:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def r4(axle2_load: float, payload: float) -> bool:
    if axle2_load >= payload:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 3.
def r5(payload: float, axle3_load: float) -> bool:
    if payload <= axle3_load:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
Driving time should be less than or equal to the total operation time.
The number of stops where PTO is engaged must not exceed the overall stop count.
The payload must not exceed the load carried by axle 3.
";"
```python
# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_hour >= 5:
        return True
    else:
        return False

# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def r2(distance_km: float, fuel_consumption_dm3_per_100km: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_100km >= 40:
        return True
    else:
        return False

# Driving time should be less than or equal to the total operation time.
def r3(driving_time_hours: float, total_operation_time_hours: float) -> bool:
    if driving_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r4(number_of_stops_with_PTO: int, overall_stop_count: int) -> bool:
    if number_of_stops_with_PTO <= overall_stop_count:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def r5(payload_kg: float, load_carried_by_axle_3_kg: float) -> bool:
    if payload_kg <= load_carried_by_axle_3_kg:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: Idle time must always be less than or equal to the total operation time.
Driving time must always be less than or equal to the total operation time.
Stops with PTO engaged cannot outnumber the total stops.
The weight on axle 1 cannot surpass the weight on axle 2.
The payload cannot exceed the capacity of axle 2.
";"
```python
# Idle time must always be less than or equal to the total operation time.
def idle_time_rule(operation_time: float, idle_time: float) -> bool:
    return idle_time <= operation_time

# Driving time must always be less than or equal to the total operation time.
def driving_time_rule(operation_time: float, driving_time: float) -> bool:
    return driving_time <= operation_time

# Stops with PTO engaged cannot outnumber the total stops.
def stops_with_pto_rule(total_stops: int, stops_with_pto: int) -> bool:
    return stops_with_pto <= total_stops

# The weight on axle 1 cannot surpass the weight on axle 2.
def weight_on_axle_rule(axle_1_weight: float, axle_2_weight: float) -> bool:
    return axle_1_weight <= axle_2_weight

# The payload cannot exceed the capacity of axle 2.
def payload_capacity_rule(axle_2_capacity: float, payload: float) -> bool:
    return payload <= axle_2_capacity
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
PTO operation time must be less than or equal to the total operation time.
Idle time must always be less than or equal to the total operation time.
Total operation time should shouldn’t be lower than driving time.
The payload must not exceed the load carried by axle 2.
";"
```python
# The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def fuel_consumption_rule(fuel_consumption: float, distance_km: float) -> bool:
    if distance_km >= 20 and fuel_consumption >= 5:
        return True
    else:
        return False

# PTO operation time must be less than or equal to the total operation time.
def pto_operation_rule(pto_time: float, total_operation_time: float) -> bool:
    if pto_time <= total_operation_time:
        return True
    else:
        return False

# Idle time must always be less than or equal to the total operation time.
def idle_time_rule(idle_time: float, total_operation_time: float) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# Total operation time should shouldn’t be lower than driving time.
def total_operation_time_rule(total_operation_time: float, driving_time: float) -> bool:
    if total_operation_time >= driving_time:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 2.
def payload_rule(payload: float, load_axle_2: float) -> bool:
    if payload <= load_axle_2:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
Total operation time shouldn’t be lower than PTO operation time.
The total operation durationmust not be lower than the driving time.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
";"
```python
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_hour >= 5:
        return True
    else:
        return False

# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r2(distance_km: float, fuel_consumption_dm3_per_100km: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_100km >= 40:
        return True
    else:
        return False

# Total operation time shouldn't be lower than PTO operation time.
def r3(total_operation_time_hours: float, pto_operation_time_hours: float) -> bool:
    if total_operation_time_hours >= pto_operation_time_hours:
        return True
    else:
        return False

# The total operation duration must not be lower than the driving time.
def r4(total_operation_time_hours: float, driving_time_hours: float) -> bool:
    if total_operation_time_hours >= driving_time_hours:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r5(axle1_load_kg: float, axle3_load_kg: float) -> bool:
    if axle1_load_kg <= axle3_load_kg:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
PTO operation time should be less than or equal to the total operation time.
Driving time cannot be greater than the total operation time.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"
```python
# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_hour >= 5:
        return True
    else:
        return False

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r2(distance_km: float, fuel_consumption_dm3_per_100km: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_100km >= 40:
        return True
    else:
        return False

# PTO operation time should be less than or equal to the total operation time.
def r3(pto_time_hours: float, total_operation_time_hours: float) -> bool:
    if pto_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# Driving time cannot be greater than the total operation time.
def r4(driving_time_hours: float, total_operation_time_hours: float) -> bool:
    if driving_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r5(pto_time_hours: float, idle_time_hours: float, driving_time_hours: float, total_operation_time_hours: float) -> bool:
    if (pto_time_hours + idle_time_hours + driving_time_hours) <= total_operation_time_hours:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
PTO operation time cannot be greater than the total operation time.
Axle 1's load cannot exceed Axle 2's load.
The weight on axle 1 cannot surpass the weight on axle 3.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";"
```python
# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def fuel_consumption_rate(min_km: int, min_dm_per_100km: int) -> bool:
    if min_km >= 20 and min_dm_per_100km == 40:
        return True
    else:
        return False

# PTO operation time cannot be greater than the total operation time.
def pto_operation_time(total_operation_time: float, pto_operation_time: float) -> bool:
    if pto_operation_time <= total_operation_time:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 2's load.
def axle_load(axle_1_load: float, axle_2_load: float) -> bool:
    if axle_1_load <= axle_2_load:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def axle_weight(axle_1_weight: float, axle_3_weight: float) -> bool:
    if axle_1_weight <= axle_3_weight:
        return True
    else:
        return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def total_operation_time(pto_time: float, idle_time: float, driving_time: float) -> bool:
    if pto_time + idle_time + driving_time <= total_operation_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
Idle time must always be less than or equal to the total operation time.
Driving time should be less than or equal to the total operation time.
Axle 1's load cannot exceed Axle 3's load.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"
```python
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_hour >= 5:
        return True
    else:
        return False

# Idle time must always be less than or equal to the total operation time.
def r2(idle_time_hours: float, total_operation_time_hours: float) -> bool:
    if idle_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# Driving time should be less than or equal to the total operation time.
def r3(driving_time_hours: float, total_operation_time_hours: float) -> bool:
    if driving_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 3's load.
def r4(axle_1_load_tons: float, axle_3_load_tons: float) -> bool:
    if axle_1_load_tons <= axle_3_load_tons:
        return True
    else:
        return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r5(pto_operation_time_hours: float, idle_time_hours: float, driving_time_hours: float, total_operation_time_hours: float) -> bool:
    if pto_operation_time_hours + idle_time_hours + driving_time_hours <= total_operation_time_hours:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
The total operation duration must not be lower than the PTO operation time.
Total operation time should shouldn’t be lower than driving time.
Stops with PTO engaged should never outnumber total stops.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";"
```python
# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def fuel_consumption(journey_km: float, fuel_consumption_dm3h: float) -> bool:
    if journey_km >= 20 and fuel_consumption_dm3h >= 5:
        return True
    else:
        return False

# The total operation duration must not be lower than the PTO operation time.
def total_operation_time(pto_operation_time: float, total_operation_time: float) -> bool:
    if total_operation_time >= pto_operation_time:
        return True
    else:
        return False

# Total operation time should shouldn’t be lower than driving time.
def driving_time(driving_time: float, total_operation_time: float) -> bool:
    if total_operation_time >= driving_time:
        return True
    else:
        return False

# Stops with PTO engaged should never outnumber total stops.
def stops_p_to_o(stops_p_to_o: int, total_stops: int) -> bool:
    if stops_p_to_o <= total_stops:
        return True
    else:
        return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def total_operation_time_combined(pto_operation_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
    if total_operation_time >= (pto_operation_time + idle_time + driving_time):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
Total operation time shouldn’t be lower than PTO operation time.
Total operation time shouldn’t be lower than idle time.
Driving time must always be less than or equal to the total operation time.
The number of stops where PTO is engaged must not exceed the overall stop count.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"
```python
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def fuel_consumption_rule(distance_km, fuel_consumption_dm3h):
    if distance_km >= 20 and fuel_consumption_dm3h < 5:
        return False
    return True

# Total operation time shouldn't be lower than PTO operation time.
def total_operation_time_rule(total_operation_time, pto_operation_time):
    if total_operation_time < pto_operation_time:
        return False
    return True

# Total operation time shouldn't be lower than idle time.
def total_operation_time_rule2(total_operation_time, idle_time):
    if total_operation_time < idle_time:
        return False
    return True

# Driving time must always be less than or equal to the total operation time.
def driving_time_rule(driving_time, total_operation_time):
    if driving_time > total_operation_time:
        return False
    return True

# The number of stops where PTO is engaged must not exceed the overall stop count.
def stops_rule(pto_stops, overall_stops):
    if pto_stops > overall_stops:
        return False
    return True

# Total operation time should be at least the sum of PTO, idle, and driving times.
def total_operation_time_sum_rule(total_operation_time, pto_operation_time, idle_time, driving_time):
    if total_operation_time < pto_operation_time + idle_time + driving_time:
        return False
    return True
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: Total operation time shouldn’t be lower than PTO operation time.
Idle time cannot be greater than the total operation time.
Axle 1's load cannot exceed Axle 2's load.
Axle 1's load cannot exceed Axle 3's load.
Axle 3's load must always be equal to or greater than the payload.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";"
```python
# Total operation time shouldn't be lower than PTO operation time.
def total_operation_time_not_lower_than_pto(total_time: float, pto_time: float) -> bool:
    if total_time >= pto_time:
        return True
    else:
        return False

# Idle time cannot be greater than the total operation time.
def idle_time_not_greater_than_total(total_time: float, idle_time: float) -> bool:
    if idle_time <= total_time:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 2's load.
def axle_1_load_not_exceed_axle_2(load_1: float, load_2: float) -> bool:
    if load_1 <= load_2:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 3's load.
def axle_1_load_not_exceed_axle_3(load_1: float, load_3: float) -> bool:
    if load_1 <= load_3:
        return True
    else:
        return False

# Axle 3's load must always be equal to or greater than the payload.
def axle_3_load_not_less_than_payload(load_3: float, payload: float) -> bool:
    if load_3 >= payload:
        return True
    else:
        return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def total_time_greater_than_or_equal_to_combined(pto_time: float, idle_time: float, driving_time: float) -> bool:
    if (pto_time + idle_time + driving_time) <= 0:
        return False
    else:
        return True
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
PTO operation time must be less than or equal to the total operation time.
Total operation time shouldn’t be lower than idle time.
Driving time cannot be greater than the total operation time.
The payload must not exceed the load carried by axle 2.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";"
```python
# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def fuel_consumption(min_distance: float, avg_fuel_consumption: float) -> bool:
    if avg_fuel_consumption >= 5 and min_distance >= 20:
        return True
    else:
        return False

# PTO operation time must be less than or equal to the total operation time.
def pto_time(total_operation_time: float, pto_time: float) -> bool:
    if pto_time <= total_operation_time:
        return True
    else:
        return False

# Total operation time shouldn't be lower than idle time.
def total_operation_time(idle_time: float, total_operation_time: float) -> bool:
    if total_operation_time >= idle_time:
        return True
    else:
        return False

# Driving time cannot be greater than the total operation time.
def driving_time(total_operation_time: float, driving_time: float) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 2.
def payload(axle_2_load: float, payload: float) -> bool:
    if payload <= axle_2_load:
        return True
    else:
        return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def total_operation_duration(pto_time: float, idle_time: float, driving_time: float, total_operation_duration: float) -> bool:
    if total_operation_duration >= (pto_time + idle_time + driving_time):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
PTO operation time should be less than or equal to the total operation time.
Idle time must always be less than or equal to the total operation time.
Driving time should be less than or equal to the total operation time.
The payload must not exceed the load carried by axle 2.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"
```python
# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def fuel_consumption(distance_km: float, fuel_consumption_dm3_100km: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_100km >= 40:
        return True
    else:
        return False

# PTO operation time should be less than or equal to the total operation time.
def pto_time(total_operation_time: float, pto_time: float) -> bool:
    if pto_time <= total_operation_time:
        return True
    else:
        return False

# Idle time must always be less than or equal to the total operation time.
def idle_time(total_operation_time: float, idle_time: float) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# Driving time should be less than or equal to the total operation time.
def driving_time(total_operation_time: float, driving_time: float) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 2.
def payload(axle_2_load: float, payload: float) -> bool:
    if payload <= axle_2_load:
        return True
    else:
        return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def total_operation_time(pto_time: float, idle_time: float, driving_time: float) -> bool:
    if pto_time + idle_time + driving_time <= total_operation_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
The total operation duration must not be lower than the PTO operation time.
Idle time must always be less than or equal to the total operation time.
The weight on axle 1 cannot surpass the weight on axle 3.
The payload must always be smaller than or equal to the load on axle 3.
";"
```python
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_hour >= 5:
        return True
    else:
        return False

# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r2(distance_km: float, min_avg_fuel_consumption_dm3_per_100km: float) -> bool:
    if distance_km >= 20 and min_avg_fuel_consumption_dm3_per_100km == 40:
        return True
    else:
        return False

# The total operation duration must not be lower than the PTO operation time.
def r3(total_operation_time: float, pto_operation_time: float) -> bool:
    if total_operation_time >= pto_operation_time:
        return True
    else:
        return False

# Idle time must always be less than or equal to the total operation time.
def r4(idle_time: float, total_operation_time: float) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r5(weight_axle1: float, weight_axle3: float) -> bool:
    if weight_axle1 <= weight_axle3:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 3.
def r6(payload: float, load_axle3: float) -> bool:
    if payload <= load_axle3:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
Idle time cannot be greater than the total operation time.
Stops with PTO engaged should never outnumber total stops.
Axle 1's load cannot exceed Axle 3's load.
The payload must not exceed the load carried by axle 3.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"
```python
# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def min_fuel_consumption(distance_km: float, fuel_consumption_dm3: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3 <= (40 * 100):
        return True
    else:
        return False

# Idle time cannot be greater than the total operation time.
def idle_time_operation_time(idle_time_hours: float, operation_time_hours: float) -> bool:
    if idle_time_hours <= operation_time_hours:
        return True
    else:
        return False

# Stops with PTO engaged should never outnumber total stops.
def pto_stops_total_stops(pto_stops: int, total_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 3's load.
def axle_load(axle_1_load: float, axle_3_load: float) -> bool:
    if axle_1_load <= axle_3_load:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def payload_axle_3(payload: float, axle_3_load: float) -> bool:
    if payload <= axle_3_load:
        return True
    else:
        return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def combined_time_operation_time(pto_time_hours: float, idle_time_hours: float, drive_time_hours: float, operation_time_hours: float) -> bool:
    if pto_time_hours + idle_time_hours + drive_time_hours <= operation_time_hours:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
PTO operation time cannot be greater than the total operation time.
The total operation durationmust not be lower than the driving time.
The payload cannot exceed the capacity of axle 2.
The payload must always be smaller than or equal to the load on axle 3.
";"
```python
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_hour >= 5:
        return True
    else:
        return False

# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def r2(distance_km: float, fuel_consumption_dm3_per_100km: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_100km >= 40:
        return True
    else:
        return False

# PTO operation time cannot be greater than the total operation time.
def r3(pto_operation_time_hours: float, total_operation_time_hours: float) -> bool:
    if pto_operation_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# The total operation duration must not be lower than the driving time.
def r4(total_operation_time_hours: float, driving_time_hours: float) -> bool:
    if total_operation_time_hours >= driving_time_hours:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 2.
def r5(payload_kg: float, axle_2_capacity_kg: float) -> bool:
    if payload_kg <= axle_2_capacity_kg:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 3.
def r6(payload_kg: float, axle_3_load_kg: float) -> bool:
    if payload_kg <= axle_3_load_kg:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
The total operation duration must not be lower than the PTO operation time.
Driving time must always be less than or equal to the total operation time.
Stops with PTO engaged should never outnumber total stops.
The load supported by axle 1 cannot exceed that of axle 3.
";"
```python
# The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def fuel_consumption_rule(distance_km: float, fuel_consumption_dm3_h: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_h >= 5:
        return True
    else:
        return False

# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def fuel_efficiency_rule(distance_km: float, fuel_consumption_dm3_100km: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_100km >= 40:
        return True
    else:
        return False

# The total operation duration must not be lower than the PTO operation time.
def operation_duration_rule(total_operation_time_seconds: float, pto_operation_time_seconds: float) -> bool:
    if total_operation_time_seconds >= pto_operation_time_seconds:
        return True
    else:
        return False

# Driving time must always be less than or equal to the total operation time.
def driving_time_rule(driving_time_seconds: float, total_operation_time_seconds: float) -> bool:
    if driving_time_seconds <= total_operation_time_seconds:
        return True
    else:
        return False

# Stops with PTO engaged should never outnumber total stops.
def stop_ratio_rule(pto_stops_count: int, total_stops_count: int) -> bool:
    if pto_stops_count <= total_stops_count:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 3.
def load_distribution_rule(axle_1_load: float, axle_3_load: float) -> bool:
    if axle_1_load <= axle_3_load:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
The total operation durationmust not be lower than the driving time.
The number of stops where PTO is engaged must not exceed the overall stop count.
The weight on axle 1 cannot surpass the weight on axle 3.
The payload must always be smaller than or equal to the load on axle 3.
";"
```python
# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_h: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_h >= 5:
        return True
    else:
        return False

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r2(distance_km: float, fuel_consumption_dm3_100km: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_100km >= 40:
        return True
    else:
        return False

# The total operation duration must not be lower than the driving time.
def r3(operation_duration_hours: float, driving_time_hours: float) -> bool:
    if operation_duration_hours >= driving_time_hours:
        return True
    else:
        return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r4(stops_with_PTO: int, total_stops: int) -> bool:
    if stops_with_PTO <= total_stops:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r5(weight_axle1: float, weight_axle3: float) -> bool:
    if weight_axle1 <= weight_axle3:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 3.
def r6(payload_kg: float, load_axle3_kg: float) -> bool:
    if payload_kg <= load_axle3_kg:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
PTO operation time should be less than or equal to the total operation time.
Idle time must always be less than or equal to the total operation time.
The total operation durationmust not be lower than the driving time.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";"
```python
# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_h: float) -> bool:
    if fuel_consumption_dm3_h >= 5 and distance_km >= 20:
        return True
    else:
        return False

# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r2(distance_km: float, fuel_consumption_dm3_100km: float) -> bool:
    if fuel_consumption_dm3_100km >= 40 and distance_km >= 20:
        return True
    else:
        return False

# PTO operation time should be less than or equal to the total operation time.
def r3(pto_time_hours: float, total_operation_time_hours: float) -> bool:
    if pto_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# Idle time must always be less than or equal to the total operation time.
def r4(idle_time_hours: float, total_operation_time_hours: float) -> bool:
    if idle_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# The total operation duration must not be lower than the driving time.
def r5(total_operation_time_hours: float, driving_time_hours: float) -> bool:
    if total_operation_time_hours >= driving_time_hours:
        return True
    else:
        return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r6(total_operation_time_hours: float, pto_time_hours: float, idle_time_hours: float, driving_time_hours: float) -> bool:
    if total_operation_time_hours >= (pto_time_hours + idle_time_hours + driving_time_hours):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
PTO operation time must be less than or equal to the total operation time.
Total operation time shouldn’t be lower than idle time.
The number of stops where PTO is engaged must not exceed the overall stop count.
The load supported by axle 1 cannot exceed that of axle 3.
The payload must not exceed the load carried by axle 3.
";"
```python
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_hour >= 5:
        return True
    else:
        return False

# PTO operation time must be less than or equal to the total operation time.
def r2(pto_operation_time: float, total_operation_time: float) -> bool:
    if pto_operation_time <= total_operation_time:
        return True
    else:
        return False

# Total operation time shouldn't be lower than idle time.
def r3(total_operation_time: float, idle_time: float) -> bool:
    if total_operation_time >= idle_time:
        return True
    else:
        return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r4(stops_with_pto: int, overall_stop_count: int) -> bool:
    if stops_with_pto <= overall_stop_count:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 3.
def r5(axle_1_load: float, axle_3_load: float) -> bool:
    if axle_1_load <= axle_3_load:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def r6(payload: float, axle_3_load: float) -> bool:
    if payload <= axle_3_load:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
PTO-engaged stops cannot exceed the total number of stops.
Payload must remain below or equal to the load carried by axle 2.
The payload must not exceed the load carried by axle 3.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"
```python
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_hour >= 5:
        return True
    else:
        return False

# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r2(distance_km: float, fuel_consumption_dm3_per_100km: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_100km >= 40:
        return True
    else:
        return False

# PTO-engaged stops cannot exceed the total number of stops.
def r3(total_stops: int, pto_engaged_stops: int) -> bool:
    if pto_engaged_stops <= total_stops:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def r4(payload_kg: float, load_axle2_kg: float) -> bool:
    if payload_kg <= load_axle2_kg:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def r5(payload_kg: float, load_axle3_kg: float) -> bool:
    if payload_kg <= load_axle3_kg:
        return True
    else:
        return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r6(operation_time_hours: float, pto_operation_time_hours: float, idle_time_hours: float, driving_time_hours: float) -> bool:
    if (pto_operation_time_hours + idle_time_hours + driving_time_hours) <= operation_time_hours:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
PTO operation time must be less than or equal to the total operation time.
Idle time should be less than or equal to the total operation time.
The total stop count must not be lower than the count of stops where PTO is engaged.
Axle 2's load must always be equal to or greater than the payload.
Axle 3's load must always be equal to or greater than the payload.
";"
```python
# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def min_fuel_consumption_rate(trip_km: int, fuel_consumption_dm3_100km: float) -> bool:
    if trip_km >= 20 and fuel_consumption_dm3_100km == 40:
        return True
    else:
        return False

# PTO operation time must be less than or equal to the total operation time.
def pto_operation_time(total_operation_time: float, pto_operation_time: float) -> bool:
    if pto_operation_time <= total_operation_time:
        return True
    else:
        return False

# Idle time should be less than or equal to the total operation time.
def idle_time(total_operation_time: float, idle_time: float) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def total_stop_count(total_stops: int, pto_engaged_stops: int) -> bool:
    if total_stops >= pto_engaged_stops:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def axle2_load(payload: float, axle2_load: float) -> bool:
    if axle2_load >= payload:
        return True
    else:
        return False

# Axle 3's load must always be equal to or greater than the payload.
def axle3_load(payload: float, axle3_load: float) -> bool:
    if axle3_load >= payload:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
PTO operation time cannot be greater than the total operation time.
Driving time must always be less than or equal to the total operation time.
The total stop count must not be lower than the count of stops where PTO is engaged.
Payload must remain below or equal to the load carried by axle 2.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";"
```python
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_hour >= 5:
        return True
    else:
        return False

# PTO operation time cannot be greater than the total operation time.
def r2(pto_operation_time_hours: float, total_operation_time_hours: float) -> bool:
    if pto_operation_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# Driving time must always be less than or equal to the total operation time.
def r3(driving_time_hours: float, total_operation_time_hours: float) -> bool:
    if driving_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r4(total_stop_count: int, pto_engaged_stops_count: int) -> bool:
    if total_stop_count >= pto_engaged_stops_count:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def r5(payload_kg: float, load_axle_2_kg: float) -> bool:
    if payload_kg <= load_axle_2_kg:
        return True
    else:
        return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r6(total_operation_time_hours: float, pto_operation_time_hours: float, driving_time_hours: float, idle_time_hours: float) -> bool:
    if total_operation_time_hours >= (pto_operation_time_hours + driving_time_hours + idle_time_hours):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
Total operation time shouldn’t be lower than PTO operation time.
Idle time should be less than or equal to the total operation time.
The total stop count must not be lower than the count of stops where PTO is engaged.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";"
```python
# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def fuel_consumption(journey_km: float, fuel_consumption_dm3h: float) -> bool:
    if journey_km >= 20 and fuel_consumption_dm3h >= 5:
        return True
    else:
        return False

# Total operation time shouldn't be lower than PTO operation time.
def total_operation_time(operation_time: float, pto_operation_time: float) -> bool:
    if operation_time >= pto_operation_time:
        return True
    else:
        return False

# Idle time should be less than or equal to the total operation time.
def idle_time(idle_time: float, operation_time: float) -> bool:
    if idle_time <= operation_time:
        return True
    else:
        return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def stop_count(total_stops: int, pto_engaged_stops: int) -> bool:
    if total_stops >= pto_engaged_stops:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def load(axle_1_load: float, axle_2_load: float) -> bool:
    if axle_1_load <= axle_2_load:
        return True
    else:
        return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def total_time(operation_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    if operation_time >= (pto_time + idle_time + driving_time):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
The total operation duration must not be lower than the PTO operation time.
The total operation duration must not be lower than the idle time.
Driving time cannot be greater than the total operation time.
The weight on axle 1 cannot surpass the weight on axle 2.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"
```python
# The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def fuel_consumption_rule(fuel_consumption: float, distance_km: float) -> bool:
    if distance_km >= 20 and fuel_consumption >= 5:
        return True
    else:
        return False

# The total operation duration must not be lower than the PTO operation time.
def pto_operation_time_rule(total_operation_time: float, pto_operation_time: float) -> bool:
    if total_operation_time >= pto_operation_time:
        return True
    else:
        return False

# The total operation duration must not be lower than the idle time.
def idle_time_rule(total_operation_time: float, idle_time: float) -> bool:
    if total_operation_time >= idle_time:
        return True
    else:
        return False

# Driving time cannot be greater than the total operation time.
def driving_time_rule(driving_time: float, total_operation_time: float) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def axle_weight_rule(weight_axle_1: float, weight_axle_2: float) -> bool:
    if weight_axle_1 <= weight_axle_2:
        return True
    else:
        return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def combined_time_rule(pto_operation_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
    if (pto_operation_time + idle_time + driving_time) <= total_operation_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: The total operation duration must not be lower than the PTO operation time.
The total operation duration must not be lower than the idle time.
Total operation time should shouldn’t be lower than driving time.
Stops with PTO engaged should never outnumber total stops.
The payload must not exceed the load carried by axle 3.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";"
```python
# The total operation duration must not be lower than the PTO operation time.
def constraint1(total_operation_time: float, pto_operation_time: float) -> bool:
    return total_operation_time >= pto_operation_time

# The total operation duration must not be lower than the idle time.
def constraint2(total_operation_time: float, idle_time: float) -> bool:
    return total_operation_time >= idle_time

# Total operation time should not be lower than driving time.
def constraint3(total_operation_time: float, driving_time: float) -> bool:
    return total_operation_time >= driving_time

# Stops with PTO engaged should never outnumber total stops.
def constraint4(total_stops: int, pto_stops: int) -> bool:
    return pto_stops <= total_stops

# The payload must not exceed the load carried by axle 3.
def constraint5(payload: float, load_on_axle_3: float) -> bool:
    return payload <= load_on_axle_3

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def constraint6(total_operation_time: float, pto_operation_time: float, idle_time: float, driving_time: float) -> bool:
    return total_operation_time >= pto_operation_time + idle_time + driving_time
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
PTO operation time should be less than or equal to the total operation time.
Total operation time should shouldn’t be lower than driving time.
Stops with PTO engaged cannot outnumber the total stops.
The payload must always be smaller than or equal to the load on axle 2.
The payload must always be smaller than or equal to the load on axle 3.
";"
```python
# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def fuel_consumption_check(distance_km: float, fuel_consumption_dm3_100km: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_100km >= 40:
        return True
    else:
        return False

# PTO operation time should be less than or equal to the total operation time.
def pto_operation_time_check(ptime: float, total_time: float) -> bool:
    if ptime <= total_time:
        return True
    else:
        return False

# Total operation time should be lower than or equal to driving time.
def total_operation_time_check(total_time: float, driving_time: float) -> bool:
    if total_time <= driving_time:
        return True
    else:
        return False

# Stops with PTO engaged cannot outnumber the total stops.
def stops_with_pto_check(stops_with_pto: int, total_stops: int) -> bool:
    if stops_with_pto <= total_stops:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 2.
def payload_and_axle2_check(payload: float, axle2_load: float) -> bool:
    if payload <= axle2_load:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 3.
def payload_and_axle3_check(payload: float, axle3_load: float) -> bool:
    if payload <= axle3_load:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: PTO operation time must be less than or equal to the total operation time.
Idle time must always be less than or equal to the total operation time.
The total operation durationmust not be lower than the driving time.
The load supported by axle 1 cannot exceed that of axle 3.
The payload must always be smaller than or equal to the load on axle 2.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"
```python
# PTO operation time must be less than or equal to the total operation time.
def pto_rule(pto_time: float, total_operation_time: float) -> bool:
    return pto_time <= total_operation_time

# Idle time must always be less than or equal to the total operation time.
def idle_rule(idle_time: float, total_operation_time: float) -> bool:
    return idle_time <= total_operation_time

# The total operation duration must not be lower than the driving time.
def total_operation_driving_time_rule(total_operation_time: float, driving_time: float) -> bool:
    return total_operation_time >= driving_time

# The load supported by axle 1 cannot exceed that of axle 3.
def axle_load_rule(axle_1_load: float, axle_3_load: float) -> bool:
    return axle_1_load <= axle_3_load

# The payload must always be smaller than or equal to the load on axle 2.
def payload_axle_2_rule(payload: float, axle_2_load: float) -> bool:
    return payload <= axle_2_load

# Total operation time should be at least the sum of PTO, idle, and driving times.
def total_time_rule(pto_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
    return total_operation_time >= (pto_time + idle_time + driving_time)
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: The total operation duration must not be lower than the idle time.
Driving time cannot be greater than the total operation time.
Stops with PTO engaged should never outnumber total stops.
The weight on axle 1 cannot surpass the weight on axle 2.
The weight on axle 1 cannot surpass the weight on axle 3.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";"
```python
# The total operation duration must not be lower than the idle time.
def rule1(total_operation_time: float, idle_time: float) -> bool:
    if total_operation_time >= idle_time:
        return True
    else:
        return False

# Driving time cannot be greater than the total operation time.
def rule2(driving_time: float, total_operation_time: float) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False

# Stops with PTO engaged should never outnumber total stops.
def rule3(stops_with_pto_engaged: int, total_stops: int) -> bool:
    if stops_with_pto_engaged <= total_stops:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def rule4(weight_on_axle_1: float, weight_on_axle_2: float) -> bool:
    if weight_on_axle_1 <= weight_on_axle_2:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def rule5(weight_on_axle_1: float, weight_on_axle_3: float) -> bool:
    if weight_on_axle_1 <= weight_on_axle_3:
        return True
    else:
        return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def rule6(total_operation_time: float, pto_operation_time: float, idle_time: float, driving_time: float) -> bool:
    if total_operation_time >= (pto_operation_time + idle_time + driving_time):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: Idle time cannot be greater than the total operation time.
Driving time should be less than or equal to the total operation time.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
The load on axle 1 must not surpass the load on axle 3.
Payload must remain below or equal to the load carried by axle 2.
The payload must always be smaller than or equal to the load on axle 3.
";"
```python
# Idle time cannot be greater than the total operation time.
def idle_time_rule(operation_time: float, idle_time: float) -> bool:
    if idle_time <= operation_time:
        return True
    else:
        return False

# Driving time should be less than or equal to the total operation time.
def driving_time_rule(operation_time: float, driving_time: float) -> bool:
    if driving_time <= operation_time:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def axle_load_rule(axle_1_load: float, axle_2_load: float) -> bool:
    if axle_1_load <= axle_2_load:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 3.
def axle_1_load_limit(axle_1_load: float, axle_3_load: float) -> bool:
    if axle_1_load <= axle_3_load:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def payload_rule(axle_2_load: float, payload: float) -> bool:
    if payload <= axle_2_load:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 3.
def payload_limit_rule(axle_3_load: float, payload: float) -> bool:
    if payload <= axle_3_load:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
Total operation time should shouldn’t be lower than driving time.
The number of stops where PTO is engaged must not exceed the overall stop count.
The weight on axle 1 cannot surpass the weight on axle 3.
Payload must remain below or equal to the load carried by axle 2.
Payload must remain below or equal to the load carried by axle 3.
";"
```python
# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def fuel_consumption(min_km: int, min_fuel: float) -> bool:
    if min_km >= 20:
        return min_fuel == 40
    else:
        return False

# Total operation time should shouldn’t be lower than driving time.
def total_operation_time(driving_time: float, total_time: float) -> bool:
    return driving_time <= total_time

# The number of stops where PTO is engaged must not exceed the overall stop count.
def pto_stops(engaged_stops: int, overall_stops: int) -> bool:
    return engaged_stops <= overall_stops

# The weight on axle 1 cannot surpass the weight on axle 3.
def axle_weights(axle_1_weight: float, axle_3_weight: float) -> bool:
    return axle_1_weight <= axle_3_weight

# Payload must remain below or equal to the load carried by axle 2.
def payload(axle_2_load: float, payload: float) -> bool:
    return payload <= axle_2_load

# Payload must remain below or equal to the load carried by axle 3.
def payload_again(axle_3_load: float, payload: float) -> bool:
    return payload <= axle_3_load
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
Total operation time shouldn’t be lower than PTO operation time.
PTO-engaged stops cannot exceed the total number of stops.
The load on axle 1 must not surpass the load on axle 2.
The weight on axle 1 cannot surpass the weight on axle 3.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"
```python
# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r1(distance_km: float, fuel_consumption_dm3_per_100km: float) -> bool:
    if fuel_consumption_dm3_per_100km <= (20 * 40) / distance_km:
        return True
    else:
        return False

# Total operation time shouldn't be lower than PTO operation time.
def r2(total_operation_time: float, pto_operation_time: float) -> bool:
    if total_operation_time >= pto_operation_time:
        return True
    else:
        return False

# PTO-engaged stops cannot exceed the total number of stops.
def r3(pto_engaged_stops: int, total_stops: int) -> bool:
    if pto_engaged_stops <= total_stops:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 2.
def r4(load_axle1: float, load_axle2: float) -> bool:
    if load_axle1 <= load_axle2:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r5(weight_axle1: float, weight_axle3: float) -> bool:
    if weight_axle1 <= weight_axle3:
        return True
    else:
        return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r6(total_operation_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    if total_operation_time >= pto_time + idle_time + driving_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
PTO operation time must be less than or equal to the total operation time.
Idle time should be less than or equal to the total operation time.
The weight on axle 1 cannot surpass the weight on axle 3.
Axle 2's load must always be equal to or greater than the payload.
";"
```python
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_hour >= 5:
        return True
    else:
        return False

# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r2(distance_km: float, min_avg_fuel_consumption_dm3_per_100km: float) -> bool:
    if distance_km >= 20 and min_avg_fuel_consumption_dm3_per_100km == 40:
        return True
    else:
        return False

# PTO operation time must be less than or equal to the total operation time.
def r3(pto_operation_time_hours: float, total_operation_time_hours: float) -> bool:
    if pto_operation_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# Idle time should be less than or equal to the total operation time.
def r4(idle_time_hours: float, total_operation_time_hours: float) -> bool:
    if idle_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r5(axle1_weight_tons: float, axle3_weight_tons: float) -> bool:
    if axle1_weight_tons <= axle3_weight_tons:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def r6(axle2_load_tons: float, payload_tons: float) -> bool:
    if axle2_load_tons >= payload_tons:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
Axle 1's load cannot exceed Axle 3's load.
Payload must remain below or equal to the load carried by axle 2.
The payload must always be smaller than or equal to the load on axle 3.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";"
```python
# Vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def fuel_consumption_rule(distance_km: float, fuel_consumption_dm3_h: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_h >= 5:
        return True
    else:
        return False

# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def fuel_consumption_per_distance_rule(distance_km: float, fuel_consumption_dm3_100km: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_100km >= 40:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 3's load.
def axle_load_rule(axle1_load: float, axle3_load: float) -> bool:
    if axle1_load <= axle3_load:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def payload_rule(payload: float, axle2_load: float) -> bool:
    if payload <= axle2_load:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 3.
def payload_axle3_rule(payload: float, axle3_load: float) -> bool:
    if payload <= axle3_load:
        return True
    else:
        return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def total_operation_time_rule(operation_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    if operation_time >= (pto_time + idle_time + driving_time):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
PTO operation time should be less than or equal to the total operation time.
Idle time should be less than or equal to the total operation time.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
The weight on axle 1 cannot surpass the weight on axle 3.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"
```python
# Minimum average fuel consumption per distance
def min_fuel_consumption(distance_km: int, fuel_dm3: int) -> bool:
    if fuel_dm3 / distance_km >= 40:
        return True
    else:
        return False

# PTO operation time should be less than or equal to the total operation time
def pto_time(total_time: float, pto_time: float) -> bool:
    if pto_time <= total_time:
        return True
    else:
        return False

# Idle time should be less than or equal to the total operation time
def idle_time(total_time: float, idle_time: float) -> bool:
    if idle_time <= total_time:
        return True
    else:
        return False

# Load carried by axle 1 must be smaller than or equal to the load on axle 2
def load_axle_1(axle_1_load: float, axle_2_load: float) -> bool:
    if axle_1_load <= axle_2_load:
        return True
    else:
        return False

# Weight on axle 1 cannot surpass the weight on axle 3
def weight_axle_1(axle_1_weight: float, axle_3_weight: float) -> bool:
    if axle_1_weight <= axle_3_weight:
        return True
    else:
        return False

# Combined time for PTO operation, idle time, and driving time must not surpass the total operation time
def combined_time(total_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    if pto_time + idle_time + driving_time <= total_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
Total operation time shouldn’t be lower than PTO operation time.
The total stop count must not be lower than the count of stops where PTO is engaged.
The load on axle 1 must not surpass the load on axle 3.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";"
```python
# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_h: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_h >= 5:
        return True
    else:
        return False

# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r2(distance_km: float, fuel_consumption_dm3_100km: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_100km >= 40:
        return True
    else:
        return False

# Total operation time shouldn’t be lower than PTO operation time.
def r3(operation_time_total: float, pto_operation_time: float) -> bool:
    if operation_time_total >= pto_operation_time:
        return True
    else:
        return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r4(total_stop_count: int, pto_engaged_stops_count: int) -> bool:
    if total_stop_count >= pto_engaged_stops_count:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 3.
def r5(axle_load_1: float, axle_load_3: float) -> bool:
    if axle_load_1 <= axle_load_3:
        return True
    else:
        return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r6(operation_time_total: float, pto_operation_time: float, idle_time: float, driving_time: float) -> bool:
    if operation_time_total >= (pto_operation_time + idle_time + driving_time):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
Idle time should be less than or equal to the total operation time.
Stops with PTO engaged should never outnumber total stops.
The load supported by axle 1 cannot exceed that of axle 2.
The payload must always be smaller than or equal to the load on axle 3.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";"
```python
# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def min_fuel_consumption(distance_km: float, fuel_consumption_dm3: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3 <= (40 * 10):
        return True
    else:
        return False

# Idle time should be less than or equal to the total operation time.
def idle_time_operation_time(idle_time_hours: float, operation_time_hours: float) -> bool:
    if idle_time_hours <= operation_time_hours:
        return True
    else:
        return False

# Stops with PTO engaged should never outnumber total stops.
def pto_stops_total_stops(pto_stops: int, total_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 2.
def axle_load(axle_1_load: float, axle_2_load: float) -> bool:
    if axle_1_load <= axle_2_load:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 3.
def payload_axle_3(payload: float, axle_3_load: float) -> bool:
    if payload <= axle_3_load:
        return True
    else:
        return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def total_operation_time(operation_time_hours: float, pto_operation_time_hours: float, idle_time_hours: float, driving_time_hours: float) -> bool:
    if operation_time_hours >= pto_operation_time_hours + idle_time_hours + driving_time_hours:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
PTO operation time should be less than or equal to the total operation time.
Idle time should be less than or equal to the total operation time.
Driving time cannot be greater than the total operation time.
Axle 1's load cannot exceed Axle 2's load.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
";"
```python
# Vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def fuel_consumption_rule(fuel_consumption: float, distance_km: float) -> bool:
    if distance_km >= 20 and fuel_consumption >= 5:
        return True
    else:
        return False

# PTO operation time should be less than or equal to the total operation time.
def pto_operation_time_rule(pto_time: float, total_time: float) -> bool:
    if pto_time <= total_time:
        return True
    else:
        return False

# Idle time should be less than or equal to the total operation time.
def idle_time_rule(idle_time: float, total_time: float) -> bool:
    if idle_time <= total_time:
        return True
    else:
        return False

# Driving time cannot be greater than the total operation time.
def driving_time_rule(driving_time: float, total_time: float) -> bool:
    if driving_time <= total_time:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 2's load.
def axle_load_rule(axle_1_load: float, axle_2_load: float) -> bool:
    if axle_1_load <= axle_2_load:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def axle_load_comparison_rule(axle_1_load: float, axle_3_load: float) -> bool:
    if axle_1_load <= axle_3_load:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
The total operation durationmust not be lower than the driving time.
Stops with PTO engaged cannot outnumber the total stops.
Axle 1's load cannot exceed Axle 3's load.
The payload must always be smaller than or equal to the load on axle 3.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";"
```python
# Vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def fuel_consumption_rule(fuel_consumption: float, distance_km: float) -> bool:
    if distance_km >= 20 and fuel_consumption >= 5:
        return True
    else:
        return False

# The total operation duration must not be lower than the driving time.
def operation_duration_rule(operation_duration: float, driving_time: float) -> bool:
    if operation_duration >= driving_time:
        return True
    else:
        return False

# Stops with PTO engaged cannot outnumber the total stops.
def stop_rule(total_stops: int, pto_engaged_stops: int) -> bool:
    if pto_engaged_stops <= total_stops:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 3's load.
def axle_load_rule(axle_1_load: float, axle_3_load: float) -> bool:
    if axle_1_load <= axle_3_load:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 3.
def payload_rule(payload: float, axle_3_load: float) -> bool:
    if payload <= axle_3_load:
        return True
    else:
        return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def operation_duration_combined_rule(operation_duration: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    if operation_duration >= (pto_time + idle_time + driving_time):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
The total operation duration must not be lower than the PTO operation time.
The total operation durationmust not be lower than the driving time.
Axle 1's load cannot exceed Axle 2's load.
The weight on axle 1 cannot surpass the weight on axle 3.
Axle 3's load must always be equal to or greater than the payload.
";"
```python
# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def fuel_consumption(journey_km: float, fuel_consumption_dm3h: float) -> bool:
    if journey_km >= 20 and fuel_consumption_dm3h >= 5:
        return True
    else:
        return False

# The total operation duration must not be lower than the PTO operation time.
def operation_duration(pto_time: float, total_operation_time: float) -> bool:
    if total_operation_time >= pto_time:
        return True
    else:
        return False

# The total operation duration must not be lower than the driving time.
def driving_time(driving_time: float, total_operation_time: float) -> bool:
    if total_operation_time >= driving_time:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 2's load.
def axle_load(axle_1_load: float, axle_2_load: float) -> bool:
    if axle_1_load <= axle_2_load:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def axle_weight(axle_1_weight: float, axle_3_weight: float) -> bool:
    if axle_1_weight <= axle_3_weight:
        return True
    else:
        return False

# Axle 3's load must always be equal to or greater than the payload.
def payload(axle_3_load: float, payload: float) -> bool:
    if axle_3_load >= payload:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
Idle time cannot be greater than the total operation time.
Driving time must always be less than or equal to the total operation time.
Stops with PTO engaged cannot outnumber the total stops.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"
```python
# If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
def min_fuel_consumption(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_hour >= 5:
        return True
    else:
        return False

# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def avg_fuel_consumption(distance_km: float, fuel_consumed_dm3: float) -> bool:
    if distance_km >= 20 and (fuel_consumed_dm3 / distance_km) * 100 >= 40:
        return True
    else:
        return False

# Idle time cannot be greater than the total operation time.
def idle_time_operation_time(idle_time_hours: float, operation_time_hours: float) -> bool:
    if idle_time_hours <= operation_time_hours:
        return True
    else:
        return False

# Driving time must always be less than or equal to the total operation time.
def driving_time_operation_time(driving_time_hours: float, operation_time_hours: float) -> bool:
    if driving_time_hours <= operation_time_hours:
        return True
    else:
        return False

# Stops with PTO engaged cannot outnumber the total stops.
def pto_stops_total_stops(pto_stops: int, total_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def total_operation_time(pto_time_hours: float, idle_time_hours: float, driving_time_hours: float) -> bool:
    if pto_time_hours + idle_time_hours + driving_time_hours <= total_operation_time_hours:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
Total operation time shouldn’t be lower than idle time.
The total stop count must not be lower than the count of stops where PTO is engaged.
The weight on axle 1 cannot surpass the weight on axle 2.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
The payload must always be smaller than or equal to the load on axle 3.
";"
```python
# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def min_fuel_consumption_rate(trip_km: int, fuel_consumption_dm3_100km: float) -> bool:
    if trip_km >= 20 and fuel_consumption_dm3_100km >= 40:
        return True
    else:
        return False

# Total operation time shouldn't be lower than idle time.
def total_operation_time_idle_time(total_operation_time: int, idle_time: int) -> bool:
    if total_operation_time >= idle_time:
        return True
    else:
        return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def total_stop_count_engaged_stops(total_stop_count: int, engaged_stops: int) -> bool:
    if total_stop_count >= engaged_stops:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def weight_on_axle_1_weight_on_axle_2(weight_axle_1: int, weight_axle_2: int) -> bool:
    if weight_axle_1 <= weight_axle_2:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def load_axle_1_load_axle_3(load_axle_1: int, load_axle_3: int) -> bool:
    if load_axle_1 <= load_axle_3:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 3.
def payload_load_axle_3(payload: int, load_axle_3: int) -> bool:
    if payload <= load_axle_3:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
Total operation time shouldn’t be lower than idle time.
Stops with PTO engaged cannot outnumber the total stops.
Axle 1's load cannot exceed Axle 2's load.
Payload must remain below or equal to the load carried by axle 3.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";"
```python
# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def fuel_consumption(journey_km: float, fuel_consumption_dm3h: float) -> bool:
    if journey_km >= 20 and fuel_consumption_dm3h >= 5:
        return True
    else:
        return False

# Total operation time shouldn't be lower than idle time.
def total_operation_time(operation_time: float, idle_time: float) -> bool:
    if operation_time >= idle_time:
        return True
    else:
        return False

# Stops with PTO engaged cannot outnumber the total stops.
def stops_with_PTO(stops_with_PTO: int, total_stops: int) -> bool:
    if stops_with_PTO <= total_stops:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 2's load.
def axle_load(axle_1_load: float, axle_2_load: float) -> bool:
    if axle_1_load <= axle_2_load:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 3.
def payload_and_axle_3(payload: float, axle_3_load: float) -> bool:
    if payload <= axle_3_load:
        return True
    else:
        return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def total_time_requirements(operation_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    if operation_time >= pto_time + idle_time + driving_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
Total operation time shouldn’t be lower than idle time.
PTO-engaged stops cannot exceed the total number of stops.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
The payload cannot exceed the capacity of axle 2.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"
```python
# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def fuel_consumption(journey_km: float, fuel_consumption_dm3h: float) -> bool:
    if journey_km >= 20 and fuel_consumption_dm3h >= 5:
        return True
    else:
        return False

# Total operation time shouldn't be lower than idle time.
def total_operation_time(idle_time: float, total_operation_time: float) -> bool:
    if total_operation_time >= idle_time:
        return True
    else:
        return False

# PTO-engaged stops cannot exceed the total number of stops.
def pto_stops(total_stops: int, pto_engaged_stops: int) -> bool:
    if pto_engaged_stops <= total_stops:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def load_axles(load_axle1: float, load_axle2: float) -> bool:
    if load_axle1 <= load_axle2:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 2.
def payload_capacity(payload: float, axle_capacity: float) -> bool:
    if payload <= axle_capacity:
        return True
    else:
        return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def total_time(pto_time: float, idle_time: float, driving_time: float, total_time: float) -> bool:
    if total_time >= pto_time + idle_time + driving_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
The total operation durationmust not be lower than the driving time.
The weight on axle 1 cannot surpass the weight on axle 2.
The load supported by axle 1 cannot exceed that of axle 3.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"
```python
# The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def fuel_consumption(min_fuel_consumption: float, traveled_distance_km: float) -> bool:
    if traveled_distance_km >= 20 and min_fuel_consumption >= 5:
        return True
    else:
        return False

# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def fuel_consumption_per_distance(min_fuel_consumption_per_100km: float, traveled_distance_km: float) -> bool:
    if traveled_distance_km >= 20 and min_fuel_consumption_per_100km == 40:
        return True
    else:
        return False

# The total operation duration must not be lower than the driving time.
def operation_duration(operation_duration: float, driving_time: float) -> bool:
    if operation_duration >= driving_time:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def axle_weights(axle_1_weight: float, axle_2_weight: float) -> bool:
    if axle_1_weight <= axle_2_weight:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 3.
def load_supported(axle_1_load: float, axle_3_load: float) -> bool:
    if axle_1_load <= axle_3_load:
        return True
    else:
        return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def total_operation_time(total_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    if total_time >= (pto_time + idle_time + driving_time):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
The total operation duration must not be lower than the idle time.
PTO-engaged stops cannot exceed the total number of stops.
Axle 2's load must always be equal to or greater than the payload.
The payload cannot exceed the capacity of axle 3.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";"
```python
# If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if fuel_consumption_dm3_per_hour >= 5 and distance_km >= 20:
        return True
    else:
        return False

# The total operation duration must not be lower than the idle time.
def r2(total_operation_duration_hours: float, idle_time_hours: float) -> bool:
    if total_operation_duration_hours >= idle_time_hours:
        return True
    else:
        return False

# PTO-engaged stops cannot exceed the total number of stops.
def r3(pto_engaged_stops: int, total_stops: int) -> bool:
    if pto_engaged_stops <= total_stops:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def r4(axle_2_load_kg: float, payload_kg: float) -> bool:
    if axle_2_load_kg >= payload_kg:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 3.
def r5(payload_kg: float, axle_3_capacity_kg: float) -> bool:
    if payload_kg <= axle_3_capacity_kg:
        return True
    else:
        return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r6(total_operation_duration_hours: float, pto_time_hours: float, idle_time_hours: float, driving_time_hours: float) -> bool:
    if total_operation_duration_hours >= (pto_time_hours + idle_time_hours + driving_time_hours):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
Total operation time shouldn’t be lower than PTO operation time.
The load on axle 1 must not surpass the load on axle 3.
Payload must remain below or equal to the load carried by axle 2.
The payload must always be smaller than or equal to the load on axle 3.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";"
```python
# If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if fuel_consumption_dm3_per_hour >= 5 and distance_km >= 20:
        return True
    else:
        return False

# Total operation time shouldn't be lower than PTO operation time.
def r2(total_operation_time_hours: float, pto_operation_time_hours: float) -> bool:
    if total_operation_time_hours >= pto_operation_time_hours:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 3.
def r3(axle_1_load_kg: float, axle_3_load_kg: float) -> bool:
    if axle_1_load_kg <= axle_3_load_kg:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def r4(payload_kg: float, axle_2_load_kg: float) -> bool:
    if payload_kg <= axle_2_load_kg:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 3.
def r5(payload_kg: float, axle_3_load_kg: float) -> bool:
    if payload_kg <= axle_3_load_kg:
        return True
    else:
        return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r6(total_operation_time_hours: float, pto_operation_time_hours: float, idle_time_hours: float, driving_time_hours: float) -> bool:
    if total_operation_time_hours >= (pto_operation_time_hours + idle_time_hours + driving_time_hours):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: PTO operation time should be less than or equal to the total operation time.
Driving time must always be less than or equal to the total operation time.
The number of stops where PTO is engaged must not exceed the overall stop count.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
The payload must always be smaller than or equal to the load on axle 3.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"
```python
# PTO operation time should be less than or equal to the total operation time.
def pto_operation_time(total_operation_time: float, pto_operation_time: float) -> bool:
    return pto_operation_time <= total_operation_time

# Driving time must always be less than or equal to the total operation time.
def driving_time(total_operation_time: float, driving_time: float) -> bool:
    return driving_time <= total_operation_time

# The number of stops where PTO is engaged must not exceed the overall stop count.
def stops_engagement(total_stops: int, pto_stops: int) -> bool:
    return pto_stops <= total_stops

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def load_axle_1(load_axle_2: float, load_axle_1: float) -> bool:
    return load_axle_1 <= load_axle_2

# The payload must always be smaller than or equal to the load on axle 3.
def payload_load_axle_3(payload: float, load_axle_3: float) -> bool:
    return payload <= load_axle_3

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def combined_times(total_operation_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    return pto_time + idle_time + driving_time <= total_operation_time
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
PTO operation time must be less than or equal to the total operation time.
The total operation durationmust not be lower than the driving time.
The load supported by axle 1 cannot exceed that of axle 2.
Payload must remain below or equal to the load carried by axle 2.
The payload must always be smaller than or equal to the load on axle 3.
";"
```python
# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def fuel_consumption(min_distance: float, avg_fuel_consumption: float) -> bool:
    if avg_fuel_consumption >= 5 and min_distance >= 20:
        return True
    else:
        return False

# PTO operation time must be less than or equal to the total operation time.
def pto_operation_time(total_operation_time: float, pto_time: float) -> bool:
    if pto_time <= total_operation_time:
        return True
    else:
        return False

# The total operation duration must not be lower than the driving time.
def total_operation_driving_time(driving_time: float, total_operation_time: float) -> bool:
    if total_operation_time >= driving_time:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 2.
def load_axle_1(axle_1_load: float, axle_2_load: float) -> bool:
    if axle_1_load <= axle_2_load:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def payload(axle_2_load: float, payload: float) -> bool:
    if payload <= axle_2_load:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 3.
def payload_axle_3(payload: float, axle_3_load: float) -> bool:
    if payload <= axle_3_load:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: Idle time should be less than or equal to the total operation time.
The total operation durationmust not be lower than the driving time.
The number of stops where PTO is engaged must not exceed the overall stop count.
The weight on axle 1 cannot surpass the weight on axle 3.
Payload must remain below or equal to the load carried by axle 2.
Axle 3's load must always be equal to or greater than the payload.
";"
```python
# Idle time should be less than or equal to the total operation time.
def idle_time_rule(operation_time: float, idle_time: float) -> bool:
    return idle_time <= operation_time

# The total operation duration must not be lower than the driving time.
def operation_duration_rule(driving_time: float, operation_time: float) -> bool:
    return operation_time >= driving_time

# The number of stops where PTO is engaged must not exceed the overall stop count.
def stops_rule(pto_stops: int, total_stops: int) -> bool:
    return pto_stops <= total_stops

# The weight on axle 1 cannot surpass the weight on axle 3.
def axle_weight_rule(axle_1_weight: float, axle_3_weight: float) -> bool:
    return axle_1_weight <= axle_3_weight

# Payload must remain below or equal to the load carried by axle 2.
def payload_rule(payload: float, axle_2_load: float) -> bool:
    return payload <= axle_2_load

# Axle 3's load must always be equal to or greater than the payload.
def axle_3_load_rule(axle_3_load: float, payload: float) -> bool:
    return axle_3_load >= payload
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
Driving time cannot be greater than the total operation time.
PTO-engaged stops cannot exceed the total number of stops.
The load supported by axle 1 cannot exceed that of axle 2.
Payload must remain below or equal to the load carried by axle 3.
";"
```python
# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_h: float) -> bool:
    if fuel_consumption_dm3_h >= 5 and distance_km >= 20:
        return True
    else:
        return False

# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r2(distance_km: float, fuel_consumption_dm3_100km: float) -> bool:
    if fuel_consumption_dm3_100km >= 40 and distance_km >= 20:
        return True
    else:
        return False

# Driving time cannot be greater than the total operation time.
def r3(driving_time_hours: float, total_operation_time_hours: float) -> bool:
    if driving_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# PTO-engaged stops cannot exceed the total number of stops.
def r4(total_stops: int, pto_engaged_stops: int) -> bool:
    if pto_engaged_stops <= total_stops:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r5(axle_1_load: float, axle_2_load: float) -> bool:
    if axle_1_load <= axle_2_load:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 3.
def r6(payload_kg: float, axle_3_load_kg: float) -> bool:
    if payload_kg <= axle_3_load_kg:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: Driving time must always be less than or equal to the total operation time.
PTO-engaged stops cannot exceed the total number of stops.
The load supported by axle 1 cannot exceed that of axle 2.
The payload must always be smaller than or equal to the load on axle 2.
The payload must not exceed the load carried by axle 3.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";"
```python
# Driving time must always be less than or equal to the total operation time.
def driving_time_rule(operation_time: float, driving_time: float) -> bool:
    return driving_time <= operation_time

# PTO-engaged stops cannot exceed the total number of stops.
def pto_stops_rule(total_stops: int, pto_stops: int) -> bool:
    return pto_stops <= total_stops

# The load supported by axle 1 cannot exceed that of axle 2.
def axle_load_rule(axle_1_load: float, axle_2_load: float) -> bool:
    return axle_1_load <= axle_2_load

# The payload must always be smaller than or equal to the load on axle 2.
def payload_axle_2_rule(payload: float, axle_2_load: float) -> bool:
    return payload <= axle_2_load

# The payload must not exceed the load carried by axle 3.
def payload_axle_3_rule(payload: float, axle_3_load: float) -> bool:
    return payload <= axle_3_load

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def total_operation_time_rule(operation_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    return operation_time >= pto_time + idle_time + driving_time
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
The total operation duration must not be lower than the idle time.
Stops with PTO engaged should never outnumber total stops.
The load on axle 1 must not surpass the load on axle 2.
The payload must not exceed the load carried by axle 3.
";"
```python
# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_h: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_h >= 5:
        return True
    else:
        return False

# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r2(distance_km: float, fuel_consumption_dm3_100km: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_100km >= 40:
        return True
    else:
        return False

# The total operation duration must not be lower than the idle time.
def r3(operation_duration_hours: float, idle_time_hours: float) -> bool:
    if operation_duration_hours >= idle_time_hours:
        return True
    else:
        return False

# Stops with PTO engaged should never outnumber total stops.
def r4(total_stops: int, pto_engaged_stops: int) -> bool:
    if pto_engaged_stops <= total_stops:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 2.
def r5(axle1_load_kg: float, axle2_load_kg: float) -> bool:
    if axle1_load_kg <= axle2_load_kg:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def r6(payload_kg: float, axle3_load_kg: float) -> bool:
    if payload_kg <= axle3_load_kg:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
Axle 1's load cannot exceed Axle 2's load.
The load on axle 1 must not surpass the load on axle 3.
The payload must not exceed the load carried by axle 2.
The payload must not exceed the load carried by axle 3.
";"
```python
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_hour >= 5:
        return True
    else:
        return False

# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def r2(distance_km: float, fuel_consumption_dm3_per_100km: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_100km >= 40:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 2's load.
def r3(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load <= axle2_load:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 3.
def r4(axle1_load: float, axle3_load: float) -> bool:
    if axle1_load <= axle3_load:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 2.
def r5(payload: float, axle2_load: float) -> bool:
    if payload <= axle2_load:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def r6(payload: float, axle3_load: float) -> bool:
    if payload <= axle3_load:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
Total operation time shouldn’t be lower than PTO operation time.
PTO-engaged stops cannot exceed the total number of stops.
The load on axle 1 must not surpass the load on axle 2.
Axle 2's load must always be equal to or greater than the payload.
The payload must always be smaller than or equal to the load on axle 3.
";"
```python
# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def fuel_consumption_check(distance_km: float, fuel_consumption_dm3_100km: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_100km >= 40:
        return True
    else:
        return False

# Total operation time shouldn't be lower than PTO operation time.
def total_operation_time_check(total_operation_time_hours: float, pto_operation_time_hours: float) -> bool:
    if total_operation_time_hours >= pto_operation_time_hours:
        return True
    else:
        return False

# PTO-engaged stops cannot exceed the total number of stops.
def pto_stops_check(pto_stops: int, total_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 2.
def axle_load_check(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load <= axle2_load:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def payload_check(payload: float, axle2_load: float) -> bool:
    if payload <= axle2_load:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 3.
def load_on_axle3_check(payload: float, axle3_load: float) -> bool:
    if payload <= axle3_load:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
The total operation duration must not be lower than the PTO operation time.
Stops with PTO engaged cannot outnumber the total stops.
The load supported by axle 1 cannot exceed that of axle 3.
Payload must remain below or equal to the load carried by axle 2.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"
```python
# If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if fuel_consumption_dm3_per_hour >= 5 and distance_km >= 20:
        return True
    else:
        return False

# The total operation duration must not be lower than the PTO operation time.
def r2(total_operation_time_hours: float, pto_operation_time_hours: float) -> bool:
    if total_operation_time_hours >= pto_operation_time_hours:
        return True
    else:
        return False

# Stops with PTO engaged cannot outnumber the total stops.
def r3(total_stops: int, pto_engaged_stops: int) -> bool:
    if pto_engaged_stops <= total_stops:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 3.
def r4(axle_1_load_kg: float, axle_3_load_kg: float) -> bool:
    if axle_1_load_kg <= axle_3_load_kg:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def r5(payload_kg: float, axle_2_load_kg: float) -> bool:
    if payload_kg <= axle_2_load_kg:
        return True
    else:
        return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r6(pto_operation_time_hours: float, idle_time_hours: float, driving_time_hours: float, total_operation_time_hours: float) -> bool:
    if (pto_operation_time_hours + idle_time_hours + driving_time_hours) <= total_operation_time_hours:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
PTO operation time cannot be greater than the total operation time.
Total operation time shouldn’t be lower than idle time.
Payload must remain below or equal to the load carried by axle 2.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";"
```python
# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_h: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_h >= 5:
        return True
    else:
        return False

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r2(distance_km: float, fuel_consumption_dm3_100km: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_100km >= 40:
        return True
    else:
        return False

# PTO operation time cannot be greater than the total operation time.
def r3(pto_time_hours: float, total_operation_time_hours: float) -> bool:
    if pto_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# Total operation time shouldn't be lower than idle time.
def r4(total_operation_time_hours: float, idle_time_hours: float) -> bool:
    if total_operation_time_hours >= idle_time_hours:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def r5(payload_kg: float, load_axle2_kg: float) -> bool:
    if payload_kg <= load_axle2_kg:
        return True
    else:
        return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r6(total_operation_duration_hours: float, pto_time_hours: float, idle_time_hours: float, driving_time_hours: float) -> bool:
    if total_operation_duration_hours >= (pto_time_hours + idle_time_hours + driving_time_hours):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
Total operation time shouldn’t be lower than PTO operation time.
Driving time cannot be greater than the total operation time.
Stops with PTO engaged should never outnumber total stops.
The load on axle 1 must not surpass the load on axle 3.
Payload must remain below or equal to the load carried by axle 2.
";"
```python
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_hour >= 5:
        return True
    else:
        return False

# Total operation time shouldn't be lower than PTO operation time.
def r2(total_operation_time_hours: float, pto_operation_time_hours: float) -> bool:
    if total_operation_time_hours >= pto_operation_time_hours:
        return True
    else:
        return False

# Driving time cannot be greater than the total operation time.
def r3(driving_time_hours: float, total_operation_time_hours: float) -> bool:
    if driving_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# Stops with PTO engaged should never outnumber total stops.
def r4(stops_with_pto: int, total_stops: int) -> bool:
    if stops_with_pto <= total_stops:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 3.
def r5(load_axle_1: float, load_axle_3: float) -> bool:
    if load_axle_1 <= load_axle_3:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def r6(payload: float, load_axle_2: float) -> bool:
    if payload <= load_axle_2:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
Total operation time shouldn’t be lower than PTO operation time.
Idle time cannot be greater than the total operation time.
The load supported by axle 1 cannot exceed that of axle 2.
The weight on axle 1 cannot surpass the weight on axle 3.
Payload must remain below or equal to the load carried by axle 2.
";"
```python
# Vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def fuel_consumption_rule(distance_km, fuel_consumption_dm3h):
    if distance_km >= 20 and fuel_consumption_dm3h >= 5:
        return True
    else:
        return False

# Total operation time shouldn't be lower than PTO operation time.
def total_operation_time_rule(total_time, pto_time):
    if total_time >= pto_time:
        return True
    else:
        return False

# Idle time cannot be greater than the total operation time.
def idle_time_rule(idle_time, total_time):
    if idle_time <= total_time:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 2.
def axle_load_rule(axle_1_load, axle_2_load):
    if axle_1_load <= axle_2_load:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def axle_weight_rule(axle_1_weight, axle_3_weight):
    if axle_1_weight <= axle_3_weight:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def payload_rule(payload, axle_2_load):
    if payload <= axle_2_load:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
Total operation time shouldn’t be lower than PTO operation time.
The total operation duration must not be lower than the idle time.
Stops with PTO engaged should never outnumber total stops.
The load supported by axle 1 cannot exceed that of axle 3.
Payload must remain below or equal to the load carried by axle 3.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"
```python
# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def fuel_consumption(min_distance: float, avg_fuel_consumption: float) -> bool:
    if avg_fuel_consumption >= 5 and min_distance >= 20:
        return True
    else:
        return False

# Total operation time shouldn't be lower than PTO operation time.
def total_operation_time(total_time: float, pto_time: float) -> bool:
    if total_time >= pto_time:
        return True
    else:
        return False

# The total operation duration must not be lower than the idle time.
def total_operation_idle(idle_time: float, total_time: float) -> bool:
    if total_time >= idle_time:
        return True
    else:
        return False

# Stops with PTO engaged should never outnumber total stops.
def pto_stops(stops_with_pto: int, total_stops: int) -> bool:
    if stops_with_pto <= total_stops:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 3.
def axle_load(axle_1_load: float, axle_3_load: float) -> bool:
    if axle_1_load <= axle_3_load:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 3.
def payload(axle_3_load: float, payload: float) -> bool:
    if payload <= axle_3_load:
        return True
    else:
        return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def total_time_sum(pto_time: float, idle_time: float, driving_time: float) -> bool:
    if pto_time + idle_time + driving_time <= total_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
PTO operation time must be less than or equal to the total operation time.
Idle time cannot be greater than the total operation time.
Stops with PTO engaged cannot outnumber the total stops.
Axle 1's load cannot exceed Axle 2's load.
Axle 1's load cannot exceed Axle 3's load.
Axle 2's load must always be equal to or greater than the payload.
";"
```python
# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r1(distance_km: float, fuel_consumption_dm3_per_100km: float) -> bool:
    if fuel_consumption_dm3_per_100km >= 40 * (distance_km / 100):
        return True
    else:
        return False

# PTO operation time must be less than or equal to the total operation time.
def r2(pto_operation_time: float, total_operation_time: float) -> bool:
    if pto_operation_time <= total_operation_time:
        return True
    else:
        return False

# Idle time cannot be greater than the total operation time.
def r3(idle_time: float, total_operation_time: float) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# Stops with PTO engaged cannot outnumber the total stops.
def r4(stops_with_pto_engaged: int, total_stops: int) -> bool:
    if stops_with_pto_engaged <= total_stops:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 2's load.
def r5(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load <= axle2_load:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 3's load.
def r6(axle1_load: float, axle3_load: float) -> bool:
    if axle1_load <= axle3_load:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def r7(axle2_load: float, payload: float) -> bool:
    if axle2_load >= payload:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
The total stop count must not be lower than the count of stops where PTO is engaged.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
The payload cannot exceed the capacity of axle 2.
The payload cannot exceed the capacity of axle 3.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"
```python
# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def min_fuel_consumption(distance_km: float, fuel_consumption_dm3: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3 <= (40 * 10):
        return True
    else:
        return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def pto_stops(stop_count: int, pto_engaged_stops: int) -> bool:
    if stop_count >= pto_engaged_stops:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def load_axle1(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load <= axle2_load:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def load_axle1(axle1_load: float, axle3_load: float) -> bool:
    if axle1_load <= axle3_load:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 2.
def payload_capacity(payload: float, axle2_capacity: float) -> bool:
    if payload <= axle2_capacity:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 3.
def payload_capacity(payload: float, axle3_capacity: float) -> bool:
    if payload <= axle3_capacity:
        return True
    else:
        return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def operation_time(pto_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
    if pto_time + idle_time + driving_time <= total_operation_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
PTO operation time must be less than or equal to the total operation time.
Idle time should be less than or equal to the total operation time.
Driving time must always be less than or equal to the total operation time.
Axle 1's load cannot exceed Axle 3's load.
Payload must remain below or equal to the load carried by axle 2.
";"
```python
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_hour >= 5:
        return True
    else:
        return False

# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r2(distance_km: float, min_avg_fuel_consumption_dm3_per_100km: float) -> bool:
    if distance_km >= 20 and min_avg_fuel_consumption_dm3_per_100km == 40:
        return True
    else:
        return False

# PTO operation time must be less than or equal to the total operation time.
def r3(pto_operation_time_hours: float, total_operation_time_hours: float) -> bool:
    if pto_operation_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# Idle time should be less than or equal to the total operation time.
def r4(idle_time_hours: float, total_operation_time_hours: float) -> bool:
    if idle_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# Driving time must always be less than or equal to the total operation time.
def r5(driving_time_hours: float, total_operation_time_hours: float) -> bool:
    if driving_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 3's load.
def r6(axle1_load_tons: float, axle3_load_tons: float) -> bool:
    if axle1_load_tons <= axle3_load_tons:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def r7(payload_tons: float, axle2_load_tons: float) -> bool:
    if payload_tons <= axle2_load_tons:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
PTO operation time should be less than or equal to the total operation time.
Stops with PTO engaged should never outnumber total stops.
Axle 1's load cannot exceed Axle 3's load.
The payload must not exceed the load carried by axle 3.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"
```python
# The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def fuel_consumption_rule(fuel_consumption: float, distance_km: float) -> bool:
    if distance_km >= 20 and fuel_consumption >= 5:
        return True
    else:
        return False

# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def min_fuel_consumption_per_distance(fuel_consumption: float, distance_km: float) -> bool:
    if distance_km >= 20 and (fuel_consumption * 100) / distance_km >= 40:
        return True
    else:
        return False

# PTO operation time should be less than or equal to the total operation time.
def pto_operation_time_rule(pto_time: float, total_operation_time: float) -> bool:
    if pto_time <= total_operation_time:
        return True
    else:
        return False

# Stops with PTO engaged should never outnumber total stops.
def stops_with_pto_rule(stops_with_pto: int, total_stops: int) -> bool:
    if stops_with_pto <= total_stops:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 3's load.
def axle_load_rule(axle_1_load: float, axle_3_load: float) -> bool:
    if axle_1_load <= axle_3_load:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def payload_rule(payload: float, axle_3_load: float) -> bool:
    if payload <= axle_3_load:
        return True
    else:
        return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def total_operation_time_rule(total_operation_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    if total_operation_time >= pto_time + idle_time + driving_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
PTO operation time must be less than or equal to the total operation time.
Stops with PTO engaged should never outnumber total stops.
The weight on axle 1 cannot surpass the weight on axle 2.
The payload must not exceed the load carried by axle 3.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"
```python
# If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if fuel_consumption_dm3_per_hour >= 5:
        return True
    else:
        return False

# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r2(distance_km: float, fuel_consumption_dm3_per_100km: float) -> bool:
    if fuel_consumption_dm3_per_100km >= 40:
        return True
    else:
        return False

# PTO operation time must be less than or equal to the total operation time.
def r3(pto_time_hours: float, total_operation_time_hours: float) -> bool:
    if pto_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# Stops with PTO engaged should never outnumber total stops.
def r4(stops_with_pto: int, total_stops: int) -> bool:
    if stops_with_pto <= total_stops:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r5(weight_axle1: float, weight_axle2: float) -> bool:
    if weight_axle1 <= weight_axle2:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def r6(payload_kg: float, load_axle3_kg: float) -> bool:
    if payload_kg <= load_axle3_kg:
        return True
    else:
        return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r7(pto_time_hours: float, idle_time_hours: float, driving_time_hours: float, total_operation_time_hours: float) -> bool:
    if (pto_time_hours + idle_time_hours + driving_time_hours) <= total_operation_time_hours:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
The total operation duration must not be lower than the PTO operation time.
Total operation time shouldn’t be lower than idle time.
PTO-engaged stops cannot exceed the total number of stops.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
The payload must not exceed the load carried by axle 2.
The payload cannot exceed the capacity of axle 3.
";"
```python
# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r1(distance_km: float, fuel_consumption_dm3_per_100km: float) -> bool:
    if fuel_consumption_dm3_per_100km >= 40 * (distance_km / 100):
        return True
    else:
        return False

# The total operation duration must not be lower than the PTO operation time.
def r2(total_operation_time_seconds: float, pto_operation_time_seconds: float) -> bool:
    if total_operation_time_seconds >= pto_operation_time_seconds:
        return True
    else:
        return False

# Total operation time shouldn’t be lower than idle time.
def r3(total_operation_time_seconds: float, idle_time_seconds: float) -> bool:
    if total_operation_time_seconds >= idle_time_seconds:
        return True
    else:
        return False

# PTO-engaged stops cannot exceed the total number of stops.
def r4(pto_engaged_stops: int, total_stops: int) -> bool:
    if pto_engaged_stops <= total_stops:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r5(axle1_load_kg: float, axle3_load_kg: float) -> bool:
    if axle1_load_kg <= axle3_load_kg:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 2.
def r6(payload_kg: float, axle2_load_kg: float) -> bool:
    if payload_kg <= axle2_load_kg:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 3.
def r7(payload_kg: float, axle3_capacity_kg: float) -> bool:
    if payload_kg <= axle3_capacity_kg:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
Total operation time shouldn’t be lower than idle time.
Driving time should be less than or equal to the total operation time.
The number of stops where PTO is engaged must not exceed the overall stop count.
The weight on axle 1 cannot surpass the weight on axle 2.
The load on axle 1 must not surpass the load on axle 3.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"
```python
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_hour >= 5:
        return True
    else:
        return False

# Total operation time shouldn't be lower than idle time.
def r2(total_operation_time_hours: float, idle_time_hours: float) -> bool:
    if total_operation_time_hours >= idle_time_hours:
        return True
    else:
        return False

# Driving time should be less than or equal to the total operation time.
def r3(driving_time_hours: float, total_operation_time_hours: float) -> bool:
    if driving_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r4(stops_with_PTO: int, overall_stops: int) -> bool:
    if stops_with_PTO <= overall_stops:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r5(weight_axle_1: float, weight_axle_2: float) -> bool:
    if weight_axle_1 <= weight_axle_2:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 3.
def r6(load_axle_1: float, load_axle_3: float) -> bool:
    if load_axle_1 <= load_axle_3:
        return True
    else:
        return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r7(pto_operation_time_hours: float, idle_time_hours: float, driving_time_hours: float, total_operation_time_hours: float) -> bool:
    if pto_operation_time_hours + idle_time_hours + driving_time_hours <= total_operation_time_hours:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: Total operation time shouldn’t be lower than PTO operation time.
Idle time must always be less than or equal to the total operation time.
The total operation durationmust not be lower than the driving time.
Stops with PTO engaged should never outnumber total stops.
The weight on axle 1 cannot surpass the weight on axle 2.
The payload cannot exceed the capacity of axle 2.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"
```python
# Total operation time shouldn’t be lower than PTO operation time.
def rule1(total_operation_time: float, pto_operation_time: float) -> bool:
    if total_operation_time >= pto_operation_time:
        return True
    else:
        return False

# Idle time must always be less than or equal to the total operation time.
def rule2(idle_time: float, total_operation_time: float) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# The total operation duration must not be lower than the driving time.
def rule3(total_operation_duration: float, driving_time: float) -> bool:
    if total_operation_duration >= driving_time:
        return True
    else:
        return False

# Stops with PTO engaged should never outnumber total stops.
def rule4(stops_with_pto_engaged: int, total_stops: int) -> bool:
    if stops_with_pto_engaged <= total_stops:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def rule5(weight_on_axle_1: float, weight_on_axle_2: float) -> bool:
    if weight_on_axle_1 <= weight_on_axle_2:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 2.
def rule6(payload: float, capacity_of_axle_2: float) -> bool:
    if payload <= capacity_of_axle_2:
        return True
    else:
        return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def rule7(pto_operation_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
    if (pto_operation_time + idle_time + driving_time) <= total_operation_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: Idle time must always be less than or equal to the total operation time.
Driving time must always be less than or equal to the total operation time.
The total stop count must not be lower than the count of stops where PTO is engaged.
Axle 1's load cannot exceed Axle 2's load.
Axle 1's load cannot exceed Axle 3's load.
Axle 2's load must always be equal to or greater than the payload.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"
```python
# Idle time must always be less than or equal to the total operation time.
def idle_time_rule(operation_time: float, idle_time: float) -> bool:
    return idle_time <= operation_time

# Driving time must always be less than or equal to the total operation time.
def driving_time_rule(operation_time: float, driving_time: float) -> bool:
    return driving_time <= operation_time

# The total stop count must not be lower than the count of stops where PTO is engaged.
def stop_count_rule(total_stops: int, pto_engaged_stops: int) -> bool:
    return total_stops >= pto_engaged_stops

# Axle 1's load cannot exceed Axle 2's load.
def axle_load_rule(axle_1_load: float, axle_2_load: float) -> bool:
    return axle_1_load <= axle_2_load

# Axle 1's load cannot exceed Axle 3's load.
def axle_load_rule_axle_3(axle_1_load: float, axle_3_load: float) -> bool:
    return axle_1_load <= axle_3_load

# Axle 2's load must always be equal to or greater than the payload.
def axle_payload_rule(axle_2_load: float, payload: float) -> bool:
    return axle_2_load >= payload

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def combined_time_rule(operation_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    return pto_time + idle_time + driving_time <= operation_time
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
The total operation duration must not be lower than the PTO operation time.
Idle time must always be less than or equal to the total operation time.
Total operation time should shouldn’t be lower than driving time.
The number of stops where PTO is engaged must not exceed the overall stop count.
The load on axle 1 must not surpass the load on axle 3.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";"
```python
# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def fuel_consumption(journey_km: float, fuel_consumption_dm3h: float) -> bool:
    if journey_km >= 20 and fuel_consumption_dm3h >= 5:
        return True
    else:
        return False

# The total operation duration must not be lower than the PTO operation time.
def total_operation_time(pto_time: float, total_time: float) -> bool:
    if total_time >= pto_time:
        return True
    else:
        return False

# Idle time must always be less than or equal to the total operation time.
def idle_time(total_time: float, idle_time: float) -> bool:
    if idle_time <= total_time:
        return True
    else:
        return False

# Total operation time should not be lower than driving time.
def driving_time(total_time: float, driving_time: float) -> bool:
    if total_time >= driving_time:
        return True
    else:
        return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def stops_count(stops_with_pto: int, overall_stops: int) -> bool:
    if stops_with_pto <= overall_stops:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 3.
def load_on_axles(load_axle1: float, load_axle3: float) -> bool:
    if load_axle1 <= load_axle3:
        return True
    else:
        return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def combined_duration(total_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    if total_time >= (pto_time + idle_time + driving_time):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
Idle time should be less than or equal to the total operation time.
The load supported by axle 1 cannot exceed that of axle 2.
The load supported by axle 1 cannot exceed that of axle 3.
The payload must always be smaller than or equal to the load on axle 2.
Axle 3's load must always be equal to or greater than the payload.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";"
```python
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_hour >= 5:
        return True
    else:
        return False

# Idle time should be less than or equal to the total operation time.
def r2(idle_time_hours: float, total_operation_time_hours: float) -> bool:
    if idle_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r3(axle_1_load_kg: float, axle_2_load_kg: float) -> bool:
    if axle_1_load_kg <= axle_2_load_kg:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 3.
def r4(axle_1_load_kg: float, axle_3_load_kg: float) -> bool:
    if axle_1_load_kg <= axle_3_load_kg:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 2.
def r5(payload_kg: float, axle_2_load_kg: float) -> bool:
    if payload_kg <= axle_2_load_kg:
        return True
    else:
        return False

# Axle 3's load must always be equal to or greater than the payload.
def r6(axle_3_load_kg: float, payload_kg: float) -> bool:
    if axle_3_load_kg >= payload_kg:
        return True
    else:
        return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r7(total_operation_time_hours: float, pto_operation_time_hours: float, driving_time_hours: float, idle_time_hours: float) -> bool:
    if total_operation_time_hours >= (pto_operation_time_hours + driving_time_hours + idle_time_hours):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
The total operation duration must not be lower than the PTO operation time.
The total operation durationmust not be lower than the driving time.
The number of stops where PTO is engaged must not exceed the overall stop count.
The load on axle 1 must not surpass the load on axle 2.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
Axle 3's load must always be equal to or greater than the payload.
";"
```python
# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def fuel_consumption_rate(min_trip_km: int, min_fuel_consumption_dm3_100km: float) -> bool:
    if min_trip_km >= 20 and min_fuel_consumption_dm3_100km == 40:
        return True
    else:
        return False

# The total operation duration must not be lower than the PTO operation time.
def total_operation_duration(min_pto_time: float, total_operation_time: float) -> bool:
    if total_operation_time >= min_pto_time:
        return True
    else:
        return False

# The total operation duration must not be lower than the driving time.
def driving_time(min_driving_time: float, total_operation_time: float) -> bool:
    if total_operation_time >= min_driving_time:
        return True
    else:
        return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def pto_stops(max_pto_stops: int, total_stops: int) -> bool:
    if max_pto_stops >= total_stops:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 2.
def load_on_axle1_max(load_on_axle1: float, load_on_axle2: float) -> bool:
    if load_on_axle1 <= load_on_axle2:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def load_on_axle1_less_than_axle3(load_on_axle1: float, load_on_axle3: float) -> bool:
    if load_on_axle1 <= load_on_axle3:
        return True
    else:
        return False

# Axle 3's load must always be equal to or greater than the payload.
def axle3_load_min(payload: float, load_on_axle3: float) -> bool:
    if load_on_axle3 >= payload:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: PTO operation time should be less than or equal to the total operation time.
The total operation duration must not be lower than the idle time.
Axle 1's load cannot exceed Axle 2's load.
Axle 1's load cannot exceed Axle 3's load.
The payload cannot exceed the capacity of axle 2.
The payload must always be smaller than or equal to the load on axle 3.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"
```python
# PTO operation time should be less than or equal to the total operation time.
def pto_rule(operation_time: float, total_time: float) -> bool:
    return operation_time <= total_time

# The total operation duration must not be lower than the idle time.
def total_operation_rule(total_time: float, idle_time: float) -> bool:
    return total_time >= idle_time

# Axle 1's load cannot exceed Axle 2's load.
def axle_load_rule(axle1_load: float, axle2_load: float) -> bool:
    return axle1_load <= axle2_load

# Axle 1's load cannot exceed Axle 3's load.
def axle_load_rule_axle3(axle1_load: float, axle3_load: float) -> bool:
    return axle1_load <= axle3_load

# The payload cannot exceed the capacity of axle 2.
def payload_capacity_rule(payload: float, axle2_capacity: float) -> bool:
    return payload <= axle2_capacity

# The payload must always be smaller than or equal to the load on axle 3.
def payload_axle3_rule(payload: float, axle3_load: float) -> bool:
    return payload <= axle3_load

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def combined_time_rule(operation_time: float, idle_time: float, driving_time: float, total_time: float) -> bool:
    return operation_time + idle_time + driving_time <= total_time
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
Stops with PTO engaged cannot outnumber the total stops.
The weight on axle 1 cannot surpass the weight on axle 2.
The payload must always be smaller than or equal to the load on axle 2.
The payload must not exceed the load carried by axle 3.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";"
```python
# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_hour >= 5:
        return True
    else:
        return False

# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r2(distance_km: float, fuel_consumption_dm3_per_100km: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_100km >= 40:
        return True
    else:
        return False

# Stops with PTO engaged cannot outnumber the total stops.
def r3(total_stops: int, pto_engaged_stops: int) -> bool:
    if pto_engaged_stops <= total_stops:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r4(axle1_weight: float, axle2_weight: float) -> bool:
    if axle1_weight <= axle2_weight:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 2.
def r5(payload: float, axle2_load: float) -> bool:
    if payload <= axle2_load:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def r6(payload: float, axle3_load: float) -> bool:
    if payload <= axle3_load:
        return True
    else:
        return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r7(operation_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    if operation_time >= (pto_time + idle_time + driving_time):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
The total operation duration must not be lower than the PTO operation time.
Total operation time shouldn’t be lower than idle time.
Driving time cannot be greater than the total operation time.
Stops with PTO engaged cannot outnumber the total stops.
The load on axle 1 must not surpass the load on axle 2.
The weight on axle 1 cannot surpass the weight on axle 3.
";"
```python
# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r1(distance_km: float, fuel_consumption_dm3_per_100km: float) -> bool:
    if fuel_consumption_dm3_per_100km >= 40 * (distance_km / 100):
        return True
    else:
        return False

# The total operation duration must not be lower than the PTO operation time.
def r2(total_operation_time: float, pto_operation_time: float) -> bool:
    if total_operation_time >= pto_operation_time:
        return True
    else:
        return False

# Total operation time shouldn’t be lower than idle time.
def r3(total_operation_time: float, idle_time: float) -> bool:
    if total_operation_time >= idle_time:
        return True
    else:
        return False

# Driving time cannot be greater than the total operation time.
def r4(driving_time: float, total_operation_time: float) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False

# Stops with PTO engaged cannot outnumber the total stops.
def r5(stops_with_pto_engaged: int, total_stops: int) -> bool:
    if stops_with_pto_engaged <= total_stops:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 2.
def r6(load_axle1: float, load_axle2: float) -> bool:
    if load_axle1 <= load_axle2:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r7(weight_axle1: float, weight_axle3: float) -> bool:
    if weight_axle1 <= weight_axle3:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: The total operation duration must not be lower than the PTO operation time.
Idle time should be less than or equal to the total operation time.
PTO-engaged stops cannot exceed the total number of stops.
The load on axle 1 must not surpass the load on axle 2.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
Payload must remain below or equal to the load carried by axle 2.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";"
```python
# The total operation duration must not be lower than the PTO operation time.
def r1(total_operation_duration: float, pto_operation_time: float) -> bool:
    if total_operation_duration >= pto_operation_time:
        return True
    else:
        return False

# Idle time should be less than or equal to the total operation time.
def r2(idle_time: float, total_operation_duration: float) -> bool:
    if idle_time <= total_operation_duration:
        return True
    else:
        return False

# PTO-engaged stops cannot exceed the total number of stops.
def r3(pto_engaged_stops: int, total_stops: int) -> bool:
    if pto_engaged_stops <= total_stops:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 2.
def r4(axle_1_load: float, axle_2_load: float) -> bool:
    if axle_1_load <= axle_2_load:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r5(axle_1_load: float, axle_3_load: float) -> bool:
    if axle_1_load <= axle_3_load:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def r6(payload: float, axle_2_load: float) -> bool:
    if payload <= axle_2_load:
        return True
    else:
        return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r7(total_operation_duration: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    if total_operation_duration >= (pto_time + idle_time + driving_time):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
PTO operation time cannot be greater than the total operation time.
Total operation time shouldn’t be lower than idle time.
Total operation time should shouldn’t be lower than driving time.
The payload cannot exceed the capacity of axle 2.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";"
```python
# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_h: float) -> bool:
    if fuel_consumption_dm3_h >= 5 and distance_km >= 20:
        return True
    else:
        return False

# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r2(distance_km: float, fuel_consumption_dm3_100km: float) -> bool:
    if fuel_consumption_dm3_100km >= 40 and distance_km >= 20:
        return True
    else:
        return False

# PTO operation time cannot be greater than the total operation time.
def r3(pto_time_hours: float, total_operation_time_hours: float) -> bool:
    if pto_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# Total operation time shouldn’t be lower than idle time.
def r4(total_operation_time_hours: float, idle_time_hours: float) -> bool:
    if total_operation_time_hours >= idle_time_hours:
        return True
    else:
        return False

# Total operation time should shouldn’t be lower than driving time.
def r5(total_operation_time_hours: float, driving_time_hours: float) -> bool:
    if total_operation_time_hours >= driving_time_hours:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 2.
def r6(payload_kg: float, axle_2_capacity_kg: float) -> bool:
    if payload_kg <= axle_2_capacity_kg:
        return True
    else:
        return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r7(total_operation_time_hours: float, pto_time_hours: float, idle_time_hours: float, driving_time_hours: float) -> bool:
    if total_operation_time_hours >= (pto_time_hours + idle_time_hours + driving_time_hours):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
Idle time must always be less than or equal to the total operation time.
Driving time cannot be greater than the total operation time.
Stops with PTO engaged cannot outnumber the total stops.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
The load on axle 1 must not surpass the load on axle 3.
";"
```python
# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_hour >= 5:
        return True
    else:
        return False

# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r2(distance_km: float, fuel_consumption_dm3_per_100km: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_100km >= 40:
        return True
    else:
        return False

# Idle time must always be less than or equal to the total operation time.
def r3(operation_time_hours: float, idle_time_hours: float) -> bool:
    if idle_time_hours <= operation_time_hours:
        return True
    else:
        return False

# Driving time cannot be greater than the total operation time.
def r4(operation_time_hours: float, driving_time_hours: float) -> bool:
    if driving_time_hours <= operation_time_hours:
        return True
    else:
        return False

# Stops with PTO engaged cannot outnumber the total stops.
def r5(total_stops: int, pto_engaged_stops: int) -> bool:
    if pto_engaged_stops <= total_stops:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def r6(axle1_load_kg: float, axle2_load_kg: float) -> bool:
    if axle1_load_kg <= axle2_load_kg:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 3.
def r7(axle1_load_kg: float, axle3_load_kg: float) -> bool:
    if axle1_load_kg <= axle3_load_kg:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
The total operation duration must not be lower than the PTO operation time.
Idle time should be less than or equal to the total operation time.
The total operation durationmust not be lower than the driving time.
Stops with PTO engaged cannot outnumber the total stops.
The load on axle 1 must not surpass the load on axle 2.
Axle 1's load cannot exceed Axle 3's load.
";"
```python
# The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def fuel_consumption_rule(fuel_consumption: float, distance_km: float) -> bool:
    if distance_km >= 20 and fuel_consumption >= 5:
        return True
    else:
        return False

# The total operation duration must not be lower than the PTO operation time.
def operation_duration_rule(total_operation_time: float, pto_operation_time: float) -> bool:
    if total_operation_time >= pto_operation_time:
        return True
    else:
        return False

# Idle time should be less than or equal to the total operation time.
def idle_time_rule(idle_time: float, total_operation_time: float) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# The total operation duration must not be lower than the driving time.
def driving_time_rule(total_operation_time: float, driving_time: float) -> bool:
    if total_operation_time >= driving_time:
        return True
    else:
        return False

# Stops with PTO engaged cannot outnumber the total stops.
def stop_rule(pto_stops: int, total_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 2.
def axle_load_rule(axle_1_load: float, axle_2_load: float) -> bool:
    if axle_1_load <= axle_2_load:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 3's load.
def axle_1_3_load_rule(axle_1_load: float, axle_3_load: float) -> bool:
    if axle_1_load <= axle_3_load:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
PTO operation time should be less than or equal to the total operation time.
Idle time cannot be greater than the total operation time.
Driving time should be less than or equal to the total operation time.
Stops with PTO engaged should never outnumber total stops.
Axle 1's load cannot exceed Axle 2's load.
Payload must remain below or equal to the load carried by axle 2.
";"
```python
# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def fuel_consumption(journey_km: float, fuel_consumption_dm3h: float) -> bool:
    if journey_km >= 20 and fuel_consumption_dm3h >= 5:
        return True
    else:
        return False

# PTO operation time should be less than or equal to the total operation time.
def pto_operation_time(operation_time: float, pto_time: float) -> bool:
    if pto_time <= operation_time:
        return True
    else:
        return False

# Idle time cannot be greater than the total operation time.
def idle_time(operation_time: float, idle_time: float) -> bool:
    if idle_time <= operation_time:
        return True
    else:
        return False

# Driving time should be less than or equal to the total operation time.
def driving_time(operation_time: float, driving_time: float) -> bool:
    if driving_time <= operation_time:
        return True
    else:
        return False

# Stops with PTO engaged should never outnumber total stops.
def stops_ratio(total_stops: int, pto_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 2's load.
def axle_load(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load <= axle2_load:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def payload(axle2_load: float, payload: float) -> bool:
    if payload <= axle2_load:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
PTO operation time must be less than or equal to the total operation time.
Idle time cannot be greater than the total operation time.
Driving time must always be less than or equal to the total operation time.
Stops with PTO engaged should never outnumber total stops.
The payload must not exceed the load carried by axle 2.
The payload cannot exceed the capacity of axle 3.
";"
```python
# Vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def fuel_consumption_rule(distance_km, fuel_consumption_dm3h):
    if distance_km >= 20 and fuel_consumption_dm3h >= 5:
        return True
    else:
        return False

# PTO operation time must be less than or equal to the total operation time.
def pto_operation_time_rule(ptime, total_time):
    if ptime <= total_time:
        return True
    else:
        return False

# Idle time cannot be greater than the total operation time.
def idle_time_rule(idle_time, total_time):
    if idle_time <= total_time:
        return True
    else:
        return False

# Driving time must always be less than or equal to the total operation time.
def driving_time_rule(dtime, total_time):
    if dtime <= total_time:
        return True
    else:
        return False

# Stops with PTO engaged should never outnumber total stops.
def stops_rule(stops_with_pto, total_stops):
    if stops_with_pto <= total_stops:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 2.
def payload_axle2_rule(payload, axle2_load):
    if payload <= axle2_load:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 3.
def payload_axle3_rule(payload, axle3_capacity):
    if payload <= axle3_capacity:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: Total operation time shouldn’t be lower than idle time.
Driving time must always be less than or equal to the total operation time.
PTO-engaged stops cannot exceed the total number of stops.
The weight on axle 1 cannot surpass the weight on axle 2.
The weight on axle 1 cannot surpass the weight on axle 3.
The payload cannot exceed the capacity of axle 3.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"
```python
# Total operation time shouldn't be lower than idle time.
def rule1(total_operation_time: float, idle_time: float) -> bool:
    if total_operation_time >= idle_time:
        return True
    else:
        return False

# Driving time must always be less than or equal to the total operation time.
def rule2(driving_time: float, total_operation_time: float) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False

# PTO-engaged stops cannot exceed the total number of stops.
def rule3(pto_stops: int, total_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def rule4(weight_axle1: float, weight_axle2: float) -> bool:
    if weight_axle1 <= weight_axle2:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def rule5(weight_axle1: float, weight_axle3: float) -> bool:
    if weight_axle1 <= weight_axle3:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 3.
def rule6(payload: float, capacity_axle3: float) -> bool:
    if payload <= capacity_axle3:
        return True
    else:
        return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def rule7(pto_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
    if pto_time + idle_time + driving_time <= total_operation_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
PTO operation time cannot be greater than the total operation time.
The total operation duration must not be lower than the idle time.
Stops with PTO engaged should never outnumber total stops.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
Axle 3's load must always be equal to or greater than the payload.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";"
```python
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_hour >= 5:
        return True
    else:
        return False

# PTO operation time cannot be greater than the total operation time.
def r2(pto_operation_time_hours: float, total_operation_time_hours: float) -> bool:
    if pto_operation_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# The total operation duration must not be lower than the idle time.
def r3(total_operation_time_hours: float, idle_time_hours: float) -> bool:
    if total_operation_time_hours >= idle_time_hours:
        return True
    else:
        return False

# Stops with PTO engaged should never outnumber total stops.
def r4(stops_with_pto: int, total_stops: int) -> bool:
    if stops_with_pto <= total_stops:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def r5(axle_1_load_kg: float, axle_2_load_kg: float) -> bool:
    if axle_1_load_kg <= axle_2_load_kg:
        return True
    else:
        return False

# Axle 3's load must always be equal to or greater than the payload.
def r6(axle_3_load_kg: float, payload_kg: float) -> bool:
    if axle_3_load_kg >= payload_kg:
        return True
    else:
        return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r7(total_operation_time_hours: float, pto_operation_time_hours: float, idle_time_hours: float, driving_time_hours: float) -> bool:
    if total_operation_time_hours >= (pto_operation_time_hours + idle_time_hours + driving_time_hours):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
The total operation duration must not be lower than the PTO operation time.
Total operation time should shouldn’t be lower than driving time.
Axle 1's load cannot exceed Axle 2's load.
Axle 1's load cannot exceed Axle 3's load.
Axle 3's load must always be equal to or greater than the payload.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"
```python
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_hour >= 5:
        return True
    else:
        return False

# The total operation duration must not be lower than the PTO operation time.
def r2(total_operation_time_hours: float, pto_operation_time_hours: float) -> bool:
    if total_operation_time_hours >= pto_operation_time_hours:
        return True
    else:
        return False

# Total operation time should shouldn’t be lower than driving time.
def r3(total_operation_time_hours: float, driving_time_hours: float) -> bool:
    if total_operation_time_hours >= driving_time_hours:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 2's load.
def r4(axle_1_load_tons: float, axle_2_load_tons: float) -> bool:
    if axle_1_load_tons <= axle_2_load_tons:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 3's load.
def r5(axle_1_load_tons: float, axle_3_load_tons: float) -> bool:
    if axle_1_load_tons <= axle_3_load_tons:
        return True
    else:
        return False

# Axle 3's load must always be equal to or greater than the payload.
def r6(axle_3_load_tons: float, payload_tons: float) -> bool:
    if axle_3_load_tons >= payload_tons:
        return True
    else:
        return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r7(total_operation_time_hours: float, pto_operation_time_hours: float, idle_time_hours: float, driving_time_hours: float) -> bool:
    if total_operation_time_hours >= (pto_operation_time_hours + idle_time_hours + driving_time_hours):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: Total operation time shouldn’t be lower than PTO operation time.
Idle time cannot be greater than the total operation time.
Total operation time should shouldn’t be lower than driving time.
The load supported by axle 1 cannot exceed that of axle 3.
The payload must not exceed the load carried by axle 2.
Axle 3's load must always be equal to or greater than the payload.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"
```python
# Total operation time shouldn't be lower than PTO operation time.
def rule1(total_operation_time: float, pto_operation_time: float) -> bool:
    if total_operation_time >= pto_operation_time:
        return True
    else:
        return False

# Idle time cannot be greater than the total operation time.
def rule2(idle_time: float, total_operation_time: float) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# Total operation time should shouldn’t be lower than driving time.
def rule3(total_operation_time: float, driving_time: float) -> bool:
    if total_operation_time >= driving_time:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 3.
def rule4(axle_1_load: float, axle_3_load: float) -> bool:
    if axle_1_load <= axle_3_load:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 2.
def rule5(payload: float, axle_2_load: float) -> bool:
    if payload <= axle_2_load:
        return True
    else:
        return False

# Axle 3's load must always be equal to or greater than the payload.
def rule6(axle_3_load: float, payload: float) -> bool:
    if axle_3_load >= payload:
        return True
    else:
        return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def rule7(pto_operation_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
    if (pto_operation_time + idle_time + driving_time) <= total_operation_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
Total operation time should shouldn’t be lower than driving time.
The number of stops where PTO is engaged must not exceed the overall stop count.
The load supported by axle 1 cannot exceed that of axle 2.
The weight on axle 1 cannot surpass the weight on axle 3.
Payload must remain below or equal to the load carried by axle 2.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"
```python
# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_h: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_h >= 5:
        return True
    else:
        return False

# Total operation time should shouldn’t be lower than driving time.
def r2(total_operation_time_hours: float, driving_time_hours: float) -> bool:
    if total_operation_time_hours >= driving_time_hours:
        return True
    else:
        return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r3(stops_with_PTO: int, overall_stops: int) -> bool:
    if stops_with_PTO <= overall_stops:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r4(axle_1_load: float, axle_2_load: float) -> bool:
    if axle_1_load <= axle_2_load:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r5(axle_1_weight: float, axle_3_weight: float) -> bool:
    if axle_1_weight <= axle_3_weight:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def r6(payload_kg: float, axle_2_load_kg: float) -> bool:
    if payload_kg <= axle_2_load_kg:
        return True
    else:
        return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r7(pto_operation_time_hours: float, idle_time_hours: float, driving_time_hours: float, total_operation_time_hours: float) -> bool:
    if pto_operation_time_hours + idle_time_hours + driving_time_hours <= total_operation_time_hours:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: Total operation time shouldn’t be lower than PTO operation time.
The total operation duration must not be lower than the idle time.
Total operation time should shouldn’t be lower than driving time.
Stops with PTO engaged should never outnumber total stops.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
Axle 3's load must always be equal to or greater than the payload.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"
```python
# Total operation time shouldn't be lower than PTO operation time.
def rule1(total_operation_time: float, pto_operation_time: float) -> bool:
    if total_operation_time >= pto_operation_time:
        return True
    else:
        return False

# The total operation duration must not be lower than the idle time.
def rule2(total_operation_duration: float, idle_time: float) -> bool:
    if total_operation_duration >= idle_time:
        return True
    else:
        return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def rule3(total_operation_time: float, pto_operation_time: float, idle_time: float, driving_time: float) -> bool:
    if total_operation_time >= pto_operation_time + idle_time + driving_time:
        return True
    else:
        return False

# Stops with PTO engaged should never outnumber total stops.
def rule4(total_stops: int, pto_engaged_stops: int) -> bool:
    if pto_engaged_stops <= total_stops:
        return True
    else:
        return False

# Load carried by axle 1 must be smaller than or equal to the load on axle 2.
def rule5(axle_1_load: float, axle_2_load: float) -> bool:
    if axle_1_load <= axle_2_load:
        return True
    else:
        return False

# Axle 3's load must always be equal to or greater than the payload.
def rule6(axle_3_load: float, payload: float) -> bool:
    if axle_3_load >= payload:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
PTO operation time should be less than or equal to the total operation time.
Idle time should be less than or equal to the total operation time.
Driving time cannot be greater than the total operation time.
Axle 1's load cannot exceed Axle 3's load.
The payload must not exceed the load carried by axle 3.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";"
```python
# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def fuel_consumption(min_avg_fuel_consumption: float, distance_km: int) -> bool:
    if distance_km >= 20 and min_avg_fuel_consumption == 40:
        return True
    else:
        return False

# PTO operation time should be less than or equal to the total operation time.
def pto_operation_time(total_operation_time: float, pto_operation_time: float) -> bool:
    if pto_operation_time <= total_operation_time:
        return True
    else:
        return False

# Idle time should be less than or equal to the total operation time.
def idle_time(total_operation_time: float, idle_time: float) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# Driving time cannot be greater than the total operation time.
def driving_time(total_operation_time: float, driving_time: float) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 3's load.
def axle_load(axle_1_load: float, axle_3_load: float) -> bool:
    if axle_1_load <= axle_3_load:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def payload(axle_3_load: float, payload: float) -> bool:
    if payload <= axle_3_load:
        return True
    else:
        return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def total_operation_time(pto_operation_time: float, idle_time: float, driving_time: float) -> bool:
    if pto_operation_time + idle_time + driving_time <= total_operation_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
The total operation duration must not be lower than the PTO operation time.
The total operation duration must not be lower than the idle time.
Axle 1's load cannot exceed Axle 3's load.
Payload must remain below or equal to the load carried by axle 2.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"
```python
# If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if fuel_consumption_dm3_per_hour >= (5 * distance_km / 20):
        return True
    else:
        return False

# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r2(distance_km: float, fuel_consumption_dm3_per_100km: float) -> bool:
    if fuel_consumption_dm3_per_100km >= 40:
        return True
    else:
        return False

# The total operation duration must not be lower than the PTO operation time.
def r3(total_operation_time_hours: float, pto_operation_time_hours: float) -> bool:
    if total_operation_time_hours >= pto_operation_time_hours:
        return True
    else:
        return False

# The total operation duration must not be lower than the idle time.
def r4(total_operation_time_hours: float, idle_time_hours: float) -> bool:
    if total_operation_time_hours >= idle_time_hours:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 3's load.
def r5(axle1_load_tons: float, axle3_load_tons: float) -> bool:
    if axle1_load_tons <= axle3_load_tons:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def r6(payload_tons: float, axle2_load_tons: float) -> bool:
    if payload_tons <= axle2_load_tons:
        return True
    else:
        return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r7(total_operation_time_hours: float, pto_operation_time_hours: float, idle_time_hours: float, driving_time_hours: float) -> bool:
    if total_operation_time_hours >= (pto_operation_time_hours + idle_time_hours + driving_time_hours):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
Total operation time shouldn’t be lower than idle time.
Total operation time should shouldn’t be lower than driving time.
The number of stops where PTO is engaged must not exceed the overall stop count.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
The payload must always be smaller than or equal to the load on axle 2.
";"
```python
# If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if fuel_consumption_dm3_per_hour / distance_km >= 0.25:
        return True
    else:
        return False

# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r2(distance_km: float, fuel_consumption_dm3_per_100km: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_100km == 40:
        return True
    else:
        return False

# Total operation time shouldn’t be lower than idle time.
def r3(operation_time_hours: float, idle_time_hours: float) -> bool:
    if operation_time_hours >= idle_time_hours:
        return True
    else:
        return False

# Total operation time should shouldn’t be lower than driving time.
def r4(operation_time_hours: float, driving_time_hours: float) -> bool:
    if operation_time_hours >= driving_time_hours:
        return True
    else:
        return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r5(stops_with_PTO: int, total_stops: int) -> bool:
    if stops_with_PTO <= total_stops:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def r6(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load <= axle2_load:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 2.
def r7(payload: float, axle2_load: float) -> bool:
    if payload <= axle2_load:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: PTO operation time should be less than or equal to the total operation time.
Idle time cannot be greater than the total operation time.
The total operation durationmust not be lower than the driving time.
The load on axle 1 must not surpass the load on axle 2.
The weight on axle 1 cannot surpass the weight on axle 3.
Payload must remain below or equal to the load carried by axle 2.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"
```python
# PTO operation time should be less than or equal to the total operation time.
def pto_rule(operation_time: float, pto_time: float) -> bool:
    return pto_time <= operation_time

# Idle time cannot be greater than the total operation time.
def idle_rule(operation_time: float, idle_time: float) -> bool:
    return idle_time <= operation_time

# The total operation duration must not be lower than the driving time.
def total_operation_driving_rule(operation_time: float, driving_time: float) -> bool:
    return operation_time >= driving_time

# The load on axle 1 must not surpass the load on axle 2.
def axle_load_rule(axle_1_load: float, axle_2_load: float) -> bool:
    return axle_1_load <= axle_2_load

# The weight on axle 1 cannot surpass the weight on axle 3.
def axle_weight_rule(axle_1_weight: float, axle_3_weight: float) -> bool:
    return axle_1_weight <= axle_3_weight

# Payload must remain below or equal to the load carried by axle 2.
def payload_rule(payload: float, axle_2_load: float) -> bool:
    return payload <= axle_2_load

# Total operation time should be at least the sum of PTO, idle, and driving times.
def total_operation_sum_rule(operation_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    return operation_time >= pto_time + idle_time + driving_time
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
Idle time should be less than or equal to the total operation time.
Axle 1's load cannot exceed Axle 2's load.
The load supported by axle 1 cannot exceed that of axle 3.
The payload cannot exceed the capacity of axle 2.
The payload must always be smaller than or equal to the load on axle 3.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";"
```python
# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def min_fuel_consumption(distance_km: float, fuel_consumption_dm3_100km: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_100km == 40:
        return True
    else:
        return False

# Idle time should be less than or equal to the total operation time.
def idle_time_operation_time(idle_time_seconds: float, operation_time_seconds: float) -> bool:
    if idle_time_seconds <= operation_time_seconds:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 2's load.
def axle_load(axle1_load_kg: float, axle2_load_kg: float) -> bool:
    if axle1_load_kg <= axle2_load_kg:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 3.
def axle_load_comparison(axle1_load_kg: float, axle3_load_kg: float) -> bool:
    if axle1_load_kg <= axle3_load_kg:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 2.
def payload_capacity(payload_kg: float, axle2_capacity_kg: float) -> bool:
    if payload_kg <= axle2_capacity_kg:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 3.
def payload_axle3_load(payload_kg: float, axle3_load_kg: float) -> bool:
    if payload_kg <= axle3_load_kg:
        return True
    else:
        return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def total_operation_time(pto_duration_seconds: float, idle_time_seconds: float, driving_time_seconds: float) -> bool:
    if pto_duration_seconds + idle_time_seconds + driving_time_seconds <= 0:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
PTO operation time should be less than or equal to the total operation time.
Driving time cannot be greater than the total operation time.
Stops with PTO engaged should never outnumber total stops.
Axle 1's load cannot exceed Axle 3's load.
Axle 3's load must always be equal to or greater than the payload.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"
```python
# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def min_fuel_consumption(distance_km: float, fuel_consumption_dm3_100km: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_100km == 40:
        return True
    else:
        return False

# PTO operation time should be less than or equal to the total operation time.
def pto_time_operation_time(pto_time: float, total_operation_time: float) -> bool:
    if pto_time <= total_operation_time:
        return True
    else:
        return False

# Driving time cannot be greater than the total operation time.
def driving_time_operation_time(driving_time: float, total_operation_time: float) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False

# Stops with PTO engaged should never outnumber total stops.
def stops_with_pto_total_stops(stops_with_pto: int, total_stops: int) -> bool:
    if stops_with_pto <= total_stops:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 3's load.
def axle1_load_axle3_load(axle1_load: float, axle3_load: float) -> bool:
    if axle1_load <= axle3_load:
        return True
    else:
        return False

# Axle 3's load must always be equal to or greater than the payload.
def axle3_load_payload(axle3_load: float, payload: float) -> bool:
    if axle3_load >= payload:
        return True
    else:
        return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def total_operation_time_min_sum_times(total_operation_time: float, pto_time: float, driving_time: float, idle_time: float) -> bool:
    if total_operation_time >= (pto_time + driving_time + idle_time):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
PTO operation time cannot be greater than the total operation time.
Idle time should be less than or equal to the total operation time.
Driving time cannot be greater than the total operation time.
Stops with PTO engaged cannot outnumber the total stops.
The load supported by axle 1 cannot exceed that of axle 3.
";"
```python
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_hour < 5:
        return False
    else:
        return True

# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def r2(distance_km: float, fuel_consumption_dm3_per_100km: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_100km < 40:
        return False
    else:
        return True

# PTO operation time cannot be greater than the total operation time.
def r3(pto_operation_time_hours: float, total_operation_time_hours: float) -> bool:
    if pto_operation_time_hours > total_operation_time_hours:
        return False
    else:
        return True

# Idle time should be less than or equal to the total operation time.
def r4(idle_time_hours: float, total_operation_time_hours: float) -> bool:
    if idle_time_hours > total_operation_time_hours:
        return False
    else:
        return True

# Driving time cannot be greater than the total operation time.
def r5(driving_time_hours: float, total_operation_time_hours: float) -> bool:
    if driving_time_hours > total_operation_time_hours:
        return False
    else:
        return True

# Stops with PTO engaged cannot outnumber the total stops.
def r6(stops_with_pto: int, total_stops: int) -> bool:
    if stops_with_pto > total_stops:
        return False
    else:
        return True

# The load supported by axle 1 cannot exceed that of axle 3.
def r7(axle1_load_tons: float, axle3_load_tons: float) -> bool:
    if axle1_load_tons > axle3_load_tons:
        return False
    else:
        return True
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
The total operation duration must not be lower than the PTO operation time.
Driving time cannot be greater than the total operation time.
Axle 1's load cannot exceed Axle 2's load.
The weight on axle 1 cannot surpass the weight on axle 3.
The payload must always be smaller than or equal to the load on axle 2.
";"
```python
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if fuel_consumption_dm3_per_hour / distance_km >= 0.25:
        return True
    else:
        return False

# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r2(distance_km: float, fuel_consumption_dm3_per_100km: float) -> bool:
    if fuel_consumption_dm3_per_100km / distance_km * 100 >= 40:
        return True
    else:
        return False

# The total operation duration must not be lower than the PTO operation time.
def r3(total_operation_time_hours: float, pto_operation_time_hours: float) -> bool:
    if total_operation_time_hours >= pto_operation_time_hours:
        return True
    else:
        return False

# Driving time cannot be greater than the total operation time.
def r4(driving_time_hours: float, total_operation_time_hours: float) -> bool:
    if driving_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 2's load.
def r5(axle1_load_tons: float, axle2_load_tons: float) -> bool:
    if axle1_load_tons <= axle2_load_tons:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r6(axle1_weight_tons: float, axle3_weight_tons: float) -> bool:
    if axle1_weight_tons <= axle3_weight_tons:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 2.
def r7(payload_tons: float, axle2_load_tons: float) -> bool:
    if payload_tons <= axle2_load_tons:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
Idle time cannot be greater than the total operation time.
Driving time should be less than or equal to the total operation time.
The number of stops where PTO is engaged must not exceed the overall stop count.
Axle 1's load cannot exceed Axle 3's load.
The payload must not exceed the load carried by axle 3.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";"
```python
# If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if fuel_consumption_dm3_per_hour >= 5 and distance_km >= 20:
        return True
    else:
        return False

# Idle time cannot be greater than the total operation time.
def r2(idle_time_hours: float, total_operation_time_hours: float) -> bool:
    if idle_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# Driving time should be less than or equal to the total operation time.
def r3(driving_time_hours: float, total_operation_time_hours: float) -> bool:
    if driving_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r4(stops_with_PTO: int, overall_stop_count: int) -> bool:
    if stops_with_PTO <= overall_stop_count:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 3's load.
def r5(axle_1_load_tons: float, axle_3_load_tons: float) -> bool:
    if axle_1_load_tons <= axle_3_load_tons:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def r6(payload_tons: float, axle_3_load_tons: float) -> bool:
    if payload_tons <= axle_3_load_tons:
        return True
    else:
        return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r7(total_operation_time_hours: float, pto_operation_time_hours: float, driving_time_hours: float, idle_time_hours: float) -> bool:
    if total_operation_time_hours >= (pto_operation_time_hours + driving_time_hours + idle_time_hours):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
PTO operation time cannot be greater than the total operation time.
The total stop count must not be lower than the count of stops where PTO is engaged.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
The load supported by axle 1 cannot exceed that of axle 3.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"
```python
# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_h: float) -> bool:
    if fuel_consumption_dm3_h / distance_km >= 5 / 20:
        return True
    else:
        return False

# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r2(distance_km: float, fuel_consumption_dm3_100km: float) -> bool:
    if fuel_consumption_dm3_100km * (distance_km / 100) >= 40:
        return True
    else:
        return False

# PTO operation time cannot be greater than the total operation time.
def r3(pto_time_hours: float, total_operation_time_hours: float) -> bool:
    if pto_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r4(total_stop_count: int, pto_engaged_stops_count: int) -> bool:
    if total_stop_count >= pto_engaged_stops_count:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def r5(axle1_load_kg: float, axle2_load_kg: float) -> bool:
    if axle1_load_kg <= axle2_load_kg:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 3.
def r6(axle1_load_kg: float, axle3_load_kg: float) -> bool:
    if axle1_load_kg <= axle3_load_kg:
        return True
    else:
        return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r7(pto_time_hours: float, idle_time_hours: float, driving_time_hours: float, total_operation_time_hours: float) -> bool:
    if pto_time_hours + idle_time_hours + driving_time_hours <= total_operation_time_hours:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
The total operation duration must not be lower than the PTO operation time.
The total stop count must not be lower than the count of stops where PTO is engaged.
Axle 1's load cannot exceed Axle 3's load.
The payload must not exceed the load carried by axle 2.
The payload must not exceed the load carried by axle 3.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";"
```python
# Vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def fuel_consumption_rule(distance_km: float, fuel_consumption_dm3h: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3h >= 5:
        return True
    else:
        return False

# The total operation duration must not be lower than the PTO operation time.
def operation_duration_rule(operation_time: float, total_operation_time: float) -> bool:
    if total_operation_time >= operation_time:
        return True
    else:
        return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def stop_count_rule(engaged_stops: int, total_stops: int) -> bool:
    if engaged_stops <= total_stops:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 3's load.
def axle_load_rule(axle_1_load: float, axle_3_load: float) -> bool:
    if axle_1_load <= axle_3_load:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 2.
def payload_rule(axle_2_load: float, payload: float) -> bool:
    if payload <= axle_2_load:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def payload_rule_axle_3(axle_3_load: float, payload: float) -> bool:
    if payload <= axle_3_load:
        return True
    else:
        return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def total_operation_time_rule(pto_time: float, idle_time: float, driving_time: float, total_time: float) -> bool:
    if total_time >= pto_time + idle_time + driving_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
Idle time must always be less than or equal to the total operation time.
Stops with PTO engaged cannot outnumber the total stops.
The load on axle 1 must not surpass the load on axle 2.
The weight on axle 1 cannot surpass the weight on axle 3.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"
```python
# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_hour >= 5:
        return True
    else:
        return False

# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r2(distance_km: float, fuel_consumption_dm3_per_100km: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_100km >= 40:
        return True
    else:
        return False

# Idle time must always be less than or equal to the total operation time.
def r3(operation_time_hours: float, idle_time_hours: float) -> bool:
    if idle_time_hours <= operation_time_hours:
        return True
    else:
        return False

# Stops with PTO engaged cannot outnumber the total stops.
def r4(total_stops: int, pto_engaged_stops: int) -> bool:
    if pto_engaged_stops <= total_stops:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 2.
def r5(axle_load_1: float, axle_load_2: float) -> bool:
    if axle_load_1 <= axle_load_2:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r6(axle_weight_1: float, axle_weight_3: float) -> bool:
    if axle_weight_1 <= axle_weight_3:
        return True
    else:
        return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r7(operation_time_hours: float, pto_time_hours: float, idle_time_hours: float, driving_time_hours: float) -> bool:
    if operation_time_hours >= pto_time_hours + idle_time_hours + driving_time_hours:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
Total operation time shouldn’t be lower than idle time.
Stops with PTO engaged cannot outnumber the total stops.
The load on axle 1 must not surpass the load on axle 2.
Axle 1's load cannot exceed Axle 3's load.
The payload cannot exceed the capacity of axle 3.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"
```python
# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def fuel_consumption(min_distance: float, avg_fuel_consumption: float) -> bool:
    if avg_fuel_consumption >= 5 and min_distance >= 20:
        return True
    else:
        return False

# Total operation time shouldn't be lower than idle time.
def total_operation_time(total_time: float, idle_time: float) -> bool:
    if total_time >= idle_time:
        return True
    else:
        return False

# Stops with PTO engaged cannot outnumber the total stops.
def pto_stops(stops_with_pto: int, total_stops: int) -> bool:
    if stops_with_pto <= total_stops:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 2.
def axle_load(axle_1_load: float, axle_2_load: float) -> bool:
    if axle_1_load <= axle_2_load:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 3's load.
def axle_comparison(axle_1_load: float, axle_3_load: float) -> bool:
    if axle_1_load <= axle_3_load:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 3.
def payload_capacity(payload: float, axle_3_capacity: float) -> bool:
    if payload <= axle_3_capacity:
        return True
    else:
        return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def operation_time(combined_time: float, total_operation_time: float) -> bool:
    if combined_time <= total_operation_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
Total operation time shouldn’t be lower than PTO operation time.
Idle time should be less than or equal to the total operation time.
The total stop count must not be lower than the count of stops where PTO is engaged.
The load supported by axle 1 cannot exceed that of axle 2.
The payload must always be smaller than or equal to the load on axle 2.
Axle 3's load must always be equal to or greater than the payload.
";"
```python
# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def fuel_consumption(km_traveled: float, fuel_consumption_dm3h: float) -> bool:
    if km_traveled >= 20 and fuel_consumption_dm3h >= 5:
        return True
    else:
        return False

# Total operation time shouldn't be lower than PTO operation time.
def total_operation_time(operation_time: float, pto_operation_time: float) -> bool:
    if operation_time >= pto_operation_time:
        return True
    else:
        return False

# Idle time should be less than or equal to the total operation time.
def idle_time(idle_time: float, total_operation_time: float) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def stop_count(total_stops: int, pto_engaged_stops: int) -> bool:
    if total_stops >= pto_engaged_stops:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 2.
def axle_load(axle_1_load: float, axle_2_load: float) -> bool:
    if axle_1_load <= axle_2_load:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 2.
def payload_and_axle_2(payload: float, axle_2_load: float) -> bool:
    if payload <= axle_2_load:
        return True
    else:
        return False

# Axle 3's load must always be equal to or greater than the payload.
def axle_3_load(axle_3_load: float, payload: float) -> bool:
    if axle_3_load >= payload:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
PTO operation time should be less than or equal to the total operation time.
Total operation time shouldn’t be lower than idle time.
The load on axle 1 must not surpass the load on axle 2.
Axle 2's load must always be equal to or greater than the payload.
Payload must remain below or equal to the load carried by axle 3.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";"
```python
# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def fuel_consumption_check(distance_km: float, fuel_consumption_dm3_100km: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_100km >= 40:
        return True
    else:
        return False

# PTO operation time should be less than or equal to the total operation time.
def pto_time_check(pto_time_seconds: float, total_operation_time_seconds: float) -> bool:
    if pto_time_seconds <= total_operation_time_seconds:
        return True
    else:
        return False

# Total operation time shouldn’t be lower than idle time.
def total_operation_idle_check(total_operation_time_seconds: float, idle_time_seconds: float) -> bool:
    if total_operation_time_seconds >= idle_time_seconds:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 2.
def axle_load_check(axle1_load_kg: float, axle2_load_kg: float) -> bool:
    if axle1_load_kg <= axle2_load_kg:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def payload_axle2_check(payload_kg: float, axle2_load_kg: float) -> bool:
    if payload_kg <= axle2_load_kg:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 3.
def payload_axle3_check(payload_kg: float, axle3_load_kg: float) -> bool:
    if payload_kg <= axle3_load_kg:
        return True
    else:
        return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def total_operation_combined_check(total_operation_time_seconds: float, pto_time_seconds: float, idle_time_seconds: float, driving_time_seconds: float) -> bool:
    if total_operation_time_seconds >= (pto_time_seconds + idle_time_seconds + driving_time_seconds):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
The total operation duration must not be lower than the PTO operation time.
Total operation time should shouldn’t be lower than driving time.
The total stop count must not be lower than the count of stops where PTO is engaged.
The payload must not exceed the load carried by axle 3.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"
```python
# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_h: float) -> bool:
    if fuel_consumption_dm3_h / (distance_km / 3600) >= 5:
        return True
    else:
        return False

# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r2(distance_km: float, fuel_consumption_dm3_100km: float) -> bool:
    if fuel_consumption_dm3_100km * (distance_km / 100) >= 40:
        return True
    else:
        return False

# The total operation duration must not be lower than the PTO operation time.
def r3(total_operation_time: float, pto_operation_time: float) -> bool:
    if total_operation_time >= pto_operation_time:
        return True
    else:
        return False

# Total operation time should shouldn’t be lower than driving time.
def r4(total_operation_time: float, driving_time: float) -> bool:
    if total_operation_time >= driving_time:
        return True
    else:
        return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r5(total_stop_count: int, pto_engaged_stops_count: int) -> bool:
    if total_stop_count >= pto_engaged_stops_count:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def r6(payload_kg: float, load_axle3_kg: float) -> bool:
    if payload_kg <= load_axle3_kg:
        return True
    else:
        return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r7(pto_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
    if pto_time + idle_time + driving_time <= total_operation_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
The total operation durationmust not be lower than the driving time.
Stops with PTO engaged should never outnumber total stops.
The load on axle 1 must not surpass the load on axle 3.
The payload cannot exceed the capacity of axle 2.
The payload must not exceed the load carried by axle 3.
";"
```python
# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_h: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_h >= 5:
        return True
    else:
        return False

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r2(distance_km: float, fuel_consumption_dm3_100km: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_100km >= 40:
        return True
    else:
        return False

# The total operation duration must not be lower than the driving time.
def r3(operation_duration_hours: float, driving_time_hours: float) -> bool:
    if operation_duration_hours >= driving_time_hours:
        return True
    else:
        return False

# Stops with PTO engaged should never outnumber total stops.
def r4(total_stops: int, pto_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 3.
def r5(axle1_load: float, axle3_load: float) -> bool:
    if axle1_load <= axle3_load:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 2.
def r6(payload_kg: float, axle2_capacity_kg: float) -> bool:
    if payload_kg <= axle2_capacity_kg:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def r7(payload_kg: float, axle3_load: float) -> bool:
    if payload_kg <= axle3_load:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
PTO operation time must be less than or equal to the total operation time.
The total operation durationmust not be lower than the driving time.
The number of stops where PTO is engaged must not exceed the overall stop count.
The load supported by axle 1 cannot exceed that of axle 2.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
Axle 2's load must always be equal to or greater than the payload.
";"
```python
# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def fuel_consumption(km_traveled: float, fuel_consumption_dm3h: float) -> bool:
    if km_traveled >= 20 and fuel_consumption_dm3h >= 5:
        return True
    else:
        return False

# PTO operation time must be less than or equal to the total operation time.
def pto_operation_time(operation_time: float, pto_operation_time: float) -> bool:
    if pto_operation_time <= operation_time:
        return True
    else:
        return False

# The total operation duration must not be lower than the driving time.
def total_operation_driving_time(total_operation_time: float, driving_time: float) -> bool:
    if total_operation_time >= driving_time:
        return True
    else:
        return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def stops_p_to_engaged(stops_count: int, p_to_engaged_stops: int) -> bool:
    if p_to_engaged_stops <= stops_count:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 2.
def load_axle_1(axle_1_load: float, axle_2_load: float) -> bool:
    if axle_1_load <= axle_2_load:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def load_axle_1_axle_3(axle_1_load: float, axle_3_load: float) -> bool:
    if axle_1_load <= axle_3_load:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def load_axle_2_payload(axle_2_load: float, payload: float) -> bool:
    if axle_2_load >= payload:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
The total operation duration must not be lower than the idle time.
Stops with PTO engaged should never outnumber total stops.
The load supported by axle 1 cannot exceed that of axle 2.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
The payload cannot exceed the capacity of axle 2.
The payload cannot exceed the capacity of axle 3.
";"
```python
# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r1(trip_km: int, fuel_consumption_dm3_100km: float) -> bool:
    if trip_km >= 20 and fuel_consumption_dm3_100km == 40:
        return True
    else:
        return False

# The total operation duration must not be lower than the idle time.
def r2(total_operation_duration: int, idle_time: int) -> bool:
    if total_operation_duration >= idle_time:
        return True
    else:
        return False

# Stops with PTO engaged should never outnumber total stops.
def r3(stops_with_PTO_engaged: int, total_stops: int) -> bool:
    if stops_with_PTO_engaged <= total_stops:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r4(axle_1_load: int, axle_2_load: int) -> bool:
    if axle_1_load <= axle_2_load:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r5(axle_1_load: int, axle_3_load: int) -> bool:
    if axle_1_load <= axle_3_load:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 2.
def r6(payload: int, axle_2_capacity: int) -> bool:
    if payload <= axle_2_capacity:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 3.
def r7(payload: int, axle_3_capacity: int) -> bool:
    if payload <= axle_3_capacity:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
The total operation duration must not be lower than the idle time.
Stops with PTO engaged cannot outnumber the total stops.
Axle 1's load cannot exceed Axle 3's load.
The payload must always be smaller than or equal to the load on axle 2.
The payload must not exceed the load carried by axle 3.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";"
```python
# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3h: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3h >= 5:
        return True
    else:
        return False

# The total operation duration must not be lower than the idle time.
def r2(total_operation_duration: float, idle_time: float) -> bool:
    if total_operation_duration >= idle_time:
        return True
    else:
        return False

# Stops with PTO engaged cannot outnumber the total stops.
def r3(stops_with_pto: int, total_stops: int) -> bool:
    if stops_with_pto <= total_stops:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 3's load.
def r4(axle_1_load: float, axle_3_load: float) -> bool:
    if axle_1_load <= axle_3_load:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 2.
def r5(payload: float, axle_2_load: float) -> bool:
    if payload <= axle_2_load:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def r6(payload: float, axle_3_load: float) -> bool:
    if payload <= axle_3_load:
        return True
    else:
        return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r7(total_operation_duration: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    if total_operation_duration >= (pto_time + idle_time + driving_time):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
PTO operation time should be less than or equal to the total operation time.
Driving time should be less than or equal to the total operation time.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
The payload cannot exceed the capacity of axle 2.
The payload cannot exceed the capacity of axle 3.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"
```python
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def fuel_consumption_rule(distance_km, fuel_consumption_dm3h):
    if distance_km >= 20 and fuel_consumption_dm3h < 5:
        return False
    return True

# PTO operation time should be less than or equal to the total operation time.
def pto_time_rule(pto_time, total_operation_time):
    if pto_time > total_operation_time:
        return False
    return True

# Driving time should be less than or equal to the total operation time.
def driving_time_rule(driving_time, total_operation_time):
    if driving_time > total_operation_time:
        return False
    return True

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def axle_load_rule(axle_1_load, axle_2_load):
    if axle_1_load > axle_2_load:
        return False
    return True

# The payload cannot exceed the capacity of axle 2.
def payload_capacity_rule(payload, axle_2_capacity):
    if payload > axle_2_capacity:
        return False
    return True

# The payload cannot exceed the capacity of axle 3.
def payload_capacity_rule_axle_3(payload, axle_3_capacity):
    if payload > axle_3_capacity:
        return False
    return True

# Total operation time should be at least the sum of PTO, idle, and driving times.
def total_operation_time_rule(pto_time, idle_time, driving_time):
    if pto_time + idle_time + driving_time < total_operation_time:
        return False
    return True
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
Total operation time shouldn’t be lower than idle time.
Stops with PTO engaged cannot outnumber the total stops.
The weight on axle 1 cannot surpass the weight on axle 2.
The weight on axle 1 cannot surpass the weight on axle 3.
Axle 2's load must always be equal to or greater than the payload.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"
```python
# The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def fuel_consumption(min_fuel_consumption: float, distance_km: float) -> bool:
    if distance_km >= 20 and min_fuel_consumption >= 5:
        return True
    else:
        return False

# Total operation time shouldn't be lower than idle time.
def total_operation_time(total_time: float, idle_time: float) -> bool:
    if total_time >= idle_time:
        return True
    else:
        return False

# Stops with PTO engaged cannot outnumber the total stops.
def stops_with_PTO(stops_with_PTO: int, total_stops: int) -> bool:
    if stops_with_PTO <= total_stops:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def weight_on_axle_1(weight_axle_1: float, weight_axle_2: float) -> bool:
    if weight_axle_1 <= weight_axle_2:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def weight_on_axle_1_vs_axle_3(weight_axle_1: float, weight_axle_3: float) -> bool:
    if weight_axle_1 <= weight_axle_3:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def axle_2_load(axle_2_load: float, payload: float) -> bool:
    if axle_2_load >= payload:
        return True
    else:
        return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def total_time_requirements(driving_time: float, pto_time: float, idle_time: float) -> bool:
    if driving_time + pto_time + idle_time <= total_operation_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
PTO operation time cannot be greater than the total operation time.
Idle time cannot be greater than the total operation time.
The number of stops where PTO is engaged must not exceed the overall stop count.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
Payload must remain below or equal to the load carried by axle 3.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"
```python
# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def fuel_consumption_1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_hour >= 5:
        return True
    else:
        return False

# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def fuel_consumption_2(distance_km: float, fuel_consumption_dm3_per_100km: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_100km >= 40:
        return True
    else:
        return False

# PTO operation time cannot be greater than the total operation time.
def pto_time_total_operation_time(operation_time_hours: float, total_operation_time_hours: float) -> bool:
    if operation_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# Idle time cannot be greater than the total operation time.
def idle_time_total_operation_time(idle_time_hours: float, total_operation_time_hours: float) -> bool:
    if idle_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def stops_p_to_o_stops(stop_count: int, p_to_o_stops: int) -> bool:
    if p_to_o_stops <= stop_count:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def load_axle_1_load_axle_2(load_axle_1: float, load_axle_2: float) -> bool:
    if load_axle_1 <= load_axle_2:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 3.
def payload_load_axle_3(payload: float, load_axle_3: float) -> bool:
    if payload <= load_axle_3:
        return True
    else:
        return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def combined_time_total_operation_time(driving_time_hours: float, pto_time_hours: float, idle_time_hours: float, total_operation_time_hours: float) -> bool:
    if (driving_time_hours + pto_time_hours + idle_time_hours) <= total_operation_time_hours:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
PTO operation time must be less than or equal to the total operation time.
Idle time should be less than or equal to the total operation time.
Driving time must always be less than or equal to the total operation time.
The total stop count must not be lower than the count of stops where PTO is engaged.
The load supported by axle 1 cannot exceed that of axle 2.
The payload must not exceed the load carried by axle 2.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";"
```python
# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def min_fuel_consumption(distance_km: float, fuel_consumption_dm3: float) -> bool:
    if fuel_consumption_dm3 / distance_km >= 0.4:
        return True
    else:
        return False

# PTO operation time must be less than or equal to the total operation time.
def pto_time_total_operation_time(pto_time: float, total_operation_time: float) -> bool:
    if pto_time <= total_operation_time:
        return True
    else:
        return False

# Idle time should be less than or equal to the total operation time.
def idle_time_total_operation_time(idle_time: float, total_operation_time: float) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# Driving time must always be less than or equal to the total operation time.
def driving_time_total_operation_time(driving_time: float, total_operation_time: float) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def total_stops_engaged_stops(pto_engaged_stops: int, total_stops: int) -> bool:
    if pto_engaged_stops <= total_stops:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 2.
def load_axle_1_load_axle_2(load_axle_1: float, load_axle_2: float) -> bool:
    if load_axle_1 <= load_axle_2:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 2.
def payload_load_axle_2(payload: float, load_axle_2: float) -> bool:
    if payload <= load_axle_2:
        return True
    else:
        return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def total_operation_time_combined_times(total_operation_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    if total_operation_time >= pto_time + idle_time + driving_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
PTO operation time cannot be greater than the total operation time.
Total operation time shouldn’t be lower than idle time.
PTO-engaged stops cannot exceed the total number of stops.
The load supported by axle 1 cannot exceed that of axle 2.
The load on axle 1 must not surpass the load on axle 3.
The payload cannot exceed the capacity of axle 3.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";"
```python
# If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if fuel_consumption_dm3_per_hour >= 5 and distance_km >= 20:
        return True
    else:
        return False

# PTO operation time cannot be greater than the total operation time.
def r2(pto_operation_time: float, total_operation_time: float) -> bool:
    if pto_operation_time <= total_operation_time:
        return True
    else:
        return False

# Total operation time shouldn't be lower than idle time.
def r3(total_operation_time: float, idle_time: float) -> bool:
    if total_operation_time >= idle_time:
        return True
    else:
        return False

# PTO-engaged stops cannot exceed the total number of stops.
def r4(pto_engaged_stops: int, total_stops: int) -> bool:
    if pto_engaged_stops <= total_stops:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r5(axle_1_load: float, axle_2_load: float) -> bool:
    if axle_1_load <= axle_2_load:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 3.
def r6(axle_1_load: float, axle_3_load: float) -> bool:
    if axle_1_load <= axle_3_load:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 3.
def r7(payload: float, axle_3_capacity: float) -> bool:
    if payload <= axle_3_capacity:
        return True
    else:
        return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r8(total_operation_time: float, pto_operation_time: float, idle_time: float, driving_time: float) -> bool:
    if total_operation_time >= pto_operation_time + idle_time + driving_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
The total operation duration must not be lower than the idle time.
Driving time must always be less than or equal to the total operation time.
The total stop count must not be lower than the count of stops where PTO is engaged.
The load on axle 1 must not surpass the load on axle 2.
The weight on axle 1 cannot surpass the weight on axle 3.
Axle 2's load must always be equal to or greater than the payload.
";"
```python
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_hour >= 5:
        return True
    else:
        return False

# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def r2(distance_km: float, fuel_consumption_dm3_per_100km: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_100km >= 40:
        return True
    else:
        return False

# The total operation duration must not be lower than the idle time.
def r3(total_operation_time_seconds: float, idle_time_seconds: float) -> bool:
    if total_operation_time_seconds >= idle_time_seconds:
        return True
    else:
        return False

# Driving time must always be less than or equal to the total operation time.
def r4(driving_time_seconds: float, total_operation_time_seconds: float) -> bool:
    if driving_time_seconds <= total_operation_time_seconds:
        return True
    else:
        return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r5(total_stop_count: int, pto_engaged_stops_count: int) -> bool:
    if total_stop_count >= pto_engaged_stops_count:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 2.
def r6(axle1_load_kg: float, axle2_load_kg: float) -> bool:
    if axle1_load_kg <= axle2_load_kg:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r7(axle1_weight_kg: float, axle3_weight_kg: float) -> bool:
    if axle1_weight_kg <= axle3_weight_kg:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def r8(axle2_load_kg: float, payload_kg: float) -> bool:
    if axle2_load_kg >= payload_kg:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
Total operation time shouldn’t be lower than PTO operation time.
Idle time must always be less than or equal to the total operation time.
The total operation durationmust not be lower than the driving time.
The payload must not exceed the load carried by axle 2.
The payload must always be smaller than or equal to the load on axle 3.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";"
```python
# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_hour >= 5:
        return True
    else:
        return False

# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r2(distance_km: float, fuel_consumption_dm3_per_100km: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_100km >= 40:
        return True
    else:
        return False

# Total operation time shouldn't be lower than PTO operation time.
def r3(total_operation_time_hours: float, pto_operation_time_hours: float) -> bool:
    if total_operation_time_hours >= pto_operation_time_hours:
        return True
    else:
        return False

# Idle time must always be less than or equal to the total operation time.
def r4(idle_time_hours: float, total_operation_time_hours: float) -> bool:
    if idle_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# The total operation duration must not be lower than the driving time.
def r5(total_operation_time_hours: float, driving_time_hours: float) -> bool:
    if total_operation_time_hours >= driving_time_hours:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 2.
def r6(payload_kg: float, load_axle2_kg: float) -> bool:
    if payload_kg <= load_axle2_kg:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 3.
def r7(payload_kg: float, load_axle3_kg: float) -> bool:
    if payload_kg <= load_axle3_kg:
        return True
    else:
        return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r8(total_operation_time_hours: float, pto_operation_time_hours: float, idle_time_hours: float, driving_time_hours: float) -> bool:
    if total_operation_time_hours >= (pto_operation_time_hours + idle_time_hours + driving_time_hours):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
PTO operation time cannot be greater than the total operation time.
The total operation duration must not be lower than the idle time.
Stops with PTO engaged cannot outnumber the total stops.
The weight on axle 1 cannot surpass the weight on axle 3.
Axle 2's load must always be equal to or greater than the payload.
Payload must remain below or equal to the load carried by axle 3.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"
```python
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_hour >= 5:
        return True
    else:
        return False

# PTO operation time cannot be greater than the total operation time.
def r2(pto_operation_time_hours: float, total_operation_time_hours: float) -> bool:
    if pto_operation_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# The total operation duration must not be lower than the idle time.
def r3(total_operation_time_hours: float, idle_time_hours: float) -> bool:
    if total_operation_time_hours >= idle_time_hours:
        return True
    else:
        return False

# Stops with PTO engaged cannot outnumber the total stops.
def r4(stops_with_pto: int, total_stops: int) -> bool:
    if stops_with_pto <= total_stops:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r5(weight_axle_1_kg: float, weight_axle_3_kg: float) -> bool:
    if weight_axle_1_kg <= weight_axle_3_kg:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def r6(load_axle_2_kg: float, payload_kg: float) -> bool:
    if load_axle_2_kg >= payload_kg:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 3.
def r7(payload_kg: float, load_axle_3_kg: float) -> bool:
    if payload_kg <= load_axle_3_kg:
        return True
    else:
        return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r8(pto_operation_time_hours: float, idle_time_hours: float, driving_time_hours: float, total_operation_time_hours: float) -> bool:
    if pto_operation_time_hours + idle_time_hours + driving_time_hours <= total_operation_time_hours:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
PTO operation time should be less than or equal to the total operation time.
Idle time should be less than or equal to the total operation time.
The total operation durationmust not be lower than the driving time.
The number of stops where PTO is engaged must not exceed the overall stop count.
The load supported by axle 1 cannot exceed that of axle 3.
The payload must not exceed the load carried by axle 3.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";"
```python
# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r1(distance_km: float, fuel_consumption_dm3_100km: float) -> bool:
    if fuel_consumption_dm3_100km * 100 / distance_km >= 40:
        return True
    else:
        return False

# PTO operation time should be less than or equal to the total operation time.
def r2(pto_time: float, total_operation_time: float) -> bool:
    if pto_time <= total_operation_time:
        return True
    else:
        return False

# Idle time should be less than or equal to the total operation time.
def r3(idle_time: float, total_operation_time: float) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# The total operation duration must not be lower than the driving time.
def r4(total_operation_time: float, driving_time: float) -> bool:
    if total_operation_time >= driving_time:
        return True
    else:
        return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r5(stops_with_pto: int, overall_stop_count: int) -> bool:
    if stops_with_pto <= overall_stop_count:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 3.
def r6(axle1_load: float, axle3_load: float) -> bool:
    if axle1_load <= axle3_load:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def r7(payload: float, axle3_load: float) -> bool:
    if payload <= axle3_load:
        return True
    else:
        return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r8(total_operation_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    if total_operation_time >= pto_time + idle_time + driving_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
PTO operation time should be less than or equal to the total operation time.
Total operation time should shouldn’t be lower than driving time.
The total stop count must not be lower than the count of stops where PTO is engaged.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
Payload must remain below or equal to the load carried by axle 2.
The payload cannot exceed the capacity of axle 3.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";"
```python
# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def fuel_consumption(min_km: int, avg_fuel_consumption_dm3h: float) -> bool:
    if avg_fuel_consumption_dm3h >= 5 and min_km >= 20:
        return True
    else:
        return False

# PTO operation time should be less than or equal to the total operation time.
def pto_operation_time(total_operation_time: float, pto_operation_time: float) -> bool:
    if pto_operation_time <= total_operation_time:
        return True
    else:
        return False

# Total operation time should shouldn’t be lower than driving time.
def total_operation_time(driving_time: float, total_operation_time: float) -> bool:
    if total_operation_time >= driving_time:
        return True
    else:
        return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def total_stop_count(stops_with_pto: int, total_stops: int) -> bool:
    if total_stops >= stops_with_pto:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def load_on_axle(load_axle1: float, load_axle3: float) -> bool:
    if load_axle1 <= load_axle3:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def payload_and_load(payload: float, load_axle2: float) -> bool:
    if payload <= load_axle2:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 3.
def payload_capacity(payload: float, capacity_axle3: float) -> bool:
    if payload <= capacity_axle3:
        return True
    else:
        return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def total_operation_time_sum(pto_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
    if total_operation_time >= (pto_time + idle_time + driving_time):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
PTO operation time must be less than or equal to the total operation time.
Idle time should be less than or equal to the total operation time.
Driving time should be less than or equal to the total operation time.
Stops with PTO engaged cannot outnumber the total stops.
The load supported by axle 1 cannot exceed that of axle 2.
Payload must remain below or equal to the load carried by axle 3.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";"
```python
# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def fuel_consumption_rule(distance_km: float, fuel_consumption_dm3_100km: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_100km < (40 / 100):
        return True
    else:
        return False

# PTO operation time must be less than or equal to the total operation time.
def pto_time_rule(total_operation_time: float, pto_operation_time: float) -> bool:
    if pto_operation_time <= total_operation_time:
        return True
    else:
        return False

# Idle time should be less than or equal to the total operation time.
def idle_time_rule(total_operation_time: float, idle_time: float) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# Driving time should be less than or equal to the total operation time.
def driving_time_rule(total_operation_time: float, driving_time: float) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False

# Stops with PTO engaged cannot outnumber the total stops.
def stop_count_rule(total_stops: int, pto_engaged_stops: int) -> bool:
    if pto_engaged_stops <= total_stops:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 2.
def axle_load_rule(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load <= axle2_load:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 3.
def payload_axle3_rule(payload: float, axle3_load: float) -> bool:
    if payload <= axle3_load:
        return True
    else:
        return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def total_operation_time_rule(total_operation_time: float, pto_operation_time: float, idle_time: float, driving_time: float) -> bool:
    if total_operation_time >= (pto_operation_time + idle_time + driving_time):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
Idle time should be less than or equal to the total operation time.
Driving time should be less than or equal to the total operation time.
The number of stops where PTO is engaged must not exceed the overall stop count.
The load on axle 1 must not surpass the load on axle 2.
Payload must remain below or equal to the load carried by axle 2.
Payload must remain below or equal to the load carried by axle 3.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"
```python
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if fuel_consumption_dm3_per_hour <= (20 * 1000) / distance_km:
        return True
    else:
        return False

# Idle time should be less than or equal to the total operation time.
def r2(idle_time_hours: float, total_operation_time_hours: float) -> bool:
    if idle_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# Driving time should be less than or equal to the total operation time.
def r3(driving_time_hours: float, total_operation_time_hours: float) -> bool:
    if driving_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r4(stops_with_PTO: int, overall_stop_count: int) -> bool:
    if stops_with_PTO <= overall_stop_count:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 2.
def r5(load_axle_1: float, load_axle_2: float) -> bool:
    if load_axle_1 <= load_axle_2:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def r6(payload: float, load_axle_2: float) -> bool:
    if payload <= load_axle_2:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 3.
def r7(payload: float, load_axle_3: float) -> bool:
    if payload <= load_axle_3:
        return True
    else:
        return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r8(pto_operation_time_hours: float, idle_time_hours: float, driving_time_hours: float, total_operation_time_hours: float) -> bool:
    if pto_operation_time_hours + idle_time_hours + driving_time_hours <= total_operation_time_hours:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
Stops with PTO engaged should never outnumber total stops.
The load supported by axle 1 cannot exceed that of axle 2.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
The payload must not exceed the load carried by axle 2.
Payload must remain below or equal to the load carried by axle 3.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";"
```python
# If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if fuel_consumption_dm3_per_hour / distance_km >= 5 / 20:
        return True
    else:
        return False

# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r2(distance_km: float, fuel_consumption_dm3_per_100km: float) -> bool:
    if fuel_consumption_dm3_per_100km / distance_km >= 40 / 100:
        return True
    else:
        return False

# Stops with PTO engaged should never outnumber total stops.
def r3(total_stops: int, pto_engaged_stops: int) -> bool:
    if pto_engaged_stops <= total_stops:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r4(axle_1_load: float, axle_2_load: float) -> bool:
    if axle_1_load <= axle_2_load:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r5(axle_1_load: float, axle_3_load: float) -> bool:
    if axle_1_load <= axle_3_load:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 2.
def r6(payload: float, axle_2_load: float) -> bool:
    if payload <= axle_2_load:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 3.
def r7(payload: float, axle_3_load: float) -> bool:
    if payload <= axle_3_load:
        return True
    else:
        return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r8(operation_duration_hours: float, pto_time_hours: float, idle_time_hours: float, driving_time_hours: float) -> bool:
    if operation_duration_hours >= pto_time_hours + idle_time_hours + driving_time_hours:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
PTO operation time must be less than or equal to the total operation time.
The total stop count must not be lower than the count of stops where PTO is engaged.
The load supported by axle 1 cannot exceed that of axle 2.
Axle 1's load cannot exceed Axle 3's load.
The payload must always be smaller than or equal to the load on axle 2.
Axle 3's load must always be equal to or greater than the payload.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";"
```python
# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_hour >= 5:
        return True
    else:
        return False

# PTO operation time must be less than or equal to the total operation time.
def r2(pto_time_hours: float, total_operation_time_hours: float) -> bool:
    if pto_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r3(total_stop_count: int, pto_engaged_stops_count: int) -> bool:
    if total_stop_count >= pto_engaged_stops_count:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r4(axle_1_load_kg: float, axle_2_load_kg: float) -> bool:
    if axle_1_load_kg <= axle_2_load_kg:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 3's load.
def r5(axle_1_load_kg: float, axle_3_load_kg: float) -> bool:
    if axle_1_load_kg <= axle_3_load_kg:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 2.
def r6(payload_kg: float, axle_2_load_kg: float) -> bool:
    if payload_kg <= axle_2_load_kg:
        return True
    else:
        return False

# Axle 3's load must always be equal to or greater than the payload.
def r7(axle_3_load_kg: float, payload_kg: float) -> bool:
    if axle_3_load_kg >= payload_kg:
        return True
    else:
        return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r8(total_operation_duration_hours: float, pto_time_hours: float, idle_time_hours: float, driving_time_hours: float) -> bool:
    if total_operation_duration_hours >= (pto_time_hours + idle_time_hours + driving_time_hours):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
PTO operation time should be less than or equal to the total operation time.
Idle time cannot be greater than the total operation time.
The total operation durationmust not be lower than the driving time.
The total stop count must not be lower than the count of stops where PTO is engaged.
The load supported by axle 1 cannot exceed that of axle 3.
Payload must remain below or equal to the load carried by axle 3.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";"
```python
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_hour >= 5:
        return True
    else:
        return False

# PTO operation time should be less than or equal to the total operation time.
def r2(pto_time_hours: float, total_operation_time_hours: float) -> bool:
    if pto_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# Idle time cannot be greater than the total operation time.
def r3(idle_time_hours: float, total_operation_time_hours: float) -> bool:
    if idle_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# The total operation duration must not be lower than the driving time.
def r4(total_operation_time_hours: float, driving_time_hours: float) -> bool:
    if total_operation_time_hours >= driving_time_hours:
        return True
    else:
        return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r5(total_stop_count: int, pto_engaged_stops_count: int) -> bool:
    if total_stop_count >= pto_engaged_stops_count:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 3.
def r6(axle_1_load_kg: float, axle_3_load_kg: float) -> bool:
    if axle_1_load_kg <= axle_3_load_kg:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 3.
def r7(payload_kg: float, axle_3_load_kg: float) -> bool:
    if payload_kg <= axle_3_load_kg:
        return True
    else:
        return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r8(total_operation_time_hours: float, pto_time_hours: float, idle_time_hours: float, driving_time_hours: float) -> bool:
    if total_operation_time_hours >= (pto_time_hours + idle_time_hours + driving_time_hours):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
PTO operation time must be less than or equal to the total operation time.
The total operation duration must not be lower than the idle time.
PTO-engaged stops cannot exceed the total number of stops.
The load on axle 1 must not surpass the load on axle 2.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
The payload must not exceed the load carried by axle 3.
";"
```python
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_hour >= 5:
        return True
    else:
        return False

# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def r2(distance_km: float, min_avg_fuel_consumption_dm3_per_100km: float) -> bool:
    if distance_km >= 20 and min_avg_fuel_consumption_dm3_per_100km == 40:
        return True
    else:
        return False

# PTO operation time must be less than or equal to the total operation time.
def r3(pto_operation_time_hours: float, total_operation_time_hours: float) -> bool:
    if pto_operation_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# The total operation duration must not be lower than the idle time.
def r4(total_operation_time_hours: float, idle_time_hours: float) -> bool:
    if total_operation_time_hours >= idle_time_hours:
        return True
    else:
        return False

# PTO-engaged stops cannot exceed the total number of stops.
def r5(pto_engaged_stops: int, total_stops: int) -> bool:
    if pto_engaged_stops <= total_stops:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 2.
def r6(load_axle1_kg: float, load_axle2_kg: float) -> bool:
    if load_axle1_kg <= load_axle2_kg:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r7(load_axle1_kg: float, load_axle3_kg: float) -> bool:
    if load_axle1_kg <= load_axle3_kg:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def r8(payload_kg: float, load_axle3_kg: float) -> bool:
    if payload_kg <= load_axle3_kg:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
Total operation time should shouldn’t be lower than driving time.
Stops with PTO engaged cannot outnumber the total stops.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
The payload must not exceed the load carried by axle 2.
Payload must remain below or equal to the load carried by axle 3.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";"
```python
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_hour >= 5:
        return True
    else:
        return False

# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def r2(distance_km: float, fuel_consumption_dm3_per_100km: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_100km == 40:
        return True
    else:
        return False

# Total operation time should shouldn’t be lower than driving time.
def r3(total_operation_time_seconds: float, driving_time_seconds: float) -> bool:
    if total_operation_time_seconds >= driving_time_seconds:
        return True
    else:
        return False

# Stops with PTO engaged cannot outnumber the total stops.
def r4(total_stops: int, pto_engaged_stops: int) -> bool:
    if pto_engaged_stops <= total_stops:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def r5(axle1_load_kg: float, axle2_load_kg: float) -> bool:
    if axle1_load_kg <= axle2_load_kg:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 2.
def r6(payload_kg: float, axle2_load_kg: float) -> bool:
    if payload_kg <= axle2_load_kg:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 3.
def r7(payload_kg: float, axle3_load_kg: float) -> bool:
    if payload_kg <= axle3_load_kg:
        return True
    else:
        return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r8(total_operation_time_seconds: float, pto_operation_time_seconds: float, idle_time_seconds: float, driving_time_seconds: float) -> bool:
    if total_operation_time_seconds >= (pto_operation_time_seconds + idle_time_seconds + driving_time_seconds):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
Total operation time shouldn’t be lower than PTO operation time.
Idle time cannot be greater than the total operation time.
The total operation durationmust not be lower than the driving time.
PTO-engaged stops cannot exceed the total number of stops.
Axle 2's load must always be equal to or greater than the payload.
Axle 3's load must always be equal to or greater than the payload.
";"
```python
# Vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def fuel_consumption_rule(distance_km: int, fuel_consumption_dm3_h: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_h >= 5:
        return True
    else:
        return False

# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def fuel_efficiency_rule(distance_km: int, fuel_consumption_dm3_h: float) -> bool:
    if distance_km >= 20 and (fuel_consumption_dm3_h * 100) / distance_km >= 40:
        return True
    else:
        return False

# Total operation time shouldn't be lower than PTO operation time.
def total_operation_time_rule(total_time_seconds: int, pto_time_seconds: int) -> bool:
    if total_time_seconds >= pto_time_seconds:
        return True
    else:
        return False

# Idle time cannot be greater than the total operation time.
def idle_time_rule(total_time_seconds: int, idle_time_seconds: int) -> bool:
    if idle_time_seconds <= total_time_seconds:
        return True
    else:
        return False

# The total operation duration must not be lower than the driving time.
def driving_time_rule(total_time_seconds: int, driving_time_seconds: int) -> bool:
    if total_time_seconds >= driving_time_seconds:
        return True
    else:
        return False

# PTO-engaged stops cannot exceed the total number of stops.
def pto_stops_rule(total_stops: int, pto_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def axle_2_load_rule(payload_kg: int, axle_2_load_kg: int) -> bool:
    if axle_2_load_kg >= payload_kg:
        return True
    else:
        return False

# Axle 3's load must always be equal to or greater than the payload.
def axle_3_load_rule(payload_kg: int, axle_3_load_kg: int) -> bool:
    if axle_3_load_kg >= payload_kg:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
PTO operation time must be less than or equal to the total operation time.
Idle time must always be less than or equal to the total operation time.
Total operation time should shouldn’t be lower than driving time.
The total stop count must not be lower than the count of stops where PTO is engaged.
The load supported by axle 1 cannot exceed that of axle 2.
The weight on axle 1 cannot surpass the weight on axle 3.
The payload must not exceed the load carried by axle 3.
";"
```python
# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def min_fuel_consumption(distance_km: int, fuel_consumption_dm3: float) -> bool:
    if fuel_consumption_dm3 / distance_km >= 0.4:
        return True
    else:
        return False

# PTO operation time must be less than or equal to the total operation time.
def pto_time_rule(operation_time_seconds: int, pto_operation_time_seconds: int) -> bool:
    if pto_operation_time_seconds <= operation_time_seconds:
        return True
    else:
        return False

# Idle time must always be less than or equal to the total operation time.
def idle_time_rule(operation_time_seconds: int, idle_time_seconds: int) -> bool:
    if idle_time_seconds <= operation_time_seconds:
        return True
    else:
        return False

# Total operation time should not be lower than driving time.
def total_operation_driving_time_rule(operation_time_seconds: int, driving_time_seconds: int) -> bool:
    if operation_time_seconds >= driving_time_seconds:
        return True
    else:
        return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def stop_count_rule(total_stops: int, pto_engaged_stops: int) -> bool:
    if total_stops >= pto_engaged_stops:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 2.
def axle_load_rule(axle_1_load_kg: int, axle_2_load_kg: int) -> bool:
    if axle_1_load_kg <= axle_2_load_kg:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def axle_weight_rule(axle_1_weight_kg: int, axle_3_weight_kg: int) -> bool:
    if axle_1_weight_kg <= axle_3_weight_kg:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def payload_rule(payload_kg: int, axle_3_load_kg: int) -> bool:
    if payload_kg <= axle_3_load_kg:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
PTO operation time cannot be greater than the total operation time.
Total operation time should shouldn’t be lower than driving time.
The total stop count must not be lower than the count of stops where PTO is engaged.
The load supported by axle 1 cannot exceed that of axle 2.
The payload must always be smaller than or equal to the load on axle 2.
The payload must always be smaller than or equal to the load on axle 3.
";"
```python
# The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def fuel_consumption(min_fuel_consumption: float, traveled_km: float) -> bool:
    if traveled_km >= 20 and min_fuel_consumption >= 5:
        return True
    else:
        return False

# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def fuel_consumption_per_distance(min_fuel_consumption_per_km: float, traveled_km: float) -> bool:
    if traveled_km >= 20 and min_fuel_consumption_per_km >= 40 / 100:
        return True
    else:
        return False

# PTO operation time cannot be greater than the total operation time.
def pto_operation_time(total_operation_time: float, pto_operation_time: float) -> bool:
    if pto_operation_time <= total_operation_time:
        return True
    else:
        return False

# Total operation time should shouldn’t be lower than driving time.
def total_operation_time(driving_time: float, total_operation_time: float) -> bool:
    if total_operation_time >= driving_time:
        return True
    else:
        return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def stop_count(stops_with_pto_engaged: int, total_stop_count: int) -> bool:
    if total_stop_count >= stops_with_pto_engaged:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 2.
def load_on_axle(load_on_axle_1: float, load_on_axle_2: float) -> bool:
    if load_on_axle_1 <= load_on_axle_2:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 2.
def payload_and_load_on_axle(payload: float, load_on_axle_2: float) -> bool:
    if payload <= load_on_axle_2:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 3.
def payload_and_load_on_axle_3(payload: float, load_on_axle_3: float) -> bool:
    if payload <= load_on_axle_3:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
Total operation time shouldn’t be lower than PTO operation time.
Idle time must always be less than or equal to the total operation time.
Driving time should be less than or equal to the total operation time.
The weight on axle 1 cannot surpass the weight on axle 2.
Axle 2's load must always be equal to or greater than the payload.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"
```python
# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def fuel_consumption_km(fuel_consumption_per_hour: float, journey_km: float) -> bool:
    if journey_km >= 20 and fuel_consumption_per_hour >= 5:
        return True
    else:
        return False

# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def fuel_consumption_distance(fuel_consumption_per_100km: float, journey_km: float) -> bool:
    if journey_km >= 20 and fuel_consumption_per_100km >= 40:
        return True
    else:
        return False

# Total operation time shouldn’t be lower than PTO operation time.
def total_operation_time(total_operation_time: float, pto_operation_time: float) -> bool:
    if total_operation_time >= pto_operation_time:
        return True
    else:
        return False

# Idle time must always be less than or equal to the total operation time.
def idle_time(idle_time: float, total_operation_time: float) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# Driving time should be less than or equal to the total operation time.
def driving_time(driving_time: float, total_operation_time: float) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def weight_on_axles(weight_axle1: float, weight_axle2: float) -> bool:
    if weight_axle1 <= weight_axle2:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def payload_and_axle2_load(payload: float, weight_axle2: float) -> bool:
    if weight_axle2 >= payload:
        return True
    else:
        return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def total_time_requirements(total_operation_time: float, pto_operation_time: float, idle_time: float, driving_time: float) -> bool:
    if total_operation_time >= (pto_operation_time + idle_time + driving_time):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
Total operation time shouldn’t be lower than PTO operation time.
Idle time must always be less than or equal to the total operation time.
Stops with PTO engaged should never outnumber total stops.
The weight on axle 1 cannot surpass the weight on axle 2.
Axle 1's load cannot exceed Axle 3's load.
Axle 2's load must always be equal to or greater than the payload.
The payload cannot exceed the capacity of axle 3.
";"
```python
# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def fuel_consumption_check(distance_km: float, fuel_consumption_dm3_100km: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_100km >= 40:
        return True
    else:
        return False

# Total operation time shouldn’t be lower than PTO operation time.
def total_operation_time_check(total_operation_time: float, pto_operation_time: float) -> bool:
    if total_operation_time >= pto_operation_time:
        return True
    else:
        return False

# Idle time must always be less than or equal to the total operation time.
def idle_time_check(idle_time: float, total_operation_time: float) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# Stops with PTO engaged should never outnumber total stops.
def stops_with_pto_check(stops_with_pto: int, total_stops: int) -> bool:
    if stops_with_pto <= total_stops:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def weight_on_axle_check(axle1_weight: float, axle2_weight: float) -> bool:
    if axle1_weight <= axle2_weight:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 3's load.
def axle_load_check(axle1_load: float, axle3_load: float) -> bool:
    if axle1_load <= axle3_load:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def axle2_payload_check(axle2_load: float, payload: float) -> bool:
    if axle2_load >= payload:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 3.
def payload_capacity_check(payload: float, axle3_capacity: float) -> bool:
    if payload <= axle3_capacity:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
The total operation duration must not be lower than the idle time.
Driving time should be less than or equal to the total operation time.
The total stop count must not be lower than the count of stops where PTO is engaged.
Axle 2's load must always be equal to or greater than the payload.
The payload cannot exceed the capacity of axle 3.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";"
```python
# If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_hour >= 5:
        return True
    else:
        return False

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r2(distance_km: float, fuel_consumption_dm3_per_100km: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_100km >= 40:
        return True
    else:
        return False

# The total operation duration must not be lower than the idle time.
def r3(total_operation_time_hours: float, idle_time_hours: float) -> bool:
    if total_operation_time_hours >= idle_time_hours:
        return True
    else:
        return False

# Driving time should be less than or equal to the total operation time.
def r4(driving_time_hours: float, total_operation_time_hours: float) -> bool:
    if driving_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r5(total_stop_count: int, pto_engaged_stops_count: int) -> bool:
    if total_stop_count >= pto_engaged_stops_count:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def r6(axle2_load_kg: float, payload_kg: float) -> bool:
    if axle2_load_kg >= payload_kg:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 3.
def r7(payload_kg: float, axle3_capacity_kg: float) -> bool:
    if payload_kg <= axle3_capacity_kg:
        return True
    else:
        return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r8(total_operation_time_hours: float, pto_time_hours: float, idle_time_hours: float, driving_time_hours: float) -> bool:
    if total_operation_time_hours >= (pto_time_hours + idle_time_hours + driving_time_hours):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
PTO operation time cannot be greater than the total operation time.
The total operation duration must not be lower than the idle time.
Stops with PTO engaged should never outnumber total stops.
The load on axle 1 must not surpass the load on axle 3.
The payload cannot exceed the capacity of axle 2.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";"
```python
# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_h: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_h >= 5:
        return True
    else:
        return False

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r2(distance_km: float, fuel_consumption_dm3_100km: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_100km >= 40:
        return True
    else:
        return False

# PTO operation time cannot be greater than the total operation time.
def r3(pto_time_hours: float, total_operation_time_hours: float) -> bool:
    if pto_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# The total operation duration must not be lower than the idle time.
def r4(total_operation_time_hours: float, idle_time_hours: float) -> bool:
    if total_operation_time_hours >= idle_time_hours:
        return True
    else:
        return False

# Stops with PTO engaged should never outnumber total stops.
def r5(stops_with_pto: int, total_stops: int) -> bool:
    if stops_with_pto <= total_stops:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 3.
def r6(load_axle1: float, load_axle3: float) -> bool:
    if load_axle1 <= load_axle3:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 2.
def r7(payload_kg: float, capacity_axle2_kg: float) -> bool:
    if payload_kg <= capacity_axle2_kg:
        return True
    else:
        return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r8(total_operation_time_hours: float, pto_time_hours: float, idle_time_hours: float, driving_time_hours: float) -> bool:
    if total_operation_time_hours >= (pto_time_hours + idle_time_hours + driving_time_hours):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
PTO operation time cannot be greater than the total operation time.
Total operation time should shouldn’t be lower than driving time.
PTO-engaged stops cannot exceed the total number of stops.
The weight on axle 1 cannot surpass the weight on axle 2.
The load supported by axle 1 cannot exceed that of axle 3.
The payload must always be smaller than or equal to the load on axle 3.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";"
```python
# Vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def fuel_consumption_rule(fuel_consumption: float, distance_km: float) -> bool:
    if distance_km >= 20 and fuel_consumption >= 5:
        return True
    else:
        return False

# PTO operation time cannot be greater than the total operation time.
def pto_operation_time_rule(ptime: float, total_time: float) -> bool:
    if ptime <= total_time:
        return True
    else:
        return False

# Total operation time should be lower than driving time.
def total_operation_time_rule(total_time: float, driving_time: float) -> bool:
    if total_time >= driving_time:
        return False
    else:
        return True

# PTO-engaged stops cannot exceed the total number of stops.
def pto_stops_rule(pto_stops: int, total_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def weight_on_axle_rule(axle1_weight: float, axle2_weight: float) -> bool:
    if axle1_weight <= axle2_weight:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 3.
def load_supported_by_axle_rule(axle1_load: float, axle3_load: float) -> bool:
    if axle1_load <= axle3_load:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 3.
def payload_rule(payload: float, axle3_load: float) -> bool:
    if payload <= axle3_load:
        return True
    else:
        return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def total_time_rule(total_time: float, ptime: float, idletime: float, drivetime: float) -> bool:
    if total_time >= (ptime + idletime + drivetime):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
PTO operation time should be less than or equal to the total operation time.
Total operation time shouldn’t be lower than idle time.
Driving time must always be less than or equal to the total operation time.
Stops with PTO engaged cannot outnumber the total stops.
The payload must always be smaller than or equal to the load on axle 2.
The payload must not exceed the load carried by axle 3.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"
```python
# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def fuel_consumption(min_km: int, avg_dm_per_100km: float) -> bool:
    if min_km >= 20 and avg_dm_per_100km == 40:
        return True
    else:
        return False

# PTO operation time should be less than or equal to the total operation time.
def pto_time(total_time: float, pto_time: float) -> bool:
    if pto_time <= total_time:
        return True
    else:
        return False

# Total operation time shouldn’t be lower than idle time.
def total_time(idle_time: float, total_time: float) -> bool:
    if total_time >= idle_time:
        return True
    else:
        return False

# Driving time must always be less than or equal to the total operation time.
def driving_time(total_time: float, driving_time: float) -> bool:
    if driving_time <= total_time:
        return True
    else:
        return False

# Stops with PTO engaged cannot outnumber the total stops.
def stops_p_to_engaged(total_stops: int, stops_p_to_engaged: int) -> bool:
    if stops_p_to_engaged <= total_stops:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 2.
def payload(axle_2_load: float, payload: float) -> bool:
    if payload <= axle_2_load:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def payload_axle_3(axle_3_load: float, payload: float) -> bool:
    if payload <= axle_3_load:
        return True
    else:
        return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def combined_time(total_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    if pto_time + idle_time + driving_time <= total_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
PTO operation time should be less than or equal to the total operation time.
Idle time must always be less than or equal to the total operation time.
Driving time should be less than or equal to the total operation time.
PTO-engaged stops cannot exceed the total number of stops.
The weight on axle 1 cannot surpass the weight on axle 2.
Payload must remain below or equal to the load carried by axle 2.
The payload cannot exceed the capacity of axle 3.
";"
```python
# Vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def fuel_consumption_rule(distance_km, fuel_consumption_dm3h):
    if distance_km >= 20 and fuel_consumption_dm3h < 5:
        return False
    else:
        return True

# PTO operation time should be less than or equal to the total operation time.
def pto_operation_time_rule(total_operation_time, pto_operation_time):
    if pto_operation_time <= total_operation_time:
        return True
    else:
        return False

# Idle time must always be less than or equal to the total operation time.
def idle_time_rule(total_operation_time, idle_time):
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# Driving time should be less than or equal to the total operation time.
def driving_time_rule(total_operation_time, driving_time):
    if driving_time <= total_operation_time:
        return True
    else:
        return False

# PTO-engaged stops cannot exceed the total number of stops.
def pto_stops_rule(total_stops, pto_engaged_stops):
    if pto_engaged_stops <= total_stops:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def weight_on_axle_rule(axle_1_weight, axle_2_weight):
    if axle_1_weight <= axle_2_weight:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def payload_rule(axle_2_load, payload):
    if payload <= axle_2_load:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 3.
def payload_capacity_rule(axle_3_capacity, payload):
    if payload <= axle_3_capacity:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
Total operation time shouldn’t be lower than PTO operation time.
Driving time cannot be greater than the total operation time.
The total stop count must not be lower than the count of stops where PTO is engaged.
Axle 1's load cannot exceed Axle 2's load.
Payload must remain below or equal to the load carried by axle 2.
The payload must always be smaller than or equal to the load on axle 3.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";"
```python
# If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
def min_fuel_consumption(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_hour >= 5:
        return True
    else:
        return False

# Total operation time shouldn't be lower than PTO operation time.
def total_operation_time_min_pto_time(total_operation_time_hours: float, pto_operation_time_hours: float) -> bool:
    if total_operation_time_hours >= pto_operation_time_hours:
        return True
    else:
        return False

# Driving time cannot be greater than the total operation time.
def driving_time_max_total_operation_time(driving_time_hours: float, total_operation_time_hours: float) -> bool:
    if driving_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def total_stops_min_engaged_stops(total_stop_count: int, engaged_stops_count: int) -> bool:
    if total_stop_count >= engaged_stops_count:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 2's load.
def axle_load(axle_1_load_tons: float, axle_2_load_tons: float) -> bool:
    if axle_1_load_tons <= axle_2_load_tons:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def payload_and_axle_2_load(payload_tons: float, axle_2_load_tons: float) -> bool:
    if payload_tons <= axle_2_load_tons:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 3.
def payload_and_axle_3_load(payload_tons: float, axle_3_load_tons: float) -> bool:
    if payload_tons <= axle_3_load_tons:
        return True
    else:
        return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def total_operation_duration_min_combined_time(total_operation_duration_hours: float, pto_time_hours: float, idle_time_hours: float, driving_time_hours: float) -> bool:
    if total_operation_duration_hours >= (pto_time_hours + idle_time_hours + driving_time_hours):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: Total operation time shouldn’t be lower than idle time.
Driving time must always be less than or equal to the total operation time.
Stops with PTO engaged cannot outnumber the total stops.
The weight on axle 1 cannot surpass the weight on axle 2.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
Axle 2's load must always be equal to or greater than the payload.
The payload must not exceed the load carried by axle 3.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";"
```python
# Total operation time shouldn’t be lower than idle time.
def rule1(total_operation_time: float, idle_time: float) -> bool:
    if total_operation_time >= idle_time:
        return True
    else:
        return False

# Driving time must always be less than or equal to the total operation time.
def rule2(driving_time: float, total_operation_time: float) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False

# Stops with PTO engaged cannot outnumber the total stops.
def rule3(stops_with_pto: int, total_stops: int) -> bool:
    if stops_with_pto <= total_stops:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def rule4(weight_axle_1: float, weight_axle_2: float) -> bool:
    if weight_axle_1 <= weight_axle_2:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def rule5(load_axle_1: float, load_axle_3: float) -> bool:
    if load_axle_1 <= load_axle_3:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def rule6(load_axle_2: float, payload: float) -> bool:
    if load_axle_2 >= payload:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def rule7(payload: float, load_axle_3: float) -> bool:
    if payload <= load_axle_3:
        return True
    else:
        return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def rule8(total_operation_time: float, pto_operation_time: float, idle_time: float, driving_time: float) -> bool:
    if total_operation_time >= (pto_operation_time + idle_time + driving_time):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
Total operation time shouldn’t be lower than PTO operation time.
The weight on axle 1 cannot surpass the weight on axle 2.
The weight on axle 1 cannot surpass the weight on axle 3.
Axle 2's load must always be equal to or greater than the payload.
The payload must always be smaller than or equal to the load on axle 3.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";"
```python
# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_h: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_h >= 5:
        return True
    else:
        return False

# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def r2(distance_km: float, fuel_consumption_dm3_100km: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_100km >= 40:
        return True
    else:
        return False

# Total operation time shouldn’t be lower than PTO operation time.
def r3(total_operation_time: float, pto_operation_time: float) -> bool:
    if total_operation_time >= pto_operation_time:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r4(axle1_weight: float, axle2_weight: float) -> bool:
    if axle1_weight <= axle2_weight:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r5(axle1_weight: float, axle3_weight: float) -> bool:
    if axle1_weight <= axle3_weight:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def r6(axle2_load: float, payload: float) -> bool:
    if axle2_load >= payload:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 3.
def r7(payload: float, axle3_load: float) -> bool:
    if payload <= axle3_load:
        return True
    else:
        return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r8(total_operation_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    if total_operation_time >= (pto_time + idle_time + driving_time):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
PTO operation time should be less than or equal to the total operation time.
Idle time should be less than or equal to the total operation time.
Driving time must always be less than or equal to the total operation time.
The total stop count must not be lower than the count of stops where PTO is engaged.
Axle 1's load cannot exceed Axle 2's load.
Payload must remain below or equal to the load carried by axle 2.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"
```python
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_hour >= 5:
        return True
    else:
        return False

# PTO operation time should be less than or equal to the total operation time.
def r2(pto_time_hours: float, total_operation_time_hours: float) -> bool:
    if pto_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# Idle time should be less than or equal to the total operation time.
def r3(idle_time_hours: float, total_operation_time_hours: float) -> bool:
    if idle_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# Driving time must always be less than or equal to the total operation time.
def r4(driving_time_hours: float, total_operation_time_hours: float) -> bool:
    if driving_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r5(total_stops_count: int, pto_engaged_stops_count: int) -> bool:
    if total_stops_count >= pto_engaged_stops_count:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 2's load.
def r6(axle_1_load_kg: float, axle_2_load_kg: float) -> bool:
    if axle_1_load_kg <= axle_2_load_kg:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def r7(payload_kg: float, axle_2_load_kg: float) -> bool:
    if payload_kg <= axle_2_load_kg:
        return True
    else:
        return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r8(pto_time_hours: float, idle_time_hours: float, driving_time_hours: float, total_operation_time_hours: float) -> bool:
    if (pto_time_hours + idle_time_hours + driving_time_hours) <= total_operation_time_hours:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
Driving time must always be less than or equal to the total operation time.
The total stop count must not be lower than the count of stops where PTO is engaged.
The weight on axle 1 cannot surpass the weight on axle 3.
The payload cannot exceed the capacity of axle 2.
The payload must not exceed the load carried by axle 3.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";"
```python
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_hour >= 5:
        return True
    else:
        return False

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r2(distance_km: float, fuel_consumption_dm3_per_100km: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_100km >= 40:
        return True
    else:
        return False

# Driving time must always be less than or equal to the total operation time.
def r3(driving_time_hours: float, total_operation_time_hours: float) -> bool:
    if driving_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r4(total_stops_count: int, pto_engaged_stops_count: int) -> bool:
    if total_stops_count >= pto_engaged_stops_count:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r5(axle1_weight_tons: float, axle3_weight_tons: float) -> bool:
    if axle1_weight_tons <= axle3_weight_tons:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 2.
def r6(payload_tons: float, axle2_capacity_tons: float) -> bool:
    if payload_tons <= axle2_capacity_tons:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def r7(payload_tons: float, axle3_load_tons: float) -> bool:
    if payload_tons <= axle3_load_tons:
        return True
    else:
        return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def r8(total_operation_time_hours: float, pto_operation_time_hours: float, idle_time_hours: float, driving_time_hours: float) -> bool:
    if total_operation_time_hours >= (pto_operation_time_hours + idle_time_hours + driving_time_hours):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
The total operation duration must not be lower than the PTO operation time.
PTO-engaged stops cannot exceed the total number of stops.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
Axle 1's load cannot exceed Axle 3's load.
The payload cannot exceed the capacity of axle 3.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";"
```python
# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_h: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_h >= 5:
        return True
    else:
        return False

# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def r2(distance_km: float, fuel_consumption_dm3_100km: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_100km >= 40:
        return True
    else:
        return False

# The total operation duration must not be lower than the PTO operation time.
def r3(total_operation_duration_seconds: float, pto_operation_time_seconds: float) -> bool:
    if total_operation_duration_seconds >= pto_operation_time_seconds:
        return True
    else:
        return False

# PTO-engaged stops cannot exceed the total number of stops.
def r4(pto_engaged_stops: int, total_stops: int) -> bool:
    if pto_engaged_stops <= total_stops:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def r5(axle1_load_kg: float, axle2_load_kg: float) -> bool:
    if axle1_load_kg <= axle2_load_kg:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 3's load.
def r6(axle1_load_kg: float, axle3_load_kg: float) -> bool:
    if axle1_load_kg <= axle3_load_kg:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 3.
def r7(payload_kg: float, axle3_capacity_kg: float) -> bool:
    if payload_kg <= axle3_capacity_kg:
        return True
    else:
        return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r8(total_operation_duration_seconds: float, pto_time_seconds: float, idle_time_seconds: float, driving_time_seconds: float) -> bool:
    if total_operation_duration_seconds >= (pto_time_seconds + idle_time_seconds + driving_time_seconds):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
The total operation duration must not be lower than the PTO operation time.
The total operation duration must not be lower than the idle time.
The total stop count must not be lower than the count of stops where PTO is engaged.
Payload must remain below or equal to the load carried by axle 2.
The payload cannot exceed the capacity of axle 3.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";"
```python
# The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def fuel_consumption_rule(fuel_consumption: float, distance_km: float) -> bool:
    if distance_km >= 20 and fuel_consumption >= 5:
        return True
    else:
        return False

# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def fuel_consumption_per_distance_rule(fuel_consumption_dm3_100km: float, distance_km: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_100km >= 40:
        return True
    else:
        return False

# The total operation duration must not be lower than the PTO operation time.
def operation_duration_rule(operation_duration: float, pto_operation_time: float) -> bool:
    if operation_duration >= pto_operation_time:
        return True
    else:
        return False

# The total operation duration must not be lower than the idle time.
def operation_duration_rule_idle_time(operation_duration: float, idle_time: float) -> bool:
    if operation_duration >= idle_time:
        return True
    else:
        return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def stop_count_rule(stop_count: int, pto_engaged_stops: int) -> bool:
    if stop_count >= pto_engaged_stops:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def payload_rule(payload: float, load_axle_2: float) -> bool:
    if payload <= load_axle_2:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 3.
def payload_capacity_rule(payload: float, axle_3_capacity: float) -> bool:
    if payload <= axle_3_capacity:
        return True
    else:
        return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def total_operation_duration_rule(operation_duration: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    if operation_duration >= (pto_time + idle_time + driving_time):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: PTO operation time should be less than or equal to the total operation time.
Idle time must always be less than or equal to the total operation time.
PTO-engaged stops cannot exceed the total number of stops.
Axle 1's load cannot exceed Axle 2's load.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
The payload must not exceed the load carried by axle 2.
Axle 3's load must always be equal to or greater than the payload.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"
```python
# PTO operation time should be less than or equal to the total operation time.
def pto_rule(operation_time: float, pto_time: float) -> bool:
    return pto_time <= operation_time

# Idle time must always be less than or equal to the total operation time.
def idle_rule(operation_time: float, idle_time: float) -> bool:
    return idle_time <= operation_time

# PTO-engaged stops cannot exceed the total number of stops.
def pto_stops_rule(total_stops: int, pto_stops: int) -> bool:
    return pto_stops <= total_stops

# Axle 1's load cannot exceed Axle 2's load.
def axle_load_rule(axle_1_load: float, axle_2_load: float) -> bool:
    return axle_1_load <= axle_2_load

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def axle_1_to_axle_3_load_rule(axle_1_load: float, axle_3_load: float) -> bool:
    return axle_1_load <= axle_3_load

# The payload must not exceed the load carried by axle 2.
def payload_rule(axle_2_load: float, payload: float) -> bool:
    return payload <= axle_2_load

# Axle 3's load must always be equal to or greater than the payload.
def axle_3_to_payload_rule(axle_3_load: float, payload: float) -> bool:
    return axle_3_load >= payload

# Total operation time should be at least the sum of PTO, idle, and driving times.
def total_operation_time_rule(operation_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    return operation_time >= pto_time + idle_time + driving_time
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
The total operation duration must not be lower than the PTO operation time.
Total operation time shouldn’t be lower than idle time.
The number of stops where PTO is engaged must not exceed the overall stop count.
The weight on axle 1 cannot surpass the weight on axle 2.
The load supported by axle 1 cannot exceed that of axle 3.
The payload cannot exceed the capacity of axle 2.
The payload cannot exceed the capacity of axle 3.
";"
```python
# The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def fuel_consumption_rule(fuel_consumption: float, distance_km: float) -> bool:
    if distance_km >= 20 and fuel_consumption >= 5:
        return True
    else:
        return False

# The total operation duration must not be lower than the PTO operation time.
def operation_duration_rule(total_operation_time: float, pto_operation_time: float) -> bool:
    if total_operation_time >= pto_operation_time:
        return True
    else:
        return False

# Total operation time shouldn’t be lower than idle time.
def idle_time_rule(total_operation_time: float, idle_time: float) -> bool:
    if total_operation_time >= idle_time:
        return True
    else:
        return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def pto_stops_rule(pto_stops: int, overall_stop_count: int) -> bool:
    if pto_stops <= overall_stop_count:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def axle_weight_rule(axle_1_weight: float, axle_2_weight: float) -> bool:
    if axle_1_weight <= axle_2_weight:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 3.
def axle_load_rule(axle_1_load: float, axle_3_load: float) -> bool:
    if axle_1_load <= axle_3_load:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 2.
def payload_capacity_rule(payload: float, axle_2_capacity: float) -> bool:
    if payload <= axle_2_capacity:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 3.
def payload_capacity_rule_axle_3(payload: float, axle_3_capacity: float) -> bool:
    if payload <= axle_3_capacity:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
Total operation time shouldn’t be lower than idle time.
Driving time should be less than or equal to the total operation time.
The load supported by axle 1 cannot exceed that of axle 3.
The payload must not exceed the load carried by axle 2.
The payload must not exceed the load carried by axle 3.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";"
```python
# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_hour >= 5:
        return True
    else:
        return False

# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def r2(distance_km: float, fuel_consumption_dm3_per_100km: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_100km >= 40:
        return True
    else:
        return False

# Total operation time shouldn’t be lower than idle time.
def r3(total_operation_time_hours: float, idle_time_hours: float) -> bool:
    if total_operation_time_hours >= idle_time_hours:
        return True
    else:
        return False

# Driving time should be less than or equal to the total operation time.
def r4(driving_time_hours: float, total_operation_time_hours: float) -> bool:
    if driving_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 3.
def r5(axle1_load_tons: float, axle3_load_tons: float) -> bool:
    if axle1_load_tons <= axle3_load_tons:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 2.
def r6(payload_tons: float, axle2_load_tons: float) -> bool:
    if payload_tons <= axle2_load_tons:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def r7(payload_tons: float, axle3_load_tons: float) -> bool:
    if payload_tons <= axle3_load_tons:
        return True
    else:
        return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def r8(total_operation_time_hours: float, pto_operation_time_hours: float, idle_time_hours: float, driving_time_hours: float) -> bool:
    if total_operation_time_hours >= (pto_operation_time_hours + idle_time_hours + driving_time_hours):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
Total operation time shouldn’t be lower than PTO operation time.
Idle time cannot be greater than the total operation time.
Driving time should be less than or equal to the total operation time.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
Payload must remain below or equal to the load carried by axle 2.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"
```python
# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def fuel_consumption(min_distance: int, min_fuel_consumption_per_hour: float) -> bool:
    if min_distance >= 20 and min_fuel_consumption_per_hour == 5:
        return True
    else:
        return False

# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def fuel_consumption_per_distance(min_distance: int, min_fuel_consumption_per_100km: float) -> bool:
    if min_distance >= 20 and min_fuel_consumption_per_100km == 40:
        return True
    else:
        return False

# Total operation time shouldn’t be lower than PTO operation time.
def total_operation_time(min_total_operation_time: float, pto_operation_time: float) -> bool:
    if min_total_operation_time >= pto_operation_time:
        return True
    else:
        return False

# Idle time cannot be greater than the total operation time.
def idle_time(max_idle_time: float, total_operation_time: float) -> bool:
    if max_idle_time <= total_operation_time:
        return True
    else:
        return False

# Driving time should be less than or equal to the total operation time.
def driving_time(max_driving_time: float, total_operation_time: float) -> bool:
    if max_driving_time <= total_operation_time:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def load_on_axle(load_axle1: float, load_axle3: float) -> bool:
    if load_axle1 <= load_axle3:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def payload_and_load(payload: float, load_axle2: float) -> bool:
    if payload <= load_axle2:
        return True
    else:
        return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def total_time(min_total_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    if min_total_time >= (pto_time + idle_time + driving_time):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
PTO operation time must be less than or equal to the total operation time.
Idle time should be less than or equal to the total operation time.
The total stop count must not be lower than the count of stops where PTO is engaged.
The weight on axle 1 cannot surpass the weight on axle 2.
Axle 2's load must always be equal to or greater than the payload.
Payload must remain below or equal to the load carried by axle 3.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"
```python
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_hour >= 5:
        return True
    else:
        return False

# PTO operation time must be less than or equal to the total operation time.
def r2(pto_time_hours: float, total_operation_time_hours: float) -> bool:
    if pto_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# Idle time should be less than or equal to the total operation time.
def r3(idle_time_hours: float, total_operation_time_hours: float) -> bool:
    if idle_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r4(total_stops_count: int, pto_engaged_stops_count: int) -> bool:
    if total_stops_count >= pto_engaged_stops_count:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r5(axle_1_weight_tons: float, axle_2_weight_tons: float) -> bool:
    if axle_1_weight_tons <= axle_2_weight_tons:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def r6(axle_2_load_tons: float, payload_tons: float) -> bool:
    if axle_2_load_tons >= payload_tons:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 3.
def r7(payload_tons: float, axle_3_load_tons: float) -> bool:
    if payload_tons <= axle_3_load_tons:
        return True
    else:
        return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r8(total_operation_time_hours: float, pto_time_hours: float, idle_time_hours: float, driving_time_hours: float) -> bool:
    if total_operation_time_hours >= (pto_time_hours + idle_time_hours + driving_time_hours):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
Idle time should be less than or equal to the total operation time.
Driving time must always be less than or equal to the total operation time.
The total stop count must not be lower than the count of stops where PTO is engaged.
The weight on axle 1 cannot surpass the weight on axle 3.
The payload must not exceed the load carried by axle 2.
The payload must always be smaller than or equal to the load on axle 3.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"
```python
# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def fuel_consumption_check(distance_km: float, fuel_consumption_dm3_100km: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_100km >= 40:
        return True
    else:
        return False

# Idle time should be less than or equal to the total operation time.
def idle_time_check(total_operation_time_hours: float, idle_time_hours: float) -> bool:
    if idle_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# Driving time must always be less than or equal to the total operation time.
def driving_time_check(total_operation_time_hours: float, driving_time_hours: float) -> bool:
    if driving_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def stop_count_check(total_stop_count: int, pto_engaged_stops_count: int) -> bool:
    if total_stop_count >= pto_engaged_stops_count:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def axle_weight_check(axle_1_weight_tons: float, axle_3_weight_tons: float) -> bool:
    if axle_1_weight_tons <= axle_3_weight_tons:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 2.
def payload_check(payload_kg: float, axle_2_load_kg: float) -> bool:
    if payload_kg <= axle_2_load_kg:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 3.
def payload_and_axle_3_check(payload_kg: float, axle_3_load_kg: float) -> bool:
    if payload_kg <= axle_3_load_kg:
        return True
    else:
        return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def operation_time_check(total_operation_time_hours: float, pto_operation_time_hours: float, idle_time_hours: float, driving_time_hours: float) -> bool:
    if (pto_operation_time_hours + idle_time_hours + driving_time_hours) <= total_operation_time_hours:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
PTO operation time should be less than or equal to the total operation time.
Total operation time shouldn’t be lower than idle time.
Total operation time should shouldn’t be lower than driving time.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
The load supported by axle 1 cannot exceed that of axle 3.
Axle 3's load must always be equal to or greater than the payload.
";"
```python
# If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if fuel_consumption_dm3_per_hour / distance_km >= 0.25:
        return True
    else:
        return False

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r2(distance_km: float, fuel_consumption_dm3_per_100km: float) -> bool:
    if fuel_consumption_dm3_per_100km / distance_km >= 0.4:
        return True
    else:
        return False

# PTO operation time should be less than or equal to the total operation time.
def r3(pto_time_hours: float, total_operation_time_hours: float) -> bool:
    if pto_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# Total operation time shouldn't be lower than idle time.
def r4(total_operation_time_hours: float, idle_time_hours: float) -> bool:
    if total_operation_time_hours >= idle_time_hours:
        return True
    else:
        return False

# Total operation time should be lower than or equal to driving time.
def r5(total_operation_time_hours: float, driving_time_hours: float) -> bool:
    if total_operation_time_hours <= driving_time_hours:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def r6(axle1_load_tons: float, axle2_load_tons: float) -> bool:
    if axle1_load_tons <= axle2_load_tons:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 3.
def r7(axle1_load_tons: float, axle3_load_tons: float) -> bool:
    if axle1_load_tons <= axle3_load_tons:
        return True
    else:
        return False

# Axle 3's load must always be equal to or greater than the payload.
def r8(axle3_load_tons: float, payload_tons: float) -> bool:
    if axle3_load_tons >= payload_tons:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
Total operation time shouldn’t be lower than PTO operation time.
Idle time cannot be greater than the total operation time.
Total operation time should shouldn’t be lower than driving time.
PTO-engaged stops cannot exceed the total number of stops.
The payload must always be smaller than or equal to the load on axle 3.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"
```python
# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def fuel_consumption_1(distance_km: float, fuel_consumption_dm3_h: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_h >= 5:
        return True
    else:
        return False

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def fuel_consumption_2(distance_km: float, fuel_consumption_dm3_100km: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_100km >= 40:
        return True
    else:
        return False

# Total operation time shouldn’t be lower than PTO operation time.
def total_operation_time_pto(operation_time: float, pto_time: float) -> bool:
    if operation_time >= pto_time:
        return True
    else:
        return False

# Idle time cannot be greater than the total operation time.
def idle_time_total(operation_time: float, idle_time: float) -> bool:
    if idle_time <= operation_time:
        return True
    else:
        return False

# Total operation time should shouldn’t be lower than driving time.
def total_operation_driving(operation_time: float, driving_time: float) -> bool:
    if operation_time >= driving_time:
        return True
    else:
        return False

# PTO-engaged stops cannot exceed the total number of stops.
def pto_stops_total_stops(total_stops: int, pto_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 3.
def payload_axle3(payload: float, axle3_load: float) -> bool:
    if payload <= axle3_load:
        return True
    else:
        return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def combined_times_total(operation_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    if operation_time >= pto_time + idle_time + driving_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
PTO operation time must be less than or equal to the total operation time.
Idle time must always be less than or equal to the total operation time.
Driving time should be less than or equal to the total operation time.
Stops with PTO engaged should never outnumber total stops.
Axle 2's load must always be equal to or greater than the payload.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";"
```python
# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def fuel_consumption_1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_hour >= 5:
        return True
    else:
        return False

# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def fuel_consumption_2(distance_km: float, fuel_consumption_dm3_per_100km: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_100km >= 40:
        return True
    else:
        return False

# PTO operation time must be less than or equal to the total operation time.
def pto_time_total_operation_time(pto_time_hours: float, total_operation_time_hours: float) -> bool:
    if pto_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# Idle time must always be less than or equal to the total operation time.
def idle_time_total_operation_time(idle_time_hours: float, total_operation_time_hours: float) -> bool:
    if idle_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# Driving time should be less than or equal to the total operation time.
def driving_time_total_operation_time(driving_time_hours: float, total_operation_time_hours: float) -> bool:
    if driving_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# Stops with PTO engaged should never outnumber total stops.
def stops_with_pto_total_stops(stops_with_pto: int, total_stops: int) -> bool:
    if stops_with_pto <= total_stops:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def axle_2_load_payload(axle_2_load_kg: float, payload_kg: float) -> bool:
    if axle_2_load_kg >= payload_kg:
        return True
    else:
        return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def total_operation_time_combined_times(total_operation_time_hours: float, pto_time_hours: float, idle_time_hours: float, driving_time_hours: float) -> bool:
    if total_operation_time_hours >= (pto_time_hours + idle_time_hours + driving_time_hours):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: PTO operation time cannot be greater than the total operation time.
Idle time should be less than or equal to the total operation time.
Driving time cannot be greater than the total operation time.
PTO-engaged stops cannot exceed the total number of stops.
The weight on axle 1 cannot surpass the weight on axle 2.
The load on axle 1 must not surpass the load on axle 3.
The payload cannot exceed the capacity of axle 3.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"
```python
# PTO operation time cannot be greater than the total operation time.
def pto_rule(operation_time: float, pto_time: float) -> bool:
    return pto_time <= operation_time

# Idle time should be less than or equal to the total operation time.
def idle_rule(operation_time: float, idle_time: float) -> bool:
    return idle_time <= operation_time

# Driving time cannot be greater than the total operation time.
def driving_rule(operation_time: float, driving_time: float) -> bool:
    return driving_time <= operation_time

# PTO-engaged stops cannot exceed the total number of stops.
def stops_rule(total_stops: int, pto_stops: int) -> bool:
    return pto_stops <= total_stops

# The weight on axle 1 cannot surpass the weight on axle 2.
def weight_rule(axle_1_weight: float, axle_2_weight: float) -> bool:
    return axle_1_weight <= axle_2_weight

# The load on axle 1 must not surpass the load on axle 3.
def load_rule(axle_1_load: float, axle_3_load: float) -> bool:
    return axle_1_load <= axle_3_load

# The payload cannot exceed the capacity of axle 3.
def payload_rule(axle_3_capacity: float, payload: float) -> bool:
    return payload <= axle_3_capacity

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def combined_time_rule(operation_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    return (pto_time + idle_time + driving_time) <= operation_time
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
Idle time cannot be greater than the total operation time.
Driving time must always be less than or equal to the total operation time.
The load supported by axle 1 cannot exceed that of axle 2.
The load supported by axle 1 cannot exceed that of axle 3.
The payload must not exceed the load carried by axle 2.
The payload must not exceed the load carried by axle 3.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";"
```python
# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def min_fuel_consumption(distance_km: float, fuel_consumption_dm3: float) -> bool:
    if fuel_consumption_dm3 / distance_km >= 0.4:
        return True
    else:
        return False

# Idle time cannot be greater than the total operation time.
def idle_time_total_operation_time(idle_time_seconds: float, total_operation_time_seconds: float) -> bool:
    if idle_time_seconds <= total_operation_time_seconds:
        return True
    else:
        return False

# Driving time must always be less than or equal to the total operation time.
def driving_time_total_operation_time(driving_time_seconds: float, total_operation_time_seconds: float) -> bool:
    if driving_time_seconds <= total_operation_time_seconds:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 2.
def load_axle_1_axle_2(load_axle_1: float, load_axle_2: float) -> bool:
    if load_axle_1 <= load_axle_2:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 3.
def load_axle_1_axle_3(load_axle_1: float, load_axle_3: float) -> bool:
    if load_axle_1 <= load_axle_3:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 2.
def payload_load_axle_2(payload: float, load_axle_2: float) -> bool:
    if payload <= load_axle_2:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def payload_load_axle_3(payload: float, load_axle_3: float) -> bool:
    if payload <= load_axle_3:
        return True
    else:
        return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def total_operation_time_pto_idle_driving(total_operation_time_seconds: float, pto_time_seconds: float, idle_time_seconds: float, driving_time_seconds: float) -> bool:
    if total_operation_time_seconds >= (pto_time_seconds + idle_time_seconds + driving_time_seconds):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
Driving time must always be less than or equal to the total operation time.
Stops with PTO engaged cannot outnumber the total stops.
The weight on axle 1 cannot surpass the weight on axle 2.
The load on axle 1 must not surpass the load on axle 3.
Axle 2's load must always be equal to or greater than the payload.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"
```python
# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_hour >= 5:
        return True
    else:
        return False

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def r2(distance_km: float, fuel_consumption_dm3_per_100km: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_100km >= 40:
        return True
    else:
        return False

# Driving time must always be less than or equal to the total operation time.
def r3(driving_time_hours: float, total_operation_time_hours: float) -> bool:
    if driving_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# Stops with PTO engaged cannot outnumber the total stops.
def r4(total_stops: int, pto_engaged_stops: int) -> bool:
    if pto_engaged_stops <= total_stops:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r5(axle1_weight: float, axle2_weight: float) -> bool:
    if axle1_weight <= axle2_weight:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 3.
def r6(axle1_load: float, axle3_load: float) -> bool:
    if axle1_load <= axle3_load:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def r7(axle2_load: float, payload: float) -> bool:
    if axle2_load >= payload:
        return True
    else:
        return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r8(pto_operation_time_hours: float, idle_time_hours: float, driving_time_hours: float, total_operation_time_hours: float) -> bool:
    if (pto_operation_time_hours + idle_time_hours + driving_time_hours) <= total_operation_time_hours:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
The total operation duration must not be lower than the PTO operation time.
Idle time must always be less than or equal to the total operation time.
PTO-engaged stops cannot exceed the total number of stops.
The load supported by axle 1 cannot exceed that of axle 3.
The payload must always be smaller than or equal to the load on axle 2.
Axle 3's load must always be equal to or greater than the payload.
";"
```python
# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_h: float) -> bool:
    if fuel_consumption_dm3_h / distance_km >= 5 / 20:
        return True
    else:
        return False

# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r2(distance_km: float, fuel_consumption_dm3_100km: float) -> bool:
    if fuel_consumption_dm3_100km * (distance_km / 100) >= 40:
        return True
    else:
        return False

# The total operation duration must not be lower than the PTO operation time.
def r3(total_operation_time: float, pto_operation_time: float) -> bool:
    if total_operation_time >= pto_operation_time:
        return True
    else:
        return False

# Idle time must always be less than or equal to the total operation time.
def r4(idle_time: float, total_operation_time: float) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# PTO-engaged stops cannot exceed the total number of stops.
def r5(pto_engaged_stops: int, total_stops: int) -> bool:
    if pto_engaged_stops <= total_stops:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 3.
def r6(axle1_load: float, axle3_load: float) -> bool:
    if axle1_load <= axle3_load:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 2.
def r7(payload: float, axle2_load: float) -> bool:
    if payload <= axle2_load:
        return True
    else:
        return False

# Axle 3's load must always be equal to or greater than the payload.
def r8(axle3_load: float, payload: float) -> bool:
    if axle3_load >= payload:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
PTO operation time must be less than or equal to the total operation time.
Idle time should be less than or equal to the total operation time.
Driving time should be less than or equal to the total operation time.
PTO-engaged stops cannot exceed the total number of stops.
The weight on axle 1 cannot surpass the weight on axle 2.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
The payload must not exceed the load carried by axle 2.
";"
```python
# If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if fuel_consumption_dm3_per_hour / distance_km >= 0.005:
        return True
    else:
        return False

# PTO operation time must be less than or equal to the total operation time.
def r2(pto_operation_time_hours: float, total_operation_time_hours: float) -> bool:
    if pto_operation_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# Idle time should be less than or equal to the total operation time.
def r3(idle_time_hours: float, total_operation_time_hours: float) -> bool:
    if idle_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# Driving time should be less than or equal to the total operation time.
def r4(driving_time_hours: float, total_operation_time_hours: float) -> bool:
    if driving_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# PTO-engaged stops cannot exceed the total number of stops.
def r5(pto_engaged_stops: int, total_stops: int) -> bool:
    if pto_engaged_stops <= total_stops:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r6(weight_axle_1_kg: float, weight_axle_2_kg: float) -> bool:
    if weight_axle_1_kg <= weight_axle_2_kg:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def r7(load_axle_1_kg: float, load_axle_3_kg: float) -> bool:
    if load_axle_1_kg <= load_axle_3_kg:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 2.
def r8(payload_kg: float, load_axle_2_kg: float) -> bool:
    if payload_kg <= load_axle_2_kg:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
PTO operation time must be less than or equal to the total operation time.
Idle time cannot be greater than the total operation time.
The total operation durationmust not be lower than the driving time.
The load on axle 1 must not surpass the load on axle 2.
The load on axle 1 must not surpass the load on axle 3.
Payload must remain below or equal to the load carried by axle 2.
";"
```python
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_hour >= 5:
        return True
    else:
        return False

# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def r2(distance_km: float, fuel_consumption_dm3_per_100km: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_100km >= 40:
        return True
    else:
        return False

# PTO operation time must be less than or equal to the total operation time.
def r3(pto_operation_time_hours: float, total_operation_time_hours: float) -> bool:
    if pto_operation_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# Idle time cannot be greater than the total operation time.
def r4(idle_time_hours: float, total_operation_time_hours: float) -> bool:
    if idle_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# The total operation duration must not be lower than the driving time.
def r5(total_operation_time_hours: float, driving_time_hours: float) -> bool:
    if total_operation_time_hours >= driving_time_hours:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 2.
def r6(axle1_load_kg: float, axle2_load_kg: float) -> bool:
    if axle1_load_kg <= axle2_load_kg:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 3.
def r7(axle1_load_kg: float, axle3_load_kg: float) -> bool:
    if axle1_load_kg <= axle3_load_kg:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def r8(payload_kg: float, axle2_load_kg: float) -> bool:
    if payload_kg <= axle2_load_kg:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
PTO operation time cannot be greater than the total operation time.
Total operation time shouldn’t be lower than idle time.
Total operation time should shouldn’t be lower than driving time.
Stops with PTO engaged should never outnumber total stops.
Axle 1's load cannot exceed Axle 2's load.
The payload must always be smaller than or equal to the load on axle 2.
The payload must always be smaller than or equal to the load on axle 3.
";"
```python
# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r1(distance_km: float, fuel_consumption_dm3_per_100km: float) -> bool:
    if fuel_consumption_dm3_per_100km >= 40 * (distance_km / 100):
        return True
    else:
        return False

# PTO operation time cannot be greater than the total operation time.
def r2(pto_operation_time: float, total_operation_time: float) -> bool:
    if pto_operation_time <= total_operation_time:
        return True
    else:
        return False

# Total operation time shouldn’t be lower than idle time.
def r3(total_operation_time: float, idle_time: float) -> bool:
    if total_operation_time >= idle_time:
        return True
    else:
        return False

# Total operation time should shouldn’t be lower than driving time.
def r4(total_operation_time: float, driving_time: float) -> bool:
    if total_operation_time >= driving_time:
        return True
    else:
        return False

# Stops with PTO engaged should never outnumber total stops.
def r5(stops_with_pto_engaged: int, total_stops: int) -> bool:
    if stops_with_pto_engaged <= total_stops:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 2's load.
def r6(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load <= axle2_load:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 2.
def r7(payload: float, axle2_load: float) -> bool:
    if payload <= axle2_load:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 3.
def r8(payload: float, axle3_load: float) -> bool:
    if payload <= axle3_load:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
The total operation duration must not be lower than the idle time.
Driving time must always be less than or equal to the total operation time.
PTO-engaged stops cannot exceed the total number of stops.
Axle 1's load cannot exceed Axle 3's load.
Payload must remain below or equal to the load carried by axle 2.
Payload must remain below or equal to the load carried by axle 3.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"
```python
# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def r1(journey_km: float, fuel_consumption_dm3h: float) -> bool:
    if journey_km >= 20 and fuel_consumption_dm3h >= 5:
        return True
    else:
        return False

# The total operation duration must not be lower than the idle time.
def r2(total_operation_time: float, idle_time: float) -> bool:
    if total_operation_time >= idle_time:
        return True
    else:
        return False

# Driving time must always be less than or equal to the total operation time.
def r3(driving_time: float, total_operation_time: float) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False

# PTO-engaged stops cannot exceed the total number of stops.
def r4(pto_engaged_stops: int, total_stops: int) -> bool:
    if pto_engaged_stops <= total_stops:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 3's load.
def r5(axle_1_load: float, axle_3_load: float) -> bool:
    if axle_1_load <= axle_3_load:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def r6(payload: float, axle_2_load: float) -> bool:
    if payload <= axle_2_load:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 3.
def r7(payload: float, axle_3_load: float) -> bool:
    if payload <= axle_3_load:
        return True
    else:
        return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def r8(total_operation_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    if total_operation_time >= (pto_time + idle_time + driving_time):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
Idle time cannot be greater than the total operation time.
Total operation time should shouldn’t be lower than driving time.
Stops with PTO engaged cannot outnumber the total stops.
The weight on axle 1 cannot surpass the weight on axle 2.
Axle 1's load cannot exceed Axle 3's load.
Axle 3's load must always be equal to or greater than the payload.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"
```python
# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def fuel_consumption(min_km: int, avg_dm_per_100km: float) -> bool:
    if min_km >= 20 and avg_dm_per_100km == 40:
        return True
    else:
        return False

# Idle time cannot be greater than the total operation time.
def idle_time(total_operation_time: float, idle_time: float) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# Total operation time should shouldn’t be lower than driving time.
def total_operation_time(driving_time: float, total_operation_time: float) -> bool:
    if total_operation_time >= driving_time:
        return True
    else:
        return False

# Stops with PTO engaged cannot outnumber the total stops.
def stops_with_PTO(stops_with_PTO: int, total_stops: int) -> bool:
    if stops_with_PTO <= total_stops:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def weight_on_axles(weight_axle1: float, weight_axle2: float) -> bool:
    if weight_axle1 <= weight_axle2:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 3's load.
def axle_load(axle1_load: float, axle3_load: float) -> bool:
    if axle1_load <= axle3_load:
        return True
    else:
        return False

# Axle 3's load must always be equal to or greater than the payload.
def payload_comparison(payload: float, axle3_load: float) -> bool:
    if payload <= axle3_load:
        return True
    else:
        return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def total_time_comparison(pto_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
    if total_operation_time >= (pto_time + idle_time + driving_time):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
Total operation time shouldn’t be lower than PTO operation time.
The total operation duration must not be lower than the idle time.
Driving time must always be less than or equal to the total operation time.
The load on axle 1 must not surpass the load on axle 3.
The payload must not exceed the load carried by axle 2.
The payload must always be smaller than or equal to the load on axle 3.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";"
```python
# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def fuel_consumption(min_distance: int, min_fuel_consumption_per_hour: float) -> bool:
    if min_distance >= 20 and min_fuel_consumption_per_hour >= 5:
        return True
    else:
        return False

# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def fuel_consumption_per_distance(min_distance: int, min_fuel_consumption_per_100km: float) -> bool:
    if min_distance >= 20 and min_fuel_consumption_per_100km >= 40:
        return True
    else:
        return False

# Total operation time shouldn’t be lower than PTO operation time.
def total_operation_time(min_total_operation_time: float, min_pto_operation_time: float) -> bool:
    if min_total_operation_time >= min_pto_operation_time:
        return True
    else:
        return False

# The total operation duration must not be lower than the idle time.
def total_operation_time_and_idle_time(min_total_operation_time: float, min_idle_time: float) -> bool:
    if min_total_operation_time >= min_idle_time:
        return True
    else:
        return False

# Driving time must always be less than or equal to the total operation time.
def driving_time_and_total_operation_time(driving_time: float, total_operation_time: float) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 3.
def load_on_axle(load_on_axle_1: float, load_on_axle_3: float) -> bool:
    if load_on_axle_1 <= load_on_axle_3:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 2.
def payload_and_load_on_axle(payload: float, load_on_axle_2: float) -> bool:
    if payload <= load_on_axle_2:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 3.
def payload_and_load_on_axle_3(payload: float, load_on_axle_3: float) -> bool:
    if payload <= load_on_axle_3:
        return True
    else:
        return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def total_operation_time_combined(min_total_operation_time: float, min_pto_operation_time: float, min_idle_time: float, driving_time: float) -> bool:
    if min_total_operation_time >= (min_pto_operation_time + min_idle_time + driving_time):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
PTO operation time cannot be greater than the total operation time.
The total operation duration must not be lower than the idle time.
Driving time cannot be greater than the total operation time.
The load supported by axle 1 cannot exceed that of axle 2.
The load on axle 1 must not surpass the load on axle 3.
Axle 2's load must always be equal to or greater than the payload.
Payload must remain below or equal to the load carried by axle 3.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";"
```python
# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def fuel_consumption(min_distance: float, min_fuel_consumption: float) -> bool:
    if min_fuel_consumption >= 5 and min_distance >= 20:
        return True
    else:
        return False

# PTO operation time cannot be greater than the total operation time.
def pto_time(total_operation_time: float, pto_time: float) -> bool:
    if pto_time <= total_operation_time:
        return True
    else:
        return False

# The total operation duration must not be lower than the idle time.
def total_operation_idle(idle_time: float, total_operation_time: float) -> bool:
    if total_operation_time >= idle_time:
        return True
    else:
        return False

# Driving time cannot be greater than the total operation time.
def driving_time(total_operation_time: float, driving_time: float) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 2.
def axle_load(axle_1_load: float, axle_2_load: float) -> bool:
    if axle_1_load <= axle_2_load:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 3.
def axle_1_axle_3_load(axle_1_load: float, axle_3_load: float) -> bool:
    if axle_1_load <= axle_3_load:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def axle_2_payload(axle_2_load: float, payload: float) -> bool:
    if axle_2_load >= payload:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 3.
def payload_axle_3(payload: float, axle_3_load: float) -> bool:
    if payload <= axle_3_load:
        return True
    else:
        return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def total_operation_combined(pto_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
    if total_operation_time >= (pto_time + idle_time + driving_time):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
The total operation duration must not be lower than the PTO operation time.
Idle time should be less than or equal to the total operation time.
The number of stops where PTO is engaged must not exceed the overall stop count.
The weight on axle 1 cannot surpass the weight on axle 2.
Axle 1's load cannot exceed Axle 3's load.
Payload must remain below or equal to the load carried by axle 3.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";"
```python
# Vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def fuel_consumption(min_km, min_dm_per_hour):
    if min_dm_per_hour >= 5 and min_km >= 20:
        return True
    else:
        return False

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def fuel_rate_100km(min_km, min_dm_100km):
    if min_km >= 20 and min_dm_100km == 40:
        return True
    else:
        return False

# The total operation duration must not be lower than the PTO operation time.
def total_operation_time(min_time, pto_time):
    if min_time >= pto_time:
        return True
    else:
        return False

# Idle time should be less than or equal to the total operation time.
def idle_time(total_time, idle_time):
    if idle_time <= total_time:
        return True
    else:
        return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def stops_p_to(stop_count, p_to_stops):
    if p_to_stops <= stop_count:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def weight_on_axle(weight_axle1, weight_axle2):
    if weight_axle1 <= weight_axle2:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 3's load.
def load_on_axle(load_axle1, load_axle3):
    if load_axle1 <= load_axle3:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 3.
def payload(axle3_load, payload):
    if payload <= axle3_load:
        return True
    else:
        return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def total_time_combined(min_time, pto_time, idle_time, driving_time):
    if min_time >= pto_time + idle_time + driving_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
PTO operation time must be less than or equal to the total operation time.
Idle time should be less than or equal to the total operation time.
Driving time cannot be greater than the total operation time.
The number of stops where PTO is engaged must not exceed the overall stop count.
The load on axle 1 must not surpass the load on axle 2.
The payload must always be smaller than or equal to the load on axle 2.
The payload cannot exceed the capacity of axle 3.
";"
```python
# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def min_fuel_consumption(distance_km: float, fuel_consumption_dm3_h: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_h == 5:
        return True
    else:
        return False

# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def avg_fuel_consumption(distance_km: float, fuel_consumption_dm3_100km: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_100km == 40:
        return True
    else:
        return False

# PTO operation time must be less than or equal to the total operation time.
def pto_time(total_operation_time: float, pto_time: float) -> bool:
    if pto_time <= total_operation_time:
        return True
    else:
        return False

# Idle time should be less than or equal to the total operation time.
def idle_time(total_operation_time: float, idle_time: float) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# Driving time cannot be greater than the total operation time.
def driving_time(total_operation_time: float, driving_time: float) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def stops_p_to(total_stops: int, p_to_stops: int) -> bool:
    if p_to_stops <= total_stops:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 2.
def load_axle1(axle2_load: float, axle1_load: float) -> bool:
    if axle1_load <= axle2_load:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 2.
def payload(axle2_load: float, payload: float) -> bool:
    if payload <= axle2_load:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 3.
def payload_capacity(axle3_capacity: float, payload: float) -> bool:
    if payload <= axle3_capacity:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
PTO operation time should be less than or equal to the total operation time.
Idle time must always be less than or equal to the total operation time.
Driving time must always be less than or equal to the total operation time.
PTO-engaged stops cannot exceed the total number of stops.
Axle 1's load cannot exceed Axle 2's load.
The weight on axle 1 cannot surpass the weight on axle 3.
Payload must remain below or equal to the load carried by axle 2.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"
```python
# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def fuel_consumption_rule(distance_km: float, fuel_consumption_dm3_100km: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_100km < (40 / 100):
        return True
    else:
        return False

# PTO operation time should be less than or equal to the total operation time.
def pto_time_rule(total_operation_time: float, pto_time: float) -> bool:
    if pto_time <= total_operation_time:
        return True
    else:
        return False

# Idle time must always be less than or equal to the total operation time.
def idle_time_rule(total_operation_time: float, idle_time: float) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# Driving time must always be less than or equal to the total operation time.
def driving_time_rule(total_operation_time: float, driving_time: float) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False

# PTO-engaged stops cannot exceed the total number of stops.
def pto_stops_rule(total_stops: int, pto_engaged_stops: int) -> bool:
    if pto_engaged_stops <= total_stops:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 2's load.
def axle_load_rule(axle_1_load: float, axle_2_load: float) -> bool:
    if axle_1_load <= axle_2_load:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def axle_weight_rule(axle_1_weight: float, axle_3_weight: float) -> bool:
    if axle_1_weight <= axle_3_weight:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def payload_rule(payload: float, axle_2_load: float) -> bool:
    if payload <= axle_2_load:
        return True
    else:
        return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def total_operation_time_rule(pto_time: float, idle_time: float, driving_time: float) -> bool:
    if pto_time + idle_time + driving_time <= total_operation_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
PTO operation time should be less than or equal to the total operation time.
Driving time cannot be greater than the total operation time.
Stops with PTO engaged cannot outnumber the total stops.
The load supported by axle 1 cannot exceed that of axle 2.
The weight on axle 1 cannot surpass the weight on axle 3.
The payload must not exceed the load carried by axle 2.
Axle 3's load must always be equal to or greater than the payload.
";"
```python
# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_h: float) -> bool:
    if fuel_consumption_dm3_h >= 5 and distance_km >= 20:
        return True
    else:
        return False

# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r2(distance_km: float, fuel_consumption_dm3_100km: float) -> bool:
    if fuel_consumption_dm3_100km >= 40 and distance_km >= 20:
        return True
    else:
        return False

# PTO operation time should be less than or equal to the total operation time.
def r3(pto_time_hours: float, total_operation_time_hours: float) -> bool:
    if pto_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# Driving time cannot be greater than the total operation time.
def r4(driving_time_hours: float, total_operation_time_hours: float) -> bool:
    if driving_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# Stops with PTO engaged cannot outnumber the total stops.
def r5(stops_with_pto: int, total_stops: int) -> bool:
    if stops_with_pto <= total_stops:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r6(axle1_load_tons: float, axle2_load_tons: float) -> bool:
    if axle1_load_tons <= axle2_load_tons:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r7(axle1_weight_tons: float, axle3_weight_tons: float) -> bool:
    if axle1_weight_tons <= axle3_weight_tons:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 2.
def r8(payload_tons: float, axle2_load_tons: float) -> bool:
    if payload_tons <= axle2_load_tons:
        return True
    else:
        return False

# Axle 3's load must always be equal to or greater than the payload.
def r9(axle3_load_tons: float, payload_tons: float) -> bool:
    if axle3_load_tons >= payload_tons:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
Idle time cannot be greater than the total operation time.
Driving time should be less than or equal to the total operation time.
The total stop count must not be lower than the count of stops where PTO is engaged.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
The load supported by axle 1 cannot exceed that of axle 3.
The payload must not exceed the load carried by axle 2.
The payload must not exceed the load carried by axle 3.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"
```python
# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def fuel_consumption_check(distance_km: float, fuel_consumption_dm3_100km: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_100km >= 40:
        return True
    else:
        return False

# Idle time cannot be greater than the total operation time.
def idle_time_check(idle_time_hours: float, total_operation_time_hours: float) -> bool:
    if idle_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# Driving time should be less than or equal to the total operation time.
def driving_time_check(driving_time_hours: float, total_operation_time_hours: float) -> bool:
    if driving_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def stop_count_check(total_stop_count: int, pto_engaged_stops_count: int) -> bool:
    if total_stop_count >= pto_engaged_stops_count:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def load_axle1_check(load_axle1_tons: float, load_axle2_tons: float) -> bool:
    if load_axle1_tons <= load_axle2_tons:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 3.
def load_axle1_vs_axle3_check(load_axle1_tons: float, load_axle3_tons: float) -> bool:
    if load_axle1_tons <= load_axle3_tons:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 2.
def payload_check(payload_tons: float, load_axle2_tons: float) -> bool:
    if payload_tons <= load_axle2_tons:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def payload_vs_axle3_check(payload_tons: float, load_axle3_tons: float) -> bool:
    if payload_tons <= load_axle3_tons:
        return True
    else:
        return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def operation_time_check(pto_operation_time_hours: float, idle_time_hours: float, driving_time_hours: float, total_operation_time_hours: float) -> bool:
    if (pto_operation_time_hours + idle_time_hours + driving_time_hours) <= total_operation_time_hours:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
PTO operation time should be less than or equal to the total operation time.
Idle time should be less than or equal to the total operation time.
Driving time cannot be greater than the total operation time.
The total stop count must not be lower than the count of stops where PTO is engaged.
Axle 1's load cannot exceed Axle 2's load.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
The payload cannot exceed the capacity of axle 3.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"
```python
# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def fuel_consumption(journey_km: float, fuel_consumption_dm3h: float) -> bool:
    if journey_km >= 20 and fuel_consumption_dm3h >= 5:
        return True
    else:
        return False

# PTO operation time should be less than or equal to the total operation time.
def pto_time(total_operation_time: float, pto_time: float) -> bool:
    if pto_time <= total_operation_time:
        return True
    else:
        return False

# Idle time should be less than or equal to the total operation time.
def idle_time(total_operation_time: float, idle_time: float) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# Driving time cannot be greater than the total operation time.
def driving_time(total_operation_time: float, driving_time: float) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def stop_count(stops_total: int, pto_engaged_stops: int) -> bool:
    if stops_total >= pto_engaged_stops:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 2's load.
def axle_load(axle_1_load: float, axle_2_load: float) -> bool:
    if axle_1_load <= axle_2_load:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def load_on_axles(axle_1_load: float, axle_3_load: float) -> bool:
    if axle_1_load <= axle_3_load:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 3.
def payload_capacity(payload: float, axle_3_capacity: float) -> bool:
    if payload <= axle_3_capacity:
        return True
    else:
        return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def combined_time(total_operation_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    if (pto_time + idle_time + driving_time) <= total_operation_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
PTO operation time should be less than or equal to the total operation time.
The total operation duration must not be lower than the idle time.
The total operation durationmust not be lower than the driving time.
Stops with PTO engaged cannot outnumber the total stops.
The load on axle 1 must not surpass the load on axle 2.
Axle 2's load must always be equal to or greater than the payload.
Axle 3's load must always be equal to or greater than the payload.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";"
```python
# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def fuel_consumption_rule(distance_km: float, fuel_consumption_dm3_per_100km: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_100km < (40 * 100 / distance_km):
        return True
    else:
        return False

# PTO operation time should be less than or equal to the total operation time.
def pto_operation_time_rule(total_operation_time: float, pto_operation_time: float) -> bool:
    if pto_operation_time <= total_operation_time:
        return True
    else:
        return False

# The total operation duration must not be lower than the idle time.
def total_operation_duration_idle_time_rule(total_operation_time: float, idle_time: float) -> bool:
    if total_operation_time >= idle_time:
        return True
    else:
        return False

# The total operation duration must not be lower than the driving time.
def total_operation_duration_driving_time_rule(total_operation_time: float, driving_time: float) -> bool:
    if total_operation_time >= driving_time:
        return True
    else:
        return False

# Stops with PTO engaged cannot outnumber the total stops.
def stops_with_pto_engaged_rule(total_stops: int, stops_with_pto: int) -> bool:
    if stops_with_pto <= total_stops:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 2.
def load_on_axle_1_rule(axle_1_load: float, axle_2_load: float) -> bool:
    if axle_1_load <= axle_2_load:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def load_on_axle_2_payload_rule(payload: float, axle_2_load: float) -> bool:
    if axle_2_load >= payload:
        return True
    else:
        return False

# Axle 3's load must always be equal to or greater than the payload.
def load_on_axle_3_payload_rule(payload: float, axle_3_load: float) -> bool:
    if axle_3_load >= payload:
        return True
    else:
        return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def total_operation_time_rule_again(total_operation_time: float, pto_operation_time: float, idle_time: float, driving_time: float) -> bool:
    if total_operation_time >= (pto_operation_time + idle_time + driving_time):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
PTO operation time must be less than or equal to the total operation time.
Idle time cannot be greater than the total operation time.
Driving time should be less than or equal to the total operation time.
PTO-engaged stops cannot exceed the total number of stops.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
The load on axle 1 must not surpass the load on axle 3.
Axle 2's load must always be equal to or greater than the payload.
";"
```python
# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def min_fuel_consumption(distance_km: float, fuel_consumption_dm3_h: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_h == 5:
        return True
    else:
        return False

# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def avg_fuel_consumption(distance_km: float, fuel_consumption_dm3_100km: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_100km == 40:
        return True
    else:
        return False

# PTO operation time must be less than or equal to the total operation time.
def pto_time(total_operation_time: float, pto_time: float) -> bool:
    if pto_time <= total_operation_time:
        return True
    else:
        return False

# Idle time cannot be greater than the total operation time.
def idle_time(total_operation_time: float, idle_time: float) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# Driving time should be less than or equal to the total operation time.
def driving_time(total_operation_time: float, driving_time: float) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False

# PTO-engaged stops cannot exceed the total number of stops.
def pto_stops(total_stops: int, pto_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def load_axle1(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load <= axle2_load:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 3.
def load_axle1_axle3(axle1_load: float, axle3_load: float) -> bool:
    if axle1_load <= axle3_load:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def load_axle2_payload(axle2_load: float, payload: float) -> bool:
    if axle2_load >= payload:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
The total operation duration must not be lower than the idle time.
The total operation durationmust not be lower than the driving time.
Stops with PTO engaged cannot outnumber the total stops.
The load supported by axle 1 cannot exceed that of axle 2.
The load on axle 1 must not surpass the load on axle 3.
Axle 3's load must always be equal to or greater than the payload.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";"
```python
# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def r1(average_hourly_fuel_consumption: float, min_distance_km: int) -> bool:
    if average_hourly_fuel_consumption >= 5 and min_distance_km >= 20:
        return True
    else:
        return False

# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r2(avg_fuel_consumption_per_distance_dm3_100km: float, min_distance_km: int) -> bool:
    if avg_fuel_consumption_per_distance_dm3_100km >= 40 and min_distance_km >= 20:
        return True
    else:
        return False

# The total operation duration must not be lower than the idle time.
def r3(total_operation_duration_seconds: int, idle_time_seconds: int) -> bool:
    if total_operation_duration_seconds >= idle_time_seconds:
        return True
    else:
        return False

# The total operation duration must not be lower than the driving time.
def r4(total_operation_duration_seconds: int, driving_time_seconds: int) -> bool:
    if total_operation_duration_seconds >= driving_time_seconds:
        return True
    else:
        return False

# Stops with PTO engaged cannot outnumber the total stops.
def r5(stops_with_pto: int, total_stops: int) -> bool:
    if stops_with_pto <= total_stops:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 2.
def r6(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load <= axle2_load:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 3.
def r7(axle1_load: float, axle3_load: float) -> bool:
    if axle1_load <= axle3_load:
        return True
    else:
        return False

# Axle 3's load must always be equal to or greater than the payload.
def r8(axle3_load: float, payload: float) -> bool:
    if axle3_load >= payload:
        return True
    else:
        return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r9(total_operation_duration_seconds: int, pto_time_seconds: int, idle_time_seconds: int, driving_time_seconds: int) -> bool:
    if total_operation_duration_seconds >= (pto_time_seconds + idle_time_seconds + driving_time_seconds):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
The total operation duration must not be lower than the PTO operation time.
Idle time must always be less than or equal to the total operation time.
Stops with PTO engaged should never outnumber total stops.
The load supported by axle 1 cannot exceed that of axle 2.
Axle 1's load cannot exceed Axle 3's load.
Axle 2's load must always be equal to or greater than the payload.
The payload must not exceed the load carried by axle 3.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";"
```python
# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def min_fuel_consumption(distance_km: float, fuel_consumption_dm3_100km: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_100km == 40:
        return True
    else:
        return False

# The total operation duration must not be lower than the PTO operation time.
def total_operation_time_not_lower_than_pto(operation_time: float, pto_time: float) -> bool:
    if operation_time >= pto_time:
        return True
    else:
        return False

# Idle time must always be less than or equal to the total operation time.
def idle_time_less_than_or_equal_to_total(operation_time: float, idle_time: float) -> bool:
    if idle_time <= operation_time:
        return True
    else:
        return False

# Stops with PTO engaged should never outnumber total stops.
def stops_with_pto_less_than_total_stops(total_stops: int, pto_engaged_stops: int) -> bool:
    if pto_engaged_stops <= total_stops:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 2.
def load_axle1_less_than_or_equal_to_axle2(load_axle1: float, load_axle2: float) -> bool:
    if load_axle1 <= load_axle2:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 3's load.
def load_axle1_less_than_or_equal_to_axle3(load_axle1: float, load_axle3: float) -> bool:
    if load_axle1 <= load_axle3:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def load_axle2_greater_than_or_equal_to_payload(load_axle2: float, payload: float) -> bool:
    if load_axle2 >= payload:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def payload_less_than_or_equal_to_load_axle3(payload: float, load_axle3: float) -> bool:
    if payload <= load_axle3:
        return True
    else:
        return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def total_operation_time_not_lower_than_combination(operation_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    if operation_time >= (pto_time + idle_time + driving_time):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
PTO operation time should be less than or equal to the total operation time.
Idle time must always be less than or equal to the total operation time.
Driving time should be less than or equal to the total operation time.
PTO-engaged stops cannot exceed the total number of stops.
The load supported by axle 1 cannot exceed that of axle 2.
The payload must always be smaller than or equal to the load on axle 2.
Payload must remain below or equal to the load carried by axle 3.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"
```python
# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def fuel_consumption(min_distance: float, min_fuel_consumption: float) -> bool:
    if min_fuel_consumption >= 5 and min_distance >= 20:
        return True
    else:
        return False

# PTO operation time should be less than or equal to the total operation time.
def pto_time(total_time: float, pto_time: float) -> bool:
    if pto_time <= total_time:
        return True
    else:
        return False

# Idle time must always be less than or equal to the total operation time.
def idle_time(total_time: float, idle_time: float) -> bool:
    if idle_time <= total_time:
        return True
    else:
        return False

# Driving time should be less than or equal to the total operation time.
def driving_time(total_time: float, driving_time: float) -> bool:
    if driving_time <= total_time:
        return True
    else:
        return False

# PTO-engaged stops cannot exceed the total number of stops.
def pto_stops(total_stops: int, pto_stops: int) -> bool:
    if pto_stops <= total_stops:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 2.
def axle_load(axle_1_load: float, axle_2_load: float) -> bool:
    if axle_1_load <= axle_2_load:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 2.
def payload(axle_2_load: float, payload: float) -> bool:
    if payload <= axle_2_load:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 3.
def payload_axle_3(axle_3_load: float, payload: float) -> bool:
    if payload <= axle_3_load:
        return True
    else:
        return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def total_operation_time(pto_time: float, idle_time: float, driving_time: float) -> bool:
    if pto_time + idle_time + driving_time <= total_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
PTO operation time must be less than or equal to the total operation time.
The total operation durationmust not be lower than the driving time.
The load supported by axle 1 cannot exceed that of axle 2.
The load supported by axle 1 cannot exceed that of axle 3.
The payload cannot exceed the capacity of axle 2.
The payload must not exceed the load carried by axle 3.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";"
```python
# Vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def fuel_consumption(min_km, min_dm_per_hour):
    if min_km >= 20 and min_dm_per_hour >= 5:
        return True
    else:
        return False

# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def min_fuel_consumption_100km(min_km, min_dm_per_100km):
    if min_km >= 20 and min_dm_per_100km == 40:
        return True
    else:
        return False

# PTO operation time must be less than or equal to the total operation time.
def pto_operation_time(total_operation_time):
    if pto_operation_time <= total_operation_time:
        return True
    else:
        return False

# The total operation duration must not be lower than the driving time.
def total_operation_duration(driving_time):
    if total_operation_duration >= driving_time:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 2.
def load_axle1(axle1_load, axle2_load):
    if axle1_load <= axle2_load:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 3.
def load_axle1(axle1_load, axle3_load):
    if axle1_load <= axle3_load:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 2.
def payload_capacity(axle2_capacity, payload):
    if payload <= axle2_capacity:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def payload_axle3(payload, axle3_load):
    if payload <= axle3_load:
        return True
    else:
        return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def total_operation_time(pto_time, idle_time, driving_time):
    if total_operation_time >= pto_time + idle_time + driving_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
Idle time must always be less than or equal to the total operation time.
Driving time cannot be greater than the total operation time.
PTO-engaged stops cannot exceed the total number of stops.
The load supported by axle 1 cannot exceed that of axle 2.
Axle 1's load cannot exceed Axle 3's load.
The payload cannot exceed the capacity of axle 2.
Axle 3's load must always be equal to or greater than the payload.
";"
```python
# Vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def fuel_consumption(min_km, min_dm_per_hour):
    if min_dm_per_hour >= 5 and min_km >= 20:
        return True
    else:
        return False

# Minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def fuel_consumption_per_distance(min_km, min_dm_per_100km):
    if min_dm_per_100km >= 40 and min_km >= 20:
        return True
    else:
        return False

# Idle time must always be less than or equal to the total operation time.
def idle_time(total_operation_time, idle_time):
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# Driving time cannot be greater than the total operation time.
def driving_time(total_operation_time, driving_time):
    if driving_time <= total_operation_time:
        return True
    else:
        return False

# PTO-engaged stops cannot exceed the total number of stops.
def pto_stops(total_stops, pto_engaged_stops):
    if pto_engaged_stops <= total_stops:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 2.
def axle_load(axle_1_load, axle_2_load):
    if axle_1_load <= axle_2_load:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 3's load.
def axle_comparison(axle_1_load, axle_3_load):
    if axle_1_load <= axle_3_load:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 2.
def payload_capacity(axle_2_capacity, payload):
    if payload <= axle_2_capacity:
        return True
    else:
        return False

# Axle 3's load must always be equal to or greater than the payload.
def axle_3_load(payload, axle_3_load):
    if payload <= axle_3_load:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
PTO operation time cannot be greater than the total operation time.
PTO-engaged stops cannot exceed the total number of stops.
The weight on axle 1 cannot surpass the weight on axle 2.
The weight on axle 1 cannot surpass the weight on axle 3.
The payload cannot exceed the capacity of axle 2.
Payload must remain below or equal to the load carried by axle 3.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";"
```python
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_hour >= 5:
        return True
    else:
        return False

# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r2(distance_km: float, fuel_consumption_dm3_per_100km: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_100km >= 40:
        return True
    else:
        return False

# PTO operation time cannot be greater than the total operation time.
def r3(total_operation_time_seconds: float, pto_operation_time_seconds: float) -> bool:
    if pto_operation_time_seconds <= total_operation_time_seconds:
        return True
    else:
        return False

# PTO-engaged stops cannot exceed the total number of stops.
def r4(total_stops: int, pto_engaged_stops: int) -> bool:
    if pto_engaged_stops <= total_stops:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def r5(axle1_weight_kg: float, axle2_weight_kg: float) -> bool:
    if axle1_weight_kg <= axle2_weight_kg:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r6(axle1_weight_kg: float, axle3_weight_kg: float) -> bool:
    if axle1_weight_kg <= axle3_weight_kg:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 2.
def r7(payload_kg: float, axle2_capacity_kg: float) -> bool:
    if payload_kg <= axle2_capacity_kg:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 3.
def r8(payload_kg: float, axle3_load_kg: float) -> bool:
    if payload_kg <= axle3_load_kg:
        return True
    else:
        return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def r9(total_operation_duration_seconds: float, pto_time_seconds: float, idle_time_seconds: float, driving_time_seconds: float) -> bool:
    if total_operation_duration_seconds >= (pto_time_seconds + idle_time_seconds + driving_time_seconds):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
The total operation duration must not be lower than the PTO operation time.
Total operation time should shouldn’t be lower than driving time.
Stops with PTO engaged cannot outnumber the total stops.
Axle 1's load cannot exceed Axle 2's load.
The load on axle 1 must not surpass the load on axle 3.
The payload cannot exceed the capacity of axle 2.
The payload cannot exceed the capacity of axle 3.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";"
```python
# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def fuel_consumption(journey_km: float, fuel_consumption_dm3h: float) -> bool:
    if journey_km >= 20 and fuel_consumption_dm3h >= 5:
        return True
    else:
        return False

# The total operation duration must not be lower than the PTO operation time.
def total_operation_time(total_time: float, pto_time: float) -> bool:
    if total_time >= pto_time:
        return True
    else:
        return False

# Total operation time should shouldn’t be lower than driving time.
def driving_time(driving_time: float, total_time: float) -> bool:
    if driving_time <= total_time:
        return True
    else:
        return False

# Stops with PTO engaged cannot outnumber the total stops.
def stops_with_pto(stops_with_pto: int, total_stops: int) -> bool:
    if stops_with_pto <= total_stops:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 2's load.
def axle_load(axle_1_load: float, axle_2_load: float) -> bool:
    if axle_1_load <= axle_2_load:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 3.
def load_on_axles(axle_1_load: float, axle_3_load: float) -> bool:
    if axle_1_load <= axle_3_load:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 2.
def payload_capacity(axle_2_capacity: float, payload: float) -> bool:
    if payload <= axle_2_capacity:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 3.
def payload_capacity_axle_3(axle_3_capacity: float, payload: float) -> bool:
    if payload <= axle_3_capacity:
        return True
    else:
        return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def total_time_requirements(total_time: float, pto_time: float, driving_time: float, idle_time: float) -> bool:
    if total_time >= (pto_time + driving_time + idle_time):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
Idle time must always be less than or equal to the total operation time.
The total operation durationmust not be lower than the driving time.
Stops with PTO engaged cannot outnumber the total stops.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
Axle 1's load cannot exceed Axle 3's load.
The payload cannot exceed the capacity of axle 2.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"
```python
# Vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def fuel_consumption(min_fuel_consumption, traveled_km):
    if traveled_km >= 20 and min_fuel_consumption >= 5:
        return True
    else:
        return False

# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def fuel_consumption_per_distance(min_fuel_consumption_per_distance, traveled_km):
    if traveled_km >= 20 and min_fuel_consumption_per_distance >= 40:
        return True
    else:
        return False

# Idle time must always be less than or equal to the total operation time.
def idle_time(total_operation_time, idle_time):
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# The total operation duration must not be lower than the driving time.
def total_operation_time(driving_time, total_operation_time):
    if total_operation_time >= driving_time:
        return True
    else:
        return False

# Stops with PTO engaged cannot outnumber the total stops.
def stops_with_PTO(stops_with_PTO, total_stops):
    if stops_with_PTO <= total_stops:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def load_on_axles(load_axle_1, load_axle_2):
    if load_axle_1 <= load_axle_2:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 3's load.
def load_on_axle_1_and_3(load_axle_1, load_axle_3):
    if load_axle_1 <= load_axle_3:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 2.
def payload_capacity(payload, load_axle_2):
    if payload <= load_axle_2:
        return True
    else:
        return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def combined_time(PTO_time, idle_time, driving_time, total_operation_time):
    if PTO_time + idle_time + driving_time <= total_operation_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
PTO operation time cannot be greater than the total operation time.
The total operation duration must not be lower than the idle time.
Driving time cannot be greater than the total operation time.
Stops with PTO engaged should never outnumber total stops.
The weight on axle 1 cannot surpass the weight on axle 2.
The weight on axle 1 cannot surpass the weight on axle 3.
Axle 2's load must always be equal to or greater than the payload.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";"
```python
# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def fuel_consumption(journey_km: float, fuel_consumption_dm3h: float) -> bool:
    if journey_km >= 20 and fuel_consumption_dm3h >= 5:
        return True
    else:
        return False

# PTO operation time cannot be greater than the total operation time.
def pto_time(total_operation_time: float, pto_time: float) -> bool:
    if pto_time <= total_operation_time:
        return True
    else:
        return False

# The total operation duration must not be lower than the idle time.
def total_operation_idle(idle_time: float, total_operation_time: float) -> bool:
    if total_operation_time >= idle_time:
        return True
    else:
        return False

# Driving time cannot be greater than the total operation time.
def driving_time(total_operation_time: float, driving_time: float) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False

# Stops with PTO engaged should never outnumber total stops.
def stops_p_to_total_stops(total_stops: int, stops_with_p_to: int) -> bool:
    if stops_with_p_to <= total_stops:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def weight_axle_1(axle_1_weight: float, axle_2_weight: float) -> bool:
    if axle_1_weight <= axle_2_weight:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def weight_axle_1_axle_3(axle_1_weight: float, axle_3_weight: float) -> bool:
    if axle_1_weight <= axle_3_weight:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def axle_2_load(payload: float, axle_2_load: float) -> bool:
    if axle_2_load >= payload:
        return True
    else:
        return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def total_operation_combined_time(pto_time: float, idle_time: float, driving_time: float) -> bool:
    if total_operation_time >= (pto_time + idle_time + driving_time):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
PTO operation time cannot be greater than the total operation time.
Idle time must always be less than or equal to the total operation time.
The total operation durationmust not be lower than the driving time.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
The weight on axle 1 cannot surpass the weight on axle 3.
The payload cannot exceed the capacity of axle 2.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"
```python
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_hour >= 5:
        return True
    else:
        return False

# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r2(distance_km: float, fuel_consumption_dm3_per_100km: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_100km >= 40:
        return True
    else:
        return False

# PTO operation time cannot be greater than the total operation time.
def r3(pto_time_hours: float, total_operation_time_hours: float) -> bool:
    if pto_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# Idle time must always be less than or equal to the total operation time.
def r4(idle_time_hours: float, total_operation_time_hours: float) -> bool:
    if idle_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# The total operation duration must not be lower than the driving time.
def r5(total_operation_time_hours: float, driving_time_hours: float) -> bool:
    if total_operation_time_hours >= driving_time_hours:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def r6(axle1_load_kg: float, axle2_load_kg: float) -> bool:
    if axle1_load_kg <= axle2_load_kg:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r7(axle1_weight_kg: float, axle3_weight_kg: float) -> bool:
    if axle1_weight_kg <= axle3_weight_kg:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 2.
def r8(payload_kg: float, axle2_capacity_kg: float) -> bool:
    if payload_kg <= axle2_capacity_kg:
        return True
    else:
        return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r9(pto_time_hours: float, idle_time_hours: float, driving_time_hours: float, total_operation_time_hours: float) -> bool:
    if (pto_time_hours + idle_time_hours + driving_time_hours) <= total_operation_time_hours:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
PTO operation time should be less than or equal to the total operation time.
Driving time must always be less than or equal to the total operation time.
Stops with PTO engaged should never outnumber total stops.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
Axle 1's load cannot exceed Axle 3's load.
Axle 2's load must always be equal to or greater than the payload.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"
```python
# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def fuel_consumption_1(distance_km: float, fuel_consumption_dm3_h: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_h >= 5:
        return True
    else:
        return False

# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def fuel_consumption_2(distance_km: float, fuel_consumption_dm3_100km: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_100km >= 40:
        return True
    else:
        return False

# PTO operation time should be less than or equal to the total operation time.
def pto_time_total_time(pto_time_hours: float, total_time_hours: float) -> bool:
    if pto_time_hours <= total_time_hours:
        return True
    else:
        return False

# Driving time must always be less than or equal to the total operation time.
def driving_time_total_time(driving_time_hours: float, total_time_hours: float) -> bool:
    if driving_time_hours <= total_time_hours:
        return True
    else:
        return False

# Stops with PTO engaged should never outnumber total stops.
def stops_p_to_o(stops_with_pto: int, total_stops: int) -> bool:
    if stops_with_pto <= total_stops:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def load_axle_1_load_axle_2(load_axle_1_tons: float, load_axle_2_tons: float) -> bool:
    if load_axle_1_tons <= load_axle_2_tons:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 3's load.
def load_axle_1_load_axle_3(load_axle_1_tons: float, load_axle_3_tons: float) -> bool:
    if load_axle_1_tons <= load_axle_3_tons:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def load_axle_2_payload(load_axle_2_tons: float, payload_tons: float) -> bool:
    if load_axle_2_tons >= payload_tons:
        return True
    else:
        return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def combined_time_total_time(pto_time_hours: float, idle_time_hours: float, driving_time_hours: float, total_time_hours: float) -> bool:
    if (pto_time_hours + idle_time_hours + driving_time_hours) <= total_time_hours:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
The total operation duration must not be lower than the PTO operation time.
The total operation durationmust not be lower than the driving time.
Stops with PTO engaged cannot outnumber the total stops.
Axle 1's load cannot exceed Axle 2's load.
The payload must not exceed the load carried by axle 2.
The payload must not exceed the load carried by axle 3.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"
```python
# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def fuel_consumption_1(distance_km: float, fuel_consumption_dm3_h: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_h >= 5:
        return True
    else:
        return False

# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def fuel_consumption_2(distance_km: float, fuel_consumption_dm3_100km: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_100km >= 40:
        return True
    else:
        return False

# The total operation duration must not be lower than the PTO operation time.
def operation_duration_1(operation_time: float, total_operation_time: float) -> bool:
    if operation_time <= total_operation_time:
        return True
    else:
        return False

# The total operation duration must not be lower than the driving time.
def operation_duration_2(driving_time: float, total_operation_time: float) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False

# Stops with PTO engaged cannot outnumber the total stops.
def stops_PTO(stops_with_PTO: int, total_stops: int) -> bool:
    if stops_with_PTO <= total_stops:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 2's load.
def load_axle_1(load_axle_1: float, load_axle_2: float) -> bool:
    if load_axle_1 <= load_axle_2:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 2.
def payload_axle_2(payload: float, load_axle_2: float) -> bool:
    if payload <= load_axle_2:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def payload_axle_3(payload: float, load_axle_3: float) -> bool:
    if payload <= load_axle_3:
        return True
    else:
        return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def total_operation_time(operation_time: float, idling_time: float, driving_time: float, total_operation_time: float) -> bool:
    if operation_time + idling_time + driving_time <= total_operation_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
PTO operation time must be less than or equal to the total operation time.
Idle time must always be less than or equal to the total operation time.
Total operation time should shouldn’t be lower than driving time.
The weight on axle 1 cannot surpass the weight on axle 2.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
Axle 3's load must always be equal to or greater than the payload.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"
```python
# The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def fuel_consumption(min_fuel_consumption: float, traveled_km: float) -> bool:
    if traveled_km >= 20 and min_fuel_consumption >= 5:
        return True
    else:
        return False

# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def fuel_consumption_per_distance(min_fuel_consumption_per_km: float, traveled_km: float) -> bool:
    if traveled_km >= 20 and min_fuel_consumption_per_km == 40 / 100:
        return True
    else:
        return False

# PTO operation time must be less than or equal to the total operation time.
def pto_time(total_operation_time: float, pto_time: float) -> bool:
    if pto_time <= total_operation_time:
        return True
    else:
        return False

# Idle time must always be less than or equal to the total operation time.
def idle_time(total_operation_time: float, idle_time: float) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# Total operation time should shouldn’t be lower than driving time.
def total_operation_time(driving_time: float, total_operation_time: float) -> bool:
    if total_operation_time >= driving_time:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def weight_on_axle(weight_on_axle_1: float, weight_on_axle_2: float) -> bool:
    if weight_on_axle_1 <= weight_on_axle_2:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def load_on_axle(load_on_axle_1: float, load_on_axle_3: float) -> bool:
    if load_on_axle_1 <= load_on_axle_3:
        return True
    else:
        return False

# Axle 3's load must always be equal to or greater than the payload.
def payload_comparison(payload: float, load_on_axle_3: float) -> bool:
    if load_on_axle_3 >= payload:
        return True
    else:
        return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def combined_time(total_operation_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    if pto_time + idle_time + driving_time <= total_operation_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
PTO operation time should be less than or equal to the total operation time.
Total operation time should shouldn’t be lower than driving time.
PTO-engaged stops cannot exceed the total number of stops.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
The load supported by axle 1 cannot exceed that of axle 3.
Payload must remain below or equal to the load carried by axle 2.
Axle 3's load must always be equal to or greater than the payload.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";"
```python
# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def fuel_consumption_check(distance_km: float, fuel_consumption_dm3_100km: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_100km >= 40:
        return True
    else:
        return False

# PTO operation time should be less than or equal to the total operation time.
def pto_time_check(pto_time_seconds: float, total_operation_time_seconds: float) -> bool:
    if pto_time_seconds <= total_operation_time_seconds:
        return True
    else:
        return False

# Total operation time should be lower than or equal to driving time.
def total_operation_time_check(total_operation_time_seconds: float, driving_time_seconds: float) -> bool:
    if total_operation_time_seconds >= driving_time_seconds:
        return True
    else:
        return False

# PTO-engaged stops cannot exceed the total number of stops.
def pto_stops_check(pto_engaged_stops: int, total_stops: int) -> bool:
    if pto_engaged_stops <= total_stops:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def load_axle1_check(load_axle1_kg: float, load_axle2_kg: float) -> bool:
    if load_axle1_kg <= load_axle2_kg:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 3.
def load_axle1_axle3_check(load_axle1_kg: float, load_axle3_kg: float) -> bool:
    if load_axle1_kg <= load_axle3_kg:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def payload_check(payload_kg: float, load_axle2_kg: float) -> bool:
    if payload_kg <= load_axle2_kg:
        return True
    else:
        return False

# Axle 3's load must always be equal to or greater than the payload.
def load_axle3_payload_check(load_axle3_kg: float, payload_kg: float) -> bool:
    if load_axle3_kg >= payload_kg:
        return True
    else:
        return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def total_operation_duration_check(total_operation_duration_seconds: float, pto_time_seconds: float, idle_time_seconds: float, driving_time_seconds: float) -> bool:
    if total_operation_duration_seconds >= (pto_time_seconds + idle_time_seconds + driving_time_seconds):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
Idle time should be less than or equal to the total operation time.
The total operation durationmust not be lower than the driving time.
PTO-engaged stops cannot exceed the total number of stops.
The load on axle 1 must not surpass the load on axle 2.
Axle 2's load must always be equal to or greater than the payload.
The payload must always be smaller than or equal to the load on axle 3.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";"
```python
# The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def fuel_consumption(min_fuel_consumption: float, distance_km: float) -> bool:
    if distance_km >= 20 and min_fuel_consumption >= 5:
        return True
    else:
        return False

# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def fuel_consumption_per_distance(min_fuel_consumption_per_100km: float, distance_km: float) -> bool:
    if distance_km >= 20 and min_fuel_consumption_per_100km >= 40:
        return True
    else:
        return False

# Idle time should be less than or equal to the total operation time.
def idle_time(total_operation_time: float, idle_time: float) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# The total operation duration must not be lower than the driving time.
def total_operation_time(driving_time: float, total_operation_time: float) -> bool:
    if total_operation_time >= driving_time:
        return True
    else:
        return False

# PTO-engaged stops cannot exceed the total number of stops.
def pto_stops(max_stops: int, pto_engaged_stops: int) -> bool:
    if pto_engaged_stops <= max_stops:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 2.
def load_on_axle(load_on_axle1: float, load_on_axle2: float) -> bool:
    if load_on_axle1 <= load_on_axle2:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def payload_and_load_on_axle2(payload: float, load_on_axle2: float) -> bool:
    if load_on_axle2 >= payload:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 3.
def payload_and_load_on_axle3(payload: float, load_on_axle3: float) -> bool:
    if payload <= load_on_axle3:
        return True
    else:
        return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def total_operation_time_combined(pto_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
    if total_operation_time >= pto_time + idle_time + driving_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
PTO operation time should be less than or equal to the total operation time.
Idle time must always be less than or equal to the total operation time.
The load on axle 1 must not surpass the load on axle 2.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
Payload must remain below or equal to the load carried by axle 2.
The payload must not exceed the load carried by axle 3.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";"
```python
# If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
def min_avg_fuel_consumption(distance_km: float, avg_fuel_consumption_dm3_per_hour: float) -> bool:
    if distance_km >= 20 and avg_fuel_consumption_dm3_per_hour >= 5:
        return True
    else:
        return False

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def min_fuel_consumption_per_100km(distance_km: float, fuel_consumption_dm3_per_100km: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_100km >= 40:
        return True
    else:
        return False

# PTO operation time should be less than or equal to the total operation time.
def pto_time_total_operation_time(pto_time_hours: float, total_operation_time_hours: float) -> bool:
    if pto_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# Idle time must always be less than or equal to the total operation time.
def idle_time_total_operation_time(idle_time_hours: float, total_operation_time_hours: float) -> bool:
    if idle_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 2.
def load_axle1_load_axle2(load_axle1: float, load_axle2: float) -> bool:
    if load_axle1 <= load_axle2:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def load_axle1_load_axle3(load_axle1: float, load_axle3: float) -> bool:
    if load_axle1 <= load_axle3:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def payload_load_axle2(payload: float, load_axle2: float) -> bool:
    if payload <= load_axle2:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def payload_load_axle3(payload: float, load_axle3: float) -> bool:
    if payload <= load_axle3:
        return True
    else:
        return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def total_operation_time_min_driving_idle_pto(total_operation_time_hours: float, pto_time_hours: float, idle_time_hours: float) -> bool:
    if total_operation_time_hours >= (pto_time_hours + idle_time_hours):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
The total operation duration must not be lower than the PTO operation time.
Idle time cannot be greater than the total operation time.
Total operation time should shouldn’t be lower than driving time.
The weight on axle 1 cannot surpass the weight on axle 2.
The payload must not exceed the load carried by axle 2.
The payload cannot exceed the capacity of axle 3.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"
```python
# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def fuel_consumption_1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_hour >= 5:
        return True
    else:
        return False

# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def fuel_consumption_2(distance_km: float, fuel_consumption_dm3_per_100km: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_100km >= 40:
        return True
    else:
        return False

# The total operation duration must not be lower than the PTO operation time.
def total_operation_time(minimum_pto_time: float, total_operation_time: float) -> bool:
    if total_operation_time >= minimum_pto_time:
        return True
    else:
        return False

# Idle time cannot be greater than the total operation time.
def idle_time(idle_time: float, total_operation_time: float) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# Total operation time should shouldn’t be lower than driving time.
def driving_time(driving_time: float, total_operation_time: float) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def weight_on_axles(weight_axle1: float, weight_axle2: float) -> bool:
    if weight_axle1 <= weight_axle2:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 2.
def payload(load_axle2: float, payload: float) -> bool:
    if payload <= load_axle2:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 3.
def payload_capacity(capacity_axle3: float, payload: float) -> bool:
    if payload <= capacity_axle3:
        return True
    else:
        return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def combined_times(pto_time: float, idle_time: float, driving_time: float, total_operation_time: float) -> bool:
    if pto_time + idle_time + driving_time <= total_operation_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
PTO operation time should be less than or equal to the total operation time.
Total operation time shouldn’t be lower than idle time.
Driving time must always be less than or equal to the total operation time.
The load supported by axle 1 cannot exceed that of axle 2.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
Axle 2's load must always be equal to or greater than the payload.
The payload must always be smaller than or equal to the load on axle 3.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"
```python
# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def fuel_consumption(min_km: int, avg_dm_per_100km: float) -> bool:
    if min_km >= 20 and avg_dm_per_100km == 40:
        return True
    else:
        return False

# PTO operation time should be less than or equal to the total operation time.
def pto_time(total_time: float, pto_time: float) -> bool:
    if pto_time <= total_time:
        return True
    else:
        return False

# Total operation time shouldn’t be lower than idle time.
def total_time(idle_time: float, total_time: float) -> bool:
    if total_time >= idle_time:
        return True
    else:
        return False

# Driving time must always be less than or equal to the total operation time.
def driving_time(total_time: float, driving_time: float) -> bool:
    if driving_time <= total_time:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 2.
def axle_load(axle1: float, axle2: float) -> bool:
    if axle1 <= axle2:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def load_on_axles(axle1: float, axle3: float) -> bool:
    if axle1 <= axle3:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def payload(axle2: float, payload: float) -> bool:
    if axle2 >= payload:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 3.
def load_on_axle3(payload: float, axle3: float) -> bool:
    if payload <= axle3:
        return True
    else:
        return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def combined_time(pto_time: float, idle_time: float, driving_time: float, total_time: float) -> bool:
    if pto_time + idle_time + driving_time <= total_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
Total operation time shouldn’t be lower than PTO operation time.
Total operation time shouldn’t be lower than idle time.
The total operation durationmust not be lower than the driving time.
The number of stops where PTO is engaged must not exceed the overall stop count.
Axle 1's load cannot exceed Axle 2's load.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";"
```python
# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def fuel_consumption_1(distance_km: float, fuel_consumption_dm3_h: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_h >= 5:
        return True
    else:
        return False

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def fuel_consumption_2(distance_km: float, fuel_consumption_dm3_100km: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_100km >= 40:
        return True
    else:
        return False

# Total operation time shouldn’t be lower than PTO operation time.
def operation_time_1(operation_time_total: float, pto_operation_time: float) -> bool:
    if operation_time_total >= pto_operation_time:
        return True
    else:
        return False

# Total operation time shouldn’t be lower than idle time.
def operation_time_2(operation_time_total: float, idle_time: float) -> bool:
    if operation_time_total >= idle_time:
        return True
    else:
        return False

# The total operation durationmust not be lower than the driving time.
def operation_time_3(operation_time_total: float, driving_time: float) -> bool:
    if operation_time_total >= driving_time:
        return True
    else:
        return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def stops_p_to(operation_stop_count: int, overall_stop_count: int) -> bool:
    if operation_stop_count <= overall_stop_count:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 2's load.
def axle_load_1(axle_1_load: float, axle_2_load: float) -> bool:
    if axle_1_load <= axle_2_load:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def axle_load_2(axle_1_load: float, axle_3_load: float) -> bool:
    if axle_1_load <= axle_3_load:
        return True
    else:
        return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def total_operation_time(operation_time_total: float, pto_operation_time: float, idle_time: float, driving_time: float) -> bool:
    if operation_time_total >= (pto_operation_time + idle_time + driving_time):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
Idle time must always be less than or equal to the total operation time.
The total operation durationmust not be lower than the driving time.
Axle 1's load cannot exceed Axle 2's load.
The load on axle 1 must not surpass the load on axle 3.
The payload must not exceed the load carried by axle 2.
The payload must always be smaller than or equal to the load on axle 3.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";"
```python
# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def fuel_consumption(min_distance: int, avg_fuel_consumption: float) -> bool:
    if avg_fuel_consumption >= 5 and min_distance >= 20:
        return True
    else:
        return False

# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def fuel_consumption_per_100km(min_distance: int, avg_fuel_consumption_per_100km: float) -> bool:
    if avg_fuel_consumption_per_100km >= 40 and min_distance >= 20:
        return True
    else:
        return False

# Idle time must always be less than or equal to the total operation time.
def idle_time(total_operation_time: int, idle_time: int) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# The total operation duration must not be lower than the driving time.
def total_operation_time(driving_time: int, total_operation_time: int) -> bool:
    if total_operation_time >= driving_time:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 2's load.
def axle_load(axle_1_load: int, axle_2_load: int) -> bool:
    if axle_1_load <= axle_2_load:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 3.
def axle_load_comparison(axle_1_load: int, axle_3_load: int) -> bool:
    if axle_1_load <= axle_3_load:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 2.
def payload_and_axle_2(payload: int, axle_2_load: int) -> bool:
    if payload <= axle_2_load:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 3.
def payload_and_axle_3(payload: int, axle_3_load: int) -> bool:
    if payload <= axle_3_load:
        return True
    else:
        return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def total_operation_time_sum(pto_operation_time: int, idle_time: int, driving_time: int, total_operation_time: int) -> bool:
    if total_operation_time >= (pto_operation_time + idle_time + driving_time):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
PTO operation time cannot be greater than the total operation time.
The total operation duration must not be lower than the idle time.
Driving time should be less than or equal to the total operation time.
The number of stops where PTO is engaged must not exceed the overall stop count.
The load on axle 1 must not surpass the load on axle 2.
Payload must remain below or equal to the load carried by axle 3.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";"
```python
# Vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def fuel_consumption(min_km, min_dm_per_hour):
    if min_dm_per_hour >= 5 and min_km >= 20:
        return True
    else:
        return False

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def fuel_rate_100km(min_km, min_dm_100km):
    if min_km >= 20 and min_dm_100km == 40:
        return True
    else:
        return False

# PTO operation time cannot be greater than the total operation time.
def pto_time(total_time, pto_time):
    if pto_time <= total_time:
        return True
    else:
        return False

# The total operation duration must not be lower than the idle time.
def total_operation(idle_time, total_time):
    if total_time >= idle_time:
        return True
    else:
        return False

# Driving time should be less than or equal to the total operation time.
def driving_time(total_time, driving_time):
    if driving_time <= total_time:
        return True
    else:
        return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def stops_count(stops_with_pto, overall_stops):
    if stops_with_pto <= overall_stops:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 2.
def load_axle1(axle1_load, axle2_load):
    if axle1_load <= axle2_load:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 3.
def payload(axle3_load, payload):
    if payload <= axle3_load:
        return True
    else:
        return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def total_time_requirements(pto_time, idle_time, driving_time):
    if total_time >= (pto_time + idle_time + driving_time):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
PTO operation time cannot be greater than the total operation time.
Idle time cannot be greater than the total operation time.
The number of stops where PTO is engaged must not exceed the overall stop count.
The weight on axle 1 cannot surpass the weight on axle 3.
Payload must remain below or equal to the load carried by axle 2.
The payload must not exceed the load carried by axle 3.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"
```python
# Vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def fuel_consumption(min_km, min_dm_per_hour):
    if min_dm_per_hour >= 5 and min_km >= 20:
        return True
    else:
        return False

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def fuel_rate_100km(min_km, min_dm_100km):
    if min_km >= 20 and min_dm_100km == 40:
        return True
    else:
        return False

# PTO operation time cannot be greater than the total operation time.
def pto_time(total_time, pto_time):
    if pto_time <= total_time:
        return True
    else:
        return False

# Idle time cannot be greater than the total operation time.
def idle_time(total_time, idle_time):
    if idle_time <= total_time:
        return True
    else:
        return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def stops_p_to(total_stops, p_to_stops):
    if p_to_stops <= total_stops:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def weight_on_axle(weight_axle1, weight_axle3):
    if weight_axle1 <= weight_axle3:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def payload(axle2_load, payload):
    if payload <= axle2_load:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def payload_max(axle3_load, payload):
    if payload <= axle3_load:
        return True
    else:
        return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def total_operation_time(driving_time, pto_time, idle_time, total_time):
    if total_time >= (driving_time + pto_time + idle_time):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
PTO operation time must be less than or equal to the total operation time.
Idle time must always be less than or equal to the total operation time.
Total operation time should shouldn’t be lower than driving time.
PTO-engaged stops cannot exceed the total number of stops.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
Axle 2's load must always be equal to or greater than the payload.
Payload must remain below or equal to the load carried by axle 3.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";"
```python
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def fuel_consumption_rule(distance_km, fuel_consumption_dm3h):
    if distance_km >= 20 and fuel_consumption_dm3h < 5:
        return False
    return True

# PTO operation time must be less than or equal to the total operation time.
def pto_operation_time_rule(ptime, total_time):
    if ptime > total_time:
        return False
    return True

# Idle time must always be less than or equal to the total operation time.
def idle_time_rule(idle_time, total_time):
    if idle_time > total_time:
        return False
    return True

# Total operation time should not be lower than driving time.
def total_operation_time_rule(driving_time, total_time):
    if driving_time > total_time:
        return False
    return True

# PTO-engaged stops cannot exceed the total number of stops.
def pto_stops_rule(pto_stops, total_stops):
    if pto_stops > total_stops:
        return False
    return True

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def axle_load_rule(axle1_load, axle3_load):
    if axle1_load > axle3_load:
        return False
    return True

# Axle 2's load must always be equal to or greater than the payload.
def axle2_payload_rule(axle2_load, payload):
    if axle2_load < payload:
        return False
    return True

# Payload must remain below or equal to the load carried by axle 3.
def payload_axle3_rule(payload, axle3_load):
    if payload > axle3_load:
        return False
    return True

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def total_time_sum_rule(ptime, idle_time, driving_time, total_time):
    if ptime + idle_time + driving_time > total_time:
        return False
    return True
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
Driving time should be less than or equal to the total operation time.
PTO-engaged stops cannot exceed the total number of stops.
The weight on axle 1 cannot surpass the weight on axle 2.
The load on axle 1 must not surpass the load on axle 3.
The payload must always be smaller than or equal to the load on axle 2.
The payload must always be smaller than or equal to the load on axle 3.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";"
```python
# The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def fuel_consumption(min_fuel_consumption: float, distance_km: float) -> bool:
    if distance_km >= 20 and min_fuel_consumption >= 5:
        return True
    else:
        return False

# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def fuel_consumption_per_100km(min_fuel_consumption_100km: float, distance_km: float) -> bool:
    if distance_km >= 20 and min_fuel_consumption_100km == 40:
        return True
    else:
        return False

# Driving time should be less than or equal to the total operation time.
def driving_time(driving_time_hours: float, total_operation_time_hours: float) -> bool:
    if driving_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# PTO-engaged stops cannot exceed the total number of stops.
def pto_stops(max_pto_stops: int, total_stops: int) -> bool:
    if max_pto_stops <= total_stops:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def axle_weights(weight_axle1: float, weight_axle2: float) -> bool:
    if weight_axle1 <= weight_axle2:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 3.
def load_on_axles(load_axle1: float, load_axle3: float) -> bool:
    if load_axle1 <= load_axle3:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 2.
def payload_and_load(payload: float, load_axle2: float) -> bool:
    if payload <= load_axle2:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 3.
def payload_and_load2(payload: float, load_axle3: float) -> bool:
    if payload <= load_axle3:
        return True
    else:
        return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def total_operation_time(total_operation_time_hours: float, pto_time_hours: float, idle_time_hours: float, driving_time_hours: float) -> bool:
    if total_operation_time_hours >= (pto_time_hours + idle_time_hours + driving_time_hours):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
PTO operation time cannot be greater than the total operation time.
Idle time should be less than or equal to the total operation time.
The total operation durationmust not be lower than the driving time.
Stops with PTO engaged cannot outnumber the total stops.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
The payload cannot exceed the capacity of axle 2.
Axle 3's load must always be equal to or greater than the payload.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";"
```python
# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def min_fuel_consumption(distance_km: int, fuel_consumption_dm3: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3 == 40 / 100:
        return True
    else:
        return False

# PTO operation time cannot be greater than the total operation time.
def pto_time_limit(total_operation_time: float, pto_operation_time: float) -> bool:
    if pto_operation_time <= total_operation_time:
        return True
    else:
        return False

# Idle time should be less than or equal to the total operation time.
def idle_time_limit(total_operation_time: float, idle_time: float) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# The total operation duration must not be lower than the driving time.
def total_operation_time_driving_time(total_operation_time: float, driving_time: float) -> bool:
    if total_operation_time >= driving_time:
        return True
    else:
        return False

# Stops with PTO engaged cannot outnumber the total stops.
def stops_with_pto(total_stops: int, stops_with_pto: int) -> bool:
    if stops_with_pto <= total_stops:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def load_axle_1(axle_1_load: float, axle_3_load: float) -> bool:
    if axle_1_load <= axle_3_load:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 2.
def payload_capacity(axle_2_capacity: float, payload: float) -> bool:
    if payload <= axle_2_capacity:
        return True
    else:
        return False

# Axle 3's load must always be equal to or greater than the payload.
def axle_3_load_payload(axle_3_load: float, payload: float) -> bool:
    if axle_3_load >= payload:
        return True
    else:
        return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def total_time_requirements(total_operation_time: float, pto_operation_time: float, idle_time: float, driving_time: float) -> bool:
    if total_operation_time >= (pto_operation_time + idle_time + driving_time):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
PTO operation time should be less than or equal to the total operation time.
Idle time must always be less than or equal to the total operation time.
The total operation durationmust not be lower than the driving time.
The number of stops where PTO is engaged must not exceed the overall stop count.
Axle 1's load cannot exceed Axle 3's load.
Payload must remain below or equal to the load carried by axle 2.
Payload must remain below or equal to the load carried by axle 3.
";"
```python
# If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if fuel_consumption_dm3_per_hour / distance_km >= 5 / 20:
        return True
    else:
        return False

# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r2(distance_km: float, fuel_consumption_dm3_per_100km: float) -> bool:
    if fuel_consumption_dm3_per_100km / distance_km >= 40 / 100:
        return True
    else:
        return False

# PTO operation time should be less than or equal to the total operation time.
def r3(pto_time_hours: float, total_operation_time_hours: float) -> bool:
    if pto_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# Idle time must always be less than or equal to the total operation time.
def r4(idle_time_hours: float, total_operation_time_hours: float) -> bool:
    if idle_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# The total operation duration must not be lower than the driving time.
def r5(total_operation_time_hours: float, driving_time_hours: float) -> bool:
    if total_operation_time_hours >= driving_time_hours:
        return True
    else:
        return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def r6(stops_with_pto: int, overall_stop_count: int) -> bool:
    if stops_with_pto <= overall_stop_count:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 3's load.
def r7(axle1_load_tons: float, axle3_load_tons: float) -> bool:
    if axle1_load_tons <= axle3_load_tons:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def r8(payload_tons: float, axle2_load_tons: float) -> bool:
    if payload_tons <= axle2_load_tons:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 3.
def r9(payload_tons: float, axle3_load_tons: float) -> bool:
    if payload_tons <= axle3_load_tons:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
The total operation duration must not be lower than the PTO operation time.
Idle time should be less than or equal to the total operation time.
The total operation durationmust not be lower than the driving time.
The number of stops where PTO is engaged must not exceed the overall stop count.
The load supported by axle 1 cannot exceed that of axle 2.
The payload must not exceed the load carried by axle 2.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"
```python
# When the vehicle has traveled a minimum of 20 km, the lowest average hourly fuel consumption is 5 dm³/h.
def fuel_consumption(min_distance: int, min_fuel_consumption: float) -> bool:
    if min_distance >= 20 and min_fuel_consumption == 5:
        return True
    else:
        return False

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def fuel_rate_per_100km(min_distance: int, min_fuel_rate: float) -> bool:
    if min_distance >= 20 and min_fuel_rate == 40:
        return True
    else:
        return False

# The total operation duration must not be lower than the PTO operation time.
def total_operation_time(min_pto_time: int, total_time: int) -> bool:
    if total_time >= min_pto_time:
        return True
    else:
        return False

# Idle time should be less than or equal to the total operation time.
def idle_time(total_time: int, idle_time: int) -> bool:
    if idle_time <= total_time:
        return True
    else:
        return False

# The total operation duration must not be lower than the driving time.
def driving_time(total_time: int, driving_time: int) -> bool:
    if total_time >= driving_time:
        return True
    else:
        return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def stops_p_to(stops_p_to: int, overall_stops: int) -> bool:
    if stops_p_to <= overall_stops:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 2.
def load_axle1(axle1_load: int, axle2_load: int) -> bool:
    if axle1_load <= axle2_load:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 2.
def payload(axle2_load: int, payload: int) -> bool:
    if payload <= axle2_load:
        return True
    else:
        return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def total_time_sum(pto_time: int, idle_time: int, driving_time: int, total_time: int) -> bool:
    if total_time >= (pto_time + idle_time + driving_time):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
Total operation time shouldn’t be lower than PTO operation time.
Idle time should be less than or equal to the total operation time.
Driving time must always be less than or equal to the total operation time.
Stops with PTO engaged cannot outnumber the total stops.
The load on axle 1 must not surpass the load on axle 3.
Payload must remain below or equal to the load carried by axle 2.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";"
```python
# Vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def avg_fuel_consumption(min_km, min_dm_per_hour):
    if min_dm_per_hour >= (5 * 60):  # Convert hourly rate to per km
        return True
    else:
        return False

# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def fuel_consumption_per_distance(min_km, min_dm_per_100km):
    if min_km >= 20 and min_dm_per_100km >= 40:
        return True
    else:
        return False

# Total operation time shouldn't be lower than PTO operation time.
def total_operation_time(min_pto_time):
    # Assuming total_operation_time is defined elsewhere
    if total_operation_time >= min_pto_time:
        return True
    else:
        return False

# Idle time should be less than or equal to the total operation time.
def idle_time(max_idle_time):
    # Assuming total_operation_time is defined elsewhere
    if max_idle_time <= total_operation_time:
        return True
    else:
        return False

# Driving time must always be less than or equal to the total operation time.
def driving_time(max_driving_time):
    # Assuming total_operation_time is defined elsewhere
    if max_driving_time <= total_operation_time:
        return True
    else:
        return False

# Stops with PTO engaged cannot outnumber the total stops.
def stops_with_pto(total_stops, min_stops_with_pto):
    if total_stops - min_stops_with_pto <= total_stops:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 3.
def load_on_axle(load_axle1, load_axle3):
    if load_axle1 <= load_axle3:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def payload(load_axle2):
    # Assuming load_axle2 is defined elsewhere
    if payload <= load_axle2:
        return True
    else:
        return False

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def total_time(min_pto_time, min_idle_time, min_driving_time):
    if total_operation_time >= (min_pto_time + min_idle_time + min_driving_time):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
PTO operation time should be less than or equal to the total operation time.
Total operation time shouldn’t be lower than idle time.
Driving time should be less than or equal to the total operation time.
The number of stops where PTO is engaged must not exceed the overall stop count.
The weight on axle 1 cannot surpass the weight on axle 2.
The load supported by axle 1 cannot exceed that of axle 3.
The payload must always be smaller than or equal to the load on axle 3.
Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
";"
```python
# The vehicle's minimum average fuel consumption per 100 km, if it travels 20 km or more, is 40 dm³/100 km.
def fuel_consumption(min_km: int, avg_dm_per_100km: float) -> bool:
    if min_km >= 20 and avg_dm_per_100km == 40:
        return True
    else:
        return False

# PTO operation time should be less than or equal to the total operation time.
def pto_time(total_time: float, pto_time: float) -> bool:
    if pto_time <= total_time:
        return True
    else:
        return False

# Total operation time shouldn’t be lower than idle time.
def total_time(idle_time: float, total_time: float) -> bool:
    if total_time >= idle_time:
        return True
    else:
        return False

# Driving time should be less than or equal to the total operation time.
def driving_time(total_time: float, driving_time: float) -> bool:
    if driving_time <= total_time:
        return True
    else:
        return False

# The number of stops where PTO is engaged must not exceed the overall stop count.
def stops_count(stops_with_pto: int, overall_stops: int) -> bool:
    if stops_with_pto <= overall_stops:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def axle_weights(axle1_weight: float, axle2_weight: float) -> bool:
    if axle1_weight <= axle2_weight:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 3.
def load_supported(axle1_load: float, axle3_load: float) -> bool:
    if axle1_load <= axle3_load:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 3.
def payload(axle3_load: float, payload: float) -> bool:
    if payload <= axle3_load:
        return True
    else:
        return False

# Total operation time must be greater than or equal to the sum of PTO operation, idle, and driving times.
def total_time_sum(pto_time: float, idle_time: float, driving_time: float, total_time: float) -> bool:
    if total_time >= (pto_time + idle_time + driving_time):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
The total operation duration must not be lower than the idle time.
Total operation time should shouldn’t be lower than driving time.
The total stop count must not be lower than the count of stops where PTO is engaged.
The load carried by axle 1 must be smaller than or equal to the load on axle 3.
Payload must remain below or equal to the load carried by axle 2.
The payload must not exceed the load carried by axle 3.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";"
```python
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def condition_1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_hour >= 5:
        return True
    else:
        return False

# For trips of at least 20 km, the minimum fuel consumption rate per 100 km is 40 dm³/100 km.
def condition_2(distance_km: float, fuel_consumption_dm3_per_100km: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_100km >= 40:
        return True
    else:
        return False

# The total operation duration must not be lower than the idle time.
def condition_3(total_operation_time_seconds: float, idle_time_seconds: float) -> bool:
    if total_operation_time_seconds >= idle_time_seconds:
        return True
    else:
        return False

# Total operation time should shouldn’t be lower than driving time.
def condition_4(total_operation_time_seconds: float, driving_time_seconds: float) -> bool:
    if total_operation_time_seconds >= driving_time_seconds:
        return True
    else:
        return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def condition_5(total_stop_count: int, pto_engaged_stops_count: int) -> bool:
    if total_stop_count >= pto_engaged_stops_count:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 3.
def condition_6(axle_1_load_kg: float, axle_3_load_kg: float) -> bool:
    if axle_1_load_kg <= axle_3_load_kg:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 2.
def condition_7(payload_kg: float, axle_2_load_kg: float) -> bool:
    if payload_kg <= axle_2_load_kg:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def condition_8(payload_kg: float, axle_3_load_kg: float) -> bool:
    if payload_kg <= axle_3_load_kg:
        return True
    else:
        return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def condition_9(total_operation_time_seconds: float, pto_time_seconds: float, idle_time_seconds: float, driving_time_seconds: float) -> bool:
    if total_operation_time_seconds >= (pto_time_seconds + idle_time_seconds + driving_time_seconds):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
PTO operation time cannot be greater than the total operation time.
Idle time should be less than or equal to the total operation time.
The number of stops where PTO is engaged must not exceed the overall stop count.
Axle 1's load cannot exceed Axle 2's load.
The load on axle 1 must not surpass the load on axle 3.
Axle 2's load must always be equal to or greater than the payload.
The payload must not exceed the load carried by axle 3.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"
```python
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def condition_1(distance_km, fuel_consumption_dm3_per_hour):
    if distance_km >= 20 and fuel_consumption_dm3_per_hour < 5:
        return False
    return True

# PTO operation time cannot be greater than the total operation time.
def condition_2(pto_time, total_operation_time):
    if pto_time > total_operation_time:
        return False
    return True

# Idle time should be less than or equal to the total operation time.
def condition_3(idle_time, total_operation_time):
    if idle_time > total_operation_time:
        return False
    return True

# The number of stops where PTO is engaged must not exceed the overall stop count.
def condition_4(stops_with_pto, overall_stop_count):
    if stops_with_pto > overall_stop_count:
        return False
    return True

# Axle 1's load cannot exceed Axle 2's load.
def condition_5(axle_1_load, axle_2_load):
    if axle_1_load > axle_2_load:
        return False
    return True

# The load on axle 1 must not surpass the load on axle 3.
def condition_6(axle_1_load, axle_3_load):
    if axle_1_load > axle_3_load:
        return False
    return True

# Axle 2's load must always be equal to or greater than the payload.
def condition_7(axle_2_load, payload):
    if axle_2_load < payload:
        return False
    return True

# The payload must not exceed the load carried by axle 3.
def condition_8(payload, axle_3_load):
    if payload > axle_3_load:
        return False
    return True

# Total operation time should be at least the sum of PTO, idle, and driving times.
def condition_9(total_operation_time, pto_time, idle_time, driving_time):
    if total_operation_time < pto_time + idle_time + driving_time:
        return False
    return True
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
PTO operation time cannot be greater than the total operation time.
Idle time cannot be greater than the total operation time.
Driving time cannot be greater than the total operation time.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
Axle 1's load cannot exceed Axle 3's load.
The payload must always be smaller than or equal to the load on axle 2.
The payload must not exceed the load carried by axle 3.
";"
```python
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_hour >= 5:
        return True
    else:
        return False

# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r2(distance_km: float, fuel_consumption_dm3_per_100km: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_100km >= 40:
        return True
    else:
        return False

# PTO operation time cannot be greater than the total operation time.
def r3(pto_operation_time_hours: float, total_operation_time_hours: float) -> bool:
    if pto_operation_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# Idle time cannot be greater than the total operation time.
def r4(idle_time_hours: float, total_operation_time_hours: float) -> bool:
    if idle_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# Driving time cannot be greater than the total operation time.
def r5(driving_time_hours: float, total_operation_time_hours: float) -> bool:
    if driving_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def r6(axle1_load_kg: float, axle2_load_kg: float) -> bool:
    if axle1_load_kg <= axle2_load_kg:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 3's load.
def r7(axle1_load_kg: float, axle3_load_kg: float) -> bool:
    if axle1_load_kg <= axle3_load_kg:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 2.
def r8(payload_kg: float, axle2_load_kg: float) -> bool:
    if payload_kg <= axle2_load_kg:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 3.
def r9(payload_kg: float, axle3_load_kg: float) -> bool:
    if payload_kg <= axle3_load_kg:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
PTO operation time should be less than or equal to the total operation time.
Idle time cannot be greater than the total operation time.
Driving time should be less than or equal to the total operation time.
PTO-engaged stops cannot exceed the total number of stops.
Axle 2's load must always be equal to or greater than the payload.
Axle 3's load must always be equal to or greater than the payload.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"
```python
# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def fuel_consumption_1(distance_km: float, fuel_consumption_dm3_h: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_h >= 5:
        return True
    else:
        return False

# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def fuel_consumption_2(distance_km: float, fuel_consumption_dm3_100km: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_100km >= 40:
        return True
    else:
        return False

# PTO operation time should be less than or equal to the total operation time.
def pto_time_operation(total_operation_time: float, pto_time: float) -> bool:
    if pto_time <= total_operation_time:
        return True
    else:
        return False

# Idle time cannot be greater than the total operation time.
def idle_time_operation(total_operation_time: float, idle_time: float) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# Driving time should be less than or equal to the total operation time.
def driving_time_operation(total_operation_time: float, driving_time: float) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False

# PTO-engaged stops cannot exceed the total number of stops.
def pto_stops_total_stops(total_stops: int, pto_engaged_stops: int) -> bool:
    if pto_engaged_stops <= total_stops:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def axle_2_load(payload: float, axle_2_load: float) -> bool:
    if axle_2_load >= payload:
        return True
    else:
        return False

# Axle 3's load must always be equal to or greater than the payload.
def axle_3_load(payload: float, axle_3_load: float) -> bool:
    if axle_3_load >= payload:
        return True
    else:
        return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def combined_times_operation(total_operation_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    if pto_time + idle_time + driving_time <= total_operation_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
PTO operation time should be less than or equal to the total operation time.
Idle time cannot be greater than the total operation time.
The total stop count must not be lower than the count of stops where PTO is engaged.
The load on axle 1 must not surpass the load on axle 2.
The weight on axle 1 cannot surpass the weight on axle 3.
The payload must not exceed the load carried by axle 2.
Total operation time should be at least the sum of PTO, idle, and driving times.
";"
```python
# Vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def fuel_consumption(min_fuel_consumption: float, traveled_km: float) -> bool:
    if traveled_km >= 20 and min_fuel_consumption >= 5:
        return True
    else:
        return False

# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def fuel_efficiency(min_fuel_efficiency: float, covered_km: float) -> bool:
    if covered_km >= 20 and min_fuel_efficiency >= 40:
        return True
    else:
        return False

# PTO operation time should be less than or equal to the total operation time.
def pto_time(total_operation_time: float, pto_time: float) -> bool:
    if pto_time <= total_operation_time:
        return True
    else:
        return False

# Idle time cannot be greater than the total operation time.
def idle_time(total_operation_time: float, idle_time: float) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def stop_count(total_stops: int, pto_engaged_stops: int) -> bool:
    if total_stops >= pto_engaged_stops:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 2.
def load_on_axle(load_on_axle_1: float, load_on_axle_2: float) -> bool:
    if load_on_axle_1 <= load_on_axle_2:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def weight_on_axle(weight_on_axle_1: float, weight_on_axle_3: float) -> bool:
    if weight_on_axle_1 <= weight_on_axle_3:
        return True
    else:
        return False

# The payload must not exceed the load carried by axle 2.
def payload(load_carried_by_axle_2: float, payload: float) -> bool:
    if payload <= load_carried_by_axle_2:
        return True
    else:
        return False

# Total operation time should be at least the sum of PTO, idle, and driving times.
def total_operation_time(pto_time: float, idle_time: float, driving_time: float) -> bool:
    if pto_time + idle_time + driving_time <= total_operation_time:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
Total operation time shouldn’t be lower than PTO operation time.
Idle time cannot be greater than the total operation time.
Stops with PTO engaged cannot outnumber the total stops.
The load supported by axle 1 cannot exceed that of axle 2.
The payload cannot exceed the capacity of axle 2.
Payload must remain below or equal to the load carried by axle 3.
The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
";"
```python
# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def fuel_consumption_1(distance_km: float, fuel_consumption_dm3_h: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_h >= 5:
        return True
    else:
        return False

# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def fuel_consumption_2(distance_km: float, fuel_consumption_dm3_100km: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_100km >= 40:
        return True
    else:
        return False

# Total operation time shouldn’t be lower than PTO operation time.
def operation_time_1(operation_time_total: float, pto_operation_time: float) -> bool:
    if operation_time_total >= pto_operation_time:
        return True
    else:
        return False

# Idle time cannot be greater than the total operation time.
def idle_time_1(idle_time: float, operation_time_total: float) -> bool:
    if idle_time <= operation_time_total:
        return True
    else:
        return False

# Stops with PTO engaged cannot outnumber the total stops.
def stops_p_to_1(stops_with_pto: int, total_stops: int) -> bool:
    if stops_with_pto <= total_stops:
        return True
    else:
        return False

# The load supported by axle 1 cannot exceed that of axle 2.
def load_axle_1(load_axle_1: float, load_axle_2: float) -> bool:
    if load_axle_1 <= load_axle_2:
        return True
    else:
        return False

# The payload cannot exceed the capacity of axle 2.
def payload_capacity_axle_2(payload: float, capacity_axle_2: float) -> bool:
    if payload <= capacity_axle_2:
        return True
    else:
        return False

# Payload must remain below or equal to the load carried by axle 3.
def payload_load_axle_3(payload: float, load_axle_3: float) -> bool:
    if payload <= load_axle_3:
        return True
    else:
        return False

# The total operation duration must always be greater than or equal to the combined time for PTO, idle, and driving.
def total_operation_duration(operation_time_total: float, pto_operation_time: float, idle_time: float, driving_time: float) -> bool:
    if operation_time_total >= (pto_operation_time + idle_time + driving_time):
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: PTO operation time must be less than or equal to the total operation time.
Idle time must always be less than or equal to the total operation time.
The total operation durationmust not be lower than the driving time.
The total stop count must not be lower than the count of stops where PTO is engaged.
The weight on axle 1 cannot surpass the weight on axle 2.
The weight on axle 1 cannot surpass the weight on axle 3.
Payload must remain below or equal to the load carried by axle 2.
The payload must not exceed the load carried by axle 3.
The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
";"
```python
# PTO operation time must be less than or equal to the total operation time.
def pto_operation_time_rule(operation_time: float, pto_time: float) -> bool:
    return pto_time <= operation_time

# Idle time must always be less than or equal to the total operation time.
def idle_time_rule(operation_time: float, idle_time: float) -> bool:
    return idle_time <= operation_time

# The total operation duration must not be lower than the driving time.
def total_operation_duration_rule(operation_time: float, driving_time: float) -> bool:
    return operation_time >= driving_time

# The total stop count must not be lower than the count of stops where PTO is engaged.
def total_stop_count_rule(stop_count: int, pto_engaged_stops: int) -> bool:
    return stop_count >= pto_engaged_stops

# The weight on axle 1 cannot surpass the weight on axle 2.
def weight_on_axle_1_rule(axle_1_weight: float, axle_2_weight: float) -> bool:
    return axle_1_weight <= axle_2_weight

# The weight on axle 1 cannot surpass the weight on axle 3.
def weight_on_axle_1_rule_again(axle_1_weight: float, axle_3_weight: float) -> bool:
    return axle_1_weight <= axle_3_weight

# Payload must remain below or equal to the load carried by axle 2.
def payload_rule(payload: float, axle_2_load: float) -> bool:
    return payload <= axle_2_load

# The payload must not exceed the load carried by axle 3.
def payload_rule_again(payload: float, axle_3_load: float) -> bool:
    return payload <= axle_3_load

# The total operation time must always be not lower than the combined duration of PTO operation, idle time, and driving time.
def total_operation_time_rule_again(operation_time: float, pto_time: float, idle_time: float, driving_time: float) -> bool:
    return operation_time >= (pto_time + idle_time + driving_time)
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
PTO operation time cannot be greater than the total operation time.
Idle time must always be less than or equal to the total operation time.
The total stop count must not be lower than the count of stops where PTO is engaged.
Axle 1's load cannot exceed Axle 2's load.
The weight on axle 1 cannot surpass the weight on axle 3.
Axle 2's load must always be equal to or greater than the payload.
The payload must always be smaller than or equal to the load on axle 3.
";"
```python
# If the distance covered by the vehicle is at least 20 km, the minimum average fuel consumption rate per hour is 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_hour >= 5:
        return True
    else:
        return False

# When the vehicle travels 20 km or more, the average fuel consumption per distance is at least 40 dm³/100 km.
def r2(distance_km: float, fuel_consumption_dm3_per_100km: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_100km >= 40:
        return True
    else:
        return False

# PTO operation time cannot be greater than the total operation time.
def r3(pto_operation_time: float, total_operation_time: float) -> bool:
    if pto_operation_time <= total_operation_time:
        return True
    else:
        return False

# Idle time must always be less than or equal to the total operation time.
def r4(idle_time: float, total_operation_time: float) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r5(total_stop_count: int, pto_engaged_stops_count: int) -> bool:
    if total_stop_count >= pto_engaged_stops_count:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 2's load.
def r6(axle1_load: float, axle2_load: float) -> bool:
    if axle1_load <= axle2_load:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def r7(axle1_weight: float, axle3_weight: float) -> bool:
    if axle1_weight <= axle3_weight:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def r8(axle2_load: float, payload: float) -> bool:
    if axle2_load >= payload:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 3.
def r9(payload: float, axle3_load: float) -> bool:
    if payload <= axle3_load:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
PTO operation time cannot be greater than the total operation time.
Total operation time should shouldn’t be lower than driving time.
The total stop count must not be lower than the count of stops where PTO is engaged.
Axle 1's load cannot exceed Axle 2's load.
The load on axle 1 must not surpass the load on axle 3.
The payload must always be smaller than or equal to the load on axle 3.
The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
";"
```python
# If the vehicle covers a distance of no less than 20 km, its hourly fuel consumption cannot drop below 5 dm³/h.
def r1(distance_km: float, fuel_consumption_dm3_per_hour: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_hour >= 5:
        return True
    else:
        return False

# If the vehicle covers at least 20 km, the average fuel consumption per distance cannot be lower than 40 dm³/100 km.
def r2(distance_km: float, fuel_consumption_dm3_per_100km: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_per_100km >= 40:
        return True
    else:
        return False

# PTO operation time cannot be greater than the total operation time.
def r3(pto_time_hours: float, total_operation_time_hours: float) -> bool:
    if pto_time_hours <= total_operation_time_hours:
        return True
    else:
        return False

# Total operation time should shouldn’t be lower than driving time.
def r4(total_operation_time_hours: float, driving_time_hours: float) -> bool:
    if total_operation_time_hours >= driving_time_hours:
        return True
    else:
        return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def r5(total_stop_count: int, pto_engaged_stops_count: int) -> bool:
    if total_stop_count >= pto_engaged_stops_count:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 2's load.
def r6(axle1_load_kg: float, axle2_load_kg: float) -> bool:
    if axle1_load_kg <= axle2_load_kg:
        return True
    else:
        return False

# The load on axle 1 must not surpass the load on axle 3.
def r7(axle1_load_kg: float, axle3_load_kg: float) -> bool:
    if axle1_load_kg <= axle3_load_kg:
        return True
    else:
        return False

# The payload must always be smaller than or equal to the load on axle 3.
def r8(payload_kg: float, axle3_load_kg: float) -> bool:
    if payload_kg <= axle3_load_kg:
        return True
    else:
        return False

# The combined time for PTO operation, idle time, and driving time must not surpass the total operation time.
def r9(pto_time_hours: float, idle_time_hours: float, driving_time_hours: float, total_operation_time_hours: float) -> bool:
    if (pto_time_hours + idle_time_hours + driving_time_hours) <= total_operation_time_hours:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
PTO operation time should be less than or equal to the total operation time.
Idle time cannot be greater than the total operation time.
The total operation durationmust not be lower than the driving time.
The total stop count must not be lower than the count of stops where PTO is engaged.
The weight on axle 1 cannot surpass the weight on axle 2.
The weight on axle 1 cannot surpass the weight on axle 3.
Axle 3's load must always be equal to or greater than the payload.
";"
```python
# For a journey of at least 20 km, the vehicle's lowest average fuel consumption per hour is 5 dm³/h.
def fuel_consumption_1(distance_km: float, fuel_consumption_dm3_h: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_h >= 5:
        return True
    else:
        return False

# The minimum average fuel consumption per distance, given that the vehicle has traveled at least 20 km, is 40 dm³/100 km.
def fuel_consumption_2(distance_km: float, fuel_consumption_dm3_100km: float) -> bool:
    if distance_km >= 20 and fuel_consumption_dm3_100km >= 40:
        return True
    else:
        return False

# PTO operation time should be less than or equal to the total operation time.
def pto_time(total_time: float, pto_time: float) -> bool:
    if pto_time <= total_time:
        return True
    else:
        return False

# Idle time cannot be greater than the total operation time.
def idle_time(total_time: float, idle_time: float) -> bool:
    if idle_time <= total_time:
        return True
    else:
        return False

# The total operation duration must not be lower than the driving time.
def total_operation_driving_time(driving_time: float, total_operation_time: float) -> bool:
    if total_operation_time >= driving_time:
        return True
    else:
        return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def total_stops_pto_engaged(stops_count: int, pto_engaged_stops_count: int) -> bool:
    if stops_count >= pto_engaged_stops_count:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 2.
def weight_axle_1_weight_axle_2(weight_axle_1: float, weight_axle_2: float) -> bool:
    if weight_axle_1 <= weight_axle_2:
        return True
    else:
        return False

# The weight on axle 1 cannot surpass the weight on axle 3.
def weight_axle_1_weight_axle_3(weight_axle_1: float, weight_axle_3: float) -> bool:
    if weight_axle_1 <= weight_axle_3:
        return True
    else:
        return False

# Axle 3's load must always be equal to or greater than the payload.
def axle_3_load_payload(axle_3_load: float, payload: float) -> bool:
    if axle_3_load >= payload:
        return True
    else:
        return False
```"
"System Message:
        You are a logician with a background in mathematics that translates natural language
        reasoning text to Python3 code so that these natural language reasoning problems can be solved.
        During the translation, please pay close attention to defining variables and rules.
        Do not add any comments from you.
        Be guided by the following example:
        Example input text:
        Textual context: If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
Parameter E's value cannot be less than parameter F's value.
Parameter G's value cannot be less than parameter H's value.
Parameter I's value cannot be less than parameter J's value.
Parameter K's value cannot be less than parameter L's value.
Parameter M's value cannot be greater than parameter N's value.
Parameter O's value cannot be greater than parameter P's value.
Parameter R's value cannot be greater than parameter S's value.

        Example Python3 code:
        # If the parameter A's value is at least 20, the lowest possible value of parameter B is 5.
def r1(a: float, b: float) -> bool:
    if b / a >= 0.25:
        return True
    else:
        return False

# If the parameter C's value is at least 20, the lowest possible value of parameter D is 40.
def r2(c: float, d: float) -> bool:
    if d / c >= 2:
        return True
    else:
        return False

# Parameter E's value cannot be less than parameter F's value.
def r3(e: float, f: float) -> bool:
    if e >= f:
        return True
    else:
        return False

# Parameter G's value cannot be less than parameter H's value.
def r4(g: float, h: float) -> bool:
    if g >= h:
        return True
    else:
        return False

# Parameter I's value cannot be less than parameter J's value.
def r5(i: float, j: float) -> bool:
    if i >= j:
        return True
    else:
        return False

# Parameter K's value cannot be less than parameter L's value.
def r6(k: float, l: float) -> bool:
    if k >= l:
        return True
    else:
        return False

# Parameter M's value cannot be greater than parameter N's value.
def r7(m: float, n: float) -> bool:
    if m <= n:
        return True
    else:
        return False

# Parameter O's value cannot be greater than parameter P's value.
def r8(o: float, p: float) -> bool:
    if o <= p:
        return True
    else:
        return False

# Parameter R's value cannot be greater than parameter S's value.
def r9(r: float, s: float) -> bool:
    if r <= s:
        return True
    else:
        return False


        
Input text:
Textual context: The vehicle’s average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
The total operation duration must not be lower than the PTO operation time.
Idle time must always be less than or equal to the total operation time.
Driving time cannot be greater than the total operation time.
The total stop count must not be lower than the count of stops where PTO is engaged.
The load carried by axle 1 must be smaller than or equal to the load on axle 2.
Axle 1's load cannot exceed Axle 3's load.
Axle 2's load must always be equal to or greater than the payload.
Axle 3's load must always be equal to or greater than the payload.
";"
```python
# Vehicle's average hourly fuel consumption cannot be less than 5 dm³/h, provided that it traveled at least 20 km.
def fuel_consumption(min_fuel_consumption: float, distance_km: float) -> bool:
    if distance_km >= 20 and min_fuel_consumption >= 5:
        return True
    else:
        return False

# The total operation duration must not be lower than the PTO operation time.
def operation_duration(total_operation_time: float, pto_operation_time: float) -> bool:
    if total_operation_time >= pto_operation_time:
        return True
    else:
        return False

# Idle time must always be less than or equal to the total operation time.
def idle_time(idle_time: float, total_operation_time: float) -> bool:
    if idle_time <= total_operation_time:
        return True
    else:
        return False

# Driving time cannot be greater than the total operation time.
def driving_time(driving_time: float, total_operation_time: float) -> bool:
    if driving_time <= total_operation_time:
        return True
    else:
        return False

# The total stop count must not be lower than the count of stops where PTO is engaged.
def stop_count(total_stop_count: int, pto_engaged_stops: int) -> bool:
    if total_stop_count >= pto_engaged_stops:
        return True
    else:
        return False

# The load carried by axle 1 must be smaller than or equal to the load on axle 2.
def axle_load(axle_1_load: float, axle_2_load: float) -> bool:
    if axle_1_load <= axle_2_load:
        return True
    else:
        return False

# Axle 1's load cannot exceed Axle 3's load.
def axle_comparison(axle_1_load: float, axle_3_load: float) -> bool:
    if axle_1_load <= axle_3_load:
        return True
    else:
        return False

# Axle 2's load must always be equal to or greater than the payload.
def payload_comparison(axle_2_load: float, payload: float) -> bool:
    if axle_2_load >= payload:
        return True
    else:
        return False

# Axle 3's load must always be equal to or greater than the payload.
def payload_comparison_axle_3(axle_3_load: float, payload: float) -> bool:
    if axle_3_load >= payload:
        return True
    else:
        return False
```"
